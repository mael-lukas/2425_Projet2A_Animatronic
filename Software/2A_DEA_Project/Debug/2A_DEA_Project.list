
2A_DEA_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b318  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000724  0800b4f8  0800b4f8  0000c4f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc1c  0800bc1c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bc1c  0800bc1c  0000cc1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc24  0800bc24  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc28  0800bc28  0000cc28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800bc2c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200001d4  0800be00  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  0800be00  0000d72c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b7c  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034cd  00000000  00000000  00025d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  00029250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010a0  00000000  00000000  0002a7a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273db  00000000  00000000  0002b840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a598  00000000  00000000  00052c1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102dcd  00000000  00000000  0006d1b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016ff80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa8  00000000  00000000  0016ffc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00176f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b4e0 	.word	0x0800b4e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800b4e0 	.word	0x0800b4e0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9be 	b.w	800106c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	468e      	mov	lr, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	4688      	mov	r8, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4617      	mov	r7, r2
 8000d88:	d962      	bls.n	8000e50 <__udivmoddi4+0xdc>
 8000d8a:	fab2 f682 	clz	r6, r2
 8000d8e:	b14e      	cbz	r6, 8000da4 <__udivmoddi4+0x30>
 8000d90:	f1c6 0320 	rsb	r3, r6, #32
 8000d94:	fa01 f806 	lsl.w	r8, r1, r6
 8000d98:	fa20 f303 	lsr.w	r3, r0, r3
 8000d9c:	40b7      	lsls	r7, r6
 8000d9e:	ea43 0808 	orr.w	r8, r3, r8
 8000da2:	40b4      	lsls	r4, r6
 8000da4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000da8:	fa1f fc87 	uxth.w	ip, r7
 8000dac:	fbb8 f1fe 	udiv	r1, r8, lr
 8000db0:	0c23      	lsrs	r3, r4, #16
 8000db2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000db6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dba:	fb01 f20c 	mul.w	r2, r1, ip
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc2:	18fb      	adds	r3, r7, r3
 8000dc4:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000dc8:	f080 80ea 	bcs.w	8000fa0 <__udivmoddi4+0x22c>
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f240 80e7 	bls.w	8000fa0 <__udivmoddi4+0x22c>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	443b      	add	r3, r7
 8000dd6:	1a9a      	subs	r2, r3, r2
 8000dd8:	b2a3      	uxth	r3, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000de6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dea:	459c      	cmp	ip, r3
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x8e>
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000df4:	f080 80d6 	bcs.w	8000fa4 <__udivmoddi4+0x230>
 8000df8:	459c      	cmp	ip, r3
 8000dfa:	f240 80d3 	bls.w	8000fa4 <__udivmoddi4+0x230>
 8000dfe:	443b      	add	r3, r7
 8000e00:	3802      	subs	r0, #2
 8000e02:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e06:	eba3 030c 	sub.w	r3, r3, ip
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11d      	cbz	r5, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40f3      	lsrs	r3, r6
 8000e10:	2200      	movs	r2, #0
 8000e12:	e9c5 3200 	strd	r3, r2, [r5]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d905      	bls.n	8000e2a <__udivmoddi4+0xb6>
 8000e1e:	b10d      	cbz	r5, 8000e24 <__udivmoddi4+0xb0>
 8000e20:	e9c5 0100 	strd	r0, r1, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	4608      	mov	r0, r1
 8000e28:	e7f5      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e2a:	fab3 f183 	clz	r1, r3
 8000e2e:	2900      	cmp	r1, #0
 8000e30:	d146      	bne.n	8000ec0 <__udivmoddi4+0x14c>
 8000e32:	4573      	cmp	r3, lr
 8000e34:	d302      	bcc.n	8000e3c <__udivmoddi4+0xc8>
 8000e36:	4282      	cmp	r2, r0
 8000e38:	f200 8105 	bhi.w	8001046 <__udivmoddi4+0x2d2>
 8000e3c:	1a84      	subs	r4, r0, r2
 8000e3e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e42:	2001      	movs	r0, #1
 8000e44:	4690      	mov	r8, r2
 8000e46:	2d00      	cmp	r5, #0
 8000e48:	d0e5      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e4a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e4e:	e7e2      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	f000 8090 	beq.w	8000f76 <__udivmoddi4+0x202>
 8000e56:	fab2 f682 	clz	r6, r2
 8000e5a:	2e00      	cmp	r6, #0
 8000e5c:	f040 80a4 	bne.w	8000fa8 <__udivmoddi4+0x234>
 8000e60:	1a8a      	subs	r2, r1, r2
 8000e62:	0c03      	lsrs	r3, r0, #16
 8000e64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e68:	b280      	uxth	r0, r0
 8000e6a:	b2bc      	uxth	r4, r7
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e72:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e7a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d907      	bls.n	8000e92 <__udivmoddi4+0x11e>
 8000e82:	18fb      	adds	r3, r7, r3
 8000e84:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000e88:	d202      	bcs.n	8000e90 <__udivmoddi4+0x11c>
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	f200 80e0 	bhi.w	8001050 <__udivmoddi4+0x2dc>
 8000e90:	46c4      	mov	ip, r8
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e98:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e9c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ea0:	fb02 f404 	mul.w	r4, r2, r4
 8000ea4:	429c      	cmp	r4, r3
 8000ea6:	d907      	bls.n	8000eb8 <__udivmoddi4+0x144>
 8000ea8:	18fb      	adds	r3, r7, r3
 8000eaa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000eae:	d202      	bcs.n	8000eb6 <__udivmoddi4+0x142>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f200 80ca 	bhi.w	800104a <__udivmoddi4+0x2d6>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	1b1b      	subs	r3, r3, r4
 8000eba:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ebe:	e7a5      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ec0:	f1c1 0620 	rsb	r6, r1, #32
 8000ec4:	408b      	lsls	r3, r1
 8000ec6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eca:	431f      	orrs	r7, r3
 8000ecc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ed0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ed4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ed8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000edc:	4323      	orrs	r3, r4
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	fa1f fc87 	uxth.w	ip, r7
 8000ee6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eea:	0c1c      	lsrs	r4, r3, #16
 8000eec:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ef0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ef4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	fa02 f201 	lsl.w	r2, r2, r1
 8000efe:	d909      	bls.n	8000f14 <__udivmoddi4+0x1a0>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f06:	f080 809c 	bcs.w	8001042 <__udivmoddi4+0x2ce>
 8000f0a:	45a6      	cmp	lr, r4
 8000f0c:	f240 8099 	bls.w	8001042 <__udivmoddi4+0x2ce>
 8000f10:	3802      	subs	r0, #2
 8000f12:	443c      	add	r4, r7
 8000f14:	eba4 040e 	sub.w	r4, r4, lr
 8000f18:	fa1f fe83 	uxth.w	lr, r3
 8000f1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f20:	fb09 4413 	mls	r4, r9, r3, r4
 8000f24:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f28:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f2c:	45a4      	cmp	ip, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x1ce>
 8000f30:	193c      	adds	r4, r7, r4
 8000f32:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f36:	f080 8082 	bcs.w	800103e <__udivmoddi4+0x2ca>
 8000f3a:	45a4      	cmp	ip, r4
 8000f3c:	d97f      	bls.n	800103e <__udivmoddi4+0x2ca>
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	443c      	add	r4, r7
 8000f42:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f46:	eba4 040c 	sub.w	r4, r4, ip
 8000f4a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f4e:	4564      	cmp	r4, ip
 8000f50:	4673      	mov	r3, lr
 8000f52:	46e1      	mov	r9, ip
 8000f54:	d362      	bcc.n	800101c <__udivmoddi4+0x2a8>
 8000f56:	d05f      	beq.n	8001018 <__udivmoddi4+0x2a4>
 8000f58:	b15d      	cbz	r5, 8000f72 <__udivmoddi4+0x1fe>
 8000f5a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f5e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f62:	fa04 f606 	lsl.w	r6, r4, r6
 8000f66:	fa22 f301 	lsr.w	r3, r2, r1
 8000f6a:	431e      	orrs	r6, r3
 8000f6c:	40cc      	lsrs	r4, r1
 8000f6e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f72:	2100      	movs	r1, #0
 8000f74:	e74f      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000f76:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f7a:	0c01      	lsrs	r1, r0, #16
 8000f7c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f80:	b280      	uxth	r0, r0
 8000f82:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f86:	463b      	mov	r3, r7
 8000f88:	4638      	mov	r0, r7
 8000f8a:	463c      	mov	r4, r7
 8000f8c:	46b8      	mov	r8, r7
 8000f8e:	46be      	mov	lr, r7
 8000f90:	2620      	movs	r6, #32
 8000f92:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f96:	eba2 0208 	sub.w	r2, r2, r8
 8000f9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f9e:	e766      	b.n	8000e6e <__udivmoddi4+0xfa>
 8000fa0:	4601      	mov	r1, r0
 8000fa2:	e718      	b.n	8000dd6 <__udivmoddi4+0x62>
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	e72c      	b.n	8000e02 <__udivmoddi4+0x8e>
 8000fa8:	f1c6 0220 	rsb	r2, r6, #32
 8000fac:	fa2e f302 	lsr.w	r3, lr, r2
 8000fb0:	40b7      	lsls	r7, r6
 8000fb2:	40b1      	lsls	r1, r6
 8000fb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fc2:	b2bc      	uxth	r4, r7
 8000fc4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fc8:	0c11      	lsrs	r1, r2, #16
 8000fca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fce:	fb08 f904 	mul.w	r9, r8, r4
 8000fd2:	40b0      	lsls	r0, r6
 8000fd4:	4589      	cmp	r9, r1
 8000fd6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fda:	b280      	uxth	r0, r0
 8000fdc:	d93e      	bls.n	800105c <__udivmoddi4+0x2e8>
 8000fde:	1879      	adds	r1, r7, r1
 8000fe0:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000fe4:	d201      	bcs.n	8000fea <__udivmoddi4+0x276>
 8000fe6:	4589      	cmp	r9, r1
 8000fe8:	d81f      	bhi.n	800102a <__udivmoddi4+0x2b6>
 8000fea:	eba1 0109 	sub.w	r1, r1, r9
 8000fee:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff2:	fb09 f804 	mul.w	r8, r9, r4
 8000ff6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ffa:	b292      	uxth	r2, r2
 8000ffc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001000:	4542      	cmp	r2, r8
 8001002:	d229      	bcs.n	8001058 <__udivmoddi4+0x2e4>
 8001004:	18ba      	adds	r2, r7, r2
 8001006:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800100a:	d2c4      	bcs.n	8000f96 <__udivmoddi4+0x222>
 800100c:	4542      	cmp	r2, r8
 800100e:	d2c2      	bcs.n	8000f96 <__udivmoddi4+0x222>
 8001010:	f1a9 0102 	sub.w	r1, r9, #2
 8001014:	443a      	add	r2, r7
 8001016:	e7be      	b.n	8000f96 <__udivmoddi4+0x222>
 8001018:	45f0      	cmp	r8, lr
 800101a:	d29d      	bcs.n	8000f58 <__udivmoddi4+0x1e4>
 800101c:	ebbe 0302 	subs.w	r3, lr, r2
 8001020:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001024:	3801      	subs	r0, #1
 8001026:	46e1      	mov	r9, ip
 8001028:	e796      	b.n	8000f58 <__udivmoddi4+0x1e4>
 800102a:	eba7 0909 	sub.w	r9, r7, r9
 800102e:	4449      	add	r1, r9
 8001030:	f1a8 0c02 	sub.w	ip, r8, #2
 8001034:	fbb1 f9fe 	udiv	r9, r1, lr
 8001038:	fb09 f804 	mul.w	r8, r9, r4
 800103c:	e7db      	b.n	8000ff6 <__udivmoddi4+0x282>
 800103e:	4673      	mov	r3, lr
 8001040:	e77f      	b.n	8000f42 <__udivmoddi4+0x1ce>
 8001042:	4650      	mov	r0, sl
 8001044:	e766      	b.n	8000f14 <__udivmoddi4+0x1a0>
 8001046:	4608      	mov	r0, r1
 8001048:	e6fd      	b.n	8000e46 <__udivmoddi4+0xd2>
 800104a:	443b      	add	r3, r7
 800104c:	3a02      	subs	r2, #2
 800104e:	e733      	b.n	8000eb8 <__udivmoddi4+0x144>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	443b      	add	r3, r7
 8001056:	e71c      	b.n	8000e92 <__udivmoddi4+0x11e>
 8001058:	4649      	mov	r1, r9
 800105a:	e79c      	b.n	8000f96 <__udivmoddi4+0x222>
 800105c:	eba1 0109 	sub.w	r1, r1, r9
 8001060:	46c4      	mov	ip, r8
 8001062:	fbb1 f9fe 	udiv	r9, r1, lr
 8001066:	fb09 f804 	mul.w	r8, r9, r4
 800106a:	e7c4      	b.n	8000ff6 <__udivmoddi4+0x282>

0800106c <__aeabi_idiv0>:
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <MX_DMA_Init+0x50>)
 8001078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800107a:	4a11      	ldr	r2, [pc, #68]	@ (80010c0 <MX_DMA_Init+0x50>)
 800107c:	f043 0304 	orr.w	r3, r3, #4
 8001080:	6493      	str	r3, [r2, #72]	@ 0x48
 8001082:	4b0f      	ldr	r3, [pc, #60]	@ (80010c0 <MX_DMA_Init+0x50>)
 8001084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001086:	f003 0304 	and.w	r3, r3, #4
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <MX_DMA_Init+0x50>)
 8001090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001092:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <MX_DMA_Init+0x50>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6493      	str	r3, [r2, #72]	@ 0x48
 800109a:	4b09      	ldr	r3, [pc, #36]	@ (80010c0 <MX_DMA_Init+0x50>)
 800109c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	2100      	movs	r1, #0
 80010aa:	200b      	movs	r0, #11
 80010ac:	f001 fb57 	bl	800275e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80010b0:	200b      	movs	r0, #11
 80010b2:	f001 fb6e 	bl	8002792 <HAL_NVIC_EnableIRQ>

}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40021000 	.word	0x40021000

080010c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b088      	sub	sp, #32
 80010c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ca:	f107 030c 	add.w	r3, r7, #12
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	4b29      	ldr	r3, [pc, #164]	@ (8001180 <MX_GPIO_Init+0xbc>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	4a28      	ldr	r2, [pc, #160]	@ (8001180 <MX_GPIO_Init+0xbc>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010e6:	4b26      	ldr	r3, [pc, #152]	@ (8001180 <MX_GPIO_Init+0xbc>)
 80010e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <MX_GPIO_Init+0xbc>)
 80010f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f6:	4a22      	ldr	r2, [pc, #136]	@ (8001180 <MX_GPIO_Init+0xbc>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010fe:	4b20      	ldr	r3, [pc, #128]	@ (8001180 <MX_GPIO_Init+0xbc>)
 8001100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_GPIO_Init+0xbc>)
 800110c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110e:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <MX_GPIO_Init+0xbc>)
 8001110:	f043 0302 	orr.w	r3, r3, #2
 8001114:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_GPIO_Init+0xbc>)
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111a:	f003 0302 	and.w	r3, r3, #2
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	2170      	movs	r1, #112	@ 0x70
 8001126:	4817      	ldr	r0, [pc, #92]	@ (8001184 <MX_GPIO_Init+0xc0>)
 8001128:	f001 ff4a 	bl	8002fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 800112c:	2302      	movs	r3, #2
 800112e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	4619      	mov	r1, r3
 800113e:	4811      	ldr	r0, [pc, #68]	@ (8001184 <MX_GPIO_Init+0xc0>)
 8001140:	f001 fdbc 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_GPIO_Pin */
  GPIO_InitStruct.Pin = TOF_GPIO_Pin;
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001148:	2300      	movs	r3, #0
 800114a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(TOF_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	4619      	mov	r1, r3
 8001156:	480c      	ldr	r0, [pc, #48]	@ (8001188 <MX_GPIO_Init+0xc4>)
 8001158:	f001 fdb0 	bl	8002cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800115c:	2370      	movs	r3, #112	@ 0x70
 800115e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001160:	2301      	movs	r3, #1
 8001162:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4804      	ldr	r0, [pc, #16]	@ (8001184 <MX_GPIO_Init+0xc0>)
 8001174:	f001 fda2 	bl	8002cbc <HAL_GPIO_Init>

}
 8001178:	bf00      	nop
 800117a:	3720      	adds	r7, #32
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800

0800118c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <MX_I2C3_Init+0x74>)
 8001192:	4a1c      	ldr	r2, [pc, #112]	@ (8001204 <MX_I2C3_Init+0x78>)
 8001194:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8001196:	4b1a      	ldr	r3, [pc, #104]	@ (8001200 <MX_I2C3_Init+0x74>)
 8001198:	4a1b      	ldr	r2, [pc, #108]	@ (8001208 <MX_I2C3_Init+0x7c>)
 800119a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <MX_I2C3_Init+0x74>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a2:	4b17      	ldr	r3, [pc, #92]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011ae:	4b14      	ldr	r3, [pc, #80]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b4:	4b12      	ldr	r3, [pc, #72]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ba:	4b11      	ldr	r3, [pc, #68]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011c6:	480e      	ldr	r0, [pc, #56]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011c8:	f001 ff12 	bl	8002ff0 <HAL_I2C_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80011d2:	f000 f95b 	bl	800148c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4809      	ldr	r0, [pc, #36]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011da:	f001 ffa4 	bl	8003126 <HAL_I2CEx_ConfigAnalogFilter>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80011e4:	f000 f952 	bl	800148c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80011e8:	2100      	movs	r1, #0
 80011ea:	4805      	ldr	r0, [pc, #20]	@ (8001200 <MX_I2C3_Init+0x74>)
 80011ec:	f001 ffe6 	bl	80031bc <HAL_I2CEx_ConfigDigitalFilter>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80011f6:	f000 f949 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200001f0 	.word	0x200001f0
 8001204:	40007800 	.word	0x40007800
 8001208:	00503d58 	.word	0x00503d58

0800120c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b09e      	sub	sp, #120	@ 0x78
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001224:	f107 0310 	add.w	r3, r7, #16
 8001228:	2254      	movs	r2, #84	@ 0x54
 800122a:	2100      	movs	r1, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f007 fc17 	bl	8008a60 <memset>
  if(i2cHandle->Instance==I2C3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a1f      	ldr	r2, [pc, #124]	@ (80012b4 <HAL_I2C_MspInit+0xa8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d137      	bne.n	80012ac <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800123c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001240:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001242:	2300      	movs	r3, #0
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001246:	f107 0310 	add.w	r3, r7, #16
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fde4 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001256:	f000 f919 	bl	800148c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	@ (80012b8 <HAL_I2C_MspInit+0xac>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a16      	ldr	r2, [pc, #88]	@ (80012b8 <HAL_I2C_MspInit+0xac>)
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b14      	ldr	r3, [pc, #80]	@ (80012b8 <HAL_I2C_MspInit+0xac>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0304 	and.w	r3, r3, #4
 800126e:	60fb      	str	r3, [r7, #12]
 8001270:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001272:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001276:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001278:	2312      	movs	r3, #18
 800127a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127c:	2300      	movs	r3, #0
 800127e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001280:	2300      	movs	r3, #0
 8001282:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001284:	2308      	movs	r3, #8
 8001286:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001288:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800128c:	4619      	mov	r1, r3
 800128e:	480b      	ldr	r0, [pc, #44]	@ (80012bc <HAL_I2C_MspInit+0xb0>)
 8001290:	f001 fd14 	bl	8002cbc <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001294:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <HAL_I2C_MspInit+0xac>)
 8001296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001298:	4a07      	ldr	r2, [pc, #28]	@ (80012b8 <HAL_I2C_MspInit+0xac>)
 800129a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800129e:	6593      	str	r3, [r2, #88]	@ 0x58
 80012a0:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HAL_I2C_MspInit+0xac>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80012ac:	bf00      	nop
 80012ae:	3778      	adds	r7, #120	@ 0x78
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40007800 	.word	0x40007800
 80012b8:	40021000 	.word	0x40021000
 80012bc:	48000800 	.word	0x48000800

080012c0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012c8:	1d39      	adds	r1, r7, #4
 80012ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ce:	2201      	movs	r2, #1
 80012d0:	4803      	ldr	r0, [pc, #12]	@ (80012e0 <__io_putchar+0x20>)
 80012d2:	f004 f91d 	bl	8005510 <HAL_UART_Transmit>
    return ch;
 80012d6:	687b      	ldr	r3, [r7, #4]
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200004b4 	.word	0x200004b4

080012e4 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <__io_getchar+0x38>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	2208      	movs	r2, #8
 80012f4:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80012f6:	1df9      	adds	r1, r7, #7
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012fc:	2201      	movs	r2, #1
 80012fe:	4807      	ldr	r0, [pc, #28]	@ (800131c <__io_getchar+0x38>)
 8001300:	f004 f994 	bl	800562c <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001304:	1df9      	adds	r1, r7, #7
 8001306:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800130a:	2201      	movs	r2, #1
 800130c:	4803      	ldr	r0, [pc, #12]	@ (800131c <__io_getchar+0x38>)
 800130e:	f004 f8ff 	bl	8005510 <HAL_UART_Transmit>
	return ch;
 8001312:	79fb      	ldrb	r3, [r7, #7]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200004b4 	.word	0x200004b4

08001320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	f5ad 7d04 	sub.w	sp, sp, #528	@ 0x210
 8001326:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f001 f8ab 	bl	8002482 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f86e 	bl	800140c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001330:	f7ff fec8 	bl	80010c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001334:	f7ff fe9c 	bl	8001070 <MX_DMA_Init>
  MX_TIM1_Init();
 8001338:	f000 f9f2 	bl	8001720 <MX_TIM1_Init>
  MX_TIM2_Init();
 800133c:	f000 fac4 	bl	80018c8 <MX_TIM2_Init>
  MX_UART4_Init();
 8001340:	f000 fcca 	bl	8001cd8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001344:	f000 fd18 	bl	8001d78 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001348:	f000 fd62 	bl	8001e10 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800134c:	f000 fdac 	bl	8001ea8 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8001350:	f7ff ff1c 	bl	800118c <MX_I2C3_Init>
  MX_TIM4_Init();
 8001354:	f000 fb44 	bl	80019e0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  /////////////////////////////////////////////// Tests XL430 ////////////////////////////////////////////////////////////////

	printf("\r\n===== ANIMATRONIC EAGLE FUCK YEAH =====\r\n");
 8001358:	4826      	ldr	r0, [pc, #152]	@ (80013f4 <main+0xd4>)
 800135a:	f007 fa49 	bl	80087f0 <puts>
//	__XL430_HandleTypeDef XL430_3;
//	__XL430_HandleTypeDef XL430_4;
//	__XL430_HandleTypeDef XL430_5;
//	__XL430_HandleTypeDef XL430_6;
//
	XL430_Init(&XL430_1, &huart1, 1, 0);
 800135e:	4638      	mov	r0, r7
 8001360:	2300      	movs	r3, #0
 8001362:	2201      	movs	r2, #1
 8001364:	4924      	ldr	r1, [pc, #144]	@ (80013f8 <main+0xd8>)
 8001366:	f000 ff1b 	bl	80021a0 <XL430_Init>
	XL430_Init_debug(&XL430_1, &huart1, &huart2, 1, 0);
 800136a:	4638      	mov	r0, r7
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2301      	movs	r3, #1
 8001372:	4a22      	ldr	r2, [pc, #136]	@ (80013fc <main+0xdc>)
 8001374:	4920      	ldr	r1, [pc, #128]	@ (80013f8 <main+0xd8>)
 8001376:	f000 ff41 	bl	80021fc <XL430_Init_debug>
	HAL_Delay(300);
 800137a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800137e:	f001 f8f1 	bl	8002564 <HAL_Delay>
	XL430_Write_Data2(&XL430_1,XL430_REG_TORQUE_ENABLE,1);
 8001382:	463b      	mov	r3, r7
 8001384:	2201      	movs	r2, #1
 8001386:	2140      	movs	r1, #64	@ 0x40
 8001388:	4618      	mov	r0, r3
 800138a:	f000 ff9e 	bl	80022ca <XL430_Write_Data2>
	(&XL430_1)->torque_enable = 1;
 800138e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001392:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8001396:	2201      	movs	r2, #1
 8001398:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
//	XL430_Write_Data2(&XL430_4,XL430_REG_GOAL_VELOCITY,-40);
//	HAL_Delay(1000);
//	XL430_Write_Data2(&XL430_4,XL430_REG_GOAL_VELOCITY,0);
//

	XL430_Write_Data2(&XL430_1,XL430_REG_GOAL_VELOCITY,-40);
 800139c:	463b      	mov	r3, r7
 800139e:	f06f 0227 	mvn.w	r2, #39	@ 0x27
 80013a2:	2168      	movs	r1, #104	@ 0x68
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 ff90 	bl	80022ca <XL430_Write_Data2>
	printf("jaaj\n\r");
 80013aa:	4815      	ldr	r0, [pc, #84]	@ (8001400 <main+0xe0>)
 80013ac:	f007 f9b8 	bl	8008720 <iprintf>
	HAL_Delay(2000);
 80013b0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013b4:	f001 f8d6 	bl	8002564 <HAL_Delay>
	XL430_Write_Data2(&XL430_1,XL430_REG_GOAL_VELOCITY,40);
 80013b8:	463b      	mov	r3, r7
 80013ba:	2228      	movs	r2, #40	@ 0x28
 80013bc:	2168      	movs	r1, #104	@ 0x68
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 ff83 	bl	80022ca <XL430_Write_Data2>
	printf("jaaj\n\r");
 80013c4:	480e      	ldr	r0, [pc, #56]	@ (8001400 <main+0xe0>)
 80013c6:	f007 f9ab 	bl	8008720 <iprintf>
	HAL_Delay(2000);
 80013ca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013ce:	f001 f8c9 	bl	8002564 <HAL_Delay>
	XL430_Write_Data2(&XL430_1,XL430_REG_GOAL_VELOCITY,0);
 80013d2:	463b      	mov	r3, r7
 80013d4:	2200      	movs	r2, #0
 80013d6:	2168      	movs	r1, #104	@ 0x68
 80013d8:	4618      	mov	r0, r3
 80013da:	f000 ff76 	bl	80022ca <XL430_Write_Data2>
//  applyLabelValue(lv_test, dictOfVars);
//  printf("volume = %f\r\n", volume);
//
//  HAL_UART_Receive_IT(&huart3,&rx_char,1);

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,1);
 80013de:	2201      	movs	r2, #1
 80013e0:	2110      	movs	r1, #16
 80013e2:	4808      	ldr	r0, [pc, #32]	@ (8001404 <main+0xe4>)
 80013e4:	f001 fdec 	bl	8002fc0 <HAL_GPIO_WritePin>
  printf("Led on \n\r");
 80013e8:	4807      	ldr	r0, [pc, #28]	@ (8001408 <main+0xe8>)
 80013ea:	f007 f999 	bl	8008720 <iprintf>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80013ee:	bf00      	nop
 80013f0:	e7fd      	b.n	80013ee <main+0xce>
 80013f2:	bf00      	nop
 80013f4:	0800b4f8 	.word	0x0800b4f8
 80013f8:	20000420 	.word	0x20000420
 80013fc:	200004b4 	.word	0x200004b4
 8001400:	0800b524 	.word	0x0800b524
 8001404:	48000400 	.word	0x48000400
 8001408:	0800b52c 	.word	0x0800b52c

0800140c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b094      	sub	sp, #80	@ 0x50
 8001410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	2238      	movs	r2, #56	@ 0x38
 8001418:	2100      	movs	r1, #0
 800141a:	4618      	mov	r0, r3
 800141c:	f007 fb20 	bl	8008a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001420:	1d3b      	adds	r3, r7, #4
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800142e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001432:	f001 ff0f 	bl	8003254 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800143a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001440:	2340      	movs	r3, #64	@ 0x40
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001444:	2300      	movs	r3, #0
 8001446:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001448:	f107 0318 	add.w	r3, r7, #24
 800144c:	4618      	mov	r0, r3
 800144e:	f001 ffb5 	bl	80033bc <HAL_RCC_OscConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001458:	f000 f818 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800145c:	230f      	movs	r3, #15
 800145e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001460:	2301      	movs	r3, #1
 8001462:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2100      	movs	r1, #0
 8001474:	4618      	mov	r0, r3
 8001476:	f002 fab3 	bl	80039e0 <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001480:	f000 f804 	bl	800148c <Error_Handler>
  }
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	@ 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <Error_Handler+0x8>

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b0f      	ldr	r3, [pc, #60]	@ (80014dc <HAL_MspInit+0x44>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014a2:	4a0e      	ldr	r2, [pc, #56]	@ (80014dc <HAL_MspInit+0x44>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014aa:	4b0c      	ldr	r3, [pc, #48]	@ (80014dc <HAL_MspInit+0x44>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	4b09      	ldr	r3, [pc, #36]	@ (80014dc <HAL_MspInit+0x44>)
 80014b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ba:	4a08      	ldr	r2, [pc, #32]	@ (80014dc <HAL_MspInit+0x44>)
 80014bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c0:	6593      	str	r3, [r2, #88]	@ 0x58
 80014c2:	4b06      	ldr	r3, [pc, #24]	@ (80014dc <HAL_MspInit+0x44>)
 80014c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ca:	603b      	str	r3, [r7, #0]
 80014cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80014ce:	f001 ff65 	bl	800339c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000

080014e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <NMI_Handler+0x4>

080014e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <MemManage_Handler+0x4>

080014f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <BusFault_Handler+0x4>

08001500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <UsageFault_Handler+0x4>

08001508 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001536:	f000 fff7 	bl	8002528 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001544:	4802      	ldr	r0, [pc, #8]	@ (8001550 <DMA1_Channel1_IRQHandler+0x10>)
 8001546:	f001 faa7 	bl	8002a98 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800154a:	bf00      	nop
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	2000032c 	.word	0x2000032c

08001554 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001558:	4802      	ldr	r0, [pc, #8]	@ (8001564 <USART3_IRQHandler+0x10>)
 800155a:	f004 f92f 	bl	80057bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000548 	.word	0x20000548

08001568 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return 1;
 800156c:	2301      	movs	r3, #1
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_kill>:

int _kill(int pid, int sig)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001582:	f007 fad1 	bl	8008b28 <__errno>
 8001586:	4603      	mov	r3, r0
 8001588:	2216      	movs	r2, #22
 800158a:	601a      	str	r2, [r3, #0]
  return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001590:	4618      	mov	r0, r3
 8001592:	3708      	adds	r7, #8
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <_exit>:

void _exit (int status)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	f7ff ffe7 	bl	8001578 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015aa:	bf00      	nop
 80015ac:	e7fd      	b.n	80015aa <_exit+0x12>

080015ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	b086      	sub	sp, #24
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	60f8      	str	r0, [r7, #12]
 80015b6:	60b9      	str	r1, [r7, #8]
 80015b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	e00a      	b.n	80015d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015c0:	f7ff fe90 	bl	80012e4 <__io_getchar>
 80015c4:	4601      	mov	r1, r0
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	1c5a      	adds	r2, r3, #1
 80015ca:	60ba      	str	r2, [r7, #8]
 80015cc:	b2ca      	uxtb	r2, r1
 80015ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	3301      	adds	r3, #1
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	429a      	cmp	r2, r3
 80015dc:	dbf0      	blt.n	80015c0 <_read+0x12>
  }

  return len;
 80015de:	687b      	ldr	r3, [r7, #4]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	e009      	b.n	800160e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	60ba      	str	r2, [r7, #8]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff fe5c 	bl	80012c0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	429a      	cmp	r2, r3
 8001614:	dbf1      	blt.n	80015fa <_write+0x12>
  }
  return len;
 8001616:	687b      	ldr	r3, [r7, #4]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <_close>:

int _close(int file)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001628:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800162c:	4618      	mov	r0, r3
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001648:	605a      	str	r2, [r3, #4]
  return 0;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_isatty>:

int _isatty(int file)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001660:	2301      	movs	r3, #1
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr

0800166e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800166e:	b480      	push	{r7}
 8001670:	b085      	sub	sp, #20
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a14      	ldr	r2, [pc, #80]	@ (80016e4 <_sbrk+0x5c>)
 8001692:	4b15      	ldr	r3, [pc, #84]	@ (80016e8 <_sbrk+0x60>)
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800169c:	4b13      	ldr	r3, [pc, #76]	@ (80016ec <_sbrk+0x64>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d102      	bne.n	80016aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a4:	4b11      	ldr	r3, [pc, #68]	@ (80016ec <_sbrk+0x64>)
 80016a6:	4a12      	ldr	r2, [pc, #72]	@ (80016f0 <_sbrk+0x68>)
 80016a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016aa:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <_sbrk+0x64>)
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	4413      	add	r3, r2
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d207      	bcs.n	80016c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016b8:	f007 fa36 	bl	8008b28 <__errno>
 80016bc:	4603      	mov	r3, r0
 80016be:	220c      	movs	r2, #12
 80016c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016c6:	e009      	b.n	80016dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016c8:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ce:	4b07      	ldr	r3, [pc, #28]	@ (80016ec <_sbrk+0x64>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <_sbrk+0x64>)
 80016d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016da:	68fb      	ldr	r3, [r7, #12]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20020000 	.word	0x20020000
 80016e8:	00000400 	.word	0x00000400
 80016ec:	20000244 	.word	0x20000244
 80016f0:	20000730 	.word	0x20000730

080016f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <SystemInit+0x28>)
 80016fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fe:	4a07      	ldr	r2, [pc, #28]	@ (800171c <SystemInit+0x28>)
 8001700:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001704:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  SCB->VTOR = FLASH_BASE | 0;
 8001708:	4b04      	ldr	r3, [pc, #16]	@ (800171c <SystemInit+0x28>)
 800170a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800170e:	609a      	str	r2, [r3, #8]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	e000ed00 	.word	0xe000ed00

08001720 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b09c      	sub	sp, #112	@ 0x70
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001726:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001734:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001744:	2200      	movs	r2, #0
 8001746:	601a      	str	r2, [r3, #0]
 8001748:	605a      	str	r2, [r3, #4]
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	60da      	str	r2, [r3, #12]
 800174e:	611a      	str	r2, [r3, #16]
 8001750:	615a      	str	r2, [r3, #20]
 8001752:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2234      	movs	r2, #52	@ 0x34
 8001758:	2100      	movs	r1, #0
 800175a:	4618      	mov	r0, r3
 800175c:	f007 f980 	bl	8008a60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001760:	4b57      	ldr	r3, [pc, #348]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001762:	4a58      	ldr	r2, [pc, #352]	@ (80018c4 <MX_TIM1_Init+0x1a4>)
 8001764:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001766:	4b56      	ldr	r3, [pc, #344]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176c:	4b54      	ldr	r3, [pc, #336]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001772:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001778:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177a:	4b51      	ldr	r3, [pc, #324]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 800177c:	2200      	movs	r2, #0
 800177e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001780:	4b4f      	ldr	r3, [pc, #316]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001782:	2200      	movs	r2, #0
 8001784:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001786:	4b4e      	ldr	r3, [pc, #312]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001788:	2200      	movs	r2, #0
 800178a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800178c:	484c      	ldr	r0, [pc, #304]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 800178e:	f002 fd91 	bl	80042b4 <HAL_TIM_Base_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001798:	f7ff fe78 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800179c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a0:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017a2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80017a6:	4619      	mov	r1, r3
 80017a8:	4845      	ldr	r0, [pc, #276]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 80017aa:	f002 ff4f 	bl	800464c <HAL_TIM_ConfigClockSource>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017b4:	f7ff fe6a 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017b8:	4841      	ldr	r0, [pc, #260]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 80017ba:	f002 fdd2 	bl	8004362 <HAL_TIM_PWM_Init>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017c4:	f7ff fe62 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c8:	2300      	movs	r3, #0
 80017ca:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80017cc:	2300      	movs	r3, #0
 80017ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80017d8:	4619      	mov	r1, r3
 80017da:	4839      	ldr	r0, [pc, #228]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 80017dc:	f003 fcc6 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80017e6:	f7ff fe51 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ea:	2360      	movs	r3, #96	@ 0x60
 80017ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f2:	2300      	movs	r3, #0
 80017f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80017f6:	2300      	movs	r3, #0
 80017f8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017fa:	2300      	movs	r3, #0
 80017fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001802:	2300      	movs	r3, #0
 8001804:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001806:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	482c      	ldr	r0, [pc, #176]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001810:	f002 fe08 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800181a:	f7ff fe37 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001822:	2204      	movs	r2, #4
 8001824:	4619      	mov	r1, r3
 8001826:	4826      	ldr	r0, [pc, #152]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001828:	f002 fdfc 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001832:	f7ff fe2b 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001836:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800183a:	2208      	movs	r2, #8
 800183c:	4619      	mov	r1, r3
 800183e:	4820      	ldr	r0, [pc, #128]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001840:	f002 fdf0 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800184a:	f7ff fe1f 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800184e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001852:	220c      	movs	r2, #12
 8001854:	4619      	mov	r1, r3
 8001856:	481a      	ldr	r0, [pc, #104]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 8001858:	f002 fde4 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001862:	f7ff fe13 	bl	800148c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800186a:	2300      	movs	r3, #0
 800186c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800186e:	2300      	movs	r3, #0
 8001870:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800187a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800187e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800188c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001890:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001896:	2300      	movs	r3, #0
 8001898:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4807      	ldr	r0, [pc, #28]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 80018a4:	f003 fcf8 	bl	8005298 <HAL_TIMEx_ConfigBreakDeadTime>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM1_Init+0x192>
  {
    Error_Handler();
 80018ae:	f7ff fded 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80018b2:	4803      	ldr	r0, [pc, #12]	@ (80018c0 <MX_TIM1_Init+0x1a0>)
 80018b4:	f000 f97e 	bl	8001bb4 <HAL_TIM_MspPostInit>

}
 80018b8:	bf00      	nop
 80018ba:	3770      	adds	r7, #112	@ 0x70
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000248 	.word	0x20000248
 80018c4:	40012c00 	.word	0x40012c00

080018c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08e      	sub	sp, #56	@ 0x38
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 031c 	add.w	r3, r7, #28
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	463b      	mov	r3, r7
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018fa:	4b38      	ldr	r3, [pc, #224]	@ (80019dc <MX_TIM2_Init+0x114>)
 80018fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001900:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001902:	4b36      	ldr	r3, [pc, #216]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001908:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <MX_TIM2_Init+0x114>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800190e:	4b33      	ldr	r3, [pc, #204]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001914:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001916:	4b31      	ldr	r3, [pc, #196]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191c:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <MX_TIM2_Init+0x114>)
 800191e:	2200      	movs	r2, #0
 8001920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001922:	482e      	ldr	r0, [pc, #184]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001924:	f002 fcc6 	bl	80042b4 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800192e:	f7ff fdad 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001932:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001936:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001938:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800193c:	4619      	mov	r1, r3
 800193e:	4827      	ldr	r0, [pc, #156]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001940:	f002 fe84 	bl	800464c <HAL_TIM_ConfigClockSource>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800194a:	f7ff fd9f 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800194e:	4823      	ldr	r0, [pc, #140]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001950:	f002 fd07 	bl	8004362 <HAL_TIM_PWM_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800195a:	f7ff fd97 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	481b      	ldr	r0, [pc, #108]	@ (80019dc <MX_TIM2_Init+0x114>)
 800196e:	f003 fbfd 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001978:	f7ff fd88 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2360      	movs	r3, #96	@ 0x60
 800197e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001984:	2300      	movs	r3, #0
 8001986:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001988:	2300      	movs	r3, #0
 800198a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	4619      	mov	r1, r3
 8001992:	4812      	ldr	r0, [pc, #72]	@ (80019dc <MX_TIM2_Init+0x114>)
 8001994:	f002 fd46 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800199e:	f7ff fd75 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a2:	463b      	mov	r3, r7
 80019a4:	2204      	movs	r2, #4
 80019a6:	4619      	mov	r1, r3
 80019a8:	480c      	ldr	r0, [pc, #48]	@ (80019dc <MX_TIM2_Init+0x114>)
 80019aa:	f002 fd3b 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80019b4:	f7ff fd6a 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b8:	463b      	mov	r3, r7
 80019ba:	2208      	movs	r2, #8
 80019bc:	4619      	mov	r1, r3
 80019be:	4807      	ldr	r0, [pc, #28]	@ (80019dc <MX_TIM2_Init+0x114>)
 80019c0:	f002 fd30 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80019ca:	f7ff fd5f 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ce:	4803      	ldr	r0, [pc, #12]	@ (80019dc <MX_TIM2_Init+0x114>)
 80019d0:	f000 f8f0 	bl	8001bb4 <HAL_TIM_MspPostInit>

}
 80019d4:	bf00      	nop
 80019d6:	3738      	adds	r7, #56	@ 0x38
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000294 	.word	0x20000294

080019e0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08e      	sub	sp, #56	@ 0x38
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019e6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019f4:	f107 031c 	add.w	r3, r7, #28
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a00:	463b      	mov	r3, r7
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
 8001a0c:	611a      	str	r2, [r3, #16]
 8001a0e:	615a      	str	r2, [r3, #20]
 8001a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a12:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a14:	4a2c      	ldr	r2, [pc, #176]	@ (8001ac8 <MX_TIM4_Init+0xe8>)
 8001a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a18:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19;
 8001a24:	4b27      	ldr	r3, [pc, #156]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a26:	2213      	movs	r2, #19
 8001a28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a30:	4b24      	ldr	r3, [pc, #144]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a36:	4823      	ldr	r0, [pc, #140]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a38:	f002 fc3c 	bl	80042b4 <HAL_TIM_Base_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a42:	f7ff fd23 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a50:	4619      	mov	r1, r3
 8001a52:	481c      	ldr	r0, [pc, #112]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a54:	f002 fdfa 	bl	800464c <HAL_TIM_ConfigClockSource>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001a5e:	f7ff fd15 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a62:	4818      	ldr	r0, [pc, #96]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a64:	f002 fc7d 	bl	8004362 <HAL_TIM_PWM_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001a6e:	f7ff fd0d 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a7a:	f107 031c 	add.w	r3, r7, #28
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4810      	ldr	r0, [pc, #64]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001a82:	f003 fb73 	bl	800516c <HAL_TIMEx_MasterConfigSynchronization>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001a8c:	f7ff fcfe 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a90:	2360      	movs	r3, #96	@ 0x60
 8001a92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa0:	463b      	mov	r3, r7
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4807      	ldr	r0, [pc, #28]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001aa8:	f002 fcbc 	bl	8004424 <HAL_TIM_PWM_ConfigChannel>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001ab2:	f7ff fceb 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ab6:	4803      	ldr	r0, [pc, #12]	@ (8001ac4 <MX_TIM4_Init+0xe4>)
 8001ab8:	f000 f87c 	bl	8001bb4 <HAL_TIM_MspPostInit>

}
 8001abc:	bf00      	nop
 8001abe:	3738      	adds	r7, #56	@ 0x38
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200002e0 	.word	0x200002e0
 8001ac8:	40000800 	.word	0x40000800

08001acc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a31      	ldr	r2, [pc, #196]	@ (8001ba0 <HAL_TIM_Base_MspInit+0xd4>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d10c      	bne.n	8001af8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ade:	4b31      	ldr	r3, [pc, #196]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001ae0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ae2:	4a30      	ldr	r2, [pc, #192]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001ae4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ae8:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aea:	4b2e      	ldr	r3, [pc, #184]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001aec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001af2:	617b      	str	r3, [r7, #20]
 8001af4:	697b      	ldr	r3, [r7, #20]

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001af6:	e04e      	b.n	8001b96 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b00:	d10c      	bne.n	8001b1c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b02:	4b28      	ldr	r3, [pc, #160]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b06:	4a27      	ldr	r2, [pc, #156]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b0e:	4b25      	ldr	r3, [pc, #148]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
}
 8001b1a:	e03c      	b.n	8001b96 <HAL_TIM_Base_MspInit+0xca>
  else if(tim_baseHandle->Instance==TIM4)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_TIM_Base_MspInit+0xdc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d137      	bne.n	8001b96 <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b32:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba4 <HAL_TIM_Base_MspInit+0xd8>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	60fb      	str	r3, [r7, #12]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b40:	4a1b      	ldr	r2, [pc, #108]	@ (8001bb0 <HAL_TIM_Base_MspInit+0xe4>)
 8001b42:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b46:	2243      	movs	r2, #67	@ 0x43
 8001b48:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b4a:	4b18      	ldr	r3, [pc, #96]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b50:	4b16      	ldr	r3, [pc, #88]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001b56:	4b15      	ldr	r3, [pc, #84]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b58:	2280      	movs	r2, #128	@ 0x80
 8001b5a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b5c:	4b13      	ldr	r3, [pc, #76]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b5e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b62:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b64:	4b11      	ldr	r3, [pc, #68]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b72:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b74:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b78:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001b7a:	480c      	ldr	r0, [pc, #48]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b7c:	f000 fe24 	bl	80027c8 <HAL_DMA_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8001b86:	f7ff fc81 	bl	800148c <Error_Handler>
    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b90:	4a06      	ldr	r2, [pc, #24]	@ (8001bac <HAL_TIM_Base_MspInit+0xe0>)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40000800 	.word	0x40000800
 8001bac:	2000032c 	.word	0x2000032c
 8001bb0:	40020008 	.word	0x40020008

08001bb4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a3d      	ldr	r2, [pc, #244]	@ (8001cc8 <HAL_TIM_MspPostInit+0x114>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d11c      	bne.n	8001c10 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	4a3c      	ldr	r2, [pc, #240]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001be2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    PC3     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_6_Pin|PWM_5_Pin|PWM_4_Pin|PWM_3_Pin;
 8001bee:	230f      	movs	r3, #15
 8001bf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c02:	f107 0314 	add.w	r3, r7, #20
 8001c06:	4619      	mov	r1, r3
 8001c08:	4831      	ldr	r0, [pc, #196]	@ (8001cd0 <HAL_TIM_MspPostInit+0x11c>)
 8001c0a:	f001 f857 	bl	8002cbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c0e:	e057      	b.n	8001cc0 <HAL_TIM_MspPostInit+0x10c>
  else if(timHandle->Instance==TIM2)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c18:	d12f      	bne.n	8001c7a <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c26:	4b29      	ldr	r3, [pc, #164]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_2_Pin|PWM_1_Pin;
 8001c32:	2303      	movs	r3, #3
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c50:	f001 f834 	bl	8002cbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001c66:	230a      	movs	r3, #10
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	4619      	mov	r1, r3
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c74:	f001 f822 	bl	8002cbc <HAL_GPIO_Init>
}
 8001c78:	e022      	b.n	8001cc0 <HAL_TIM_MspPostInit+0x10c>
  else if(timHandle->Instance==TIM4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a15      	ldr	r2, [pc, #84]	@ (8001cd4 <HAL_TIM_MspPostInit+0x120>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d11d      	bne.n	8001cc0 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b11      	ldr	r3, [pc, #68]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c88:	4a10      	ldr	r2, [pc, #64]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c90:	4b0e      	ldr	r3, [pc, #56]	@ (8001ccc <HAL_TIM_MspPostInit+0x118>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c9c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001cae:	230a      	movs	r3, #10
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cbc:	f000 fffe 	bl	8002cbc <HAL_GPIO_Init>
}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	@ 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40012c00 	.word	0x40012c00
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	48000800 	.word	0x48000800
 8001cd4:	40000800 	.word	0x40000800

08001cd8 <MX_UART4_Init>:
UART_HandleTypeDef huart2;
UART_HandleTypeDef huart3;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001cde:	4a25      	ldr	r2, [pc, #148]	@ (8001d74 <MX_UART4_Init+0x9c>)
 8001ce0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001ce2:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001ce4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001ce8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001cea:	4b21      	ldr	r3, [pc, #132]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001cfc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001cfe:	220c      	movs	r2, #12
 8001d00:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d08:	4b19      	ldr	r3, [pc, #100]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0e:	4b18      	ldr	r3, [pc, #96]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d14:	4b16      	ldr	r3, [pc, #88]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001d20:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d22:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001d26:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d28:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d2a:	f003 fb49 	bl	80053c0 <HAL_UART_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001d34:	f7ff fbaa 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d38:	2100      	movs	r1, #0
 8001d3a:	480d      	ldr	r0, [pc, #52]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d3c:	f004 fef7 	bl	8006b2e <HAL_UARTEx_SetTxFifoThreshold>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8001d46:	f7ff fba1 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4808      	ldr	r0, [pc, #32]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d4e:	f004 ff2c 	bl	8006baa <HAL_UARTEx_SetRxFifoThreshold>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8001d58:	f7ff fb98 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001d5c:	4804      	ldr	r0, [pc, #16]	@ (8001d70 <MX_UART4_Init+0x98>)
 8001d5e:	f004 fead 	bl	8006abc <HAL_UARTEx_DisableFifoMode>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8001d68:	f7ff fb90 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000038c 	.word	0x2000038c
 8001d74:	40004c00 	.word	0x40004c00

08001d78 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d7c:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001d7e:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <MX_USART1_UART_Init+0x94>)
 8001d80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001d84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001d88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d90:	4b1d      	ldr	r3, [pc, #116]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d96:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001d9e:	220c      	movs	r2, #12
 8001da0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001da2:	4b19      	ldr	r3, [pc, #100]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da8:	4b17      	ldr	r3, [pc, #92]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dae:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dba:	4b13      	ldr	r3, [pc, #76]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8001dc0:	4811      	ldr	r0, [pc, #68]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001dc2:	f003 fb4d 	bl	8005460 <HAL_HalfDuplex_Init>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001dcc:	f7ff fb5e 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	480d      	ldr	r0, [pc, #52]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001dd4:	f004 feab 	bl	8006b2e <HAL_UARTEx_SetTxFifoThreshold>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001dde:	f7ff fb55 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001de2:	2100      	movs	r1, #0
 8001de4:	4808      	ldr	r0, [pc, #32]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001de6:	f004 fee0 	bl	8006baa <HAL_UARTEx_SetRxFifoThreshold>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001df0:	f7ff fb4c 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001df4:	4804      	ldr	r0, [pc, #16]	@ (8001e08 <MX_USART1_UART_Init+0x90>)
 8001df6:	f004 fe61 	bl	8006abc <HAL_UARTEx_DisableFifoMode>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e00:	f7ff fb44 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	20000420 	.word	0x20000420
 8001e0c:	40013800 	.word	0x40013800

08001e10 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e14:	4b22      	ldr	r3, [pc, #136]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <MX_USART2_UART_Init+0x94>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1a:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b19      	ldr	r3, [pc, #100]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b17      	ldr	r3, [pc, #92]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e46:	4b16      	ldr	r3, [pc, #88]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e52:	4b13      	ldr	r3, [pc, #76]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e58:	4811      	ldr	r0, [pc, #68]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e5a:	f003 fab1 	bl	80053c0 <HAL_UART_Init>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d001      	beq.n	8001e68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001e64:	f7ff fb12 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e68:	2100      	movs	r1, #0
 8001e6a:	480d      	ldr	r0, [pc, #52]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e6c:	f004 fe5f 	bl	8006b2e <HAL_UARTEx_SetTxFifoThreshold>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001e76:	f7ff fb09 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4808      	ldr	r0, [pc, #32]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e7e:	f004 fe94 	bl	8006baa <HAL_UARTEx_SetRxFifoThreshold>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001e88:	f7ff fb00 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001e8c:	4804      	ldr	r0, [pc, #16]	@ (8001ea0 <MX_USART2_UART_Init+0x90>)
 8001e8e:	f004 fe15 	bl	8006abc <HAL_UARTEx_DisableFifoMode>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001e98:	f7ff faf8 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200004b4 	.word	0x200004b4
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eac:	4b22      	ldr	r3, [pc, #136]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eae:	4a23      	ldr	r2, [pc, #140]	@ (8001f3c <MX_USART3_UART_Init+0x94>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001eb2:	4b21      	ldr	r3, [pc, #132]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001eb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eba:	4b1f      	ldr	r3, [pc, #124]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ece:	220c      	movs	r2, #12
 8001ed0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed2:	4b19      	ldr	r3, [pc, #100]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed8:	4b17      	ldr	r3, [pc, #92]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ede:	4b16      	ldr	r3, [pc, #88]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eea:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ef0:	4811      	ldr	r0, [pc, #68]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001ef2:	f003 fa65 	bl	80053c0 <HAL_UART_Init>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001efc:	f7ff fac6 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f00:	2100      	movs	r1, #0
 8001f02:	480d      	ldr	r0, [pc, #52]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f04:	f004 fe13 	bl	8006b2e <HAL_UARTEx_SetTxFifoThreshold>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f0e:	f7ff fabd 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f12:	2100      	movs	r1, #0
 8001f14:	4808      	ldr	r0, [pc, #32]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f16:	f004 fe48 	bl	8006baa <HAL_UARTEx_SetRxFifoThreshold>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f20:	f7ff fab4 	bl	800148c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f24:	4804      	ldr	r0, [pc, #16]	@ (8001f38 <MX_USART3_UART_Init+0x90>)
 8001f26:	f004 fdc9 	bl	8006abc <HAL_UARTEx_DisableFifoMode>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f30:	f7ff faac 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000548 	.word	0x20000548
 8001f3c:	40004800 	.word	0x40004800

08001f40 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b0a4      	sub	sp, #144	@ 0x90
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f58:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f5c:	2254      	movs	r2, #84	@ 0x54
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f006 fd7d 	bl	8008a60 <memset>
  if(uartHandle->Instance==UART4)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a86      	ldr	r2, [pc, #536]	@ (8002184 <HAL_UART_MspInit+0x244>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d13b      	bne.n	8001fe8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f70:	2308      	movs	r3, #8
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f001 ff4b 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f88:	f7ff fa80 	bl	800148c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8001f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f90:	4a7d      	ldr	r2, [pc, #500]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8001f92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f98:	4b7b      	ldr	r3, [pc, #492]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8001f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fa0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa4:	4b78      	ldr	r3, [pc, #480]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8001fa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa8:	4a77      	ldr	r2, [pc, #476]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8001faa:	f043 0304 	orr.w	r3, r3, #4
 8001fae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001fb0:	4b75      	ldr	r3, [pc, #468]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8001fb2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb4:	f003 0304 	and.w	r3, r3, #4
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8001fbc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fc0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001fd4:	2305      	movs	r3, #5
 8001fd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fda:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001fde:	4619      	mov	r1, r3
 8001fe0:	486a      	ldr	r0, [pc, #424]	@ (800218c <HAL_UART_MspInit+0x24c>)
 8001fe2:	f000 fe6b 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001fe6:	e0c8      	b.n	800217a <HAL_UART_MspInit+0x23a>
  else if(uartHandle->Instance==USART1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a68      	ldr	r2, [pc, #416]	@ (8002190 <HAL_UART_MspInit+0x250>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d13a      	bne.n	8002068 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ffa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001ffe:	4618      	mov	r0, r3
 8002000:	f001 ff0a 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800200a:	f7ff fa3f 	bl	800148c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800200e:	4b5e      	ldr	r3, [pc, #376]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002010:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002012:	4a5d      	ldr	r2, [pc, #372]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002018:	6613      	str	r3, [r2, #96]	@ 0x60
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_UART_MspInit+0x248>)
 800201c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800201e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002022:	61fb      	str	r3, [r7, #28]
 8002024:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002026:	4b58      	ldr	r3, [pc, #352]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002028:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800202a:	4a57      	ldr	r2, [pc, #348]	@ (8002188 <HAL_UART_MspInit+0x248>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002032:	4b55      	ldr	r3, [pc, #340]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800203e:	2310      	movs	r3, #16
 8002040:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002042:	2312      	movs	r3, #18
 8002044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002048:	2301      	movs	r3, #1
 800204a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204e:	2300      	movs	r3, #0
 8002050:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002054:	2307      	movs	r3, #7
 8002056:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 800205a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800205e:	4619      	mov	r1, r3
 8002060:	484a      	ldr	r0, [pc, #296]	@ (800218c <HAL_UART_MspInit+0x24c>)
 8002062:	f000 fe2b 	bl	8002cbc <HAL_GPIO_Init>
}
 8002066:	e088      	b.n	800217a <HAL_UART_MspInit+0x23a>
  else if(uartHandle->Instance==USART2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a49      	ldr	r2, [pc, #292]	@ (8002194 <HAL_UART_MspInit+0x254>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d13b      	bne.n	80020ea <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002072:	2302      	movs	r3, #2
 8002074:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002076:	2300      	movs	r3, #0
 8002078:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800207e:	4618      	mov	r0, r3
 8002080:	f001 feca 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_UART_MspInit+0x14e>
      Error_Handler();
 800208a:	f7ff f9ff 	bl	800148c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800208e:	4b3e      	ldr	r3, [pc, #248]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002092:	4a3d      	ldr	r2, [pc, #244]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002094:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002098:	6593      	str	r3, [r2, #88]	@ 0x58
 800209a:	4b3b      	ldr	r3, [pc, #236]	@ (8002188 <HAL_UART_MspInit+0x248>)
 800209c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800209e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a2:	617b      	str	r3, [r7, #20]
 80020a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	4b38      	ldr	r3, [pc, #224]	@ (8002188 <HAL_UART_MspInit+0x248>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020aa:	4a37      	ldr	r2, [pc, #220]	@ (8002188 <HAL_UART_MspInit+0x248>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020b2:	4b35      	ldr	r3, [pc, #212]	@ (8002188 <HAL_UART_MspInit+0x248>)
 80020b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	613b      	str	r3, [r7, #16]
 80020bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80020be:	230c      	movs	r3, #12
 80020c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c2:	2302      	movs	r3, #2
 80020c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c8:	2300      	movs	r3, #0
 80020ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020d4:	2307      	movs	r3, #7
 80020d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020da:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80020de:	4619      	mov	r1, r3
 80020e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020e4:	f000 fdea 	bl	8002cbc <HAL_GPIO_Init>
}
 80020e8:	e047      	b.n	800217a <HAL_UART_MspInit+0x23a>
  else if(uartHandle->Instance==USART3)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <HAL_UART_MspInit+0x258>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d142      	bne.n	800217a <HAL_UART_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020f4:	2304      	movs	r3, #4
 80020f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020f8:	2300      	movs	r3, #0
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002100:	4618      	mov	r0, r3
 8002102:	f001 fe89 	bl	8003e18 <HAL_RCCEx_PeriphCLKConfig>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 800210c:	f7ff f9be 	bl	800148c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002110:	4b1d      	ldr	r3, [pc, #116]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002114:	4a1c      	ldr	r2, [pc, #112]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002116:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800211a:	6593      	str	r3, [r2, #88]	@ 0x58
 800211c:	4b1a      	ldr	r3, [pc, #104]	@ (8002188 <HAL_UART_MspInit+0x248>)
 800211e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002120:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002128:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_UART_MspInit+0x248>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212c:	4a16      	ldr	r2, [pc, #88]	@ (8002188 <HAL_UART_MspInit+0x248>)
 800212e:	f043 0302 	orr.w	r3, r3, #2
 8002132:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002134:	4b14      	ldr	r3, [pc, #80]	@ (8002188 <HAL_UART_MspInit+0x248>)
 8002136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8002140:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002144:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214c:	2300      	movs	r3, #0
 800214e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002158:	2307      	movs	r3, #7
 800215a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800215e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002162:	4619      	mov	r1, r3
 8002164:	480d      	ldr	r0, [pc, #52]	@ (800219c <HAL_UART_MspInit+0x25c>)
 8002166:	f000 fda9 	bl	8002cbc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800216a:	2200      	movs	r2, #0
 800216c:	2101      	movs	r1, #1
 800216e:	2027      	movs	r0, #39	@ 0x27
 8002170:	f000 faf5 	bl	800275e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002174:	2027      	movs	r0, #39	@ 0x27
 8002176:	f000 fb0c 	bl	8002792 <HAL_NVIC_EnableIRQ>
}
 800217a:	bf00      	nop
 800217c:	3790      	adds	r7, #144	@ 0x90
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40004c00 	.word	0x40004c00
 8002188:	40021000 	.word	0x40021000
 800218c:	48000800 	.word	0x48000800
 8002190:	40013800 	.word	0x40013800
 8002194:	40004400 	.word	0x40004400
 8002198:	40004800 	.word	0x40004800
 800219c:	48000400 	.word	0x48000400

080021a0 <XL430_Init>:
const uint8_t msg_ping_error[]="No response from ping request\r\n";
const uint8_t msg_ping_crc_error[]="Incorrect CRC in ping answer\r\n";

// passer en wheel mode pcq on tourne plus que 1 tour

void XL430_Init(__XL430_HandleTypeDef *XL430_Handle, UART_HandleTypeDef *huart, uint8_t id, uint8_t  baudrate){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	4611      	mov	r1, r2
 80021ac:	461a      	mov	r2, r3
 80021ae:	460b      	mov	r3, r1
 80021b0:	71fb      	strb	r3, [r7, #7]
 80021b2:	4613      	mov	r3, r2
 80021b4:	71bb      	strb	r3, [r7, #6]
	XL430_Handle->huart = huart;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	601a      	str	r2, [r3, #0]
	XL430_Handle->id = id;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	749a      	strb	r2, [r3, #18]
	XL430_Handle->baudrate = baudrate;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	79ba      	ldrb	r2, [r7, #6]
 80021c6:	74da      	strb	r2, [r3, #19]
	XL430_Handle->operating_mode = 1;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	759a      	strb	r2, [r3, #22]
	XL430_Handle->drive_mode = 0;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	2200      	movs	r2, #0
 80021d2:	755a      	strb	r2, [r3, #21]
	XL430_Handle->max_pos_limit = 4095;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80021da:	631a      	str	r2, [r3, #48]	@ 0x30
	XL430_Handle->min_pos_limit = 0;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	635a      	str	r2, [r3, #52]	@ 0x34
	XL430_Handle->velocity_limit = 1023;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80021e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Set in RX mode
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 80021ea:	2100      	movs	r1, #0
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f000 f84f 	bl	8002290 <XL430_Set_UART_RxTxMode>
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <XL430_Init_debug>:

void XL430_Init_debug(__XL430_HandleTypeDef *XL430_Handle, UART_HandleTypeDef *huart, UART_HandleTypeDef *huart_debug, uint8_t id, uint8_t baudrate){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
 8002208:	70fb      	strb	r3, [r7, #3]
	XL430_Handle->huart = huart;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	601a      	str	r2, [r3, #0]
	XL430_Handle->huart_debug = huart_debug;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	605a      	str	r2, [r3, #4]
	XL430_Handle->id = id;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	749a      	strb	r2, [r3, #18]
	XL430_Handle->baudrate = baudrate;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	7e3a      	ldrb	r2, [r7, #24]
 8002220:	74da      	strb	r2, [r3, #19]
	XL430_Handle->operating_mode = 3;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2203      	movs	r2, #3
 8002226:	759a      	strb	r2, [r3, #22]
	XL430_Handle->drive_mode = 0;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	755a      	strb	r2, [r3, #21]
	XL430_Handle->max_pos_limit = 4095;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002234:	631a      	str	r2, [r3, #48]	@ 0x30
	XL430_Handle->min_pos_limit = 0;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2200      	movs	r2, #0
 800223a:	635a      	str	r2, [r3, #52]	@ 0x34
	XL430_Handle->velocity_limit = 1023;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c

	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800224a:	4a10      	ldr	r2, [pc, #64]	@ (800228c <XL430_Init_debug+0x90>)
 800224c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002250:	4618      	mov	r0, r3
 8002252:	f006 fad5 	bl	8008800 <sniprintf>
 8002256:	4603      	mov	r3, r0
 8002258:	b2da      	uxtb	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				"XL430_Init_debug\r\n");
	HAL_UART_Transmit(XL430_Handle->huart_debug, XL430_Handle->tx_buffer_debug, XL430_Handle->tx_data_debug_length, HAL_MAX_DELAY);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6858      	ldr	r0, [r3, #4]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f503 7182 	add.w	r1, r3, #260	@ 0x104
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8002270:	461a      	mov	r2, r3
 8002272:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002276:	f003 f94b 	bl	8005510 <HAL_UART_Transmit>
	// Set in RX mode
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 800227a:	2100      	movs	r1, #0
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 f807 	bl	8002290 <XL430_Set_UART_RxTxMode>
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	0800b538 	.word	0x0800b538

08002290 <XL430_Set_UART_RxTxMode>:
	HAL_UART_Transmit(XL430_Handle->huart_debug, XL430_Handle->tx_buffer_debug, XL430_Handle->tx_data_debug_length, 100);

	return HAL_OK;
}

void XL430_Set_UART_RxTxMode(__XL430_HandleTypeDef *XL430_Handle, int mode){
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
	if(mode==0){
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <XL430_Set_UART_RxTxMode+0x1e>
		HAL_StatusTypeDef status = HAL_HalfDuplex_EnableReceiver(XL430_Handle->huart);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f003 fe3f 	bl	8005f28 <HAL_HalfDuplex_EnableReceiver>
 80022aa:	4603      	mov	r3, r0
 80022ac:	73fb      	strb	r3, [r7, #15]
	}
	if(mode==1){
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d106      	bne.n	80022c2 <XL430_Set_UART_RxTxMode+0x32>
		HAL_StatusTypeDef status = HAL_HalfDuplex_EnableTransmitter(XL430_Handle->huart);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 fde1 	bl	8005e80 <HAL_HalfDuplex_EnableTransmitter>
 80022be:	4603      	mov	r3, r0
 80022c0:	73bb      	strb	r3, [r7, #14]
	}
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <XL430_Write_Data2>:
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_TX);
	HAL_UART_Transmit(XL430_Handle->huart, XL430_Handle->tx_buffer, XL430_Handle->tx_data_length + XL430_CRC_LENGTH, 100);
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
}

void XL430_Write_Data2(__XL430_HandleTypeDef *XL430_Handle, uint16_t Address, uint32_t Value){
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	60f8      	str	r0, [r7, #12]
 80022d2:	460b      	mov	r3, r1
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	817b      	strh	r3, [r7, #10]
	// Header + reserved
	XL430_Handle->tx_buffer[0] = XL430_HEADER_1;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	22ff      	movs	r2, #255	@ 0xff
 80022dc:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	XL430_Handle->tx_buffer[1] = XL430_HEADER_2;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	22ff      	movs	r2, #255	@ 0xff
 80022e4:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	XL430_Handle->tx_buffer[2] = XL430_HEADER_3;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	22fd      	movs	r2, #253	@ 0xfd
 80022ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	XL430_Handle->tx_buffer[3] = XL430_RSVD;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	// ID
	XL430_Handle->tx_buffer[4] = XL430_Handle->id;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	7c9a      	ldrb	r2, [r3, #18]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	// Length (Nb param + Instru + CRC)
	XL430_Handle->tx_buffer[5] = 0x09;   // Length (Low)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2209      	movs	r2, #9
 8002306:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	XL430_Handle->tx_buffer[6] = 0x00;   // Length (High)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	// Instruction : write
	XL430_Handle->tx_buffer[7] = XL430_INST_WRITE_DATA;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2203      	movs	r2, #3
 8002316:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	// Register Address
	XL430_Handle->tx_buffer[8] = Address & 0x00FF;			// Addr (Low)
 800231a:	897b      	ldrh	r3, [r7, #10]
 800231c:	b2da      	uxtb	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	XL430_Handle->tx_buffer[9] = (Address >> 8) & 0x00FF;	// Addr (High)
 8002324:	897b      	ldrh	r3, [r7, #10]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	b29b      	uxth	r3, r3
 800232a:	b2da      	uxtb	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	// Register Value
	XL430_Handle->tx_buffer[10] = Value & 0x00FF;			// Val (Low)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	XL430_Handle->tx_buffer[11] = (Value >> 8) & 0x00FF;	// Val (High)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	b2da      	uxtb	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	XL430_Handle->tx_buffer[12] = (Value >> 16) & 0x00FF;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	0c1b      	lsrs	r3, r3, #16
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
	XL430_Handle->tx_buffer[13] = (Value >> 24) & 0x00FF;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0e1b      	lsrs	r3, r3, #24
 8002358:	b2da      	uxtb	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f

	XL430_Handle->tx_data_length = 14;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	220e      	movs	r2, #14
 8002364:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

	// CRC
	XL430_Update_CRC(XL430_Handle);
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f829 	bl	80023c0 <XL430_Update_CRC>
	XL430_Handle->tx_buffer[14] = (XL430_Handle->crc) & 0x00FF;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	XL430_Handle->tx_buffer[15] = (XL430_Handle->crc >> 8) & 0x00FF;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8002382:	0a1b      	lsrs	r3, r3, #8
 8002384:	b29b      	uxth	r3, r3
 8002386:	b2da      	uxtb	r2, r3
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_TX);
 800238e:	2101      	movs	r1, #1
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff ff7d 	bl	8002290 <XL430_Set_UART_RxTxMode>
	HAL_UART_Transmit(XL430_Handle->huart, XL430_Handle->tx_buffer, XL430_Handle->tx_data_length + XL430_CRC_LENGTH, 100);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6818      	ldr	r0, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f103 0182 	add.w	r1, r3, #130	@ 0x82
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 80023a6:	3302      	adds	r3, #2
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	2364      	movs	r3, #100	@ 0x64
 80023ac:	f003 f8b0 	bl	8005510 <HAL_UART_Transmit>
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 80023b0:	2100      	movs	r1, #0
 80023b2:	68f8      	ldr	r0, [r7, #12]
 80023b4:	f7ff ff6c 	bl	8002290 <XL430_Set_UART_RxTxMode>
}
 80023b8:	bf00      	nop
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <XL430_Update_CRC>:

void XL430_Led_OnOff(__XL430_HandleTypeDef *XL430_Handle, uint16_t state){
	XL430_Write_Data(XL430_Handle, XL430_REG_LED, state);
}

void XL430_Update_CRC(__XL430_HandleTypeDef *XL430_Handle){
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	uint16_t i,j;
	uint16_t crc_accum = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	81bb      	strh	r3, [r7, #12]

	for(j=0; j<XL430_Handle->tx_data_length; j++){
 80023cc:	2300      	movs	r3, #0
 80023ce:	81fb      	strh	r3, [r7, #14]
 80023d0:	e01a      	b.n	8002408 <XL430_Update_CRC+0x48>
		i = ((uint16_t)(crc_accum >> 8) ^ XL430_Handle->tx_buffer[j]) & 0xFF;
 80023d2:	89bb      	ldrh	r3, [r7, #12]
 80023d4:	0a1b      	lsrs	r3, r3, #8
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	89fa      	ldrh	r2, [r7, #14]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	440a      	add	r2, r1
 80023de:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 80023e2:	4053      	eors	r3, r2
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 80023ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023ee:	021b      	lsls	r3, r3, #8
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	897b      	ldrh	r3, [r7, #10]
 80023f4:	490d      	ldr	r1, [pc, #52]	@ (800242c <XL430_Update_CRC+0x6c>)
 80023f6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4053      	eors	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	81bb      	strh	r3, [r7, #12]
	for(j=0; j<XL430_Handle->tx_data_length; j++){
 8002402:	89fb      	ldrh	r3, [r7, #14]
 8002404:	3301      	adds	r3, #1
 8002406:	81fb      	strh	r3, [r7, #14]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800240e:	461a      	mov	r2, r3
 8002410:	89fb      	ldrh	r3, [r7, #14]
 8002412:	4293      	cmp	r3, r2
 8002414:	d3dd      	bcc.n	80023d2 <XL430_Update_CRC+0x12>
	}
	XL430_Handle->crc = crc_accum;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	89ba      	ldrh	r2, [r7, #12]
 800241a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 800241e:	bf00      	nop
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	0800b5c8 	.word	0x0800b5c8

08002430 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002430:	480d      	ldr	r0, [pc, #52]	@ (8002468 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002432:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002434:	f7ff f95e 	bl	80016f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002438:	480c      	ldr	r0, [pc, #48]	@ (800246c <LoopForever+0x6>)
  ldr r1, =_edata
 800243a:	490d      	ldr	r1, [pc, #52]	@ (8002470 <LoopForever+0xa>)
  ldr r2, =_sidata
 800243c:	4a0d      	ldr	r2, [pc, #52]	@ (8002474 <LoopForever+0xe>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0a      	ldr	r2, [pc, #40]	@ (8002478 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002450:	4c0a      	ldr	r4, [pc, #40]	@ (800247c <LoopForever+0x16>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245e:	f006 fb69 	bl	8008b34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002462:	f7fe ff5d 	bl	8001320 <main>

08002466 <LoopForever>:

LoopForever:
    b LoopForever
 8002466:	e7fe      	b.n	8002466 <LoopForever>
  ldr   r0, =_estack
 8002468:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002474:	0800bc2c 	.word	0x0800bc2c
  ldr r2, =_sbss
 8002478:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800247c:	2000072c 	.word	0x2000072c

08002480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC1_2_IRQHandler>

08002482 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800248c:	2003      	movs	r0, #3
 800248e:	f000 f95b 	bl	8002748 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002492:	200f      	movs	r0, #15
 8002494:	f000 f80e 	bl	80024b4 <HAL_InitTick>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	71fb      	strb	r3, [r7, #7]
 80024a2:	e001      	b.n	80024a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80024a4:	f7fe fff8 	bl	8001498 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80024a8:	79fb      	ldrb	r3, [r7, #7]

}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HAL_InitTick+0x68>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d022      	beq.n	800250e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80024c8:	4b15      	ldr	r3, [pc, #84]	@ (8002520 <HAL_InitTick+0x6c>)
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	4b13      	ldr	r3, [pc, #76]	@ (800251c <HAL_InitTick+0x68>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80024d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 f966 	bl	80027ae <HAL_SYSTICK_Config>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10f      	bne.n	8002508 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b0f      	cmp	r3, #15
 80024ec:	d809      	bhi.n	8002502 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024ee:	2200      	movs	r2, #0
 80024f0:	6879      	ldr	r1, [r7, #4]
 80024f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024f6:	f000 f932 	bl	800275e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <HAL_InitTick+0x70>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6013      	str	r3, [r2, #0]
 8002500:	e007      	b.n	8002512 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	73fb      	strb	r3, [r7, #15]
 8002506:	e004      	b.n	8002512 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e001      	b.n	8002512 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000008 	.word	0x20000008
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800252c:	4b05      	ldr	r3, [pc, #20]	@ (8002544 <HAL_IncTick+0x1c>)
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4b05      	ldr	r3, [pc, #20]	@ (8002548 <HAL_IncTick+0x20>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4413      	add	r3, r2
 8002536:	4a03      	ldr	r2, [pc, #12]	@ (8002544 <HAL_IncTick+0x1c>)
 8002538:	6013      	str	r3, [r2, #0]
}
 800253a:	bf00      	nop
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	200005dc 	.word	0x200005dc
 8002548:	20000008 	.word	0x20000008

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	200005dc 	.word	0x200005dc

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800257c:	d004      	beq.n	8002588 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <HAL_Delay+0x40>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68fa      	ldr	r2, [r7, #12]
 8002584:	4413      	add	r3, r2
 8002586:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002588:	bf00      	nop
 800258a:	f7ff ffdf 	bl	800254c <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	429a      	cmp	r2, r3
 8002598:	d8f7      	bhi.n	800258a <HAL_Delay+0x26>
  {
  }
}
 800259a:	bf00      	nop
 800259c:	bf00      	nop
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000008 	.word	0x20000008

080025a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	f003 0307 	and.w	r3, r3, #7
 80025b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025be:	68ba      	ldr	r2, [r7, #8]
 80025c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c4:	4013      	ands	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025da:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <__NVIC_SetPriorityGrouping+0x44>)
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	60d3      	str	r3, [r2, #12]
}
 80025e0:	bf00      	nop
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f4:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <__NVIC_GetPriorityGrouping+0x18>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	0a1b      	lsrs	r3, r3, #8
 80025fa:	f003 0307 	and.w	r3, r3, #7
}
 80025fe:	4618      	mov	r0, r3
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261a:	2b00      	cmp	r3, #0
 800261c:	db0b      	blt.n	8002636 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	f003 021f 	and.w	r2, r3, #31
 8002624:	4907      	ldr	r1, [pc, #28]	@ (8002644 <__NVIC_EnableIRQ+0x38>)
 8002626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2001      	movs	r0, #1
 800262e:	fa00 f202 	lsl.w	r2, r0, r2
 8002632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002636:	bf00      	nop
 8002638:	370c      	adds	r7, #12
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	e000e100 	.word	0xe000e100

08002648 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	6039      	str	r1, [r7, #0]
 8002652:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002658:	2b00      	cmp	r3, #0
 800265a:	db0a      	blt.n	8002672 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	b2da      	uxtb	r2, r3
 8002660:	490c      	ldr	r1, [pc, #48]	@ (8002694 <__NVIC_SetPriority+0x4c>)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	0112      	lsls	r2, r2, #4
 8002668:	b2d2      	uxtb	r2, r2
 800266a:	440b      	add	r3, r1
 800266c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002670:	e00a      	b.n	8002688 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4908      	ldr	r1, [pc, #32]	@ (8002698 <__NVIC_SetPriority+0x50>)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	f003 030f 	and.w	r3, r3, #15
 800267e:	3b04      	subs	r3, #4
 8002680:	0112      	lsls	r2, r2, #4
 8002682:	b2d2      	uxtb	r2, r2
 8002684:	440b      	add	r3, r1
 8002686:	761a      	strb	r2, [r3, #24]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000e100 	.word	0xe000e100
 8002698:	e000ed00 	.word	0xe000ed00

0800269c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800269c:	b480      	push	{r7}
 800269e:	b089      	sub	sp, #36	@ 0x24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f1c3 0307 	rsb	r3, r3, #7
 80026b6:	2b04      	cmp	r3, #4
 80026b8:	bf28      	it	cs
 80026ba:	2304      	movcs	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3304      	adds	r3, #4
 80026c2:	2b06      	cmp	r3, #6
 80026c4:	d902      	bls.n	80026cc <NVIC_EncodePriority+0x30>
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	3b03      	subs	r3, #3
 80026ca:	e000      	b.n	80026ce <NVIC_EncodePriority+0x32>
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	401a      	ands	r2, r3
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	fa01 f303 	lsl.w	r3, r1, r3
 80026ee:	43d9      	mvns	r1, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f4:	4313      	orrs	r3, r2
         );
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3724      	adds	r7, #36	@ 0x24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	3b01      	subs	r3, #1
 8002710:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002714:	d301      	bcc.n	800271a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002716:	2301      	movs	r3, #1
 8002718:	e00f      	b.n	800273a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271a:	4a0a      	ldr	r2, [pc, #40]	@ (8002744 <SysTick_Config+0x40>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3b01      	subs	r3, #1
 8002720:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002722:	210f      	movs	r1, #15
 8002724:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002728:	f7ff ff8e 	bl	8002648 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800272c:	4b05      	ldr	r3, [pc, #20]	@ (8002744 <SysTick_Config+0x40>)
 800272e:	2200      	movs	r2, #0
 8002730:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002732:	4b04      	ldr	r3, [pc, #16]	@ (8002744 <SysTick_Config+0x40>)
 8002734:	2207      	movs	r2, #7
 8002736:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	e000e010 	.word	0xe000e010

08002748 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff ff29 	bl	80025a8 <__NVIC_SetPriorityGrouping>
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b086      	sub	sp, #24
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800276c:	f7ff ff40 	bl	80025f0 <__NVIC_GetPriorityGrouping>
 8002770:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68b9      	ldr	r1, [r7, #8]
 8002776:	6978      	ldr	r0, [r7, #20]
 8002778:	f7ff ff90 	bl	800269c <NVIC_EncodePriority>
 800277c:	4602      	mov	r2, r0
 800277e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002782:	4611      	mov	r1, r2
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff5f 	bl	8002648 <__NVIC_SetPriority>
}
 800278a:	bf00      	nop
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	4603      	mov	r3, r0
 800279a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800279c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7ff ff33 	bl	800260c <__NVIC_EnableIRQ>
}
 80027a6:	bf00      	nop
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b082      	sub	sp, #8
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff ffa4 	bl	8002704 <SysTick_Config>
 80027bc:	4603      	mov	r3, r0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3708      	adds	r7, #8
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e08d      	b.n	80028f6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	461a      	mov	r2, r3
 80027e0:	4b47      	ldr	r3, [pc, #284]	@ (8002900 <HAL_DMA_Init+0x138>)
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d80f      	bhi.n	8002806 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	4b45      	ldr	r3, [pc, #276]	@ (8002904 <HAL_DMA_Init+0x13c>)
 80027ee:	4413      	add	r3, r2
 80027f0:	4a45      	ldr	r2, [pc, #276]	@ (8002908 <HAL_DMA_Init+0x140>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	009a      	lsls	r2, r3, #2
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a42      	ldr	r2, [pc, #264]	@ (800290c <HAL_DMA_Init+0x144>)
 8002802:	641a      	str	r2, [r3, #64]	@ 0x40
 8002804:	e00e      	b.n	8002824 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	4b40      	ldr	r3, [pc, #256]	@ (8002910 <HAL_DMA_Init+0x148>)
 800280e:	4413      	add	r3, r2
 8002810:	4a3d      	ldr	r2, [pc, #244]	@ (8002908 <HAL_DMA_Init+0x140>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	091b      	lsrs	r3, r3, #4
 8002818:	009a      	lsls	r2, r3, #2
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a3c      	ldr	r2, [pc, #240]	@ (8002914 <HAL_DMA_Init+0x14c>)
 8002822:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2202      	movs	r2, #2
 8002828:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800283a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800283e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002848:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002854:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002860:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002868:	68fa      	ldr	r2, [r7, #12]
 800286a:	4313      	orrs	r3, r2
 800286c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f9be 	bl	8002bf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002884:	d102      	bne.n	800288c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002894:	b2d2      	uxtb	r2, r2
 8002896:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80028a0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d010      	beq.n	80028cc <HAL_DMA_Init+0x104>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d80c      	bhi.n	80028cc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 f9de 	bl	8002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028bc:	2200      	movs	r2, #0
 80028be:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	e008      	b.n	80028de <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2200      	movs	r2, #0
 80028d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40020407 	.word	0x40020407
 8002904:	bffdfff8 	.word	0xbffdfff8
 8002908:	cccccccd 	.word	0xcccccccd
 800290c:	40020000 	.word	0x40020000
 8002910:	bffdfbf8 	.word	0xbffdfbf8
 8002914:	40020400 	.word	0x40020400

08002918 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800292a:	b2db      	uxtb	r3, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d005      	beq.n	800293c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2204      	movs	r2, #4
 8002934:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	73fb      	strb	r3, [r7, #15]
 800293a:	e037      	b.n	80029ac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 020e 	bic.w	r2, r2, #14
 800294a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002956:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800295a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0201 	bic.w	r2, r2, #1
 800296a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	2101      	movs	r1, #1
 800297a:	fa01 f202 	lsl.w	r2, r1, r2
 800297e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002988:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00c      	beq.n	80029ac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029a0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80029aa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029ca:	b580      	push	{r7, lr}
 80029cc:	b084      	sub	sp, #16
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d00d      	beq.n	80029fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2204      	movs	r2, #4
 80029e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	73fb      	strb	r3, [r7, #15]
 80029fc:	e047      	b.n	8002a8e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 020e 	bic.w	r2, r2, #14
 8002a0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 0201 	bic.w	r2, r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a2c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f003 021f 	and.w	r2, r3, #31
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a40:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002a4a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00c      	beq.n	8002a6e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a5e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a62:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a6c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
    }
  }
  return status;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b084      	sub	sp, #16
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	f003 031f 	and.w	r3, r3, #31
 8002ab8:	2204      	movs	r2, #4
 8002aba:	409a      	lsls	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d026      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x7a>
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d021      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d107      	bne.n	8002aec <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0204 	bic.w	r2, r2, #4
 8002aea:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af8:	2104      	movs	r1, #4
 8002afa:	fa01 f202 	lsl.w	r2, r1, r2
 8002afe:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d071      	beq.n	8002bec <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002b10:	e06c      	b.n	8002bec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b16:	f003 031f 	and.w	r3, r3, #31
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	409a      	lsls	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	4013      	ands	r3, r2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d02e      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d029      	beq.n	8002b84 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0320 	and.w	r3, r3, #32
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f022 020a 	bic.w	r2, r2, #10
 8002b4c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b5a:	f003 021f 	and.w	r2, r3, #31
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2102      	movs	r1, #2
 8002b64:	fa01 f202 	lsl.w	r2, r1, r2
 8002b68:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d038      	beq.n	8002bec <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002b82:	e033      	b.n	8002bec <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	409a      	lsls	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4013      	ands	r3, r2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d02a      	beq.n	8002bee <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	f003 0308 	and.w	r3, r3, #8
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d025      	beq.n	8002bee <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f022 020e 	bic.w	r2, r2, #14
 8002bb0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d004      	beq.n	8002bee <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
}
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b087      	sub	sp, #28
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b16      	ldr	r3, [pc, #88]	@ (8002c60 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d802      	bhi.n	8002c12 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002c0c:	4b15      	ldr	r3, [pc, #84]	@ (8002c64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002c0e:	617b      	str	r3, [r7, #20]
 8002c10:	e001      	b.n	8002c16 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002c12:	4b15      	ldr	r3, [pc, #84]	@ (8002c68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002c14:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	3b08      	subs	r3, #8
 8002c22:	4a12      	ldr	r2, [pc, #72]	@ (8002c6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002c24:	fba2 2303 	umull	r2, r3, r2, r3
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	009a      	lsls	r2, r3, #2
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	461a      	mov	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a0b      	ldr	r2, [pc, #44]	@ (8002c70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002c42:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f003 031f 	and.w	r3, r3, #31
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8002c52:	bf00      	nop
 8002c54:	371c      	adds	r7, #28
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40020407 	.word	0x40020407
 8002c64:	40020800 	.word	0x40020800
 8002c68:	40020820 	.word	0x40020820
 8002c6c:	cccccccd 	.word	0xcccccccd
 8002c70:	40020880 	.word	0x40020880

08002c74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a08      	ldr	r2, [pc, #32]	@ (8002cb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c96:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f003 031f 	and.w	r3, r3, #31
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	409a      	lsls	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	1000823f 	.word	0x1000823f
 8002cb8:	40020940 	.word	0x40020940

08002cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cca:	e15a      	b.n	8002f82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	4013      	ands	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 814c 	beq.w	8002f7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d005      	beq.n	8002cfc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d130      	bne.n	8002d5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	693a      	ldr	r2, [r7, #16]
 8002d10:	4013      	ands	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d32:	2201      	movs	r2, #1
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3a:	43db      	mvns	r3, r3
 8002d3c:	693a      	ldr	r2, [r7, #16]
 8002d3e:	4013      	ands	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	f003 0201 	and.w	r2, r3, #1
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f003 0303 	and.w	r3, r3, #3
 8002d66:	2b03      	cmp	r3, #3
 8002d68:	d017      	beq.n	8002d9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	2203      	movs	r2, #3
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	689a      	ldr	r2, [r3, #8]
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	693a      	ldr	r2, [r7, #16]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d123      	bne.n	8002dee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	08da      	lsrs	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	3208      	adds	r2, #8
 8002dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002db2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	220f      	movs	r2, #15
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	691a      	ldr	r2, [r3, #16]
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	08da      	lsrs	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3208      	adds	r2, #8
 8002de8:	6939      	ldr	r1, [r7, #16]
 8002dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	2203      	movs	r2, #3
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	4013      	ands	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0203 	and.w	r2, r3, #3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	f000 80a6 	beq.w	8002f7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e30:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa0 <HAL_GPIO_Init+0x2e4>)
 8002e32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e34:	4a5a      	ldr	r2, [pc, #360]	@ (8002fa0 <HAL_GPIO_Init+0x2e4>)
 8002e36:	f043 0301 	orr.w	r3, r3, #1
 8002e3a:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e3c:	4b58      	ldr	r3, [pc, #352]	@ (8002fa0 <HAL_GPIO_Init+0x2e4>)
 8002e3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e48:	4a56      	ldr	r2, [pc, #344]	@ (8002fa4 <HAL_GPIO_Init+0x2e8>)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	089b      	lsrs	r3, r3, #2
 8002e4e:	3302      	adds	r3, #2
 8002e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	693a      	ldr	r2, [r7, #16]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e72:	d01f      	beq.n	8002eb4 <HAL_GPIO_Init+0x1f8>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa8 <HAL_GPIO_Init+0x2ec>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d019      	beq.n	8002eb0 <HAL_GPIO_Init+0x1f4>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a4b      	ldr	r2, [pc, #300]	@ (8002fac <HAL_GPIO_Init+0x2f0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_GPIO_Init+0x1f0>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a4a      	ldr	r2, [pc, #296]	@ (8002fb0 <HAL_GPIO_Init+0x2f4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_GPIO_Init+0x1ec>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a49      	ldr	r2, [pc, #292]	@ (8002fb4 <HAL_GPIO_Init+0x2f8>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d007      	beq.n	8002ea4 <HAL_GPIO_Init+0x1e8>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	4a48      	ldr	r2, [pc, #288]	@ (8002fb8 <HAL_GPIO_Init+0x2fc>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_GPIO_Init+0x1e4>
 8002e9c:	2305      	movs	r3, #5
 8002e9e:	e00a      	b.n	8002eb6 <HAL_GPIO_Init+0x1fa>
 8002ea0:	2306      	movs	r3, #6
 8002ea2:	e008      	b.n	8002eb6 <HAL_GPIO_Init+0x1fa>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	e006      	b.n	8002eb6 <HAL_GPIO_Init+0x1fa>
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e004      	b.n	8002eb6 <HAL_GPIO_Init+0x1fa>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0x1fa>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_GPIO_Init+0x1fa>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	f002 0203 	and.w	r2, r2, #3
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ec6:	4937      	ldr	r1, [pc, #220]	@ (8002fa4 <HAL_GPIO_Init+0x2e8>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ed4:	4b39      	ldr	r3, [pc, #228]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ef8:	4a30      	ldr	r2, [pc, #192]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002efe:	4b2f      	ldr	r3, [pc, #188]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002f22:	4a26      	ldr	r2, [pc, #152]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002f28:	4b24      	ldr	r3, [pc, #144]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002f52:	4b1a      	ldr	r3, [pc, #104]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f76:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_GPIO_Init+0x300>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f ae9d 	bne.w	8002ccc <HAL_GPIO_Init+0x10>
  }
}
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	48000400 	.word	0x48000400
 8002fac:	48000800 	.word	0x48000800
 8002fb0:	48000c00 	.word	0x48000c00
 8002fb4:	48001000 	.word	0x48001000
 8002fb8:	48001400 	.word	0x48001400
 8002fbc:	40010400 	.word	0x40010400

08002fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	807b      	strh	r3, [r7, #2]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fd0:	787b      	ldrb	r3, [r7, #1]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fdc:	e002      	b.n	8002fe4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fde:	887a      	ldrh	r2, [r7, #2]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e08d      	b.n	800311e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fe f8f8 	bl	800120c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	@ 0x24
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f022 0201 	bic.w	r2, r2, #1
 8003032:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003040:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003050:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d107      	bne.n	800306a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	e006      	b.n	8003078 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003076:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d108      	bne.n	8003092 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800308e:	605a      	str	r2, [r3, #4]
 8003090:	e007      	b.n	80030a2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80030b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80030b4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	691a      	ldr	r2, [r3, #16]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69d9      	ldr	r1, [r3, #28]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6a1a      	ldr	r2, [r3, #32]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}

08003126 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b20      	cmp	r3, #32
 800313a:	d138      	bne.n	80031ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003142:	2b01      	cmp	r3, #1
 8003144:	d101      	bne.n	800314a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003146:	2302      	movs	r3, #2
 8003148:	e032      	b.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2224      	movs	r2, #36	@ 0x24
 8003156:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0201 	bic.w	r2, r2, #1
 8003168:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003178:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6819      	ldr	r1, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	683a      	ldr	r2, [r7, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2220      	movs	r2, #32
 800319e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d139      	bne.n	8003246 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80031dc:	2302      	movs	r3, #2
 80031de:	e033      	b.n	8003248 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	@ 0x24
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800320e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	021b      	lsls	r3, r3, #8
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f042 0201 	orr.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	e000      	b.n	8003248 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003246:	2302      	movs	r3, #2
  }
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d141      	bne.n	80032e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003262:	4b4b      	ldr	r3, [pc, #300]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800326a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800326e:	d131      	bne.n	80032d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003270:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003272:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003276:	4a46      	ldr	r2, [pc, #280]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800327c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003280:	4b43      	ldr	r3, [pc, #268]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003288:	4a41      	ldr	r2, [pc, #260]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800328a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800328e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003290:	4b40      	ldr	r3, [pc, #256]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	2232      	movs	r2, #50	@ 0x32
 8003296:	fb02 f303 	mul.w	r3, r2, r3
 800329a:	4a3f      	ldr	r2, [pc, #252]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800329c:	fba2 2303 	umull	r2, r3, r2, r3
 80032a0:	0c9b      	lsrs	r3, r3, #18
 80032a2:	3301      	adds	r3, #1
 80032a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032a6:	e002      	b.n	80032ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032ae:	4b38      	ldr	r3, [pc, #224]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ba:	d102      	bne.n	80032c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f2      	bne.n	80032a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80032c2:	4b33      	ldr	r3, [pc, #204]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032ce:	d158      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e057      	b.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80032da:	4a2d      	ldr	r2, [pc, #180]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032e0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80032e4:	e04d      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032ec:	d141      	bne.n	8003372 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032ee:	4b28      	ldr	r3, [pc, #160]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80032f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032fa:	d131      	bne.n	8003360 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032fc:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003302:	4a23      	ldr	r2, [pc, #140]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003304:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003308:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800330c:	4b20      	ldr	r3, [pc, #128]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003314:	4a1e      	ldr	r2, [pc, #120]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003316:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800331a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800331c:	4b1d      	ldr	r3, [pc, #116]	@ (8003394 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2232      	movs	r2, #50	@ 0x32
 8003322:	fb02 f303 	mul.w	r3, r2, r3
 8003326:	4a1c      	ldr	r2, [pc, #112]	@ (8003398 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003328:	fba2 2303 	umull	r2, r3, r2, r3
 800332c:	0c9b      	lsrs	r3, r3, #18
 800332e:	3301      	adds	r3, #1
 8003330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003332:	e002      	b.n	800333a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	3b01      	subs	r3, #1
 8003338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800333a:	4b15      	ldr	r3, [pc, #84]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003346:	d102      	bne.n	800334e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f2      	bne.n	8003334 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003350:	695b      	ldr	r3, [r3, #20]
 8003352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800335a:	d112      	bne.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e011      	b.n	8003384 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003360:	4b0b      	ldr	r3, [pc, #44]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003366:	4a0a      	ldr	r2, [pc, #40]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800336c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003370:	e007      	b.n	8003382 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003372:	4b07      	ldr	r3, [pc, #28]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800337a:	4a05      	ldr	r2, [pc, #20]	@ (8003390 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800337c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003380:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr
 8003390:	40007000 	.word	0x40007000
 8003394:	20000000 	.word	0x20000000
 8003398:	431bde83 	.word	0x431bde83

0800339c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80033a0:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80033a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80033aa:	6093      	str	r3, [r2, #8]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40007000 	.word	0x40007000

080033bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d101      	bne.n	80033ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e2fe      	b.n	80039cc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d075      	beq.n	80034c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033da:	4b97      	ldr	r3, [pc, #604]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 030c 	and.w	r3, r3, #12
 80033e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033e4:	4b94      	ldr	r3, [pc, #592]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	f003 0303 	and.w	r3, r3, #3
 80033ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	2b0c      	cmp	r3, #12
 80033f2:	d102      	bne.n	80033fa <HAL_RCC_OscConfig+0x3e>
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b03      	cmp	r3, #3
 80033f8:	d002      	beq.n	8003400 <HAL_RCC_OscConfig+0x44>
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	2b08      	cmp	r3, #8
 80033fe:	d10b      	bne.n	8003418 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003400:	4b8d      	ldr	r3, [pc, #564]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d05b      	beq.n	80034c4 <HAL_RCC_OscConfig+0x108>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d157      	bne.n	80034c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e2d9      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003420:	d106      	bne.n	8003430 <HAL_RCC_OscConfig+0x74>
 8003422:	4b85      	ldr	r3, [pc, #532]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a84      	ldr	r2, [pc, #528]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003428:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	e01d      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003438:	d10c      	bne.n	8003454 <HAL_RCC_OscConfig+0x98>
 800343a:	4b7f      	ldr	r3, [pc, #508]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a7e      	ldr	r2, [pc, #504]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003440:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	4b7c      	ldr	r3, [pc, #496]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a7b      	ldr	r2, [pc, #492]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003450:	6013      	str	r3, [r2, #0]
 8003452:	e00b      	b.n	800346c <HAL_RCC_OscConfig+0xb0>
 8003454:	4b78      	ldr	r3, [pc, #480]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a77      	ldr	r2, [pc, #476]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 800345a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800345e:	6013      	str	r3, [r2, #0]
 8003460:	4b75      	ldr	r3, [pc, #468]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a74      	ldr	r2, [pc, #464]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003466:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800346a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d013      	beq.n	800349c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003474:	f7ff f86a 	bl	800254c <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800347a:	e008      	b.n	800348e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800347c:	f7ff f866 	bl	800254c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b64      	cmp	r3, #100	@ 0x64
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e29e      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348e:	4b6a      	ldr	r3, [pc, #424]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0xc0>
 800349a:	e014      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7ff f856 	bl	800254c <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7ff f852 	bl	800254c <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	@ 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e28a      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034b6:	4b60      	ldr	r3, [pc, #384]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xe8>
 80034c2:	e000      	b.n	80034c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d075      	beq.n	80035be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034d2:	4b59      	ldr	r3, [pc, #356]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034dc:	4b56      	ldr	r3, [pc, #344]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2b0c      	cmp	r3, #12
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_OscConfig+0x136>
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b02      	cmp	r3, #2
 80034f0:	d002      	beq.n	80034f8 <HAL_RCC_OscConfig+0x13c>
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d11f      	bne.n	8003538 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f8:	4b4f      	ldr	r3, [pc, #316]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003500:	2b00      	cmp	r3, #0
 8003502:	d005      	beq.n	8003510 <HAL_RCC_OscConfig+0x154>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e25d      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003510:	4b49      	ldr	r3, [pc, #292]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	061b      	lsls	r3, r3, #24
 800351e:	4946      	ldr	r1, [pc, #280]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003520:	4313      	orrs	r3, r2
 8003522:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003524:	4b45      	ldr	r3, [pc, #276]	@ (800363c <HAL_RCC_OscConfig+0x280>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe ffc3 	bl	80024b4 <HAL_InitTick>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d043      	beq.n	80035bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e249      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d023      	beq.n	8003588 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b3d      	ldr	r3, [pc, #244]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a3c      	ldr	r2, [pc, #240]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003546:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe fffe 	bl	800254c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fe fffa 	bl	800254c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e232      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003566:	4b34      	ldr	r3, [pc, #208]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003572:	4b31      	ldr	r3, [pc, #196]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	492d      	ldr	r1, [pc, #180]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003582:	4313      	orrs	r3, r2
 8003584:	604b      	str	r3, [r1, #4]
 8003586:	e01a      	b.n	80035be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003588:	4b2b      	ldr	r3, [pc, #172]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a2a      	ldr	r2, [pc, #168]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 800358e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003592:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fe ffda 	bl	800254c <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359a:	e008      	b.n	80035ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359c:	f7fe ffd6 	bl	800254c <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	2b02      	cmp	r3, #2
 80035a8:	d901      	bls.n	80035ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e20e      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035ae:	4b22      	ldr	r3, [pc, #136]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f0      	bne.n	800359c <HAL_RCC_OscConfig+0x1e0>
 80035ba:	e000      	b.n	80035be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80035bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d041      	beq.n	800364e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d01c      	beq.n	800360c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b19      	ldr	r3, [pc, #100]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80035d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035d8:	4a17      	ldr	r2, [pc, #92]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e2:	f7fe ffb3 	bl	800254c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fe ffaf 	bl	800254c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e1e7      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 80035fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0ef      	beq.n	80035ea <HAL_RCC_OscConfig+0x22e>
 800360a:	e020      	b.n	800364e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 800360e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_OscConfig+0x27c>)
 8003614:	f023 0301 	bic.w	r3, r3, #1
 8003618:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fe ff96 	bl	800254c <HAL_GetTick>
 8003620:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003622:	e00d      	b.n	8003640 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fe ff92 	bl	800254c <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d906      	bls.n	8003640 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e1ca      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003640:	4b8c      	ldr	r3, [pc, #560]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003642:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d1ea      	bne.n	8003624 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b00      	cmp	r3, #0
 8003658:	f000 80a6 	beq.w	80037a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800365c:	2300      	movs	r3, #0
 800365e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003660:	4b84      	ldr	r3, [pc, #528]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_OscConfig+0x2b4>
 800366c:	2301      	movs	r3, #1
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x2b6>
 8003670:	2300      	movs	r3, #0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d00d      	beq.n	8003692 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	4b7f      	ldr	r3, [pc, #508]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	4a7e      	ldr	r2, [pc, #504]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800367c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003680:	6593      	str	r3, [r2, #88]	@ 0x58
 8003682:	4b7c      	ldr	r3, [pc, #496]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003684:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368a:	60fb      	str	r3, [r7, #12]
 800368c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800368e:	2301      	movs	r3, #1
 8003690:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003692:	4b79      	ldr	r3, [pc, #484]	@ (8003878 <HAL_RCC_OscConfig+0x4bc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369a:	2b00      	cmp	r3, #0
 800369c:	d118      	bne.n	80036d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800369e:	4b76      	ldr	r3, [pc, #472]	@ (8003878 <HAL_RCC_OscConfig+0x4bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a75      	ldr	r2, [pc, #468]	@ (8003878 <HAL_RCC_OscConfig+0x4bc>)
 80036a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036aa:	f7fe ff4f 	bl	800254c <HAL_GetTick>
 80036ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b0:	e008      	b.n	80036c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b2:	f7fe ff4b 	bl	800254c <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e183      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003878 <HAL_RCC_OscConfig+0x4bc>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0f0      	beq.n	80036b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d108      	bne.n	80036ea <HAL_RCC_OscConfig+0x32e>
 80036d8:	4b66      	ldr	r3, [pc, #408]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036de:	4a65      	ldr	r2, [pc, #404]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80036e8:	e024      	b.n	8003734 <HAL_RCC_OscConfig+0x378>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d110      	bne.n	8003714 <HAL_RCC_OscConfig+0x358>
 80036f2:	4b60      	ldr	r3, [pc, #384]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80036f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80036fa:	f043 0304 	orr.w	r3, r3, #4
 80036fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003702:	4b5c      	ldr	r3, [pc, #368]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003708:	4a5a      	ldr	r2, [pc, #360]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003712:	e00f      	b.n	8003734 <HAL_RCC_OscConfig+0x378>
 8003714:	4b57      	ldr	r3, [pc, #348]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800371a:	4a56      	ldr	r2, [pc, #344]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800371c:	f023 0301 	bic.w	r3, r3, #1
 8003720:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003724:	4b53      	ldr	r3, [pc, #332]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800372a:	4a52      	ldr	r2, [pc, #328]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800372c:	f023 0304 	bic.w	r3, r3, #4
 8003730:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d016      	beq.n	800376a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800373c:	f7fe ff06 	bl	800254c <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003742:	e00a      	b.n	800375a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003744:	f7fe ff02 	bl	800254c <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003752:	4293      	cmp	r3, r2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e138      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800375a:	4b46      	ldr	r3, [pc, #280]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800375c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0ed      	beq.n	8003744 <HAL_RCC_OscConfig+0x388>
 8003768:	e015      	b.n	8003796 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800376a:	f7fe feef 	bl	800254c <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003770:	e00a      	b.n	8003788 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fe feeb 	bl	800254c <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003780:	4293      	cmp	r3, r2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e121      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003788:	4b3a      	ldr	r3, [pc, #232]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800378a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800378e:	f003 0302 	and.w	r3, r3, #2
 8003792:	2b00      	cmp	r3, #0
 8003794:	d1ed      	bne.n	8003772 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003796:	7ffb      	ldrb	r3, [r7, #31]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d105      	bne.n	80037a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800379c:	4b35      	ldr	r3, [pc, #212]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800379e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a0:	4a34      	ldr	r2, [pc, #208]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80037a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0320 	and.w	r3, r3, #32
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d03c      	beq.n	800382e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d01c      	beq.n	80037f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037c2:	4a2c      	ldr	r2, [pc, #176]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037cc:	f7fe febe 	bl	800254c <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d4:	f7fe feba 	bl	800254c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0f2      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037e6:	4b23      	ldr	r3, [pc, #140]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80037e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ef      	beq.n	80037d4 <HAL_RCC_OscConfig+0x418>
 80037f4:	e01b      	b.n	800382e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037f6:	4b1f      	ldr	r3, [pc, #124]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80037f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80037fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003806:	f7fe fea1 	bl	800254c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800380e:	f7fe fe9d 	bl	800254c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e0d5      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003820:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003822:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1ef      	bne.n	800380e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69db      	ldr	r3, [r3, #28]
 8003832:	2b00      	cmp	r3, #0
 8003834:	f000 80c9 	beq.w	80039ca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003838:	4b0e      	ldr	r3, [pc, #56]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f003 030c 	and.w	r3, r3, #12
 8003840:	2b0c      	cmp	r3, #12
 8003842:	f000 8083 	beq.w	800394c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	2b02      	cmp	r3, #2
 800384c:	d15e      	bne.n	800390c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800384e:	4b09      	ldr	r3, [pc, #36]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a08      	ldr	r2, [pc, #32]	@ (8003874 <HAL_RCC_OscConfig+0x4b8>)
 8003854:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385a:	f7fe fe77 	bl	800254c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003860:	e00c      	b.n	800387c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe fe73 	bl	800254c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d905      	bls.n	800387c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e0ab      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800387c:	4b55      	ldr	r3, [pc, #340]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1ec      	bne.n	8003862 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003888:	4b52      	ldr	r3, [pc, #328]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	4b52      	ldr	r3, [pc, #328]	@ (80039d8 <HAL_RCC_OscConfig+0x61c>)
 800388e:	4013      	ands	r3, r2
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	6a11      	ldr	r1, [r2, #32]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003898:	3a01      	subs	r2, #1
 800389a:	0112      	lsls	r2, r2, #4
 800389c:	4311      	orrs	r1, r2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80038a2:	0212      	lsls	r2, r2, #8
 80038a4:	4311      	orrs	r1, r2
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80038aa:	0852      	lsrs	r2, r2, #1
 80038ac:	3a01      	subs	r2, #1
 80038ae:	0552      	lsls	r2, r2, #21
 80038b0:	4311      	orrs	r1, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80038b6:	0852      	lsrs	r2, r2, #1
 80038b8:	3a01      	subs	r2, #1
 80038ba:	0652      	lsls	r2, r2, #25
 80038bc:	4311      	orrs	r1, r2
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038c2:	06d2      	lsls	r2, r2, #27
 80038c4:	430a      	orrs	r2, r1
 80038c6:	4943      	ldr	r1, [pc, #268]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 80038c8:	4313      	orrs	r3, r2
 80038ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038cc:	4b41      	ldr	r3, [pc, #260]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a40      	ldr	r2, [pc, #256]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 80038d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038d8:	4b3e      	ldr	r3, [pc, #248]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4a3d      	ldr	r2, [pc, #244]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 80038de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe fe32 	bl	800254c <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fe2e 	bl	800254c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e066      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038fe:	4b35      	ldr	r3, [pc, #212]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x530>
 800390a:	e05e      	b.n	80039ca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800390c:	4b31      	ldr	r3, [pc, #196]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a30      	ldr	r2, [pc, #192]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 8003912:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003918:	f7fe fe18 	bl	800254c <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003920:	f7fe fe14 	bl	800254c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e04c      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003932:	4b28      	ldr	r3, [pc, #160]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800393e:	4b25      	ldr	r3, [pc, #148]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 8003940:	68da      	ldr	r2, [r3, #12]
 8003942:	4924      	ldr	r1, [pc, #144]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 8003944:	4b25      	ldr	r3, [pc, #148]	@ (80039dc <HAL_RCC_OscConfig+0x620>)
 8003946:	4013      	ands	r3, r2
 8003948:	60cb      	str	r3, [r1, #12]
 800394a:	e03e      	b.n	80039ca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e039      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003958:	4b1e      	ldr	r3, [pc, #120]	@ (80039d4 <HAL_RCC_OscConfig+0x618>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	f003 0203 	and.w	r2, r3, #3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	429a      	cmp	r2, r3
 800396a:	d12c      	bne.n	80039c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003976:	3b01      	subs	r3, #1
 8003978:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	429a      	cmp	r2, r3
 800397c:	d123      	bne.n	80039c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003988:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d11b      	bne.n	80039c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003998:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800399a:	429a      	cmp	r2, r3
 800399c:	d113      	bne.n	80039c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039a8:	085b      	lsrs	r3, r3, #1
 80039aa:	3b01      	subs	r3, #1
 80039ac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d109      	bne.n	80039c6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039bc:	085b      	lsrs	r3, r3, #1
 80039be:	3b01      	subs	r3, #1
 80039c0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3720      	adds	r7, #32
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000
 80039d8:	019f800c 	.word	0x019f800c
 80039dc:	feeefffc 	.word	0xfeeefffc

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ea:	2300      	movs	r3, #0
 80039ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d101      	bne.n	80039f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e11e      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039f8:	4b91      	ldr	r3, [pc, #580]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d910      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b8e      	ldr	r3, [pc, #568]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 020f 	bic.w	r2, r3, #15
 8003a0e:	498c      	ldr	r1, [pc, #560]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b8a      	ldr	r3, [pc, #552]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e106      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d073      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d129      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a3c:	4b81      	ldr	r3, [pc, #516]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e0f4      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a4c:	f000 f99e 	bl	8003d8c <RCC_GetSysClockFreqFromPLLSource>
 8003a50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	4a7c      	ldr	r2, [pc, #496]	@ (8003c48 <HAL_RCC_ClockConfig+0x268>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d93f      	bls.n	8003ada <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a5a:	4b7a      	ldr	r3, [pc, #488]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d009      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d033      	beq.n	8003ada <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d12f      	bne.n	8003ada <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a7a:	4b72      	ldr	r3, [pc, #456]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a82:	4a70      	ldr	r2, [pc, #448]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a8a:	2380      	movs	r3, #128	@ 0x80
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e024      	b.n	8003ada <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a98:	4b6a      	ldr	r3, [pc, #424]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d109      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0c6      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aa8:	4b66      	ldr	r3, [pc, #408]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0be      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ab8:	f000 f8ce 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4a61      	ldr	r2, [pc, #388]	@ (8003c48 <HAL_RCC_ClockConfig+0x268>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d909      	bls.n	8003ada <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ace:	4a5d      	ldr	r2, [pc, #372]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ad4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ad6:	2380      	movs	r3, #128	@ 0x80
 8003ad8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ada:	4b5a      	ldr	r3, [pc, #360]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f023 0203 	bic.w	r2, r3, #3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	4957      	ldr	r1, [pc, #348]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aec:	f7fe fd2e 	bl	800254c <HAL_GetTick>
 8003af0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003af2:	e00a      	b.n	8003b0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003af4:	f7fe fd2a 	bl	800254c <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d901      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e095      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 020c 	and.w	r2, r3, #12
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d1eb      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d023      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b43      	ldr	r3, [pc, #268]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a42      	ldr	r2, [pc, #264]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d007      	beq.n	8003b5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b4c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b54:	4a3b      	ldr	r2, [pc, #236]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b56:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003b5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b5c:	4b39      	ldr	r3, [pc, #228]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4936      	ldr	r1, [pc, #216]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	608b      	str	r3, [r1, #8]
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	2b80      	cmp	r3, #128	@ 0x80
 8003b74:	d105      	bne.n	8003b82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b76:	4b33      	ldr	r3, [pc, #204]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	4a32      	ldr	r2, [pc, #200]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003b7c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b82:	4b2f      	ldr	r3, [pc, #188]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d21d      	bcs.n	8003bcc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b90:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f023 020f 	bic.w	r2, r3, #15
 8003b98:	4929      	ldr	r1, [pc, #164]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe fcd4 	bl	800254c <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ba6:	e00a      	b.n	8003bbe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba8:	f7fe fcd0 	bl	800254c <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e03b      	b.n	8003c36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbe:	4b20      	ldr	r3, [pc, #128]	@ (8003c40 <HAL_RCC_ClockConfig+0x260>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1ed      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0304 	and.w	r3, r3, #4
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d008      	beq.n	8003bea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4917      	ldr	r1, [pc, #92]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d009      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf6:	4b13      	ldr	r3, [pc, #76]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	490f      	ldr	r1, [pc, #60]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c0a:	f000 f825 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <HAL_RCC_ClockConfig+0x264>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	091b      	lsrs	r3, r3, #4
 8003c16:	f003 030f 	and.w	r3, r3, #15
 8003c1a:	490c      	ldr	r1, [pc, #48]	@ (8003c4c <HAL_RCC_ClockConfig+0x26c>)
 8003c1c:	5ccb      	ldrb	r3, [r1, r3]
 8003c1e:	f003 031f 	and.w	r3, r3, #31
 8003c22:	fa22 f303 	lsr.w	r3, r2, r3
 8003c26:	4a0a      	ldr	r2, [pc, #40]	@ (8003c50 <HAL_RCC_ClockConfig+0x270>)
 8003c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c54 <HAL_RCC_ClockConfig+0x274>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fe fc40 	bl	80024b4 <HAL_InitTick>
 8003c34:	4603      	mov	r3, r0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3718      	adds	r7, #24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	40022000 	.word	0x40022000
 8003c44:	40021000 	.word	0x40021000
 8003c48:	04c4b400 	.word	0x04c4b400
 8003c4c:	0800b5b0 	.word	0x0800b5b0
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b087      	sub	sp, #28
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
 8003c66:	2b04      	cmp	r3, #4
 8003c68:	d102      	bne.n	8003c70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c6c:	613b      	str	r3, [r7, #16]
 8003c6e:	e047      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c70:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d102      	bne.n	8003c82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c7c:	4b26      	ldr	r3, [pc, #152]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c7e:	613b      	str	r3, [r7, #16]
 8003c80:	e03e      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c82:	4b23      	ldr	r3, [pc, #140]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b0c      	cmp	r3, #12
 8003c8c:	d136      	bne.n	8003cfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c8e:	4b20      	ldr	r3, [pc, #128]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c98:	4b1d      	ldr	r3, [pc, #116]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	091b      	lsrs	r3, r3, #4
 8003c9e:	f003 030f 	and.w	r3, r3, #15
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2b03      	cmp	r3, #3
 8003caa:	d10c      	bne.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cac:	4a1a      	ldr	r2, [pc, #104]	@ (8003d18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb4:	4a16      	ldr	r2, [pc, #88]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb6:	68d2      	ldr	r2, [r2, #12]
 8003cb8:	0a12      	lsrs	r2, r2, #8
 8003cba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cbe:	fb02 f303 	mul.w	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
      break;
 8003cc4:	e00c      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003cc6:	4a13      	ldr	r2, [pc, #76]	@ (8003d14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	4a10      	ldr	r2, [pc, #64]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cd0:	68d2      	ldr	r2, [r2, #12]
 8003cd2:	0a12      	lsrs	r2, r2, #8
 8003cd4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003cd8:	fb02 f303 	mul.w	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
      break;
 8003cde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0e5b      	lsrs	r3, r3, #25
 8003ce6:	f003 0303 	and.w	r3, r3, #3
 8003cea:	3301      	adds	r3, #1
 8003cec:	005b      	lsls	r3, r3, #1
 8003cee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	e001      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003d00:	693b      	ldr	r3, [r7, #16]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	371c      	adds	r7, #28
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	40021000 	.word	0x40021000
 8003d14:	00f42400 	.word	0x00f42400
 8003d18:	007a1200 	.word	0x007a1200

08003d1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d20:	4b03      	ldr	r3, [pc, #12]	@ (8003d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d22:	681b      	ldr	r3, [r3, #0]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000000 	.word	0x20000000

08003d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d38:	f7ff fff0 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	4b06      	ldr	r3, [pc, #24]	@ (8003d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	0a1b      	lsrs	r3, r3, #8
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	4904      	ldr	r1, [pc, #16]	@ (8003d5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d4a:	5ccb      	ldrb	r3, [r1, r3]
 8003d4c:	f003 031f 	and.w	r3, r3, #31
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	0800b5c0 	.word	0x0800b5c0

08003d60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d64:	f7ff ffda 	bl	8003d1c <HAL_RCC_GetHCLKFreq>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	4b06      	ldr	r3, [pc, #24]	@ (8003d84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	0adb      	lsrs	r3, r3, #11
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	4904      	ldr	r1, [pc, #16]	@ (8003d88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d76:	5ccb      	ldrb	r3, [r1, r3]
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40021000 	.word	0x40021000
 8003d88:	0800b5c0 	.word	0x0800b5c0

08003d8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d92:	4b1e      	ldr	r3, [pc, #120]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0303 	and.w	r3, r3, #3
 8003d9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	3301      	adds	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	d10c      	bne.n	8003dca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003db0:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db8:	4a14      	ldr	r2, [pc, #80]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dba:	68d2      	ldr	r2, [r2, #12]
 8003dbc:	0a12      	lsrs	r2, r2, #8
 8003dbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	617b      	str	r3, [r7, #20]
    break;
 8003dc8:	e00c      	b.n	8003de4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dca:	4a12      	ldr	r2, [pc, #72]	@ (8003e14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd2:	4a0e      	ldr	r2, [pc, #56]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	0a12      	lsrs	r2, r2, #8
 8003dd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003ddc:	fb02 f303 	mul.w	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
    break;
 8003de2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003de4:	4b09      	ldr	r3, [pc, #36]	@ (8003e0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	0e5b      	lsrs	r3, r3, #25
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	3301      	adds	r3, #1
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003dfe:	687b      	ldr	r3, [r7, #4]
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	007a1200 	.word	0x007a1200
 8003e14:	00f42400 	.word	0x00f42400

08003e18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e20:	2300      	movs	r3, #0
 8003e22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e24:	2300      	movs	r3, #0
 8003e26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 8098 	beq.w	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	2300      	movs	r3, #0
 8003e38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3a:	4b43      	ldr	r3, [pc, #268]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d10d      	bne.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e46:	4b40      	ldr	r3, [pc, #256]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4a:	4a3f      	ldr	r2, [pc, #252]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e50:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e52:	4b3d      	ldr	r3, [pc, #244]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e62:	4b3a      	ldr	r3, [pc, #232]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a39      	ldr	r2, [pc, #228]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e6e:	f7fe fb6d 	bl	800254c <HAL_GetTick>
 8003e72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e74:	e009      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e76:	f7fe fb69 	bl	800254c <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	2b02      	cmp	r3, #2
 8003e82:	d902      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	74fb      	strb	r3, [r7, #19]
        break;
 8003e88:	e005      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e8a:	4b30      	ldr	r3, [pc, #192]	@ (8003f4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0ef      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d159      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e9c:	4b2a      	ldr	r3, [pc, #168]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d01e      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d019      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eb8:	4b23      	ldr	r3, [pc, #140]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ec4:	4b20      	ldr	r3, [pc, #128]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ed0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ed4:	4b1c      	ldr	r3, [pc, #112]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eda:	4a1b      	ldr	r2, [pc, #108]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ee0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ee4:	4a18      	ldr	r2, [pc, #96]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d016      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef6:	f7fe fb29 	bl	800254c <HAL_GetTick>
 8003efa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003efc:	e00b      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003efe:	f7fe fb25 	bl	800254c <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d902      	bls.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	74fb      	strb	r3, [r7, #19]
            break;
 8003f14:	e006      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f16:	4b0c      	ldr	r3, [pc, #48]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0ec      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f24:	7cfb      	ldrb	r3, [r7, #19]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10b      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f2a:	4b07      	ldr	r3, [pc, #28]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f38:	4903      	ldr	r1, [pc, #12]	@ (8003f48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003f40:	e008      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f42:	7cfb      	ldrb	r3, [r7, #19]
 8003f44:	74bb      	strb	r3, [r7, #18]
 8003f46:	e005      	b.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f50:	7cfb      	ldrb	r3, [r7, #19]
 8003f52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f54:	7c7b      	ldrb	r3, [r7, #17]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f5a:	4ba7      	ldr	r3, [pc, #668]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5e:	4aa6      	ldr	r2, [pc, #664]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f72:	4ba1      	ldr	r3, [pc, #644]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f78:	f023 0203 	bic.w	r2, r3, #3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	499d      	ldr	r1, [pc, #628]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f94:	4b98      	ldr	r3, [pc, #608]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9a:	f023 020c 	bic.w	r2, r3, #12
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4995      	ldr	r1, [pc, #596]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb6:	4b90      	ldr	r3, [pc, #576]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fbc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	498c      	ldr	r1, [pc, #560]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd8:	4b87      	ldr	r3, [pc, #540]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fde:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	4984      	ldr	r1, [pc, #528]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ffa:	4b7f      	ldr	r3, [pc, #508]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004000:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	497b      	ldr	r1, [pc, #492]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400a:	4313      	orrs	r3, r2
 800400c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800401c:	4b76      	ldr	r3, [pc, #472]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004022:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	4973      	ldr	r1, [pc, #460]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800402c:	4313      	orrs	r3, r2
 800402e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800403e:	4b6e      	ldr	r3, [pc, #440]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004044:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	69db      	ldr	r3, [r3, #28]
 800404c:	496a      	ldr	r1, [pc, #424]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00a      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004060:	4b65      	ldr	r3, [pc, #404]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004066:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	4962      	ldr	r1, [pc, #392]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004070:	4313      	orrs	r3, r2
 8004072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004082:	4b5d      	ldr	r3, [pc, #372]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004088:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	4959      	ldr	r1, [pc, #356]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004092:	4313      	orrs	r3, r2
 8004094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040a4:	4b54      	ldr	r3, [pc, #336]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040aa:	f023 0203 	bic.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b2:	4951      	ldr	r1, [pc, #324]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c6:	4b4c      	ldr	r3, [pc, #304]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	4948      	ldr	r1, [pc, #288]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d015      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040e8:	4b43      	ldr	r3, [pc, #268]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f6:	4940      	ldr	r1, [pc, #256]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004102:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004106:	d105      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004108:	4b3b      	ldr	r3, [pc, #236]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a3a      	ldr	r2, [pc, #232]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004112:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800411c:	2b00      	cmp	r3, #0
 800411e:	d015      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004120:	4b35      	ldr	r3, [pc, #212]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004126:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412e:	4932      	ldr	r1, [pc, #200]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800413a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800413e:	d105      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004140:	4b2d      	ldr	r3, [pc, #180]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	4a2c      	ldr	r2, [pc, #176]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004146:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800414a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d015      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004158:	4b27      	ldr	r3, [pc, #156]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	4924      	ldr	r1, [pc, #144]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004168:	4313      	orrs	r3, r2
 800416a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004172:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004176:	d105      	bne.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004178:	4b1f      	ldr	r3, [pc, #124]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a1e      	ldr	r2, [pc, #120]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004182:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d015      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004190:	4b19      	ldr	r3, [pc, #100]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800419e:	4916      	ldr	r1, [pc, #88]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ae:	d105      	bne.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b11      	ldr	r3, [pc, #68]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a10      	ldr	r2, [pc, #64]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d019      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c8:	4b0b      	ldr	r3, [pc, #44]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	4908      	ldr	r1, [pc, #32]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041e6:	d109      	bne.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e8:	4b03      	ldr	r3, [pc, #12]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	4a02      	ldr	r2, [pc, #8]	@ (80041f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041f2:	60d3      	str	r3, [r2, #12]
 80041f4:	e002      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80041f6:	bf00      	nop
 80041f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004204:	2b00      	cmp	r3, #0
 8004206:	d015      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004208:	4b29      	ldr	r3, [pc, #164]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800420a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800420e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	4926      	ldr	r1, [pc, #152]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004218:	4313      	orrs	r3, r2
 800421a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004222:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004226:	d105      	bne.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004228:	4b21      	ldr	r3, [pc, #132]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422a:	68db      	ldr	r3, [r3, #12]
 800422c:	4a20      	ldr	r2, [pc, #128]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800422e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004232:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d015      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004240:	4b1b      	ldr	r3, [pc, #108]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004242:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004246:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800424e:	4918      	ldr	r1, [pc, #96]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800425a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800425e:	d105      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004260:	4b13      	ldr	r3, [pc, #76]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800426a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d015      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004278:	4b0d      	ldr	r3, [pc, #52]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800427a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800427e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004286:	490a      	ldr	r1, [pc, #40]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004292:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004296:	d105      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004298:	4b05      	ldr	r3, [pc, #20]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	4a04      	ldr	r2, [pc, #16]	@ (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80042a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000

080042b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d101      	bne.n	80042c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042c2:	2301      	movs	r3, #1
 80042c4:	e049      	b.n	800435a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d106      	bne.n	80042e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f7fd fbf6 	bl	8001acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	3304      	adds	r3, #4
 80042f0:	4619      	mov	r1, r3
 80042f2:	4610      	mov	r0, r2
 80042f4:	f000 fac0 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3708      	adds	r7, #8
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004362:	b580      	push	{r7, lr}
 8004364:	b082      	sub	sp, #8
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e049      	b.n	8004408 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d106      	bne.n	800438e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 f841 	bl	8004410 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	3304      	adds	r3, #4
 800439e:	4619      	mov	r1, r3
 80043a0:	4610      	mov	r0, r2
 80043a2:	f000 fa69 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2201      	movs	r2, #1
 80043aa:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2201      	movs	r2, #1
 80043e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2201      	movs	r2, #1
 80043fa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	3708      	adds	r7, #8
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}

08004410 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b086      	sub	sp, #24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004430:	2300      	movs	r3, #0
 8004432:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800443a:	2b01      	cmp	r3, #1
 800443c:	d101      	bne.n	8004442 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800443e:	2302      	movs	r3, #2
 8004440:	e0ff      	b.n	8004642 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b14      	cmp	r3, #20
 800444e:	f200 80f0 	bhi.w	8004632 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004452:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	080044ad 	.word	0x080044ad
 800445c:	08004633 	.word	0x08004633
 8004460:	08004633 	.word	0x08004633
 8004464:	08004633 	.word	0x08004633
 8004468:	080044ed 	.word	0x080044ed
 800446c:	08004633 	.word	0x08004633
 8004470:	08004633 	.word	0x08004633
 8004474:	08004633 	.word	0x08004633
 8004478:	0800452f 	.word	0x0800452f
 800447c:	08004633 	.word	0x08004633
 8004480:	08004633 	.word	0x08004633
 8004484:	08004633 	.word	0x08004633
 8004488:	0800456f 	.word	0x0800456f
 800448c:	08004633 	.word	0x08004633
 8004490:	08004633 	.word	0x08004633
 8004494:	08004633 	.word	0x08004633
 8004498:	080045b1 	.word	0x080045b1
 800449c:	08004633 	.word	0x08004633
 80044a0:	08004633 	.word	0x08004633
 80044a4:	08004633 	.word	0x08004633
 80044a8:	080045f1 	.word	0x080045f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68b9      	ldr	r1, [r7, #8]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fa94 	bl	80049e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	699a      	ldr	r2, [r3, #24]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f042 0208 	orr.w	r2, r2, #8
 80044c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f022 0204 	bic.w	r2, r2, #4
 80044d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6999      	ldr	r1, [r3, #24]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	619a      	str	r2, [r3, #24]
      break;
 80044ea:	e0a5      	b.n	8004638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68b9      	ldr	r1, [r7, #8]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 fb0e 	bl	8004b14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004506:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699a      	ldr	r2, [r3, #24]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004516:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	6999      	ldr	r1, [r3, #24]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	021a      	lsls	r2, r3, #8
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	430a      	orrs	r2, r1
 800452a:	619a      	str	r2, [r3, #24]
      break;
 800452c:	e084      	b.n	8004638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68b9      	ldr	r1, [r7, #8]
 8004534:	4618      	mov	r0, r3
 8004536:	f000 fb81 	bl	8004c3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f042 0208 	orr.w	r2, r2, #8
 8004548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	69da      	ldr	r2, [r3, #28]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0204 	bic.w	r2, r2, #4
 8004558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69d9      	ldr	r1, [r3, #28]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	691a      	ldr	r2, [r3, #16]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	61da      	str	r2, [r3, #28]
      break;
 800456c:	e064      	b.n	8004638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	4618      	mov	r0, r3
 8004576:	f000 fbf3 	bl	8004d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004588:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004598:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	69d9      	ldr	r1, [r3, #28]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	021a      	lsls	r2, r3, #8
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	61da      	str	r2, [r3, #28]
      break;
 80045ae:	e043      	b.n	8004638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68b9      	ldr	r1, [r7, #8]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fc66 	bl	8004e88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0208 	orr.w	r2, r2, #8
 80045ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0204 	bic.w	r2, r2, #4
 80045da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	430a      	orrs	r2, r1
 80045ec:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80045ee:	e023      	b.n	8004638 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68b9      	ldr	r1, [r7, #8]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f000 fcb0 	bl	8004f5c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800460a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800461a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	021a      	lsls	r2, r3, #8
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004630:	e002      	b.n	8004638 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	75fb      	strb	r3, [r7, #23]
      break;
 8004636:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004640:	7dfb      	ldrb	r3, [r7, #23]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop

0800464c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004660:	2b01      	cmp	r3, #1
 8004662:	d101      	bne.n	8004668 <HAL_TIM_ConfigClockSource+0x1c>
 8004664:	2302      	movs	r3, #2
 8004666:	e0f6      	b.n	8004856 <HAL_TIM_ConfigClockSource+0x20a>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2202      	movs	r2, #2
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004686:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800468a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004692:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a6f      	ldr	r2, [pc, #444]	@ (8004860 <HAL_TIM_ConfigClockSource+0x214>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	f000 80c1 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 80046a8:	4a6d      	ldr	r2, [pc, #436]	@ (8004860 <HAL_TIM_ConfigClockSource+0x214>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	f200 80c6 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 80046b0:	4a6c      	ldr	r2, [pc, #432]	@ (8004864 <HAL_TIM_ConfigClockSource+0x218>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	f000 80b9 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 80046b8:	4a6a      	ldr	r2, [pc, #424]	@ (8004864 <HAL_TIM_ConfigClockSource+0x218>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	f200 80be 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 80046c0:	4a69      	ldr	r2, [pc, #420]	@ (8004868 <HAL_TIM_ConfigClockSource+0x21c>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f000 80b1 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 80046c8:	4a67      	ldr	r2, [pc, #412]	@ (8004868 <HAL_TIM_ConfigClockSource+0x21c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	f200 80b6 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 80046d0:	4a66      	ldr	r2, [pc, #408]	@ (800486c <HAL_TIM_ConfigClockSource+0x220>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	f000 80a9 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 80046d8:	4a64      	ldr	r2, [pc, #400]	@ (800486c <HAL_TIM_ConfigClockSource+0x220>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	f200 80ae 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 80046e0:	4a63      	ldr	r2, [pc, #396]	@ (8004870 <HAL_TIM_ConfigClockSource+0x224>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	f000 80a1 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 80046e8:	4a61      	ldr	r2, [pc, #388]	@ (8004870 <HAL_TIM_ConfigClockSource+0x224>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	f200 80a6 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 80046f0:	4a60      	ldr	r2, [pc, #384]	@ (8004874 <HAL_TIM_ConfigClockSource+0x228>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	f000 8099 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 80046f8:	4a5e      	ldr	r2, [pc, #376]	@ (8004874 <HAL_TIM_ConfigClockSource+0x228>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	f200 809e 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 8004700:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004704:	f000 8091 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 8004708:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800470c:	f200 8096 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 8004710:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004714:	f000 8089 	beq.w	800482a <HAL_TIM_ConfigClockSource+0x1de>
 8004718:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471c:	f200 808e 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 8004720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004724:	d03e      	beq.n	80047a4 <HAL_TIM_ConfigClockSource+0x158>
 8004726:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800472a:	f200 8087 	bhi.w	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 800472e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004732:	f000 8086 	beq.w	8004842 <HAL_TIM_ConfigClockSource+0x1f6>
 8004736:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473a:	d87f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 800473c:	2b70      	cmp	r3, #112	@ 0x70
 800473e:	d01a      	beq.n	8004776 <HAL_TIM_ConfigClockSource+0x12a>
 8004740:	2b70      	cmp	r3, #112	@ 0x70
 8004742:	d87b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 8004744:	2b60      	cmp	r3, #96	@ 0x60
 8004746:	d050      	beq.n	80047ea <HAL_TIM_ConfigClockSource+0x19e>
 8004748:	2b60      	cmp	r3, #96	@ 0x60
 800474a:	d877      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 800474c:	2b50      	cmp	r3, #80	@ 0x50
 800474e:	d03c      	beq.n	80047ca <HAL_TIM_ConfigClockSource+0x17e>
 8004750:	2b50      	cmp	r3, #80	@ 0x50
 8004752:	d873      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 8004754:	2b40      	cmp	r3, #64	@ 0x40
 8004756:	d058      	beq.n	800480a <HAL_TIM_ConfigClockSource+0x1be>
 8004758:	2b40      	cmp	r3, #64	@ 0x40
 800475a:	d86f      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 800475c:	2b30      	cmp	r3, #48	@ 0x30
 800475e:	d064      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x1de>
 8004760:	2b30      	cmp	r3, #48	@ 0x30
 8004762:	d86b      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 8004764:	2b20      	cmp	r3, #32
 8004766:	d060      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x1de>
 8004768:	2b20      	cmp	r3, #32
 800476a:	d867      	bhi.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
 800476c:	2b00      	cmp	r3, #0
 800476e:	d05c      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x1de>
 8004770:	2b10      	cmp	r3, #16
 8004772:	d05a      	beq.n	800482a <HAL_TIM_ConfigClockSource+0x1de>
 8004774:	e062      	b.n	800483c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004786:	f000 fcd1 	bl	800512c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004798:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	609a      	str	r2, [r3, #8]
      break;
 80047a2:	e04f      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047b4:	f000 fcba 	bl	800512c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047c6:	609a      	str	r2, [r3, #8]
      break;
 80047c8:	e03c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d6:	461a      	mov	r2, r3
 80047d8:	f000 fc2c 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2150      	movs	r1, #80	@ 0x50
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fc85 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 80047e8:	e02c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047f6:	461a      	mov	r2, r3
 80047f8:	f000 fc4b 	bl	8005092 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2160      	movs	r1, #96	@ 0x60
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fc75 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004808:	e01c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004816:	461a      	mov	r2, r3
 8004818:	f000 fc0c 	bl	8005034 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2140      	movs	r1, #64	@ 0x40
 8004822:	4618      	mov	r0, r3
 8004824:	f000 fc65 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 8004828:	e00c      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4619      	mov	r1, r3
 8004834:	4610      	mov	r0, r2
 8004836:	f000 fc5c 	bl	80050f2 <TIM_ITRx_SetConfig>
      break;
 800483a:	e003      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	73fb      	strb	r3, [r7, #15]
      break;
 8004840:	e000      	b.n	8004844 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8004842:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004854:	7bfb      	ldrb	r3, [r7, #15]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	00100070 	.word	0x00100070
 8004864:	00100060 	.word	0x00100060
 8004868:	00100050 	.word	0x00100050
 800486c:	00100040 	.word	0x00100040
 8004870:	00100030 	.word	0x00100030
 8004874:	00100020 	.word	0x00100020

08004878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a4c      	ldr	r2, [pc, #304]	@ (80049bc <TIM_Base_SetConfig+0x144>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d017      	beq.n	80048c0 <TIM_Base_SetConfig+0x48>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004896:	d013      	beq.n	80048c0 <TIM_Base_SetConfig+0x48>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a49      	ldr	r2, [pc, #292]	@ (80049c0 <TIM_Base_SetConfig+0x148>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00f      	beq.n	80048c0 <TIM_Base_SetConfig+0x48>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a48      	ldr	r2, [pc, #288]	@ (80049c4 <TIM_Base_SetConfig+0x14c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <TIM_Base_SetConfig+0x48>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a47      	ldr	r2, [pc, #284]	@ (80049c8 <TIM_Base_SetConfig+0x150>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d007      	beq.n	80048c0 <TIM_Base_SetConfig+0x48>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a46      	ldr	r2, [pc, #280]	@ (80049cc <TIM_Base_SetConfig+0x154>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d003      	beq.n	80048c0 <TIM_Base_SetConfig+0x48>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a45      	ldr	r2, [pc, #276]	@ (80049d0 <TIM_Base_SetConfig+0x158>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d108      	bne.n	80048d2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a39      	ldr	r2, [pc, #228]	@ (80049bc <TIM_Base_SetConfig+0x144>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d023      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e0:	d01f      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a36      	ldr	r2, [pc, #216]	@ (80049c0 <TIM_Base_SetConfig+0x148>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d01b      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a35      	ldr	r2, [pc, #212]	@ (80049c4 <TIM_Base_SetConfig+0x14c>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d017      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a34      	ldr	r2, [pc, #208]	@ (80049c8 <TIM_Base_SetConfig+0x150>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a33      	ldr	r2, [pc, #204]	@ (80049cc <TIM_Base_SetConfig+0x154>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d00f      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a33      	ldr	r2, [pc, #204]	@ (80049d4 <TIM_Base_SetConfig+0x15c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d00b      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a32      	ldr	r2, [pc, #200]	@ (80049d8 <TIM_Base_SetConfig+0x160>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d007      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a31      	ldr	r2, [pc, #196]	@ (80049dc <TIM_Base_SetConfig+0x164>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d003      	beq.n	8004922 <TIM_Base_SetConfig+0xaa>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a2c      	ldr	r2, [pc, #176]	@ (80049d0 <TIM_Base_SetConfig+0x158>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d108      	bne.n	8004934 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4313      	orrs	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a18      	ldr	r2, [pc, #96]	@ (80049bc <TIM_Base_SetConfig+0x144>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d013      	beq.n	8004988 <TIM_Base_SetConfig+0x110>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a1a      	ldr	r2, [pc, #104]	@ (80049cc <TIM_Base_SetConfig+0x154>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00f      	beq.n	8004988 <TIM_Base_SetConfig+0x110>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1a      	ldr	r2, [pc, #104]	@ (80049d4 <TIM_Base_SetConfig+0x15c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d00b      	beq.n	8004988 <TIM_Base_SetConfig+0x110>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a19      	ldr	r2, [pc, #100]	@ (80049d8 <TIM_Base_SetConfig+0x160>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d007      	beq.n	8004988 <TIM_Base_SetConfig+0x110>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a18      	ldr	r2, [pc, #96]	@ (80049dc <TIM_Base_SetConfig+0x164>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d003      	beq.n	8004988 <TIM_Base_SetConfig+0x110>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a13      	ldr	r2, [pc, #76]	@ (80049d0 <TIM_Base_SetConfig+0x158>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d103      	bne.n	8004990 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f023 0201 	bic.w	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	611a      	str	r2, [r3, #16]
  }
}
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr
 80049ba:	bf00      	nop
 80049bc:	40012c00 	.word	0x40012c00
 80049c0:	40000400 	.word	0x40000400
 80049c4:	40000800 	.word	0x40000800
 80049c8:	40000c00 	.word	0x40000c00
 80049cc:	40013400 	.word	0x40013400
 80049d0:	40015000 	.word	0x40015000
 80049d4:	40014000 	.word	0x40014000
 80049d8:	40014400 	.word	0x40014400
 80049dc:	40014800 	.word	0x40014800

080049e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b087      	sub	sp, #28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	f023 0201 	bic.w	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 0302 	bic.w	r3, r3, #2
 8004a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a30      	ldr	r2, [pc, #192]	@ (8004afc <TIM_OC1_SetConfig+0x11c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d013      	beq.n	8004a68 <TIM_OC1_SetConfig+0x88>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a2f      	ldr	r2, [pc, #188]	@ (8004b00 <TIM_OC1_SetConfig+0x120>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_OC1_SetConfig+0x88>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a2e      	ldr	r2, [pc, #184]	@ (8004b04 <TIM_OC1_SetConfig+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_OC1_SetConfig+0x88>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a2d      	ldr	r2, [pc, #180]	@ (8004b08 <TIM_OC1_SetConfig+0x128>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_OC1_SetConfig+0x88>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b0c <TIM_OC1_SetConfig+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_OC1_SetConfig+0x88>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a2b      	ldr	r2, [pc, #172]	@ (8004b10 <TIM_OC1_SetConfig+0x130>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d10c      	bne.n	8004a82 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0308 	bic.w	r3, r3, #8
 8004a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	f023 0304 	bic.w	r3, r3, #4
 8004a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a1d      	ldr	r2, [pc, #116]	@ (8004afc <TIM_OC1_SetConfig+0x11c>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d013      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xd2>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8004b00 <TIM_OC1_SetConfig+0x120>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d00f      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xd2>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <TIM_OC1_SetConfig+0x124>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xd2>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8004b08 <TIM_OC1_SetConfig+0x128>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xd2>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <TIM_OC1_SetConfig+0x12c>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_OC1_SetConfig+0xd2>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a18      	ldr	r2, [pc, #96]	@ (8004b10 <TIM_OC1_SetConfig+0x130>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d111      	bne.n	8004ad6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr
 8004afc:	40012c00 	.word	0x40012c00
 8004b00:	40013400 	.word	0x40013400
 8004b04:	40014000 	.word	0x40014000
 8004b08:	40014400 	.word	0x40014400
 8004b0c:	40014800 	.word	0x40014800
 8004b10:	40015000 	.word	0x40015000

08004b14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	f023 0210 	bic.w	r2, r3, #16
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	021b      	lsls	r3, r3, #8
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	f023 0320 	bic.w	r3, r3, #32
 8004b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a2c      	ldr	r2, [pc, #176]	@ (8004c24 <TIM_OC2_SetConfig+0x110>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d007      	beq.n	8004b88 <TIM_OC2_SetConfig+0x74>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8004c28 <TIM_OC2_SetConfig+0x114>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d003      	beq.n	8004b88 <TIM_OC2_SetConfig+0x74>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a2a      	ldr	r2, [pc, #168]	@ (8004c2c <TIM_OC2_SetConfig+0x118>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d10d      	bne.n	8004ba4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	697a      	ldr	r2, [r7, #20]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c24 <TIM_OC2_SetConfig+0x110>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d013      	beq.n	8004bd4 <TIM_OC2_SetConfig+0xc0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a1e      	ldr	r2, [pc, #120]	@ (8004c28 <TIM_OC2_SetConfig+0x114>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d00f      	beq.n	8004bd4 <TIM_OC2_SetConfig+0xc0>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8004c30 <TIM_OC2_SetConfig+0x11c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d00b      	beq.n	8004bd4 <TIM_OC2_SetConfig+0xc0>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8004c34 <TIM_OC2_SetConfig+0x120>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d007      	beq.n	8004bd4 <TIM_OC2_SetConfig+0xc0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c38 <TIM_OC2_SetConfig+0x124>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d003      	beq.n	8004bd4 <TIM_OC2_SetConfig+0xc0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	4a17      	ldr	r2, [pc, #92]	@ (8004c2c <TIM_OC2_SetConfig+0x118>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d113      	bne.n	8004bfc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004bda:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004be2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	695b      	ldr	r3, [r3, #20]
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	693a      	ldr	r2, [r7, #16]
 8004c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	68fa      	ldr	r2, [r7, #12]
 8004c06:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	621a      	str	r2, [r3, #32]
}
 8004c16:	bf00      	nop
 8004c18:	371c      	adds	r7, #28
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40013400 	.word	0x40013400
 8004c2c:	40015000 	.word	0x40015000
 8004c30:	40014000 	.word	0x40014000
 8004c34:	40014400 	.word	0x40014400
 8004c38:	40014800 	.word	0x40014800

08004c3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b087      	sub	sp, #28
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a1b      	ldr	r3, [r3, #32]
 8004c4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	021b      	lsls	r3, r3, #8
 8004c90:	697a      	ldr	r2, [r7, #20]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a2b      	ldr	r2, [pc, #172]	@ (8004d48 <TIM_OC3_SetConfig+0x10c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d007      	beq.n	8004cae <TIM_OC3_SetConfig+0x72>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d4c <TIM_OC3_SetConfig+0x110>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d003      	beq.n	8004cae <TIM_OC3_SetConfig+0x72>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a29      	ldr	r2, [pc, #164]	@ (8004d50 <TIM_OC3_SetConfig+0x114>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d10d      	bne.n	8004cca <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004cb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a1e      	ldr	r2, [pc, #120]	@ (8004d48 <TIM_OC3_SetConfig+0x10c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <TIM_OC3_SetConfig+0xbe>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8004d4c <TIM_OC3_SetConfig+0x110>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d00f      	beq.n	8004cfa <TIM_OC3_SetConfig+0xbe>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d54 <TIM_OC3_SetConfig+0x118>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00b      	beq.n	8004cfa <TIM_OC3_SetConfig+0xbe>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d58 <TIM_OC3_SetConfig+0x11c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d007      	beq.n	8004cfa <TIM_OC3_SetConfig+0xbe>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a1b      	ldr	r2, [pc, #108]	@ (8004d5c <TIM_OC3_SetConfig+0x120>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d003      	beq.n	8004cfa <TIM_OC3_SetConfig+0xbe>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a16      	ldr	r2, [pc, #88]	@ (8004d50 <TIM_OC3_SetConfig+0x114>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d113      	bne.n	8004d22 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	011b      	lsls	r3, r3, #4
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68fa      	ldr	r2, [r7, #12]
 8004d2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	621a      	str	r2, [r3, #32]
}
 8004d3c:	bf00      	nop
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	40012c00 	.word	0x40012c00
 8004d4c:	40013400 	.word	0x40013400
 8004d50:	40015000 	.word	0x40015000
 8004d54:	40014000 	.word	0x40014000
 8004d58:	40014400 	.word	0x40014400
 8004d5c:	40014800 	.word	0x40014800

08004d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	69db      	ldr	r3, [r3, #28]
 8004d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	68fa      	ldr	r2, [r7, #12]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	031b      	lsls	r3, r3, #12
 8004db6:	697a      	ldr	r2, [r7, #20]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	4a2c      	ldr	r2, [pc, #176]	@ (8004e70 <TIM_OC4_SetConfig+0x110>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d007      	beq.n	8004dd4 <TIM_OC4_SetConfig+0x74>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a2b      	ldr	r2, [pc, #172]	@ (8004e74 <TIM_OC4_SetConfig+0x114>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d003      	beq.n	8004dd4 <TIM_OC4_SetConfig+0x74>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a2a      	ldr	r2, [pc, #168]	@ (8004e78 <TIM_OC4_SetConfig+0x118>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d10d      	bne.n	8004df0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	031b      	lsls	r3, r3, #12
 8004de2:	697a      	ldr	r2, [r7, #20]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a1f      	ldr	r2, [pc, #124]	@ (8004e70 <TIM_OC4_SetConfig+0x110>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d013      	beq.n	8004e20 <TIM_OC4_SetConfig+0xc0>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a1e      	ldr	r2, [pc, #120]	@ (8004e74 <TIM_OC4_SetConfig+0x114>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00f      	beq.n	8004e20 <TIM_OC4_SetConfig+0xc0>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a1e      	ldr	r2, [pc, #120]	@ (8004e7c <TIM_OC4_SetConfig+0x11c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00b      	beq.n	8004e20 <TIM_OC4_SetConfig+0xc0>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e80 <TIM_OC4_SetConfig+0x120>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d007      	beq.n	8004e20 <TIM_OC4_SetConfig+0xc0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a1c      	ldr	r2, [pc, #112]	@ (8004e84 <TIM_OC4_SetConfig+0x124>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d003      	beq.n	8004e20 <TIM_OC4_SetConfig+0xc0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	@ (8004e78 <TIM_OC4_SetConfig+0x118>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d113      	bne.n	8004e48 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e26:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e2e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	019b      	lsls	r3, r3, #6
 8004e36:	693a      	ldr	r2, [r7, #16]
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	019b      	lsls	r3, r3, #6
 8004e42:	693a      	ldr	r2, [r7, #16]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	621a      	str	r2, [r3, #32]
}
 8004e62:	bf00      	nop
 8004e64:	371c      	adds	r7, #28
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	40012c00 	.word	0x40012c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40015000 	.word	0x40015000
 8004e7c:	40014000 	.word	0x40014000
 8004e80:	40014400 	.word	0x40014400
 8004e84:	40014800 	.word	0x40014800

08004e88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68fa      	ldr	r2, [r7, #12]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004ecc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a19      	ldr	r2, [pc, #100]	@ (8004f44 <TIM_OC5_SetConfig+0xbc>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_OC5_SetConfig+0x82>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a18      	ldr	r2, [pc, #96]	@ (8004f48 <TIM_OC5_SetConfig+0xc0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_OC5_SetConfig+0x82>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a17      	ldr	r2, [pc, #92]	@ (8004f4c <TIM_OC5_SetConfig+0xc4>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_OC5_SetConfig+0x82>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a16      	ldr	r2, [pc, #88]	@ (8004f50 <TIM_OC5_SetConfig+0xc8>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_OC5_SetConfig+0x82>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a15      	ldr	r2, [pc, #84]	@ (8004f54 <TIM_OC5_SetConfig+0xcc>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC5_SetConfig+0x82>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a14      	ldr	r2, [pc, #80]	@ (8004f58 <TIM_OC5_SetConfig+0xd0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d109      	bne.n	8004f1e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	021b      	lsls	r3, r3, #8
 8004f18:	697a      	ldr	r2, [r7, #20]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	621a      	str	r2, [r3, #32]
}
 8004f38:	bf00      	nop
 8004f3a:	371c      	adds	r7, #28
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800
 8004f58:	40015000 	.word	0x40015000

08004f5c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b087      	sub	sp, #28
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	021b      	lsls	r3, r3, #8
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004fa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	051b      	lsls	r3, r3, #20
 8004faa:	693a      	ldr	r2, [r7, #16]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a1a      	ldr	r2, [pc, #104]	@ (800501c <TIM_OC6_SetConfig+0xc0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <TIM_OC6_SetConfig+0x84>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <TIM_OC6_SetConfig+0xc4>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_OC6_SetConfig+0x84>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a18      	ldr	r2, [pc, #96]	@ (8005024 <TIM_OC6_SetConfig+0xc8>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_OC6_SetConfig+0x84>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a17      	ldr	r2, [pc, #92]	@ (8005028 <TIM_OC6_SetConfig+0xcc>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_OC6_SetConfig+0x84>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a16      	ldr	r2, [pc, #88]	@ (800502c <TIM_OC6_SetConfig+0xd0>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC6_SetConfig+0x84>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a15      	ldr	r2, [pc, #84]	@ (8005030 <TIM_OC6_SetConfig+0xd4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d109      	bne.n	8004ff4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	695b      	ldr	r3, [r3, #20]
 8004fec:	029b      	lsls	r3, r3, #10
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	697a      	ldr	r2, [r7, #20]
 8004ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685a      	ldr	r2, [r3, #4]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	693a      	ldr	r2, [r7, #16]
 800500c:	621a      	str	r2, [r3, #32]
}
 800500e:	bf00      	nop
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40012c00 	.word	0x40012c00
 8005020:	40013400 	.word	0x40013400
 8005024:	40014000 	.word	0x40014000
 8005028:	40014400 	.word	0x40014400
 800502c:	40014800 	.word	0x40014800
 8005030:	40015000 	.word	0x40015000

08005034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f023 0201 	bic.w	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800505e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4313      	orrs	r3, r2
 8005068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f023 030a 	bic.w	r3, r3, #10
 8005070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	621a      	str	r2, [r3, #32]
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr

08005092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005092:	b480      	push	{r7}
 8005094:	b087      	sub	sp, #28
 8005096:	af00      	add	r7, sp, #0
 8005098:	60f8      	str	r0, [r7, #12]
 800509a:	60b9      	str	r1, [r7, #8]
 800509c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6a1b      	ldr	r3, [r3, #32]
 80050a8:	f023 0210 	bic.w	r2, r3, #16
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	031b      	lsls	r3, r3, #12
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	011b      	lsls	r3, r3, #4
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b085      	sub	sp, #20
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
 80050fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005108:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800510c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4313      	orrs	r3, r2
 8005114:	f043 0307 	orr.w	r3, r3, #7
 8005118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	609a      	str	r2, [r3, #8]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
 8005138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	021a      	lsls	r2, r3, #8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	431a      	orrs	r2, r3
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	697a      	ldr	r2, [r7, #20]
 800515e:	609a      	str	r2, [r3, #8]
}
 8005160:	bf00      	nop
 8005162:	371c      	adds	r7, #28
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d101      	bne.n	8005184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005180:	2302      	movs	r3, #2
 8005182:	e074      	b.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a34      	ldr	r2, [pc, #208]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d009      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a33      	ldr	r2, [pc, #204]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d004      	beq.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a31      	ldr	r2, [pc, #196]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d108      	bne.n	80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80051c8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80051da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a21      	ldr	r2, [pc, #132]	@ (800527c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d022      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005204:	d01d      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4a1f      	ldr	r2, [pc, #124]	@ (8005288 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d018      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a1d      	ldr	r2, [pc, #116]	@ (800528c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d013      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a1c      	ldr	r2, [pc, #112]	@ (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00e      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a15      	ldr	r2, [pc, #84]	@ (8005280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d009      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a18      	ldr	r2, [pc, #96]	@ (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d004      	beq.n	8005242 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a11      	ldr	r2, [pc, #68]	@ (8005284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d10c      	bne.n	800525c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005248:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	4313      	orrs	r3, r2
 8005252:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68ba      	ldr	r2, [r7, #8]
 800525a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	40012c00 	.word	0x40012c00
 8005280:	40013400 	.word	0x40013400
 8005284:	40015000 	.word	0x40015000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40014000 	.word	0x40014000

08005298 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d101      	bne.n	80052b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052b0:	2302      	movs	r3, #2
 80052b2:	e078      	b.n	80053a6 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	041b      	lsls	r3, r3, #16
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1c      	ldr	r2, [pc, #112]	@ (80053b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d009      	beq.n	800535a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1b      	ldr	r2, [pc, #108]	@ (80053b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d004      	beq.n	800535a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a19      	ldr	r2, [pc, #100]	@ (80053bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d11c      	bne.n	8005394 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005364:	051b      	lsls	r3, r3, #20
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	6a1b      	ldr	r3, [r3, #32]
 8005374:	4313      	orrs	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	40012c00 	.word	0x40012c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40015000 	.word	0x40015000

080053c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e042      	b.n	8005458 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fc fdab 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2224      	movs	r2, #36	@ 0x24
 80053ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f022 0201 	bic.w	r2, r2, #1
 8005400:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f001 f8dc 	bl	80065c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fddd 	bl	8005fd0 <UART_SetConfig>
 8005416:	4603      	mov	r3, r0
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e01b      	b.n	8005458 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800542e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689a      	ldr	r2, [r3, #8]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800543e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005450:	6878      	ldr	r0, [r7, #4]
 8005452:	f001 f95b 	bl	800670c <UART_CheckIdleState>
 8005456:	4603      	mov	r3, r0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e04a      	b.n	8005508 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005478:	2b00      	cmp	r3, #0
 800547a:	d106      	bne.n	800548a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fc fd5b 	bl	8001f40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	@ 0x24
 800548e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681a      	ldr	r2, [r3, #0]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f001 f88c 	bl	80065c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fd8d 	bl	8005fd0 <UART_SetConfig>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e023      	b.n	8005508 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80054de:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f042 0208 	orr.w	r2, r2, #8
 80054ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0201 	orr.w	r2, r2, #1
 80054fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f001 f903 	bl	800670c <UART_CheckIdleState>
 8005506:	4603      	mov	r3, r0
}
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08a      	sub	sp, #40	@ 0x28
 8005514:	af02      	add	r7, sp, #8
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	603b      	str	r3, [r7, #0]
 800551c:	4613      	mov	r3, r2
 800551e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005526:	2b20      	cmp	r3, #32
 8005528:	d17b      	bne.n	8005622 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d002      	beq.n	8005536 <HAL_UART_Transmit+0x26>
 8005530:	88fb      	ldrh	r3, [r7, #6]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e074      	b.n	8005624 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2221      	movs	r2, #33	@ 0x21
 8005546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800554a:	f7fc ffff 	bl	800254c <HAL_GetTick>
 800554e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005568:	d108      	bne.n	800557c <HAL_UART_Transmit+0x6c>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d104      	bne.n	800557c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	61bb      	str	r3, [r7, #24]
 800557a:	e003      	b.n	8005584 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005580:	2300      	movs	r3, #0
 8005582:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005584:	e030      	b.n	80055e8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	2200      	movs	r2, #0
 800558e:	2180      	movs	r1, #128	@ 0x80
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f001 f965 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e03d      	b.n	8005624 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d10b      	bne.n	80055c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055ae:	69bb      	ldr	r3, [r7, #24]
 80055b0:	881b      	ldrh	r3, [r3, #0]
 80055b2:	461a      	mov	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055bc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	3302      	adds	r3, #2
 80055c2:	61bb      	str	r3, [r7, #24]
 80055c4:	e007      	b.n	80055d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	3301      	adds	r3, #1
 80055d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055dc:	b29b      	uxth	r3, r3
 80055de:	3b01      	subs	r3, #1
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1c8      	bne.n	8005586 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	2140      	movs	r1, #64	@ 0x40
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f001 f92e 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e006      	b.n	8005624 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2220      	movs	r2, #32
 800561a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e000      	b.n	8005624 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005622:	2302      	movs	r3, #2
  }
}
 8005624:	4618      	mov	r0, r3
 8005626:	3720      	adds	r7, #32
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b08a      	sub	sp, #40	@ 0x28
 8005630:	af02      	add	r7, sp, #8
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	603b      	str	r3, [r7, #0]
 8005638:	4613      	mov	r3, r2
 800563a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005642:	2b20      	cmp	r3, #32
 8005644:	f040 80b5 	bne.w	80057b2 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d002      	beq.n	8005654 <HAL_UART_Receive+0x28>
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0ad      	b.n	80057b4 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2222      	movs	r2, #34	@ 0x22
 8005664:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566e:	f7fc ff6d 	bl	800254c <HAL_GetTick>
 8005672:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800568c:	d10e      	bne.n	80056ac <HAL_UART_Receive+0x80>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d105      	bne.n	80056a2 <HAL_UART_Receive+0x76>
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800569c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056a0:	e02d      	b.n	80056fe <HAL_UART_Receive+0xd2>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	22ff      	movs	r2, #255	@ 0xff
 80056a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056aa:	e028      	b.n	80056fe <HAL_UART_Receive+0xd2>
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10d      	bne.n	80056d0 <HAL_UART_Receive+0xa4>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d104      	bne.n	80056c6 <HAL_UART_Receive+0x9a>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	22ff      	movs	r2, #255	@ 0xff
 80056c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056c4:	e01b      	b.n	80056fe <HAL_UART_Receive+0xd2>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	227f      	movs	r2, #127	@ 0x7f
 80056ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056ce:	e016      	b.n	80056fe <HAL_UART_Receive+0xd2>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056d8:	d10d      	bne.n	80056f6 <HAL_UART_Receive+0xca>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d104      	bne.n	80056ec <HAL_UART_Receive+0xc0>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	227f      	movs	r2, #127	@ 0x7f
 80056e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056ea:	e008      	b.n	80056fe <HAL_UART_Receive+0xd2>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	223f      	movs	r2, #63	@ 0x3f
 80056f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80056f4:	e003      	b.n	80056fe <HAL_UART_Receive+0xd2>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8005704:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800570e:	d108      	bne.n	8005722 <HAL_UART_Receive+0xf6>
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d104      	bne.n	8005722 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8005718:	2300      	movs	r3, #0
 800571a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	61bb      	str	r3, [r7, #24]
 8005720:	e003      	b.n	800572a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005726:	2300      	movs	r3, #0
 8005728:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800572a:	e036      	b.n	800579a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2200      	movs	r2, #0
 8005734:	2120      	movs	r1, #32
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 f892 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2220      	movs	r2, #32
 8005746:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e032      	b.n	80057b4 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d10c      	bne.n	800576e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575a:	b29a      	uxth	r2, r3
 800575c:	8a7b      	ldrh	r3, [r7, #18]
 800575e:	4013      	ands	r3, r2
 8005760:	b29a      	uxth	r2, r3
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	3302      	adds	r3, #2
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e00c      	b.n	8005788 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005774:	b2da      	uxtb	r2, r3
 8005776:	8a7b      	ldrh	r3, [r7, #18]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	4013      	ands	r3, r2
 800577c:	b2da      	uxtb	r2, r3
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	3301      	adds	r3, #1
 8005786:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b29a      	uxth	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1c2      	bne.n	800572c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	e000      	b.n	80057b4 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80057b2:	2302      	movs	r3, #2
  }
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3720      	adds	r7, #32
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b0ba      	sub	sp, #232	@ 0xe8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80057e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80057e6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80057ea:	4013      	ands	r3, r2
 80057ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80057f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d11b      	bne.n	8005830 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d015      	beq.n	8005830 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d105      	bne.n	800581c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005810:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d009      	beq.n	8005830 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 8300 	beq.w	8005e26 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	4798      	blx	r3
      }
      return;
 800582e:	e2fa      	b.n	8005e26 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 8123 	beq.w	8005a80 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800583a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800583e:	4b8d      	ldr	r3, [pc, #564]	@ (8005a74 <HAL_UART_IRQHandler+0x2b8>)
 8005840:	4013      	ands	r3, r2
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005846:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800584a:	4b8b      	ldr	r3, [pc, #556]	@ (8005a78 <HAL_UART_IRQHandler+0x2bc>)
 800584c:	4013      	ands	r3, r2
 800584e:	2b00      	cmp	r3, #0
 8005850:	f000 8116 	beq.w	8005a80 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005858:	f003 0301 	and.w	r3, r3, #1
 800585c:	2b00      	cmp	r3, #0
 800585e:	d011      	beq.n	8005884 <HAL_UART_IRQHandler+0xc8>
 8005860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005864:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00b      	beq.n	8005884 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2201      	movs	r2, #1
 8005872:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800587a:	f043 0201 	orr.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005884:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d011      	beq.n	80058b4 <HAL_UART_IRQHandler+0xf8>
 8005890:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00b      	beq.n	80058b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2202      	movs	r2, #2
 80058a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058aa:	f043 0204 	orr.w	r2, r3, #4
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d011      	beq.n	80058e4 <HAL_UART_IRQHandler+0x128>
 80058c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00b      	beq.n	80058e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2204      	movs	r2, #4
 80058d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80058da:	f043 0202 	orr.w	r2, r3, #2
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d017      	beq.n	8005920 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058f4:	f003 0320 	and.w	r3, r3, #32
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d105      	bne.n	8005908 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80058fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005900:	4b5c      	ldr	r3, [pc, #368]	@ (8005a74 <HAL_UART_IRQHandler+0x2b8>)
 8005902:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00b      	beq.n	8005920 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2208      	movs	r2, #8
 800590e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005916:	f043 0208 	orr.w	r2, r3, #8
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005924:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005928:	2b00      	cmp	r3, #0
 800592a:	d012      	beq.n	8005952 <HAL_UART_IRQHandler+0x196>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005930:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00c      	beq.n	8005952 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005948:	f043 0220 	orr.w	r2, r3, #32
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 8266 	beq.w	8005e2a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d013      	beq.n	8005992 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800596a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d105      	bne.n	8005982 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005976:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800597a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800597e:	2b00      	cmp	r3, #0
 8005980:	d007      	beq.n	8005992 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005986:	2b00      	cmp	r3, #0
 8005988:	d003      	beq.n	8005992 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005998:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a6:	2b40      	cmp	r3, #64	@ 0x40
 80059a8:	d005      	beq.n	80059b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80059ae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d054      	beq.n	8005a60 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 ffbf 	bl	800693a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c6:	2b40      	cmp	r3, #64	@ 0x40
 80059c8:	d146      	bne.n	8005a58 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3308      	adds	r3, #8
 80059d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005a0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1d9      	bne.n	80059ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d017      	beq.n	8005a50 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a26:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <HAL_UART_IRQHandler+0x2c0>)
 8005a28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a30:	4618      	mov	r0, r3
 8005a32:	f7fc ffca 	bl	80029ca <HAL_DMA_Abort_IT>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d019      	beq.n	8005a70 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005a4a:	4610      	mov	r0, r2
 8005a4c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4e:	e00f      	b.n	8005a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f9ff 	bl	8005e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a56:	e00b      	b.n	8005a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9fb 	bl	8005e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5e:	e007      	b.n	8005a70 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f9f7 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005a6e:	e1dc      	b.n	8005e2a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a70:	bf00      	nop
    return;
 8005a72:	e1da      	b.n	8005e2a <HAL_UART_IRQHandler+0x66e>
 8005a74:	10000001 	.word	0x10000001
 8005a78:	04000120 	.word	0x04000120
 8005a7c:	08006a07 	.word	0x08006a07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	f040 8170 	bne.w	8005d6a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 8169 	beq.w	8005d6a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a9c:	f003 0310 	and.w	r3, r3, #16
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f000 8162 	beq.w	8005d6a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2210      	movs	r2, #16
 8005aac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab8:	2b40      	cmp	r3, #64	@ 0x40
 8005aba:	f040 80d8 	bne.w	8005c6e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005acc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	f000 80af 	beq.w	8005c34 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	f080 80a7 	bcs.w	8005c34 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aec:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f040 8087 	bne.w	8005c12 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b10:	e853 3f00 	ldrex	r3, [r3]
 8005b14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005b18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005b1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005b32:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b3e:	e841 2300 	strex	r3, r2, [r1]
 8005b42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1da      	bne.n	8005b04 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3308      	adds	r3, #8
 8005b54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b58:	e853 3f00 	ldrex	r3, [r3]
 8005b5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b60:	f023 0301 	bic.w	r3, r3, #1
 8005b64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3308      	adds	r3, #8
 8005b6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e1      	bne.n	8005b4e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3308      	adds	r3, #8
 8005b90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ba0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005bae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005bb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005bbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e3      	bne.n	8005b8a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2220      	movs	r2, #32
 8005bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bd8:	e853 3f00 	ldrex	r3, [r3]
 8005bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005be0:	f023 0310 	bic.w	r3, r3, #16
 8005be4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	461a      	mov	r2, r3
 8005bee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005bf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e4      	bne.n	8005bd0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f7fc fe83 	bl	8002918 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2202      	movs	r2, #2
 8005c16:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c24:	b29b      	uxth	r3, r3
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f91b 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005c32:	e0fc      	b.n	8005e2e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	f040 80f5 	bne.w	8005e2e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0320 	and.w	r3, r3, #32
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	f040 80eb 	bne.w	8005e2e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005c64:	4619      	mov	r1, r3
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f8fe 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
      return;
 8005c6c:	e0df      	b.n	8005e2e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 80d1 	beq.w	8005e32 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8005c90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 80cc 	beq.w	8005e32 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca2:	e853 3f00 	ldrex	r3, [r3]
 8005ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005caa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005cbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005cbe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005cc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e4      	bne.n	8005c9a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	623b      	str	r3, [r7, #32]
   return(result);
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005ce6:	f023 0301 	bic.w	r3, r3, #1
 8005cea:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005cf8:	633a      	str	r2, [r7, #48]	@ 0x30
 8005cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cfc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d00:	e841 2300 	strex	r3, r2, [r1]
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1e1      	bne.n	8005cd0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	e853 3f00 	ldrex	r3, [r3]
 8005d2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f023 0310 	bic.w	r3, r3, #16
 8005d34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005d42:	61fb      	str	r3, [r7, #28]
 8005d44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d46:	69b9      	ldr	r1, [r7, #24]
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	e841 2300 	strex	r3, r2, [r1]
 8005d4e:	617b      	str	r3, [r7, #20]
   return(result);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e4      	bne.n	8005d20 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2202      	movs	r2, #2
 8005d5a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d60:	4619      	mov	r1, r3
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f880 	bl	8005e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d68:	e063      	b.n	8005e32 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00e      	beq.n	8005d94 <HAL_UART_IRQHandler+0x5d8>
 8005d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d008      	beq.n	8005d94 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005d8a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fe77 	bl	8006a80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d92:	e051      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d014      	beq.n	8005dca <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005db0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d008      	beq.n	8005dca <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d03a      	beq.n	8005e36 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
    }
    return;
 8005dc8:	e035      	b.n	8005e36 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <HAL_UART_IRQHandler+0x62e>
 8005dd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fe21 	bl	8006a2a <UART_EndTransmit_IT>
    return;
 8005de8:	e026      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <HAL_UART_IRQHandler+0x64e>
 8005df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dfa:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fe50 	bl	8006aa8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e08:	e016      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d010      	beq.n	8005e38 <HAL_UART_IRQHandler+0x67c>
 8005e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	da0c      	bge.n	8005e38 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fe38 	bl	8006a94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e24:	e008      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
      return;
 8005e26:	bf00      	nop
 8005e28:	e006      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
    return;
 8005e2a:	bf00      	nop
 8005e2c:	e004      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
      return;
 8005e2e:	bf00      	nop
 8005e30:	e002      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
      return;
 8005e32:	bf00      	nop
 8005e34:	e000      	b.n	8005e38 <HAL_UART_IRQHandler+0x67c>
    return;
 8005e36:	bf00      	nop
  }
}
 8005e38:	37e8      	adds	r7, #232	@ 0xe8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	460b      	mov	r3, r1
 8005e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e74:	bf00      	nop
 8005e76:	370c      	adds	r7, #12
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b08f      	sub	sp, #60	@ 0x3c
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_HalfDuplex_EnableTransmitter+0x16>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e042      	b.n	8005f1c <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2224      	movs	r2, #36	@ 0x24
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	e853 3f00 	ldrex	r3, [r3]
 8005eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	f023 030c 	bic.w	r3, r3, #12
 8005eba:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ec6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ecc:	e841 2300 	strex	r3, r2, [r1]
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d1e6      	bne.n	8005ea6 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	f043 0308 	orr.w	r3, r3, #8
 8005eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efa:	6979      	ldr	r1, [r7, #20]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	e841 2300 	strex	r3, r2, [r1]
 8005f02:	613b      	str	r3, [r7, #16]
   return(result);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e6      	bne.n	8005ed8 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2220      	movs	r2, #32
 8005f0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	373c      	adds	r7, #60	@ 0x3c
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b08f      	sub	sp, #60	@ 0x3c
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <HAL_HalfDuplex_EnableReceiver+0x16>
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e042      	b.n	8005fc4 <HAL_HalfDuplex_EnableReceiver+0x9c>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2201      	movs	r2, #1
 8005f42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2224      	movs	r2, #36	@ 0x24
 8005f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	e853 3f00 	ldrex	r3, [r3]
 8005f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f5c:	69fb      	ldr	r3, [r7, #28]
 8005f5e:	f023 030c 	bic.w	r3, r3, #12
 8005f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f6e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e6      	bne.n	8005f4e <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	e853 3f00 	ldrex	r3, [r3]
 8005f8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9e:	61bb      	str	r3, [r7, #24]
 8005fa0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6979      	ldr	r1, [r7, #20]
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	613b      	str	r3, [r7, #16]
   return(result);
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e6      	bne.n	8005f80 <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	373c      	adds	r7, #60	@ 0x3c
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005fd4:	b08c      	sub	sp, #48	@ 0x30
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	689a      	ldr	r2, [r3, #8]
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	431a      	orrs	r2, r3
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	431a      	orrs	r2, r3
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4baa      	ldr	r3, [pc, #680]	@ (80062a8 <UART_SetConfig+0x2d8>)
 8006000:	4013      	ands	r3, r2
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	6812      	ldr	r2, [r2, #0]
 8006006:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006008:	430b      	orrs	r3, r1
 800600a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a9f      	ldr	r2, [pc, #636]	@ (80062ac <UART_SetConfig+0x2dc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d004      	beq.n	800603c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006038:	4313      	orrs	r3, r2
 800603a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006046:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	6812      	ldr	r2, [r2, #0]
 800604e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006050:	430b      	orrs	r3, r1
 8006052:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605a:	f023 010f 	bic.w	r1, r3, #15
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a90      	ldr	r2, [pc, #576]	@ (80062b0 <UART_SetConfig+0x2e0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d125      	bne.n	80060c0 <UART_SetConfig+0xf0>
 8006074:	4b8f      	ldr	r3, [pc, #572]	@ (80062b4 <UART_SetConfig+0x2e4>)
 8006076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b03      	cmp	r3, #3
 8006080:	d81a      	bhi.n	80060b8 <UART_SetConfig+0xe8>
 8006082:	a201      	add	r2, pc, #4	@ (adr r2, 8006088 <UART_SetConfig+0xb8>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	08006099 	.word	0x08006099
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060a1 	.word	0x080060a1
 8006094:	080060b1 	.word	0x080060b1
 8006098:	2301      	movs	r3, #1
 800609a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800609e:	e116      	b.n	80062ce <UART_SetConfig+0x2fe>
 80060a0:	2302      	movs	r3, #2
 80060a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060a6:	e112      	b.n	80062ce <UART_SetConfig+0x2fe>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060ae:	e10e      	b.n	80062ce <UART_SetConfig+0x2fe>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060b6:	e10a      	b.n	80062ce <UART_SetConfig+0x2fe>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80060be:	e106      	b.n	80062ce <UART_SetConfig+0x2fe>
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a7c      	ldr	r2, [pc, #496]	@ (80062b8 <UART_SetConfig+0x2e8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d138      	bne.n	800613c <UART_SetConfig+0x16c>
 80060ca:	4b7a      	ldr	r3, [pc, #488]	@ (80062b4 <UART_SetConfig+0x2e4>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d0:	f003 030c 	and.w	r3, r3, #12
 80060d4:	2b0c      	cmp	r3, #12
 80060d6:	d82d      	bhi.n	8006134 <UART_SetConfig+0x164>
 80060d8:	a201      	add	r2, pc, #4	@ (adr r2, 80060e0 <UART_SetConfig+0x110>)
 80060da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060de:	bf00      	nop
 80060e0:	08006115 	.word	0x08006115
 80060e4:	08006135 	.word	0x08006135
 80060e8:	08006135 	.word	0x08006135
 80060ec:	08006135 	.word	0x08006135
 80060f0:	08006125 	.word	0x08006125
 80060f4:	08006135 	.word	0x08006135
 80060f8:	08006135 	.word	0x08006135
 80060fc:	08006135 	.word	0x08006135
 8006100:	0800611d 	.word	0x0800611d
 8006104:	08006135 	.word	0x08006135
 8006108:	08006135 	.word	0x08006135
 800610c:	08006135 	.word	0x08006135
 8006110:	0800612d 	.word	0x0800612d
 8006114:	2300      	movs	r3, #0
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800611a:	e0d8      	b.n	80062ce <UART_SetConfig+0x2fe>
 800611c:	2302      	movs	r3, #2
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006122:	e0d4      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612a:	e0d0      	b.n	80062ce <UART_SetConfig+0x2fe>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006132:	e0cc      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613a:	e0c8      	b.n	80062ce <UART_SetConfig+0x2fe>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a5e      	ldr	r2, [pc, #376]	@ (80062bc <UART_SetConfig+0x2ec>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d125      	bne.n	8006192 <UART_SetConfig+0x1c2>
 8006146:	4b5b      	ldr	r3, [pc, #364]	@ (80062b4 <UART_SetConfig+0x2e4>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006150:	2b30      	cmp	r3, #48	@ 0x30
 8006152:	d016      	beq.n	8006182 <UART_SetConfig+0x1b2>
 8006154:	2b30      	cmp	r3, #48	@ 0x30
 8006156:	d818      	bhi.n	800618a <UART_SetConfig+0x1ba>
 8006158:	2b20      	cmp	r3, #32
 800615a:	d00a      	beq.n	8006172 <UART_SetConfig+0x1a2>
 800615c:	2b20      	cmp	r3, #32
 800615e:	d814      	bhi.n	800618a <UART_SetConfig+0x1ba>
 8006160:	2b00      	cmp	r3, #0
 8006162:	d002      	beq.n	800616a <UART_SetConfig+0x19a>
 8006164:	2b10      	cmp	r3, #16
 8006166:	d008      	beq.n	800617a <UART_SetConfig+0x1aa>
 8006168:	e00f      	b.n	800618a <UART_SetConfig+0x1ba>
 800616a:	2300      	movs	r3, #0
 800616c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006170:	e0ad      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006172:	2302      	movs	r3, #2
 8006174:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006178:	e0a9      	b.n	80062ce <UART_SetConfig+0x2fe>
 800617a:	2304      	movs	r3, #4
 800617c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006180:	e0a5      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006182:	2308      	movs	r3, #8
 8006184:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006188:	e0a1      	b.n	80062ce <UART_SetConfig+0x2fe>
 800618a:	2310      	movs	r3, #16
 800618c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006190:	e09d      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a4a      	ldr	r2, [pc, #296]	@ (80062c0 <UART_SetConfig+0x2f0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d125      	bne.n	80061e8 <UART_SetConfig+0x218>
 800619c:	4b45      	ldr	r3, [pc, #276]	@ (80062b4 <UART_SetConfig+0x2e4>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80061a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80061a8:	d016      	beq.n	80061d8 <UART_SetConfig+0x208>
 80061aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80061ac:	d818      	bhi.n	80061e0 <UART_SetConfig+0x210>
 80061ae:	2b80      	cmp	r3, #128	@ 0x80
 80061b0:	d00a      	beq.n	80061c8 <UART_SetConfig+0x1f8>
 80061b2:	2b80      	cmp	r3, #128	@ 0x80
 80061b4:	d814      	bhi.n	80061e0 <UART_SetConfig+0x210>
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d002      	beq.n	80061c0 <UART_SetConfig+0x1f0>
 80061ba:	2b40      	cmp	r3, #64	@ 0x40
 80061bc:	d008      	beq.n	80061d0 <UART_SetConfig+0x200>
 80061be:	e00f      	b.n	80061e0 <UART_SetConfig+0x210>
 80061c0:	2300      	movs	r3, #0
 80061c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c6:	e082      	b.n	80062ce <UART_SetConfig+0x2fe>
 80061c8:	2302      	movs	r3, #2
 80061ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ce:	e07e      	b.n	80062ce <UART_SetConfig+0x2fe>
 80061d0:	2304      	movs	r3, #4
 80061d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061d6:	e07a      	b.n	80062ce <UART_SetConfig+0x2fe>
 80061d8:	2308      	movs	r3, #8
 80061da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061de:	e076      	b.n	80062ce <UART_SetConfig+0x2fe>
 80061e0:	2310      	movs	r3, #16
 80061e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061e6:	e072      	b.n	80062ce <UART_SetConfig+0x2fe>
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a35      	ldr	r2, [pc, #212]	@ (80062c4 <UART_SetConfig+0x2f4>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d12a      	bne.n	8006248 <UART_SetConfig+0x278>
 80061f2:	4b30      	ldr	r3, [pc, #192]	@ (80062b4 <UART_SetConfig+0x2e4>)
 80061f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80061fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006200:	d01a      	beq.n	8006238 <UART_SetConfig+0x268>
 8006202:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006206:	d81b      	bhi.n	8006240 <UART_SetConfig+0x270>
 8006208:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800620c:	d00c      	beq.n	8006228 <UART_SetConfig+0x258>
 800620e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006212:	d815      	bhi.n	8006240 <UART_SetConfig+0x270>
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <UART_SetConfig+0x250>
 8006218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800621c:	d008      	beq.n	8006230 <UART_SetConfig+0x260>
 800621e:	e00f      	b.n	8006240 <UART_SetConfig+0x270>
 8006220:	2300      	movs	r3, #0
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006226:	e052      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006228:	2302      	movs	r3, #2
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622e:	e04e      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006236:	e04a      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e046      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e042      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a17      	ldr	r2, [pc, #92]	@ (80062ac <UART_SetConfig+0x2dc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d13a      	bne.n	80062c8 <UART_SetConfig+0x2f8>
 8006252:	4b18      	ldr	r3, [pc, #96]	@ (80062b4 <UART_SetConfig+0x2e4>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006258:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800625c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006260:	d01a      	beq.n	8006298 <UART_SetConfig+0x2c8>
 8006262:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006266:	d81b      	bhi.n	80062a0 <UART_SetConfig+0x2d0>
 8006268:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800626c:	d00c      	beq.n	8006288 <UART_SetConfig+0x2b8>
 800626e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006272:	d815      	bhi.n	80062a0 <UART_SetConfig+0x2d0>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <UART_SetConfig+0x2b0>
 8006278:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800627c:	d008      	beq.n	8006290 <UART_SetConfig+0x2c0>
 800627e:	e00f      	b.n	80062a0 <UART_SetConfig+0x2d0>
 8006280:	2300      	movs	r3, #0
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006286:	e022      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006288:	2302      	movs	r3, #2
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628e:	e01e      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006290:	2304      	movs	r3, #4
 8006292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006296:	e01a      	b.n	80062ce <UART_SetConfig+0x2fe>
 8006298:	2308      	movs	r3, #8
 800629a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800629e:	e016      	b.n	80062ce <UART_SetConfig+0x2fe>
 80062a0:	2310      	movs	r3, #16
 80062a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062a6:	e012      	b.n	80062ce <UART_SetConfig+0x2fe>
 80062a8:	cfff69f3 	.word	0xcfff69f3
 80062ac:	40008000 	.word	0x40008000
 80062b0:	40013800 	.word	0x40013800
 80062b4:	40021000 	.word	0x40021000
 80062b8:	40004400 	.word	0x40004400
 80062bc:	40004800 	.word	0x40004800
 80062c0:	40004c00 	.word	0x40004c00
 80062c4:	40005000 	.word	0x40005000
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4aae      	ldr	r2, [pc, #696]	@ (800658c <UART_SetConfig+0x5bc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	f040 8097 	bne.w	8006408 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80062da:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80062de:	2b08      	cmp	r3, #8
 80062e0:	d823      	bhi.n	800632a <UART_SetConfig+0x35a>
 80062e2:	a201      	add	r2, pc, #4	@ (adr r2, 80062e8 <UART_SetConfig+0x318>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	0800630d 	.word	0x0800630d
 80062ec:	0800632b 	.word	0x0800632b
 80062f0:	08006315 	.word	0x08006315
 80062f4:	0800632b 	.word	0x0800632b
 80062f8:	0800631b 	.word	0x0800631b
 80062fc:	0800632b 	.word	0x0800632b
 8006300:	0800632b 	.word	0x0800632b
 8006304:	0800632b 	.word	0x0800632b
 8006308:	08006323 	.word	0x08006323
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630c:	f7fd fd12 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8006310:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006312:	e010      	b.n	8006336 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006314:	4b9e      	ldr	r3, [pc, #632]	@ (8006590 <UART_SetConfig+0x5c0>)
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006318:	e00d      	b.n	8006336 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800631a:	f7fd fc9d 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 800631e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006320:	e009      	b.n	8006336 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006322:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006328:	e005      	b.n	8006336 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006334:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 8130 	beq.w	800659e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006342:	4a94      	ldr	r2, [pc, #592]	@ (8006594 <UART_SetConfig+0x5c4>)
 8006344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006348:	461a      	mov	r2, r3
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006350:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	4613      	mov	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4413      	add	r3, r2
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	429a      	cmp	r2, r3
 8006360:	d305      	bcc.n	800636e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006368:	69ba      	ldr	r2, [r7, #24]
 800636a:	429a      	cmp	r2, r3
 800636c:	d903      	bls.n	8006376 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006374:	e113      	b.n	800659e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006378:	2200      	movs	r2, #0
 800637a:	60bb      	str	r3, [r7, #8]
 800637c:	60fa      	str	r2, [r7, #12]
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	4a84      	ldr	r2, [pc, #528]	@ (8006594 <UART_SetConfig+0x5c4>)
 8006384:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006388:	b29b      	uxth	r3, r3
 800638a:	2200      	movs	r2, #0
 800638c:	603b      	str	r3, [r7, #0]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006398:	f7fa fc9e 	bl	8000cd8 <__aeabi_uldivmod>
 800639c:	4602      	mov	r2, r0
 800639e:	460b      	mov	r3, r1
 80063a0:	4610      	mov	r0, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	f04f 0200 	mov.w	r2, #0
 80063a8:	f04f 0300 	mov.w	r3, #0
 80063ac:	020b      	lsls	r3, r1, #8
 80063ae:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80063b2:	0202      	lsls	r2, r0, #8
 80063b4:	6979      	ldr	r1, [r7, #20]
 80063b6:	6849      	ldr	r1, [r1, #4]
 80063b8:	0849      	lsrs	r1, r1, #1
 80063ba:	2000      	movs	r0, #0
 80063bc:	460c      	mov	r4, r1
 80063be:	4605      	mov	r5, r0
 80063c0:	eb12 0804 	adds.w	r8, r2, r4
 80063c4:	eb43 0905 	adc.w	r9, r3, r5
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	469a      	mov	sl, r3
 80063d0:	4693      	mov	fp, r2
 80063d2:	4652      	mov	r2, sl
 80063d4:	465b      	mov	r3, fp
 80063d6:	4640      	mov	r0, r8
 80063d8:	4649      	mov	r1, r9
 80063da:	f7fa fc7d 	bl	8000cd8 <__aeabi_uldivmod>
 80063de:	4602      	mov	r2, r0
 80063e0:	460b      	mov	r3, r1
 80063e2:	4613      	mov	r3, r2
 80063e4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063ec:	d308      	bcc.n	8006400 <UART_SetConfig+0x430>
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f4:	d204      	bcs.n	8006400 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	60da      	str	r2, [r3, #12]
 80063fe:	e0ce      	b.n	800659e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006400:	2301      	movs	r3, #1
 8006402:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006406:	e0ca      	b.n	800659e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006410:	d166      	bne.n	80064e0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006412:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006416:	2b08      	cmp	r3, #8
 8006418:	d827      	bhi.n	800646a <UART_SetConfig+0x49a>
 800641a:	a201      	add	r2, pc, #4	@ (adr r2, 8006420 <UART_SetConfig+0x450>)
 800641c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006420:	08006445 	.word	0x08006445
 8006424:	0800644d 	.word	0x0800644d
 8006428:	08006455 	.word	0x08006455
 800642c:	0800646b 	.word	0x0800646b
 8006430:	0800645b 	.word	0x0800645b
 8006434:	0800646b 	.word	0x0800646b
 8006438:	0800646b 	.word	0x0800646b
 800643c:	0800646b 	.word	0x0800646b
 8006440:	08006463 	.word	0x08006463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006444:	f7fd fc76 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8006448:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800644a:	e014      	b.n	8006476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800644c:	f7fd fc88 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006450:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006452:	e010      	b.n	8006476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006454:	4b4e      	ldr	r3, [pc, #312]	@ (8006590 <UART_SetConfig+0x5c0>)
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006458:	e00d      	b.n	8006476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645a:	f7fd fbfd 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 800645e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006460:	e009      	b.n	8006476 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006462:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006466:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006468:	e005      	b.n	8006476 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800646a:	2300      	movs	r3, #0
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006474:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006478:	2b00      	cmp	r3, #0
 800647a:	f000 8090 	beq.w	800659e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	4a44      	ldr	r2, [pc, #272]	@ (8006594 <UART_SetConfig+0x5c4>)
 8006484:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006488:	461a      	mov	r2, r3
 800648a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006490:	005a      	lsls	r2, r3, #1
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	441a      	add	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	2b0f      	cmp	r3, #15
 80064a8:	d916      	bls.n	80064d8 <UART_SetConfig+0x508>
 80064aa:	6a3b      	ldr	r3, [r7, #32]
 80064ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064b0:	d212      	bcs.n	80064d8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	b29b      	uxth	r3, r3
 80064b6:	f023 030f 	bic.w	r3, r3, #15
 80064ba:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	085b      	lsrs	r3, r3, #1
 80064c0:	b29b      	uxth	r3, r3
 80064c2:	f003 0307 	and.w	r3, r3, #7
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	8bfb      	ldrh	r3, [r7, #30]
 80064ca:	4313      	orrs	r3, r2
 80064cc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	8bfa      	ldrh	r2, [r7, #30]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	e062      	b.n	800659e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80064de:	e05e      	b.n	800659e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064e0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80064e4:	2b08      	cmp	r3, #8
 80064e6:	d828      	bhi.n	800653a <UART_SetConfig+0x56a>
 80064e8:	a201      	add	r2, pc, #4	@ (adr r2, 80064f0 <UART_SetConfig+0x520>)
 80064ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ee:	bf00      	nop
 80064f0:	08006515 	.word	0x08006515
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006525 	.word	0x08006525
 80064fc:	0800653b 	.word	0x0800653b
 8006500:	0800652b 	.word	0x0800652b
 8006504:	0800653b 	.word	0x0800653b
 8006508:	0800653b 	.word	0x0800653b
 800650c:	0800653b 	.word	0x0800653b
 8006510:	08006533 	.word	0x08006533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fd fc0e 	bl	8003d34 <HAL_RCC_GetPCLK1Freq>
 8006518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800651a:	e014      	b.n	8006546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7fd fc20 	bl	8003d60 <HAL_RCC_GetPCLK2Freq>
 8006520:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006522:	e010      	b.n	8006546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006524:	4b1a      	ldr	r3, [pc, #104]	@ (8006590 <UART_SetConfig+0x5c0>)
 8006526:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006528:	e00d      	b.n	8006546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652a:	f7fd fb95 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 800652e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006530:	e009      	b.n	8006546 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006536:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006538:	e005      	b.n	8006546 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006544:	bf00      	nop
    }

    if (pclk != 0U)
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	2b00      	cmp	r3, #0
 800654a:	d028      	beq.n	800659e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	4a10      	ldr	r2, [pc, #64]	@ (8006594 <UART_SetConfig+0x5c4>)
 8006552:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006556:	461a      	mov	r2, r3
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	fbb3 f2f2 	udiv	r2, r3, r2
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	085b      	lsrs	r3, r3, #1
 8006564:	441a      	add	r2, r3
 8006566:	697b      	ldr	r3, [r7, #20]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	fbb2 f3f3 	udiv	r3, r2, r3
 800656e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d910      	bls.n	8006598 <UART_SetConfig+0x5c8>
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800657c:	d20c      	bcs.n	8006598 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	b29a      	uxth	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	60da      	str	r2, [r3, #12]
 8006588:	e009      	b.n	800659e <UART_SetConfig+0x5ce>
 800658a:	bf00      	nop
 800658c:	40008000 	.word	0x40008000
 8006590:	00f42400 	.word	0x00f42400
 8006594:	0800b7c8 	.word	0x0800b7c8
      }
      else
      {
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	2201      	movs	r2, #1
 80065a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	2201      	movs	r2, #1
 80065aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065ae:	697b      	ldr	r3, [r7, #20]
 80065b0:	2200      	movs	r2, #0
 80065b2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2200      	movs	r2, #0
 80065b8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065ba:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3730      	adds	r7, #48	@ 0x30
 80065c2:	46bd      	mov	sp, r7
 80065c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080065c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d4:	f003 0308 	and.w	r3, r3, #8
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	430a      	orrs	r2, r1
 80065f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d00a      	beq.n	8006614 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	430a      	orrs	r2, r1
 8006612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663a:	f003 0304 	and.w	r3, r3, #4
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	f003 0310 	and.w	r3, r3, #16
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d01a      	beq.n	80066de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80066c6:	d10a      	bne.n	80066de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d00a      	beq.n	8006700 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	430a      	orrs	r2, r1
 80066fe:	605a      	str	r2, [r3, #4]
  }
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b098      	sub	sp, #96	@ 0x60
 8006710:	af02      	add	r7, sp, #8
 8006712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800671c:	f7fb ff16 	bl	800254c <HAL_GetTick>
 8006720:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d12f      	bne.n	8006790 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006730:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006734:	9300      	str	r3, [sp, #0]
 8006736:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006738:	2200      	movs	r2, #0
 800673a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f88e 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d022      	beq.n	8006790 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800675a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	461a      	mov	r2, r3
 8006766:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006768:	647b      	str	r3, [r7, #68]	@ 0x44
 800676a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800676c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800676e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006770:	e841 2300 	strex	r3, r2, [r1]
 8006774:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d1e6      	bne.n	800674a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2220      	movs	r2, #32
 8006780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e063      	b.n	8006858 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0304 	and.w	r3, r3, #4
 800679a:	2b04      	cmp	r3, #4
 800679c:	d149      	bne.n	8006832 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800679e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067a2:	9300      	str	r3, [sp, #0]
 80067a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067a6:	2200      	movs	r2, #0
 80067a8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 f857 	bl	8006860 <UART_WaitOnFlagUntilTimeout>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d03c      	beq.n	8006832 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	623b      	str	r3, [r7, #32]
   return(result);
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80067dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e6      	bne.n	80067b8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800680a:	61fa      	str	r2, [r7, #28]
 800680c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	69b9      	ldr	r1, [r7, #24]
 8006810:	69fa      	ldr	r2, [r7, #28]
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	617b      	str	r3, [r7, #20]
   return(result);
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e5      	bne.n	80067ea <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2220      	movs	r2, #32
 8006822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e012      	b.n	8006858 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2220      	movs	r2, #32
 8006836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006856:	2300      	movs	r3, #0
}
 8006858:	4618      	mov	r0, r3
 800685a:	3758      	adds	r7, #88	@ 0x58
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	4613      	mov	r3, r2
 800686e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006870:	e04f      	b.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006878:	d04b      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800687a:	f7fb fe67 	bl	800254c <HAL_GetTick>
 800687e:	4602      	mov	r2, r0
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	1ad3      	subs	r3, r2, r3
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	429a      	cmp	r2, r3
 8006888:	d302      	bcc.n	8006890 <UART_WaitOnFlagUntilTimeout+0x30>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e04e      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d037      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b80      	cmp	r3, #128	@ 0x80
 80068a6:	d034      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b40      	cmp	r3, #64	@ 0x40
 80068ac:	d031      	beq.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	69db      	ldr	r3, [r3, #28]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b08      	cmp	r3, #8
 80068ba:	d110      	bne.n	80068de <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2208      	movs	r2, #8
 80068c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f000 f838 	bl	800693a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2208      	movs	r2, #8
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e029      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068e8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068ec:	d111      	bne.n	8006912 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80068f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f000 f81e 	bl	800693a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2220      	movs	r2, #32
 8006902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e00f      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	69da      	ldr	r2, [r3, #28]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4013      	ands	r3, r2
 800691c:	68ba      	ldr	r2, [r7, #8]
 800691e:	429a      	cmp	r2, r3
 8006920:	bf0c      	ite	eq
 8006922:	2301      	moveq	r3, #1
 8006924:	2300      	movne	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	461a      	mov	r2, r3
 800692a:	79fb      	ldrb	r3, [r7, #7]
 800692c:	429a      	cmp	r2, r3
 800692e:	d0a0      	beq.n	8006872 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3710      	adds	r7, #16
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800693a:	b480      	push	{r7}
 800693c:	b095      	sub	sp, #84	@ 0x54
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006948:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800694a:	e853 3f00 	ldrex	r3, [r3]
 800694e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006952:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006960:	643b      	str	r3, [r7, #64]	@ 0x40
 8006962:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006964:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006966:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800696e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e6      	bne.n	8006942 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3308      	adds	r3, #8
 800697a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	61fb      	str	r3, [r7, #28]
   return(result);
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800698a:	f023 0301 	bic.w	r3, r3, #1
 800698e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	3308      	adds	r3, #8
 8006996:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800699a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800699e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e3      	bne.n	8006974 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d118      	bne.n	80069e6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	e853 3f00 	ldrex	r3, [r3]
 80069c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f023 0310 	bic.w	r3, r3, #16
 80069c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d2:	61bb      	str	r3, [r7, #24]
 80069d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d6:	6979      	ldr	r1, [r7, #20]
 80069d8:	69ba      	ldr	r2, [r7, #24]
 80069da:	e841 2300 	strex	r3, r2, [r1]
 80069de:	613b      	str	r3, [r7, #16]
   return(result);
 80069e0:	693b      	ldr	r3, [r7, #16]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1e6      	bne.n	80069b4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2220      	movs	r2, #32
 80069ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80069fa:	bf00      	nop
 80069fc:	3754      	adds	r7, #84	@ 0x54
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a1c:	68f8      	ldr	r0, [r7, #12]
 8006a1e:	f7ff fa19 	bl	8005e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a2a:	b580      	push	{r7, lr}
 8006a2c:	b088      	sub	sp, #32
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6979      	ldr	r1, [r7, #20]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e6      	bne.n	8006a32 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff f9e4 	bl	8005e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a78:	bf00      	nop
 8006a7a:	3720      	adds	r7, #32
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}

08006a80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a88:	bf00      	nop
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a9c:	bf00      	nop
 8006a9e:	370c      	adds	r7, #12
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006ab0:	bf00      	nop
 8006ab2:	370c      	adds	r7, #12
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aba:	4770      	bx	lr

08006abc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d101      	bne.n	8006ad2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ace:	2302      	movs	r3, #2
 8006ad0:	e027      	b.n	8006b22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2224      	movs	r2, #36	@ 0x24
 8006ade:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006b00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2200      	movs	r2, #0
 8006b06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b2e:	b580      	push	{r7, lr}
 8006b30:	b084      	sub	sp, #16
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
 8006b36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d101      	bne.n	8006b46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b42:	2302      	movs	r3, #2
 8006b44:	e02d      	b.n	8006ba2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2224      	movs	r2, #36	@ 0x24
 8006b52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0201 	bic.w	r2, r2, #1
 8006b6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f850 	bl	8006c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e02d      	b.n	8006c1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	@ 0x24
 8006bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f812 	bl	8006c28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
	...

08006c28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b085      	sub	sp, #20
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d108      	bne.n	8006c4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c48:	e031      	b.n	8006cae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c4a:	2308      	movs	r3, #8
 8006c4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c4e:	2308      	movs	r3, #8
 8006c50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	0e5b      	lsrs	r3, r3, #25
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	0f5b      	lsrs	r3, r3, #29
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	f003 0307 	and.w	r3, r3, #7
 8006c70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c72:	7bbb      	ldrb	r3, [r7, #14]
 8006c74:	7b3a      	ldrb	r2, [r7, #12]
 8006c76:	4911      	ldr	r1, [pc, #68]	@ (8006cbc <UARTEx_SetNbDataToProcess+0x94>)
 8006c78:	5c8a      	ldrb	r2, [r1, r2]
 8006c7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c7e:	7b3a      	ldrb	r2, [r7, #12]
 8006c80:	490f      	ldr	r1, [pc, #60]	@ (8006cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8006c82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c88:	b29a      	uxth	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	7b7a      	ldrb	r2, [r7, #13]
 8006c94:	4909      	ldr	r1, [pc, #36]	@ (8006cbc <UARTEx_SetNbDataToProcess+0x94>)
 8006c96:	5c8a      	ldrb	r2, [r1, r2]
 8006c98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c9c:	7b7a      	ldrb	r2, [r7, #13]
 8006c9e:	4908      	ldr	r1, [pc, #32]	@ (8006cc0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ca0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ca2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ca6:	b29a      	uxth	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	0800b7e0 	.word	0x0800b7e0
 8006cc0:	0800b7e8 	.word	0x0800b7e8

08006cc4 <sulp>:
 8006cc4:	b570      	push	{r4, r5, r6, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	460d      	mov	r5, r1
 8006cca:	ec45 4b10 	vmov	d0, r4, r5
 8006cce:	4616      	mov	r6, r2
 8006cd0:	f003 fd86 	bl	800a7e0 <__ulp>
 8006cd4:	ec51 0b10 	vmov	r0, r1, d0
 8006cd8:	b17e      	cbz	r6, 8006cfa <sulp+0x36>
 8006cda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006cde:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	dd09      	ble.n	8006cfa <sulp+0x36>
 8006ce6:	051b      	lsls	r3, r3, #20
 8006ce8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006cec:	2400      	movs	r4, #0
 8006cee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cf2:	4622      	mov	r2, r4
 8006cf4:	462b      	mov	r3, r5
 8006cf6:	f7f9 fca7 	bl	8000648 <__aeabi_dmul>
 8006cfa:	ec41 0b10 	vmov	d0, r0, r1
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}

08006d00 <_strtod_l>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	b09f      	sub	sp, #124	@ 0x7c
 8006d06:	460c      	mov	r4, r1
 8006d08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006d0e:	9005      	str	r0, [sp, #20]
 8006d10:	f04f 0a00 	mov.w	sl, #0
 8006d14:	f04f 0b00 	mov.w	fp, #0
 8006d18:	460a      	mov	r2, r1
 8006d1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d1c:	7811      	ldrb	r1, [r2, #0]
 8006d1e:	292b      	cmp	r1, #43	@ 0x2b
 8006d20:	d04a      	beq.n	8006db8 <_strtod_l+0xb8>
 8006d22:	d838      	bhi.n	8006d96 <_strtod_l+0x96>
 8006d24:	290d      	cmp	r1, #13
 8006d26:	d832      	bhi.n	8006d8e <_strtod_l+0x8e>
 8006d28:	2908      	cmp	r1, #8
 8006d2a:	d832      	bhi.n	8006d92 <_strtod_l+0x92>
 8006d2c:	2900      	cmp	r1, #0
 8006d2e:	d03b      	beq.n	8006da8 <_strtod_l+0xa8>
 8006d30:	2200      	movs	r2, #0
 8006d32:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d36:	782a      	ldrb	r2, [r5, #0]
 8006d38:	2a30      	cmp	r2, #48	@ 0x30
 8006d3a:	f040 80b2 	bne.w	8006ea2 <_strtod_l+0x1a2>
 8006d3e:	786a      	ldrb	r2, [r5, #1]
 8006d40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d44:	2a58      	cmp	r2, #88	@ 0x58
 8006d46:	d16e      	bne.n	8006e26 <_strtod_l+0x126>
 8006d48:	9302      	str	r3, [sp, #8]
 8006d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d4c:	9301      	str	r3, [sp, #4]
 8006d4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	4a8f      	ldr	r2, [pc, #572]	@ (8006f90 <_strtod_l+0x290>)
 8006d54:	9805      	ldr	r0, [sp, #20]
 8006d56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d58:	a919      	add	r1, sp, #100	@ 0x64
 8006d5a:	f002 fe3b 	bl	80099d4 <__gethex>
 8006d5e:	f010 060f 	ands.w	r6, r0, #15
 8006d62:	4604      	mov	r4, r0
 8006d64:	d005      	beq.n	8006d72 <_strtod_l+0x72>
 8006d66:	2e06      	cmp	r6, #6
 8006d68:	d128      	bne.n	8006dbc <_strtod_l+0xbc>
 8006d6a:	3501      	adds	r5, #1
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d70:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f040 858e 	bne.w	8007896 <_strtod_l+0xb96>
 8006d7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d7c:	b1cb      	cbz	r3, 8006db2 <_strtod_l+0xb2>
 8006d7e:	4652      	mov	r2, sl
 8006d80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006d84:	ec43 2b10 	vmov	d0, r2, r3
 8006d88:	b01f      	add	sp, #124	@ 0x7c
 8006d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8e:	2920      	cmp	r1, #32
 8006d90:	d1ce      	bne.n	8006d30 <_strtod_l+0x30>
 8006d92:	3201      	adds	r2, #1
 8006d94:	e7c1      	b.n	8006d1a <_strtod_l+0x1a>
 8006d96:	292d      	cmp	r1, #45	@ 0x2d
 8006d98:	d1ca      	bne.n	8006d30 <_strtod_l+0x30>
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	910e      	str	r1, [sp, #56]	@ 0x38
 8006d9e:	1c51      	adds	r1, r2, #1
 8006da0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006da2:	7852      	ldrb	r2, [r2, #1]
 8006da4:	2a00      	cmp	r2, #0
 8006da6:	d1c5      	bne.n	8006d34 <_strtod_l+0x34>
 8006da8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006daa:	9419      	str	r4, [sp, #100]	@ 0x64
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f040 8570 	bne.w	8007892 <_strtod_l+0xb92>
 8006db2:	4652      	mov	r2, sl
 8006db4:	465b      	mov	r3, fp
 8006db6:	e7e5      	b.n	8006d84 <_strtod_l+0x84>
 8006db8:	2100      	movs	r1, #0
 8006dba:	e7ef      	b.n	8006d9c <_strtod_l+0x9c>
 8006dbc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dbe:	b13a      	cbz	r2, 8006dd0 <_strtod_l+0xd0>
 8006dc0:	2135      	movs	r1, #53	@ 0x35
 8006dc2:	a81c      	add	r0, sp, #112	@ 0x70
 8006dc4:	f003 fe06 	bl	800a9d4 <__copybits>
 8006dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dca:	9805      	ldr	r0, [sp, #20]
 8006dcc:	f003 f9dc 	bl	800a188 <_Bfree>
 8006dd0:	3e01      	subs	r6, #1
 8006dd2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006dd4:	2e04      	cmp	r6, #4
 8006dd6:	d806      	bhi.n	8006de6 <_strtod_l+0xe6>
 8006dd8:	e8df f006 	tbb	[pc, r6]
 8006ddc:	201d0314 	.word	0x201d0314
 8006de0:	14          	.byte	0x14
 8006de1:	00          	.byte	0x00
 8006de2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006de6:	05e1      	lsls	r1, r4, #23
 8006de8:	bf48      	it	mi
 8006dea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006df2:	0d1b      	lsrs	r3, r3, #20
 8006df4:	051b      	lsls	r3, r3, #20
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1bb      	bne.n	8006d72 <_strtod_l+0x72>
 8006dfa:	f001 fe95 	bl	8008b28 <__errno>
 8006dfe:	2322      	movs	r3, #34	@ 0x22
 8006e00:	6003      	str	r3, [r0, #0]
 8006e02:	e7b6      	b.n	8006d72 <_strtod_l+0x72>
 8006e04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006e08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006e0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006e10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006e14:	e7e7      	b.n	8006de6 <_strtod_l+0xe6>
 8006e16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006f98 <_strtod_l+0x298>
 8006e1a:	e7e4      	b.n	8006de6 <_strtod_l+0xe6>
 8006e1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006e20:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006e24:	e7df      	b.n	8006de6 <_strtod_l+0xe6>
 8006e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e2c:	785b      	ldrb	r3, [r3, #1]
 8006e2e:	2b30      	cmp	r3, #48	@ 0x30
 8006e30:	d0f9      	beq.n	8006e26 <_strtod_l+0x126>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d09d      	beq.n	8006d72 <_strtod_l+0x72>
 8006e36:	2301      	movs	r3, #1
 8006e38:	2700      	movs	r7, #0
 8006e3a:	9308      	str	r3, [sp, #32]
 8006e3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e40:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e42:	46b9      	mov	r9, r7
 8006e44:	220a      	movs	r2, #10
 8006e46:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e48:	7805      	ldrb	r5, [r0, #0]
 8006e4a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e4e:	b2d9      	uxtb	r1, r3
 8006e50:	2909      	cmp	r1, #9
 8006e52:	d928      	bls.n	8006ea6 <_strtod_l+0x1a6>
 8006e54:	494f      	ldr	r1, [pc, #316]	@ (8006f94 <_strtod_l+0x294>)
 8006e56:	2201      	movs	r2, #1
 8006e58:	f001 fe0a 	bl	8008a70 <strncmp>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	d032      	beq.n	8006ec6 <_strtod_l+0x1c6>
 8006e60:	2000      	movs	r0, #0
 8006e62:	462a      	mov	r2, r5
 8006e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e66:	464d      	mov	r5, r9
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2a65      	cmp	r2, #101	@ 0x65
 8006e6c:	d001      	beq.n	8006e72 <_strtod_l+0x172>
 8006e6e:	2a45      	cmp	r2, #69	@ 0x45
 8006e70:	d114      	bne.n	8006e9c <_strtod_l+0x19c>
 8006e72:	b91d      	cbnz	r5, 8006e7c <_strtod_l+0x17c>
 8006e74:	9a08      	ldr	r2, [sp, #32]
 8006e76:	4302      	orrs	r2, r0
 8006e78:	d096      	beq.n	8006da8 <_strtod_l+0xa8>
 8006e7a:	2500      	movs	r5, #0
 8006e7c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e7e:	1c62      	adds	r2, r4, #1
 8006e80:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e82:	7862      	ldrb	r2, [r4, #1]
 8006e84:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e86:	d07a      	beq.n	8006f7e <_strtod_l+0x27e>
 8006e88:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e8a:	d07e      	beq.n	8006f8a <_strtod_l+0x28a>
 8006e8c:	f04f 0c00 	mov.w	ip, #0
 8006e90:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e94:	2909      	cmp	r1, #9
 8006e96:	f240 8085 	bls.w	8006fa4 <_strtod_l+0x2a4>
 8006e9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e9c:	f04f 0800 	mov.w	r8, #0
 8006ea0:	e0a5      	b.n	8006fee <_strtod_l+0x2ee>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	e7c8      	b.n	8006e38 <_strtod_l+0x138>
 8006ea6:	f1b9 0f08 	cmp.w	r9, #8
 8006eaa:	bfd8      	it	le
 8006eac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006eae:	f100 0001 	add.w	r0, r0, #1
 8006eb2:	bfda      	itte	le
 8006eb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8006eb8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006eba:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006ebe:	f109 0901 	add.w	r9, r9, #1
 8006ec2:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ec4:	e7bf      	b.n	8006e46 <_strtod_l+0x146>
 8006ec6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	9219      	str	r2, [sp, #100]	@ 0x64
 8006ecc:	785a      	ldrb	r2, [r3, #1]
 8006ece:	f1b9 0f00 	cmp.w	r9, #0
 8006ed2:	d03b      	beq.n	8006f4c <_strtod_l+0x24c>
 8006ed4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ed6:	464d      	mov	r5, r9
 8006ed8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006edc:	2b09      	cmp	r3, #9
 8006ede:	d912      	bls.n	8006f06 <_strtod_l+0x206>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e7c2      	b.n	8006e6a <_strtod_l+0x16a>
 8006ee4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eea:	785a      	ldrb	r2, [r3, #1]
 8006eec:	3001      	adds	r0, #1
 8006eee:	2a30      	cmp	r2, #48	@ 0x30
 8006ef0:	d0f8      	beq.n	8006ee4 <_strtod_l+0x1e4>
 8006ef2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ef6:	2b08      	cmp	r3, #8
 8006ef8:	f200 84d2 	bhi.w	80078a0 <_strtod_l+0xba0>
 8006efc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006efe:	900a      	str	r0, [sp, #40]	@ 0x28
 8006f00:	2000      	movs	r0, #0
 8006f02:	930c      	str	r3, [sp, #48]	@ 0x30
 8006f04:	4605      	mov	r5, r0
 8006f06:	3a30      	subs	r2, #48	@ 0x30
 8006f08:	f100 0301 	add.w	r3, r0, #1
 8006f0c:	d018      	beq.n	8006f40 <_strtod_l+0x240>
 8006f0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f10:	4419      	add	r1, r3
 8006f12:	910a      	str	r1, [sp, #40]	@ 0x28
 8006f14:	462e      	mov	r6, r5
 8006f16:	f04f 0e0a 	mov.w	lr, #10
 8006f1a:	1c71      	adds	r1, r6, #1
 8006f1c:	eba1 0c05 	sub.w	ip, r1, r5
 8006f20:	4563      	cmp	r3, ip
 8006f22:	dc15      	bgt.n	8006f50 <_strtod_l+0x250>
 8006f24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006f28:	182b      	adds	r3, r5, r0
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	f105 0501 	add.w	r5, r5, #1
 8006f30:	4405      	add	r5, r0
 8006f32:	dc1a      	bgt.n	8006f6a <_strtod_l+0x26a>
 8006f34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f36:	230a      	movs	r3, #10
 8006f38:	fb03 2301 	mla	r3, r3, r1, r2
 8006f3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f3e:	2300      	movs	r3, #0
 8006f40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f42:	1c51      	adds	r1, r2, #1
 8006f44:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f46:	7852      	ldrb	r2, [r2, #1]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	e7c5      	b.n	8006ed8 <_strtod_l+0x1d8>
 8006f4c:	4648      	mov	r0, r9
 8006f4e:	e7ce      	b.n	8006eee <_strtod_l+0x1ee>
 8006f50:	2e08      	cmp	r6, #8
 8006f52:	dc05      	bgt.n	8006f60 <_strtod_l+0x260>
 8006f54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f56:	fb0e f606 	mul.w	r6, lr, r6
 8006f5a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006f5c:	460e      	mov	r6, r1
 8006f5e:	e7dc      	b.n	8006f1a <_strtod_l+0x21a>
 8006f60:	2910      	cmp	r1, #16
 8006f62:	bfd8      	it	le
 8006f64:	fb0e f707 	mulle.w	r7, lr, r7
 8006f68:	e7f8      	b.n	8006f5c <_strtod_l+0x25c>
 8006f6a:	2b0f      	cmp	r3, #15
 8006f6c:	bfdc      	itt	le
 8006f6e:	230a      	movle	r3, #10
 8006f70:	fb03 2707 	mlale	r7, r3, r7, r2
 8006f74:	e7e3      	b.n	8006f3e <_strtod_l+0x23e>
 8006f76:	2300      	movs	r3, #0
 8006f78:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e77a      	b.n	8006e74 <_strtod_l+0x174>
 8006f7e:	f04f 0c00 	mov.w	ip, #0
 8006f82:	1ca2      	adds	r2, r4, #2
 8006f84:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f86:	78a2      	ldrb	r2, [r4, #2]
 8006f88:	e782      	b.n	8006e90 <_strtod_l+0x190>
 8006f8a:	f04f 0c01 	mov.w	ip, #1
 8006f8e:	e7f8      	b.n	8006f82 <_strtod_l+0x282>
 8006f90:	0800b9dc 	.word	0x0800b9dc
 8006f94:	0800b7f0 	.word	0x0800b7f0
 8006f98:	7ff00000 	.word	0x7ff00000
 8006f9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f9e:	1c51      	adds	r1, r2, #1
 8006fa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8006fa2:	7852      	ldrb	r2, [r2, #1]
 8006fa4:	2a30      	cmp	r2, #48	@ 0x30
 8006fa6:	d0f9      	beq.n	8006f9c <_strtod_l+0x29c>
 8006fa8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006fac:	2908      	cmp	r1, #8
 8006fae:	f63f af75 	bhi.w	8006e9c <_strtod_l+0x19c>
 8006fb2:	3a30      	subs	r2, #48	@ 0x30
 8006fb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fb8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006fba:	f04f 080a 	mov.w	r8, #10
 8006fbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006fc0:	1c56      	adds	r6, r2, #1
 8006fc2:	9619      	str	r6, [sp, #100]	@ 0x64
 8006fc4:	7852      	ldrb	r2, [r2, #1]
 8006fc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006fca:	f1be 0f09 	cmp.w	lr, #9
 8006fce:	d939      	bls.n	8007044 <_strtod_l+0x344>
 8006fd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fd2:	1a76      	subs	r6, r6, r1
 8006fd4:	2e08      	cmp	r6, #8
 8006fd6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006fda:	dc03      	bgt.n	8006fe4 <_strtod_l+0x2e4>
 8006fdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fde:	4588      	cmp	r8, r1
 8006fe0:	bfa8      	it	ge
 8006fe2:	4688      	movge	r8, r1
 8006fe4:	f1bc 0f00 	cmp.w	ip, #0
 8006fe8:	d001      	beq.n	8006fee <_strtod_l+0x2ee>
 8006fea:	f1c8 0800 	rsb	r8, r8, #0
 8006fee:	2d00      	cmp	r5, #0
 8006ff0:	d14e      	bne.n	8007090 <_strtod_l+0x390>
 8006ff2:	9908      	ldr	r1, [sp, #32]
 8006ff4:	4308      	orrs	r0, r1
 8006ff6:	f47f aebc 	bne.w	8006d72 <_strtod_l+0x72>
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f47f aed4 	bne.w	8006da8 <_strtod_l+0xa8>
 8007000:	2a69      	cmp	r2, #105	@ 0x69
 8007002:	d028      	beq.n	8007056 <_strtod_l+0x356>
 8007004:	dc25      	bgt.n	8007052 <_strtod_l+0x352>
 8007006:	2a49      	cmp	r2, #73	@ 0x49
 8007008:	d025      	beq.n	8007056 <_strtod_l+0x356>
 800700a:	2a4e      	cmp	r2, #78	@ 0x4e
 800700c:	f47f aecc 	bne.w	8006da8 <_strtod_l+0xa8>
 8007010:	499a      	ldr	r1, [pc, #616]	@ (800727c <_strtod_l+0x57c>)
 8007012:	a819      	add	r0, sp, #100	@ 0x64
 8007014:	f002 ff00 	bl	8009e18 <__match>
 8007018:	2800      	cmp	r0, #0
 800701a:	f43f aec5 	beq.w	8006da8 <_strtod_l+0xa8>
 800701e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b28      	cmp	r3, #40	@ 0x28
 8007024:	d12e      	bne.n	8007084 <_strtod_l+0x384>
 8007026:	4996      	ldr	r1, [pc, #600]	@ (8007280 <_strtod_l+0x580>)
 8007028:	aa1c      	add	r2, sp, #112	@ 0x70
 800702a:	a819      	add	r0, sp, #100	@ 0x64
 800702c:	f002 ff08 	bl	8009e40 <__hexnan>
 8007030:	2805      	cmp	r0, #5
 8007032:	d127      	bne.n	8007084 <_strtod_l+0x384>
 8007034:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007036:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800703a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800703e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007042:	e696      	b.n	8006d72 <_strtod_l+0x72>
 8007044:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007046:	fb08 2101 	mla	r1, r8, r1, r2
 800704a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800704e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007050:	e7b5      	b.n	8006fbe <_strtod_l+0x2be>
 8007052:	2a6e      	cmp	r2, #110	@ 0x6e
 8007054:	e7da      	b.n	800700c <_strtod_l+0x30c>
 8007056:	498b      	ldr	r1, [pc, #556]	@ (8007284 <_strtod_l+0x584>)
 8007058:	a819      	add	r0, sp, #100	@ 0x64
 800705a:	f002 fedd 	bl	8009e18 <__match>
 800705e:	2800      	cmp	r0, #0
 8007060:	f43f aea2 	beq.w	8006da8 <_strtod_l+0xa8>
 8007064:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007066:	4988      	ldr	r1, [pc, #544]	@ (8007288 <_strtod_l+0x588>)
 8007068:	3b01      	subs	r3, #1
 800706a:	a819      	add	r0, sp, #100	@ 0x64
 800706c:	9319      	str	r3, [sp, #100]	@ 0x64
 800706e:	f002 fed3 	bl	8009e18 <__match>
 8007072:	b910      	cbnz	r0, 800707a <_strtod_l+0x37a>
 8007074:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007076:	3301      	adds	r3, #1
 8007078:	9319      	str	r3, [sp, #100]	@ 0x64
 800707a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007298 <_strtod_l+0x598>
 800707e:	f04f 0a00 	mov.w	sl, #0
 8007082:	e676      	b.n	8006d72 <_strtod_l+0x72>
 8007084:	4881      	ldr	r0, [pc, #516]	@ (800728c <_strtod_l+0x58c>)
 8007086:	f001 fd8b 	bl	8008ba0 <nan>
 800708a:	ec5b ab10 	vmov	sl, fp, d0
 800708e:	e670      	b.n	8006d72 <_strtod_l+0x72>
 8007090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007092:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007094:	eba8 0303 	sub.w	r3, r8, r3
 8007098:	f1b9 0f00 	cmp.w	r9, #0
 800709c:	bf08      	it	eq
 800709e:	46a9      	moveq	r9, r5
 80070a0:	2d10      	cmp	r5, #16
 80070a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a4:	462c      	mov	r4, r5
 80070a6:	bfa8      	it	ge
 80070a8:	2410      	movge	r4, #16
 80070aa:	f7f9 fa53 	bl	8000554 <__aeabi_ui2d>
 80070ae:	2d09      	cmp	r5, #9
 80070b0:	4682      	mov	sl, r0
 80070b2:	468b      	mov	fp, r1
 80070b4:	dc13      	bgt.n	80070de <_strtod_l+0x3de>
 80070b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	f43f ae5a 	beq.w	8006d72 <_strtod_l+0x72>
 80070be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c0:	dd78      	ble.n	80071b4 <_strtod_l+0x4b4>
 80070c2:	2b16      	cmp	r3, #22
 80070c4:	dc5f      	bgt.n	8007186 <_strtod_l+0x486>
 80070c6:	4972      	ldr	r1, [pc, #456]	@ (8007290 <_strtod_l+0x590>)
 80070c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070d0:	4652      	mov	r2, sl
 80070d2:	465b      	mov	r3, fp
 80070d4:	f7f9 fab8 	bl	8000648 <__aeabi_dmul>
 80070d8:	4682      	mov	sl, r0
 80070da:	468b      	mov	fp, r1
 80070dc:	e649      	b.n	8006d72 <_strtod_l+0x72>
 80070de:	4b6c      	ldr	r3, [pc, #432]	@ (8007290 <_strtod_l+0x590>)
 80070e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070e4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070e8:	f7f9 faae 	bl	8000648 <__aeabi_dmul>
 80070ec:	4682      	mov	sl, r0
 80070ee:	4638      	mov	r0, r7
 80070f0:	468b      	mov	fp, r1
 80070f2:	f7f9 fa2f 	bl	8000554 <__aeabi_ui2d>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	4650      	mov	r0, sl
 80070fc:	4659      	mov	r1, fp
 80070fe:	f7f9 f8ed 	bl	80002dc <__adddf3>
 8007102:	2d0f      	cmp	r5, #15
 8007104:	4682      	mov	sl, r0
 8007106:	468b      	mov	fp, r1
 8007108:	ddd5      	ble.n	80070b6 <_strtod_l+0x3b6>
 800710a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710c:	1b2c      	subs	r4, r5, r4
 800710e:	441c      	add	r4, r3
 8007110:	2c00      	cmp	r4, #0
 8007112:	f340 8093 	ble.w	800723c <_strtod_l+0x53c>
 8007116:	f014 030f 	ands.w	r3, r4, #15
 800711a:	d00a      	beq.n	8007132 <_strtod_l+0x432>
 800711c:	495c      	ldr	r1, [pc, #368]	@ (8007290 <_strtod_l+0x590>)
 800711e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007122:	4652      	mov	r2, sl
 8007124:	465b      	mov	r3, fp
 8007126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800712a:	f7f9 fa8d 	bl	8000648 <__aeabi_dmul>
 800712e:	4682      	mov	sl, r0
 8007130:	468b      	mov	fp, r1
 8007132:	f034 040f 	bics.w	r4, r4, #15
 8007136:	d073      	beq.n	8007220 <_strtod_l+0x520>
 8007138:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800713c:	dd49      	ble.n	80071d2 <_strtod_l+0x4d2>
 800713e:	2400      	movs	r4, #0
 8007140:	46a0      	mov	r8, r4
 8007142:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007144:	46a1      	mov	r9, r4
 8007146:	9a05      	ldr	r2, [sp, #20]
 8007148:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007298 <_strtod_l+0x598>
 800714c:	2322      	movs	r3, #34	@ 0x22
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	f04f 0a00 	mov.w	sl, #0
 8007154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007156:	2b00      	cmp	r3, #0
 8007158:	f43f ae0b 	beq.w	8006d72 <_strtod_l+0x72>
 800715c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800715e:	9805      	ldr	r0, [sp, #20]
 8007160:	f003 f812 	bl	800a188 <_Bfree>
 8007164:	9805      	ldr	r0, [sp, #20]
 8007166:	4649      	mov	r1, r9
 8007168:	f003 f80e 	bl	800a188 <_Bfree>
 800716c:	9805      	ldr	r0, [sp, #20]
 800716e:	4641      	mov	r1, r8
 8007170:	f003 f80a 	bl	800a188 <_Bfree>
 8007174:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007176:	9805      	ldr	r0, [sp, #20]
 8007178:	f003 f806 	bl	800a188 <_Bfree>
 800717c:	9805      	ldr	r0, [sp, #20]
 800717e:	4621      	mov	r1, r4
 8007180:	f003 f802 	bl	800a188 <_Bfree>
 8007184:	e5f5      	b.n	8006d72 <_strtod_l+0x72>
 8007186:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007188:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800718c:	4293      	cmp	r3, r2
 800718e:	dbbc      	blt.n	800710a <_strtod_l+0x40a>
 8007190:	4c3f      	ldr	r4, [pc, #252]	@ (8007290 <_strtod_l+0x590>)
 8007192:	f1c5 050f 	rsb	r5, r5, #15
 8007196:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800719a:	4652      	mov	r2, sl
 800719c:	465b      	mov	r3, fp
 800719e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071a2:	f7f9 fa51 	bl	8000648 <__aeabi_dmul>
 80071a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a8:	1b5d      	subs	r5, r3, r5
 80071aa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80071ae:	e9d4 2300 	ldrd	r2, r3, [r4]
 80071b2:	e78f      	b.n	80070d4 <_strtod_l+0x3d4>
 80071b4:	3316      	adds	r3, #22
 80071b6:	dba8      	blt.n	800710a <_strtod_l+0x40a>
 80071b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ba:	eba3 0808 	sub.w	r8, r3, r8
 80071be:	4b34      	ldr	r3, [pc, #208]	@ (8007290 <_strtod_l+0x590>)
 80071c0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80071c4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80071c8:	4650      	mov	r0, sl
 80071ca:	4659      	mov	r1, fp
 80071cc:	f7f9 fb66 	bl	800089c <__aeabi_ddiv>
 80071d0:	e782      	b.n	80070d8 <_strtod_l+0x3d8>
 80071d2:	2300      	movs	r3, #0
 80071d4:	4f2f      	ldr	r7, [pc, #188]	@ (8007294 <_strtod_l+0x594>)
 80071d6:	1124      	asrs	r4, r4, #4
 80071d8:	4650      	mov	r0, sl
 80071da:	4659      	mov	r1, fp
 80071dc:	461e      	mov	r6, r3
 80071de:	2c01      	cmp	r4, #1
 80071e0:	dc21      	bgt.n	8007226 <_strtod_l+0x526>
 80071e2:	b10b      	cbz	r3, 80071e8 <_strtod_l+0x4e8>
 80071e4:	4682      	mov	sl, r0
 80071e6:	468b      	mov	fp, r1
 80071e8:	492a      	ldr	r1, [pc, #168]	@ (8007294 <_strtod_l+0x594>)
 80071ea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071ee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071f2:	4652      	mov	r2, sl
 80071f4:	465b      	mov	r3, fp
 80071f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071fa:	f7f9 fa25 	bl	8000648 <__aeabi_dmul>
 80071fe:	4b26      	ldr	r3, [pc, #152]	@ (8007298 <_strtod_l+0x598>)
 8007200:	460a      	mov	r2, r1
 8007202:	400b      	ands	r3, r1
 8007204:	4925      	ldr	r1, [pc, #148]	@ (800729c <_strtod_l+0x59c>)
 8007206:	428b      	cmp	r3, r1
 8007208:	4682      	mov	sl, r0
 800720a:	d898      	bhi.n	800713e <_strtod_l+0x43e>
 800720c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007210:	428b      	cmp	r3, r1
 8007212:	bf86      	itte	hi
 8007214:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80072a0 <_strtod_l+0x5a0>
 8007218:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800721c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007220:	2300      	movs	r3, #0
 8007222:	9308      	str	r3, [sp, #32]
 8007224:	e076      	b.n	8007314 <_strtod_l+0x614>
 8007226:	07e2      	lsls	r2, r4, #31
 8007228:	d504      	bpl.n	8007234 <_strtod_l+0x534>
 800722a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800722e:	f7f9 fa0b 	bl	8000648 <__aeabi_dmul>
 8007232:	2301      	movs	r3, #1
 8007234:	3601      	adds	r6, #1
 8007236:	1064      	asrs	r4, r4, #1
 8007238:	3708      	adds	r7, #8
 800723a:	e7d0      	b.n	80071de <_strtod_l+0x4de>
 800723c:	d0f0      	beq.n	8007220 <_strtod_l+0x520>
 800723e:	4264      	negs	r4, r4
 8007240:	f014 020f 	ands.w	r2, r4, #15
 8007244:	d00a      	beq.n	800725c <_strtod_l+0x55c>
 8007246:	4b12      	ldr	r3, [pc, #72]	@ (8007290 <_strtod_l+0x590>)
 8007248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724c:	4650      	mov	r0, sl
 800724e:	4659      	mov	r1, fp
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	f7f9 fb22 	bl	800089c <__aeabi_ddiv>
 8007258:	4682      	mov	sl, r0
 800725a:	468b      	mov	fp, r1
 800725c:	1124      	asrs	r4, r4, #4
 800725e:	d0df      	beq.n	8007220 <_strtod_l+0x520>
 8007260:	2c1f      	cmp	r4, #31
 8007262:	dd1f      	ble.n	80072a4 <_strtod_l+0x5a4>
 8007264:	2400      	movs	r4, #0
 8007266:	46a0      	mov	r8, r4
 8007268:	940b      	str	r4, [sp, #44]	@ 0x2c
 800726a:	46a1      	mov	r9, r4
 800726c:	9a05      	ldr	r2, [sp, #20]
 800726e:	2322      	movs	r3, #34	@ 0x22
 8007270:	f04f 0a00 	mov.w	sl, #0
 8007274:	f04f 0b00 	mov.w	fp, #0
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e76b      	b.n	8007154 <_strtod_l+0x454>
 800727c:	0800b7ff 	.word	0x0800b7ff
 8007280:	0800b9c8 	.word	0x0800b9c8
 8007284:	0800b7f7 	.word	0x0800b7f7
 8007288:	0800b836 	.word	0x0800b836
 800728c:	0800b9c5 	.word	0x0800b9c5
 8007290:	0800ba50 	.word	0x0800ba50
 8007294:	0800ba28 	.word	0x0800ba28
 8007298:	7ff00000 	.word	0x7ff00000
 800729c:	7ca00000 	.word	0x7ca00000
 80072a0:	7fefffff 	.word	0x7fefffff
 80072a4:	f014 0310 	ands.w	r3, r4, #16
 80072a8:	bf18      	it	ne
 80072aa:	236a      	movne	r3, #106	@ 0x6a
 80072ac:	4ea9      	ldr	r6, [pc, #676]	@ (8007554 <_strtod_l+0x854>)
 80072ae:	9308      	str	r3, [sp, #32]
 80072b0:	4650      	mov	r0, sl
 80072b2:	4659      	mov	r1, fp
 80072b4:	2300      	movs	r3, #0
 80072b6:	07e7      	lsls	r7, r4, #31
 80072b8:	d504      	bpl.n	80072c4 <_strtod_l+0x5c4>
 80072ba:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072be:	f7f9 f9c3 	bl	8000648 <__aeabi_dmul>
 80072c2:	2301      	movs	r3, #1
 80072c4:	1064      	asrs	r4, r4, #1
 80072c6:	f106 0608 	add.w	r6, r6, #8
 80072ca:	d1f4      	bne.n	80072b6 <_strtod_l+0x5b6>
 80072cc:	b10b      	cbz	r3, 80072d2 <_strtod_l+0x5d2>
 80072ce:	4682      	mov	sl, r0
 80072d0:	468b      	mov	fp, r1
 80072d2:	9b08      	ldr	r3, [sp, #32]
 80072d4:	b1b3      	cbz	r3, 8007304 <_strtod_l+0x604>
 80072d6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072da:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072de:	2b00      	cmp	r3, #0
 80072e0:	4659      	mov	r1, fp
 80072e2:	dd0f      	ble.n	8007304 <_strtod_l+0x604>
 80072e4:	2b1f      	cmp	r3, #31
 80072e6:	dd56      	ble.n	8007396 <_strtod_l+0x696>
 80072e8:	2b34      	cmp	r3, #52	@ 0x34
 80072ea:	bfde      	ittt	le
 80072ec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 80072f0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072f4:	4093      	lslle	r3, r2
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	bfcc      	ite	gt
 80072fc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007300:	ea03 0b01 	andle.w	fp, r3, r1
 8007304:	2200      	movs	r2, #0
 8007306:	2300      	movs	r3, #0
 8007308:	4650      	mov	r0, sl
 800730a:	4659      	mov	r1, fp
 800730c:	f7f9 fc04 	bl	8000b18 <__aeabi_dcmpeq>
 8007310:	2800      	cmp	r0, #0
 8007312:	d1a7      	bne.n	8007264 <_strtod_l+0x564>
 8007314:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800731a:	9805      	ldr	r0, [sp, #20]
 800731c:	462b      	mov	r3, r5
 800731e:	464a      	mov	r2, r9
 8007320:	f002 ff9a 	bl	800a258 <__s2b>
 8007324:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f af09 	beq.w	800713e <_strtod_l+0x43e>
 800732c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800732e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007330:	2a00      	cmp	r2, #0
 8007332:	eba3 0308 	sub.w	r3, r3, r8
 8007336:	bfa8      	it	ge
 8007338:	2300      	movge	r3, #0
 800733a:	9312      	str	r3, [sp, #72]	@ 0x48
 800733c:	2400      	movs	r4, #0
 800733e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007342:	9316      	str	r3, [sp, #88]	@ 0x58
 8007344:	46a0      	mov	r8, r4
 8007346:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007348:	9805      	ldr	r0, [sp, #20]
 800734a:	6859      	ldr	r1, [r3, #4]
 800734c:	f002 fedc 	bl	800a108 <_Balloc>
 8007350:	4681      	mov	r9, r0
 8007352:	2800      	cmp	r0, #0
 8007354:	f43f aef7 	beq.w	8007146 <_strtod_l+0x446>
 8007358:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800735a:	691a      	ldr	r2, [r3, #16]
 800735c:	3202      	adds	r2, #2
 800735e:	f103 010c 	add.w	r1, r3, #12
 8007362:	0092      	lsls	r2, r2, #2
 8007364:	300c      	adds	r0, #12
 8007366:	f001 fc0c 	bl	8008b82 <memcpy>
 800736a:	ec4b ab10 	vmov	d0, sl, fp
 800736e:	9805      	ldr	r0, [sp, #20]
 8007370:	aa1c      	add	r2, sp, #112	@ 0x70
 8007372:	a91b      	add	r1, sp, #108	@ 0x6c
 8007374:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007378:	f003 faa2 	bl	800a8c0 <__d2b>
 800737c:	901a      	str	r0, [sp, #104]	@ 0x68
 800737e:	2800      	cmp	r0, #0
 8007380:	f43f aee1 	beq.w	8007146 <_strtod_l+0x446>
 8007384:	9805      	ldr	r0, [sp, #20]
 8007386:	2101      	movs	r1, #1
 8007388:	f002 fffc 	bl	800a384 <__i2b>
 800738c:	4680      	mov	r8, r0
 800738e:	b948      	cbnz	r0, 80073a4 <_strtod_l+0x6a4>
 8007390:	f04f 0800 	mov.w	r8, #0
 8007394:	e6d7      	b.n	8007146 <_strtod_l+0x446>
 8007396:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	ea03 0a0a 	and.w	sl, r3, sl
 80073a2:	e7af      	b.n	8007304 <_strtod_l+0x604>
 80073a4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80073a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80073a8:	2d00      	cmp	r5, #0
 80073aa:	bfab      	itete	ge
 80073ac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80073ae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80073b0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80073b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80073b4:	bfac      	ite	ge
 80073b6:	18ef      	addge	r7, r5, r3
 80073b8:	1b5e      	sublt	r6, r3, r5
 80073ba:	9b08      	ldr	r3, [sp, #32]
 80073bc:	1aed      	subs	r5, r5, r3
 80073be:	4415      	add	r5, r2
 80073c0:	4b65      	ldr	r3, [pc, #404]	@ (8007558 <_strtod_l+0x858>)
 80073c2:	3d01      	subs	r5, #1
 80073c4:	429d      	cmp	r5, r3
 80073c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80073ca:	da50      	bge.n	800746e <_strtod_l+0x76e>
 80073cc:	1b5b      	subs	r3, r3, r5
 80073ce:	2b1f      	cmp	r3, #31
 80073d0:	eba2 0203 	sub.w	r2, r2, r3
 80073d4:	f04f 0101 	mov.w	r1, #1
 80073d8:	dc3d      	bgt.n	8007456 <_strtod_l+0x756>
 80073da:	fa01 f303 	lsl.w	r3, r1, r3
 80073de:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073e0:	2300      	movs	r3, #0
 80073e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80073e4:	18bd      	adds	r5, r7, r2
 80073e6:	9b08      	ldr	r3, [sp, #32]
 80073e8:	42af      	cmp	r7, r5
 80073ea:	4416      	add	r6, r2
 80073ec:	441e      	add	r6, r3
 80073ee:	463b      	mov	r3, r7
 80073f0:	bfa8      	it	ge
 80073f2:	462b      	movge	r3, r5
 80073f4:	42b3      	cmp	r3, r6
 80073f6:	bfa8      	it	ge
 80073f8:	4633      	movge	r3, r6
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	bfc2      	ittt	gt
 80073fe:	1aed      	subgt	r5, r5, r3
 8007400:	1af6      	subgt	r6, r6, r3
 8007402:	1aff      	subgt	r7, r7, r3
 8007404:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007406:	2b00      	cmp	r3, #0
 8007408:	dd16      	ble.n	8007438 <_strtod_l+0x738>
 800740a:	4641      	mov	r1, r8
 800740c:	9805      	ldr	r0, [sp, #20]
 800740e:	461a      	mov	r2, r3
 8007410:	f003 f870 	bl	800a4f4 <__pow5mult>
 8007414:	4680      	mov	r8, r0
 8007416:	2800      	cmp	r0, #0
 8007418:	d0ba      	beq.n	8007390 <_strtod_l+0x690>
 800741a:	4601      	mov	r1, r0
 800741c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800741e:	9805      	ldr	r0, [sp, #20]
 8007420:	f002 ffc6 	bl	800a3b0 <__multiply>
 8007424:	900a      	str	r0, [sp, #40]	@ 0x28
 8007426:	2800      	cmp	r0, #0
 8007428:	f43f ae8d 	beq.w	8007146 <_strtod_l+0x446>
 800742c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	f002 feaa 	bl	800a188 <_Bfree>
 8007434:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007436:	931a      	str	r3, [sp, #104]	@ 0x68
 8007438:	2d00      	cmp	r5, #0
 800743a:	dc1d      	bgt.n	8007478 <_strtod_l+0x778>
 800743c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743e:	2b00      	cmp	r3, #0
 8007440:	dd23      	ble.n	800748a <_strtod_l+0x78a>
 8007442:	4649      	mov	r1, r9
 8007444:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007446:	9805      	ldr	r0, [sp, #20]
 8007448:	f003 f854 	bl	800a4f4 <__pow5mult>
 800744c:	4681      	mov	r9, r0
 800744e:	b9e0      	cbnz	r0, 800748a <_strtod_l+0x78a>
 8007450:	f04f 0900 	mov.w	r9, #0
 8007454:	e677      	b.n	8007146 <_strtod_l+0x446>
 8007456:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800745a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800745e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007462:	35e2      	adds	r5, #226	@ 0xe2
 8007464:	fa01 f305 	lsl.w	r3, r1, r5
 8007468:	9310      	str	r3, [sp, #64]	@ 0x40
 800746a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800746c:	e7ba      	b.n	80073e4 <_strtod_l+0x6e4>
 800746e:	2300      	movs	r3, #0
 8007470:	9310      	str	r3, [sp, #64]	@ 0x40
 8007472:	2301      	movs	r3, #1
 8007474:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007476:	e7b5      	b.n	80073e4 <_strtod_l+0x6e4>
 8007478:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800747a:	9805      	ldr	r0, [sp, #20]
 800747c:	462a      	mov	r2, r5
 800747e:	f003 f893 	bl	800a5a8 <__lshift>
 8007482:	901a      	str	r0, [sp, #104]	@ 0x68
 8007484:	2800      	cmp	r0, #0
 8007486:	d1d9      	bne.n	800743c <_strtod_l+0x73c>
 8007488:	e65d      	b.n	8007146 <_strtod_l+0x446>
 800748a:	2e00      	cmp	r6, #0
 800748c:	dd07      	ble.n	800749e <_strtod_l+0x79e>
 800748e:	4649      	mov	r1, r9
 8007490:	9805      	ldr	r0, [sp, #20]
 8007492:	4632      	mov	r2, r6
 8007494:	f003 f888 	bl	800a5a8 <__lshift>
 8007498:	4681      	mov	r9, r0
 800749a:	2800      	cmp	r0, #0
 800749c:	d0d8      	beq.n	8007450 <_strtod_l+0x750>
 800749e:	2f00      	cmp	r7, #0
 80074a0:	dd08      	ble.n	80074b4 <_strtod_l+0x7b4>
 80074a2:	4641      	mov	r1, r8
 80074a4:	9805      	ldr	r0, [sp, #20]
 80074a6:	463a      	mov	r2, r7
 80074a8:	f003 f87e 	bl	800a5a8 <__lshift>
 80074ac:	4680      	mov	r8, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	f43f ae49 	beq.w	8007146 <_strtod_l+0x446>
 80074b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074b6:	9805      	ldr	r0, [sp, #20]
 80074b8:	464a      	mov	r2, r9
 80074ba:	f003 f8fd 	bl	800a6b8 <__mdiff>
 80074be:	4604      	mov	r4, r0
 80074c0:	2800      	cmp	r0, #0
 80074c2:	f43f ae40 	beq.w	8007146 <_strtod_l+0x446>
 80074c6:	68c3      	ldr	r3, [r0, #12]
 80074c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074ca:	2300      	movs	r3, #0
 80074cc:	60c3      	str	r3, [r0, #12]
 80074ce:	4641      	mov	r1, r8
 80074d0:	f003 f8d6 	bl	800a680 <__mcmp>
 80074d4:	2800      	cmp	r0, #0
 80074d6:	da45      	bge.n	8007564 <_strtod_l+0x864>
 80074d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074da:	ea53 030a 	orrs.w	r3, r3, sl
 80074de:	d16b      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d167      	bne.n	80075b8 <_strtod_l+0x8b8>
 80074e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074ec:	0d1b      	lsrs	r3, r3, #20
 80074ee:	051b      	lsls	r3, r3, #20
 80074f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074f4:	d960      	bls.n	80075b8 <_strtod_l+0x8b8>
 80074f6:	6963      	ldr	r3, [r4, #20]
 80074f8:	b913      	cbnz	r3, 8007500 <_strtod_l+0x800>
 80074fa:	6923      	ldr	r3, [r4, #16]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	dd5b      	ble.n	80075b8 <_strtod_l+0x8b8>
 8007500:	4621      	mov	r1, r4
 8007502:	2201      	movs	r2, #1
 8007504:	9805      	ldr	r0, [sp, #20]
 8007506:	f003 f84f 	bl	800a5a8 <__lshift>
 800750a:	4641      	mov	r1, r8
 800750c:	4604      	mov	r4, r0
 800750e:	f003 f8b7 	bl	800a680 <__mcmp>
 8007512:	2800      	cmp	r0, #0
 8007514:	dd50      	ble.n	80075b8 <_strtod_l+0x8b8>
 8007516:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800751a:	9a08      	ldr	r2, [sp, #32]
 800751c:	0d1b      	lsrs	r3, r3, #20
 800751e:	051b      	lsls	r3, r3, #20
 8007520:	2a00      	cmp	r2, #0
 8007522:	d06a      	beq.n	80075fa <_strtod_l+0x8fa>
 8007524:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007528:	d867      	bhi.n	80075fa <_strtod_l+0x8fa>
 800752a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800752e:	f67f ae9d 	bls.w	800726c <_strtod_l+0x56c>
 8007532:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <_strtod_l+0x85c>)
 8007534:	4650      	mov	r0, sl
 8007536:	4659      	mov	r1, fp
 8007538:	2200      	movs	r2, #0
 800753a:	f7f9 f885 	bl	8000648 <__aeabi_dmul>
 800753e:	4b08      	ldr	r3, [pc, #32]	@ (8007560 <_strtod_l+0x860>)
 8007540:	400b      	ands	r3, r1
 8007542:	4682      	mov	sl, r0
 8007544:	468b      	mov	fp, r1
 8007546:	2b00      	cmp	r3, #0
 8007548:	f47f ae08 	bne.w	800715c <_strtod_l+0x45c>
 800754c:	9a05      	ldr	r2, [sp, #20]
 800754e:	2322      	movs	r3, #34	@ 0x22
 8007550:	6013      	str	r3, [r2, #0]
 8007552:	e603      	b.n	800715c <_strtod_l+0x45c>
 8007554:	0800b9f0 	.word	0x0800b9f0
 8007558:	fffffc02 	.word	0xfffffc02
 800755c:	39500000 	.word	0x39500000
 8007560:	7ff00000 	.word	0x7ff00000
 8007564:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007568:	d165      	bne.n	8007636 <_strtod_l+0x936>
 800756a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800756c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007570:	b35a      	cbz	r2, 80075ca <_strtod_l+0x8ca>
 8007572:	4a9f      	ldr	r2, [pc, #636]	@ (80077f0 <_strtod_l+0xaf0>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d12b      	bne.n	80075d0 <_strtod_l+0x8d0>
 8007578:	9b08      	ldr	r3, [sp, #32]
 800757a:	4651      	mov	r1, sl
 800757c:	b303      	cbz	r3, 80075c0 <_strtod_l+0x8c0>
 800757e:	4b9d      	ldr	r3, [pc, #628]	@ (80077f4 <_strtod_l+0xaf4>)
 8007580:	465a      	mov	r2, fp
 8007582:	4013      	ands	r3, r2
 8007584:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800758c:	d81b      	bhi.n	80075c6 <_strtod_l+0x8c6>
 800758e:	0d1b      	lsrs	r3, r3, #20
 8007590:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007594:	fa02 f303 	lsl.w	r3, r2, r3
 8007598:	4299      	cmp	r1, r3
 800759a:	d119      	bne.n	80075d0 <_strtod_l+0x8d0>
 800759c:	4b96      	ldr	r3, [pc, #600]	@ (80077f8 <_strtod_l+0xaf8>)
 800759e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d102      	bne.n	80075aa <_strtod_l+0x8aa>
 80075a4:	3101      	adds	r1, #1
 80075a6:	f43f adce 	beq.w	8007146 <_strtod_l+0x446>
 80075aa:	4b92      	ldr	r3, [pc, #584]	@ (80077f4 <_strtod_l+0xaf4>)
 80075ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075ae:	401a      	ands	r2, r3
 80075b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80075b4:	f04f 0a00 	mov.w	sl, #0
 80075b8:	9b08      	ldr	r3, [sp, #32]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1b9      	bne.n	8007532 <_strtod_l+0x832>
 80075be:	e5cd      	b.n	800715c <_strtod_l+0x45c>
 80075c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075c4:	e7e8      	b.n	8007598 <_strtod_l+0x898>
 80075c6:	4613      	mov	r3, r2
 80075c8:	e7e6      	b.n	8007598 <_strtod_l+0x898>
 80075ca:	ea53 030a 	orrs.w	r3, r3, sl
 80075ce:	d0a2      	beq.n	8007516 <_strtod_l+0x816>
 80075d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075d2:	b1db      	cbz	r3, 800760c <_strtod_l+0x90c>
 80075d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075d6:	4213      	tst	r3, r2
 80075d8:	d0ee      	beq.n	80075b8 <_strtod_l+0x8b8>
 80075da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075dc:	9a08      	ldr	r2, [sp, #32]
 80075de:	4650      	mov	r0, sl
 80075e0:	4659      	mov	r1, fp
 80075e2:	b1bb      	cbz	r3, 8007614 <_strtod_l+0x914>
 80075e4:	f7ff fb6e 	bl	8006cc4 <sulp>
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ec:	ec53 2b10 	vmov	r2, r3, d0
 80075f0:	f7f8 fe74 	bl	80002dc <__adddf3>
 80075f4:	4682      	mov	sl, r0
 80075f6:	468b      	mov	fp, r1
 80075f8:	e7de      	b.n	80075b8 <_strtod_l+0x8b8>
 80075fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007606:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800760a:	e7d5      	b.n	80075b8 <_strtod_l+0x8b8>
 800760c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800760e:	ea13 0f0a 	tst.w	r3, sl
 8007612:	e7e1      	b.n	80075d8 <_strtod_l+0x8d8>
 8007614:	f7ff fb56 	bl	8006cc4 <sulp>
 8007618:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800761c:	ec53 2b10 	vmov	r2, r3, d0
 8007620:	f7f8 fe5a 	bl	80002d8 <__aeabi_dsub>
 8007624:	2200      	movs	r2, #0
 8007626:	2300      	movs	r3, #0
 8007628:	4682      	mov	sl, r0
 800762a:	468b      	mov	fp, r1
 800762c:	f7f9 fa74 	bl	8000b18 <__aeabi_dcmpeq>
 8007630:	2800      	cmp	r0, #0
 8007632:	d0c1      	beq.n	80075b8 <_strtod_l+0x8b8>
 8007634:	e61a      	b.n	800726c <_strtod_l+0x56c>
 8007636:	4641      	mov	r1, r8
 8007638:	4620      	mov	r0, r4
 800763a:	f003 f999 	bl	800a970 <__ratio>
 800763e:	ec57 6b10 	vmov	r6, r7, d0
 8007642:	2200      	movs	r2, #0
 8007644:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007648:	4630      	mov	r0, r6
 800764a:	4639      	mov	r1, r7
 800764c:	f7f9 fa78 	bl	8000b40 <__aeabi_dcmple>
 8007650:	2800      	cmp	r0, #0
 8007652:	d06f      	beq.n	8007734 <_strtod_l+0xa34>
 8007654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17a      	bne.n	8007750 <_strtod_l+0xa50>
 800765a:	f1ba 0f00 	cmp.w	sl, #0
 800765e:	d158      	bne.n	8007712 <_strtod_l+0xa12>
 8007660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007662:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007666:	2b00      	cmp	r3, #0
 8007668:	d15a      	bne.n	8007720 <_strtod_l+0xa20>
 800766a:	4b64      	ldr	r3, [pc, #400]	@ (80077fc <_strtod_l+0xafc>)
 800766c:	2200      	movs	r2, #0
 800766e:	4630      	mov	r0, r6
 8007670:	4639      	mov	r1, r7
 8007672:	f7f9 fa5b 	bl	8000b2c <__aeabi_dcmplt>
 8007676:	2800      	cmp	r0, #0
 8007678:	d159      	bne.n	800772e <_strtod_l+0xa2e>
 800767a:	4630      	mov	r0, r6
 800767c:	4639      	mov	r1, r7
 800767e:	4b60      	ldr	r3, [pc, #384]	@ (8007800 <_strtod_l+0xb00>)
 8007680:	2200      	movs	r2, #0
 8007682:	f7f8 ffe1 	bl	8000648 <__aeabi_dmul>
 8007686:	4606      	mov	r6, r0
 8007688:	460f      	mov	r7, r1
 800768a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800768e:	9606      	str	r6, [sp, #24]
 8007690:	9307      	str	r3, [sp, #28]
 8007692:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007696:	4d57      	ldr	r5, [pc, #348]	@ (80077f4 <_strtod_l+0xaf4>)
 8007698:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800769c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800769e:	401d      	ands	r5, r3
 80076a0:	4b58      	ldr	r3, [pc, #352]	@ (8007804 <_strtod_l+0xb04>)
 80076a2:	429d      	cmp	r5, r3
 80076a4:	f040 80b2 	bne.w	800780c <_strtod_l+0xb0c>
 80076a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80076ae:	ec4b ab10 	vmov	d0, sl, fp
 80076b2:	f003 f895 	bl	800a7e0 <__ulp>
 80076b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076ba:	ec51 0b10 	vmov	r0, r1, d0
 80076be:	f7f8 ffc3 	bl	8000648 <__aeabi_dmul>
 80076c2:	4652      	mov	r2, sl
 80076c4:	465b      	mov	r3, fp
 80076c6:	f7f8 fe09 	bl	80002dc <__adddf3>
 80076ca:	460b      	mov	r3, r1
 80076cc:	4949      	ldr	r1, [pc, #292]	@ (80077f4 <_strtod_l+0xaf4>)
 80076ce:	4a4e      	ldr	r2, [pc, #312]	@ (8007808 <_strtod_l+0xb08>)
 80076d0:	4019      	ands	r1, r3
 80076d2:	4291      	cmp	r1, r2
 80076d4:	4682      	mov	sl, r0
 80076d6:	d942      	bls.n	800775e <_strtod_l+0xa5e>
 80076d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076da:	4b47      	ldr	r3, [pc, #284]	@ (80077f8 <_strtod_l+0xaf8>)
 80076dc:	429a      	cmp	r2, r3
 80076de:	d103      	bne.n	80076e8 <_strtod_l+0x9e8>
 80076e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076e2:	3301      	adds	r3, #1
 80076e4:	f43f ad2f 	beq.w	8007146 <_strtod_l+0x446>
 80076e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80077f8 <_strtod_l+0xaf8>
 80076ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80076f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076f2:	9805      	ldr	r0, [sp, #20]
 80076f4:	f002 fd48 	bl	800a188 <_Bfree>
 80076f8:	9805      	ldr	r0, [sp, #20]
 80076fa:	4649      	mov	r1, r9
 80076fc:	f002 fd44 	bl	800a188 <_Bfree>
 8007700:	9805      	ldr	r0, [sp, #20]
 8007702:	4641      	mov	r1, r8
 8007704:	f002 fd40 	bl	800a188 <_Bfree>
 8007708:	9805      	ldr	r0, [sp, #20]
 800770a:	4621      	mov	r1, r4
 800770c:	f002 fd3c 	bl	800a188 <_Bfree>
 8007710:	e619      	b.n	8007346 <_strtod_l+0x646>
 8007712:	f1ba 0f01 	cmp.w	sl, #1
 8007716:	d103      	bne.n	8007720 <_strtod_l+0xa20>
 8007718:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800771a:	2b00      	cmp	r3, #0
 800771c:	f43f ada6 	beq.w	800726c <_strtod_l+0x56c>
 8007720:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80077d0 <_strtod_l+0xad0>
 8007724:	4f35      	ldr	r7, [pc, #212]	@ (80077fc <_strtod_l+0xafc>)
 8007726:	ed8d 7b06 	vstr	d7, [sp, #24]
 800772a:	2600      	movs	r6, #0
 800772c:	e7b1      	b.n	8007692 <_strtod_l+0x992>
 800772e:	4f34      	ldr	r7, [pc, #208]	@ (8007800 <_strtod_l+0xb00>)
 8007730:	2600      	movs	r6, #0
 8007732:	e7aa      	b.n	800768a <_strtod_l+0x98a>
 8007734:	4b32      	ldr	r3, [pc, #200]	@ (8007800 <_strtod_l+0xb00>)
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	2200      	movs	r2, #0
 800773c:	f7f8 ff84 	bl	8000648 <__aeabi_dmul>
 8007740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	2b00      	cmp	r3, #0
 8007748:	d09f      	beq.n	800768a <_strtod_l+0x98a>
 800774a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800774e:	e7a0      	b.n	8007692 <_strtod_l+0x992>
 8007750:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80077d8 <_strtod_l+0xad8>
 8007754:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007758:	ec57 6b17 	vmov	r6, r7, d7
 800775c:	e799      	b.n	8007692 <_strtod_l+0x992>
 800775e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007762:	9b08      	ldr	r3, [sp, #32]
 8007764:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007768:	2b00      	cmp	r3, #0
 800776a:	d1c1      	bne.n	80076f0 <_strtod_l+0x9f0>
 800776c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007770:	0d1b      	lsrs	r3, r3, #20
 8007772:	051b      	lsls	r3, r3, #20
 8007774:	429d      	cmp	r5, r3
 8007776:	d1bb      	bne.n	80076f0 <_strtod_l+0x9f0>
 8007778:	4630      	mov	r0, r6
 800777a:	4639      	mov	r1, r7
 800777c:	f7f9 fac4 	bl	8000d08 <__aeabi_d2lz>
 8007780:	f7f8 ff34 	bl	80005ec <__aeabi_l2d>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	4630      	mov	r0, r6
 800778a:	4639      	mov	r1, r7
 800778c:	f7f8 fda4 	bl	80002d8 <__aeabi_dsub>
 8007790:	460b      	mov	r3, r1
 8007792:	4602      	mov	r2, r0
 8007794:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007798:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800779c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800779e:	ea46 060a 	orr.w	r6, r6, sl
 80077a2:	431e      	orrs	r6, r3
 80077a4:	d06f      	beq.n	8007886 <_strtod_l+0xb86>
 80077a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80077e0 <_strtod_l+0xae0>)
 80077a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ac:	f7f9 f9be 	bl	8000b2c <__aeabi_dcmplt>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	f47f acd3 	bne.w	800715c <_strtod_l+0x45c>
 80077b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80077e8 <_strtod_l+0xae8>)
 80077b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077c0:	f7f9 f9d2 	bl	8000b68 <__aeabi_dcmpgt>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d093      	beq.n	80076f0 <_strtod_l+0x9f0>
 80077c8:	e4c8      	b.n	800715c <_strtod_l+0x45c>
 80077ca:	bf00      	nop
 80077cc:	f3af 8000 	nop.w
 80077d0:	00000000 	.word	0x00000000
 80077d4:	bff00000 	.word	0xbff00000
 80077d8:	00000000 	.word	0x00000000
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	94a03595 	.word	0x94a03595
 80077e4:	3fdfffff 	.word	0x3fdfffff
 80077e8:	35afe535 	.word	0x35afe535
 80077ec:	3fe00000 	.word	0x3fe00000
 80077f0:	000fffff 	.word	0x000fffff
 80077f4:	7ff00000 	.word	0x7ff00000
 80077f8:	7fefffff 	.word	0x7fefffff
 80077fc:	3ff00000 	.word	0x3ff00000
 8007800:	3fe00000 	.word	0x3fe00000
 8007804:	7fe00000 	.word	0x7fe00000
 8007808:	7c9fffff 	.word	0x7c9fffff
 800780c:	9b08      	ldr	r3, [sp, #32]
 800780e:	b323      	cbz	r3, 800785a <_strtod_l+0xb5a>
 8007810:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007814:	d821      	bhi.n	800785a <_strtod_l+0xb5a>
 8007816:	a328      	add	r3, pc, #160	@ (adr r3, 80078b8 <_strtod_l+0xbb8>)
 8007818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781c:	4630      	mov	r0, r6
 800781e:	4639      	mov	r1, r7
 8007820:	f7f9 f98e 	bl	8000b40 <__aeabi_dcmple>
 8007824:	b1a0      	cbz	r0, 8007850 <_strtod_l+0xb50>
 8007826:	4639      	mov	r1, r7
 8007828:	4630      	mov	r0, r6
 800782a:	f7f9 f9e5 	bl	8000bf8 <__aeabi_d2uiz>
 800782e:	2801      	cmp	r0, #1
 8007830:	bf38      	it	cc
 8007832:	2001      	movcc	r0, #1
 8007834:	f7f8 fe8e 	bl	8000554 <__aeabi_ui2d>
 8007838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800783a:	4606      	mov	r6, r0
 800783c:	460f      	mov	r7, r1
 800783e:	b9fb      	cbnz	r3, 8007880 <_strtod_l+0xb80>
 8007840:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007844:	9014      	str	r0, [sp, #80]	@ 0x50
 8007846:	9315      	str	r3, [sp, #84]	@ 0x54
 8007848:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800784c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007850:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007852:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007856:	1b5b      	subs	r3, r3, r5
 8007858:	9311      	str	r3, [sp, #68]	@ 0x44
 800785a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800785e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007862:	f002 ffbd 	bl	800a7e0 <__ulp>
 8007866:	4650      	mov	r0, sl
 8007868:	ec53 2b10 	vmov	r2, r3, d0
 800786c:	4659      	mov	r1, fp
 800786e:	f7f8 feeb 	bl	8000648 <__aeabi_dmul>
 8007872:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007876:	f7f8 fd31 	bl	80002dc <__adddf3>
 800787a:	4682      	mov	sl, r0
 800787c:	468b      	mov	fp, r1
 800787e:	e770      	b.n	8007762 <_strtod_l+0xa62>
 8007880:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007884:	e7e0      	b.n	8007848 <_strtod_l+0xb48>
 8007886:	a30e      	add	r3, pc, #56	@ (adr r3, 80078c0 <_strtod_l+0xbc0>)
 8007888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800788c:	f7f9 f94e 	bl	8000b2c <__aeabi_dcmplt>
 8007890:	e798      	b.n	80077c4 <_strtod_l+0xac4>
 8007892:	2300      	movs	r3, #0
 8007894:	930e      	str	r3, [sp, #56]	@ 0x38
 8007896:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007898:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	f7ff ba6d 	b.w	8006d7a <_strtod_l+0x7a>
 80078a0:	2a65      	cmp	r2, #101	@ 0x65
 80078a2:	f43f ab68 	beq.w	8006f76 <_strtod_l+0x276>
 80078a6:	2a45      	cmp	r2, #69	@ 0x45
 80078a8:	f43f ab65 	beq.w	8006f76 <_strtod_l+0x276>
 80078ac:	2301      	movs	r3, #1
 80078ae:	f7ff bba0 	b.w	8006ff2 <_strtod_l+0x2f2>
 80078b2:	bf00      	nop
 80078b4:	f3af 8000 	nop.w
 80078b8:	ffc00000 	.word	0xffc00000
 80078bc:	41dfffff 	.word	0x41dfffff
 80078c0:	94a03595 	.word	0x94a03595
 80078c4:	3fcfffff 	.word	0x3fcfffff

080078c8 <_strtod_r>:
 80078c8:	4b01      	ldr	r3, [pc, #4]	@ (80078d0 <_strtod_r+0x8>)
 80078ca:	f7ff ba19 	b.w	8006d00 <_strtod_l>
 80078ce:	bf00      	nop
 80078d0:	20000018 	.word	0x20000018

080078d4 <__cvt>:
 80078d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078d8:	ec57 6b10 	vmov	r6, r7, d0
 80078dc:	2f00      	cmp	r7, #0
 80078de:	460c      	mov	r4, r1
 80078e0:	4619      	mov	r1, r3
 80078e2:	463b      	mov	r3, r7
 80078e4:	bfbb      	ittet	lt
 80078e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80078ea:	461f      	movlt	r7, r3
 80078ec:	2300      	movge	r3, #0
 80078ee:	232d      	movlt	r3, #45	@ 0x2d
 80078f0:	700b      	strb	r3, [r1, #0]
 80078f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80078f8:	4691      	mov	r9, r2
 80078fa:	f023 0820 	bic.w	r8, r3, #32
 80078fe:	bfbc      	itt	lt
 8007900:	4632      	movlt	r2, r6
 8007902:	4616      	movlt	r6, r2
 8007904:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007908:	d005      	beq.n	8007916 <__cvt+0x42>
 800790a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800790e:	d100      	bne.n	8007912 <__cvt+0x3e>
 8007910:	3401      	adds	r4, #1
 8007912:	2102      	movs	r1, #2
 8007914:	e000      	b.n	8007918 <__cvt+0x44>
 8007916:	2103      	movs	r1, #3
 8007918:	ab03      	add	r3, sp, #12
 800791a:	9301      	str	r3, [sp, #4]
 800791c:	ab02      	add	r3, sp, #8
 800791e:	9300      	str	r3, [sp, #0]
 8007920:	ec47 6b10 	vmov	d0, r6, r7
 8007924:	4653      	mov	r3, sl
 8007926:	4622      	mov	r2, r4
 8007928:	f001 f9d2 	bl	8008cd0 <_dtoa_r>
 800792c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007930:	4605      	mov	r5, r0
 8007932:	d119      	bne.n	8007968 <__cvt+0x94>
 8007934:	f019 0f01 	tst.w	r9, #1
 8007938:	d00e      	beq.n	8007958 <__cvt+0x84>
 800793a:	eb00 0904 	add.w	r9, r0, r4
 800793e:	2200      	movs	r2, #0
 8007940:	2300      	movs	r3, #0
 8007942:	4630      	mov	r0, r6
 8007944:	4639      	mov	r1, r7
 8007946:	f7f9 f8e7 	bl	8000b18 <__aeabi_dcmpeq>
 800794a:	b108      	cbz	r0, 8007950 <__cvt+0x7c>
 800794c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007950:	2230      	movs	r2, #48	@ 0x30
 8007952:	9b03      	ldr	r3, [sp, #12]
 8007954:	454b      	cmp	r3, r9
 8007956:	d31e      	bcc.n	8007996 <__cvt+0xc2>
 8007958:	9b03      	ldr	r3, [sp, #12]
 800795a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800795c:	1b5b      	subs	r3, r3, r5
 800795e:	4628      	mov	r0, r5
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	b004      	add	sp, #16
 8007964:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007968:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800796c:	eb00 0904 	add.w	r9, r0, r4
 8007970:	d1e5      	bne.n	800793e <__cvt+0x6a>
 8007972:	7803      	ldrb	r3, [r0, #0]
 8007974:	2b30      	cmp	r3, #48	@ 0x30
 8007976:	d10a      	bne.n	800798e <__cvt+0xba>
 8007978:	2200      	movs	r2, #0
 800797a:	2300      	movs	r3, #0
 800797c:	4630      	mov	r0, r6
 800797e:	4639      	mov	r1, r7
 8007980:	f7f9 f8ca 	bl	8000b18 <__aeabi_dcmpeq>
 8007984:	b918      	cbnz	r0, 800798e <__cvt+0xba>
 8007986:	f1c4 0401 	rsb	r4, r4, #1
 800798a:	f8ca 4000 	str.w	r4, [sl]
 800798e:	f8da 3000 	ldr.w	r3, [sl]
 8007992:	4499      	add	r9, r3
 8007994:	e7d3      	b.n	800793e <__cvt+0x6a>
 8007996:	1c59      	adds	r1, r3, #1
 8007998:	9103      	str	r1, [sp, #12]
 800799a:	701a      	strb	r2, [r3, #0]
 800799c:	e7d9      	b.n	8007952 <__cvt+0x7e>

0800799e <__exponent>:
 800799e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079a0:	2900      	cmp	r1, #0
 80079a2:	bfba      	itte	lt
 80079a4:	4249      	neglt	r1, r1
 80079a6:	232d      	movlt	r3, #45	@ 0x2d
 80079a8:	232b      	movge	r3, #43	@ 0x2b
 80079aa:	2909      	cmp	r1, #9
 80079ac:	7002      	strb	r2, [r0, #0]
 80079ae:	7043      	strb	r3, [r0, #1]
 80079b0:	dd29      	ble.n	8007a06 <__exponent+0x68>
 80079b2:	f10d 0307 	add.w	r3, sp, #7
 80079b6:	461d      	mov	r5, r3
 80079b8:	270a      	movs	r7, #10
 80079ba:	461a      	mov	r2, r3
 80079bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80079c0:	fb07 1416 	mls	r4, r7, r6, r1
 80079c4:	3430      	adds	r4, #48	@ 0x30
 80079c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80079ca:	460c      	mov	r4, r1
 80079cc:	2c63      	cmp	r4, #99	@ 0x63
 80079ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80079d2:	4631      	mov	r1, r6
 80079d4:	dcf1      	bgt.n	80079ba <__exponent+0x1c>
 80079d6:	3130      	adds	r1, #48	@ 0x30
 80079d8:	1e94      	subs	r4, r2, #2
 80079da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80079de:	1c41      	adds	r1, r0, #1
 80079e0:	4623      	mov	r3, r4
 80079e2:	42ab      	cmp	r3, r5
 80079e4:	d30a      	bcc.n	80079fc <__exponent+0x5e>
 80079e6:	f10d 0309 	add.w	r3, sp, #9
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	42ac      	cmp	r4, r5
 80079ee:	bf88      	it	hi
 80079f0:	2300      	movhi	r3, #0
 80079f2:	3302      	adds	r3, #2
 80079f4:	4403      	add	r3, r0
 80079f6:	1a18      	subs	r0, r3, r0
 80079f8:	b003      	add	sp, #12
 80079fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007a00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007a04:	e7ed      	b.n	80079e2 <__exponent+0x44>
 8007a06:	2330      	movs	r3, #48	@ 0x30
 8007a08:	3130      	adds	r1, #48	@ 0x30
 8007a0a:	7083      	strb	r3, [r0, #2]
 8007a0c:	70c1      	strb	r1, [r0, #3]
 8007a0e:	1d03      	adds	r3, r0, #4
 8007a10:	e7f1      	b.n	80079f6 <__exponent+0x58>
	...

08007a14 <_printf_float>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	b08d      	sub	sp, #52	@ 0x34
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007a20:	4616      	mov	r6, r2
 8007a22:	461f      	mov	r7, r3
 8007a24:	4605      	mov	r5, r0
 8007a26:	f001 f835 	bl	8008a94 <_localeconv_r>
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7f8 fc46 	bl	80002c0 <strlen>
 8007a34:	2300      	movs	r3, #0
 8007a36:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a38:	f8d8 3000 	ldr.w	r3, [r8]
 8007a3c:	9005      	str	r0, [sp, #20]
 8007a3e:	3307      	adds	r3, #7
 8007a40:	f023 0307 	bic.w	r3, r3, #7
 8007a44:	f103 0208 	add.w	r2, r3, #8
 8007a48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007a4c:	f8d4 b000 	ldr.w	fp, [r4]
 8007a50:	f8c8 2000 	str.w	r2, [r8]
 8007a54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007a5c:	9307      	str	r3, [sp, #28]
 8007a5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007a62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007a66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a6a:	4b9c      	ldr	r3, [pc, #624]	@ (8007cdc <_printf_float+0x2c8>)
 8007a6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a70:	f7f9 f884 	bl	8000b7c <__aeabi_dcmpun>
 8007a74:	bb70      	cbnz	r0, 8007ad4 <_printf_float+0xc0>
 8007a76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007a7a:	4b98      	ldr	r3, [pc, #608]	@ (8007cdc <_printf_float+0x2c8>)
 8007a7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a80:	f7f9 f85e 	bl	8000b40 <__aeabi_dcmple>
 8007a84:	bb30      	cbnz	r0, 8007ad4 <_printf_float+0xc0>
 8007a86:	2200      	movs	r2, #0
 8007a88:	2300      	movs	r3, #0
 8007a8a:	4640      	mov	r0, r8
 8007a8c:	4649      	mov	r1, r9
 8007a8e:	f7f9 f84d 	bl	8000b2c <__aeabi_dcmplt>
 8007a92:	b110      	cbz	r0, 8007a9a <_printf_float+0x86>
 8007a94:	232d      	movs	r3, #45	@ 0x2d
 8007a96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a9a:	4a91      	ldr	r2, [pc, #580]	@ (8007ce0 <_printf_float+0x2cc>)
 8007a9c:	4b91      	ldr	r3, [pc, #580]	@ (8007ce4 <_printf_float+0x2d0>)
 8007a9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007aa2:	bf8c      	ite	hi
 8007aa4:	4690      	movhi	r8, r2
 8007aa6:	4698      	movls	r8, r3
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	6123      	str	r3, [r4, #16]
 8007aac:	f02b 0304 	bic.w	r3, fp, #4
 8007ab0:	6023      	str	r3, [r4, #0]
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	9700      	str	r7, [sp, #0]
 8007ab8:	4633      	mov	r3, r6
 8007aba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007abc:	4621      	mov	r1, r4
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 f9d2 	bl	8007e68 <_printf_common>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	f040 808d 	bne.w	8007be4 <_printf_float+0x1d0>
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ace:	b00d      	add	sp, #52	@ 0x34
 8007ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	4640      	mov	r0, r8
 8007ada:	4649      	mov	r1, r9
 8007adc:	f7f9 f84e 	bl	8000b7c <__aeabi_dcmpun>
 8007ae0:	b140      	cbz	r0, 8007af4 <_printf_float+0xe0>
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	bfbc      	itt	lt
 8007ae8:	232d      	movlt	r3, #45	@ 0x2d
 8007aea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007aee:	4a7e      	ldr	r2, [pc, #504]	@ (8007ce8 <_printf_float+0x2d4>)
 8007af0:	4b7e      	ldr	r3, [pc, #504]	@ (8007cec <_printf_float+0x2d8>)
 8007af2:	e7d4      	b.n	8007a9e <_printf_float+0x8a>
 8007af4:	6863      	ldr	r3, [r4, #4]
 8007af6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007afa:	9206      	str	r2, [sp, #24]
 8007afc:	1c5a      	adds	r2, r3, #1
 8007afe:	d13b      	bne.n	8007b78 <_printf_float+0x164>
 8007b00:	2306      	movs	r3, #6
 8007b02:	6063      	str	r3, [r4, #4]
 8007b04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007b08:	2300      	movs	r3, #0
 8007b0a:	6022      	str	r2, [r4, #0]
 8007b0c:	9303      	str	r3, [sp, #12]
 8007b0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007b10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007b14:	ab09      	add	r3, sp, #36	@ 0x24
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	6861      	ldr	r1, [r4, #4]
 8007b1a:	ec49 8b10 	vmov	d0, r8, r9
 8007b1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007b22:	4628      	mov	r0, r5
 8007b24:	f7ff fed6 	bl	80078d4 <__cvt>
 8007b28:	9b06      	ldr	r3, [sp, #24]
 8007b2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b2c:	2b47      	cmp	r3, #71	@ 0x47
 8007b2e:	4680      	mov	r8, r0
 8007b30:	d129      	bne.n	8007b86 <_printf_float+0x172>
 8007b32:	1cc8      	adds	r0, r1, #3
 8007b34:	db02      	blt.n	8007b3c <_printf_float+0x128>
 8007b36:	6863      	ldr	r3, [r4, #4]
 8007b38:	4299      	cmp	r1, r3
 8007b3a:	dd41      	ble.n	8007bc0 <_printf_float+0x1ac>
 8007b3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007b40:	fa5f fa8a 	uxtb.w	sl, sl
 8007b44:	3901      	subs	r1, #1
 8007b46:	4652      	mov	r2, sl
 8007b48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007b4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007b4e:	f7ff ff26 	bl	800799e <__exponent>
 8007b52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007b54:	1813      	adds	r3, r2, r0
 8007b56:	2a01      	cmp	r2, #1
 8007b58:	4681      	mov	r9, r0
 8007b5a:	6123      	str	r3, [r4, #16]
 8007b5c:	dc02      	bgt.n	8007b64 <_printf_float+0x150>
 8007b5e:	6822      	ldr	r2, [r4, #0]
 8007b60:	07d2      	lsls	r2, r2, #31
 8007b62:	d501      	bpl.n	8007b68 <_printf_float+0x154>
 8007b64:	3301      	adds	r3, #1
 8007b66:	6123      	str	r3, [r4, #16]
 8007b68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d0a2      	beq.n	8007ab6 <_printf_float+0xa2>
 8007b70:	232d      	movs	r3, #45	@ 0x2d
 8007b72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007b76:	e79e      	b.n	8007ab6 <_printf_float+0xa2>
 8007b78:	9a06      	ldr	r2, [sp, #24]
 8007b7a:	2a47      	cmp	r2, #71	@ 0x47
 8007b7c:	d1c2      	bne.n	8007b04 <_printf_float+0xf0>
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1c0      	bne.n	8007b04 <_printf_float+0xf0>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e7bd      	b.n	8007b02 <_printf_float+0xee>
 8007b86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b8a:	d9db      	bls.n	8007b44 <_printf_float+0x130>
 8007b8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007b90:	d118      	bne.n	8007bc4 <_printf_float+0x1b0>
 8007b92:	2900      	cmp	r1, #0
 8007b94:	6863      	ldr	r3, [r4, #4]
 8007b96:	dd0b      	ble.n	8007bb0 <_printf_float+0x19c>
 8007b98:	6121      	str	r1, [r4, #16]
 8007b9a:	b913      	cbnz	r3, 8007ba2 <_printf_float+0x18e>
 8007b9c:	6822      	ldr	r2, [r4, #0]
 8007b9e:	07d0      	lsls	r0, r2, #31
 8007ba0:	d502      	bpl.n	8007ba8 <_printf_float+0x194>
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	440b      	add	r3, r1
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007baa:	f04f 0900 	mov.w	r9, #0
 8007bae:	e7db      	b.n	8007b68 <_printf_float+0x154>
 8007bb0:	b913      	cbnz	r3, 8007bb8 <_printf_float+0x1a4>
 8007bb2:	6822      	ldr	r2, [r4, #0]
 8007bb4:	07d2      	lsls	r2, r2, #31
 8007bb6:	d501      	bpl.n	8007bbc <_printf_float+0x1a8>
 8007bb8:	3302      	adds	r3, #2
 8007bba:	e7f4      	b.n	8007ba6 <_printf_float+0x192>
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e7f2      	b.n	8007ba6 <_printf_float+0x192>
 8007bc0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc6:	4299      	cmp	r1, r3
 8007bc8:	db05      	blt.n	8007bd6 <_printf_float+0x1c2>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	6121      	str	r1, [r4, #16]
 8007bce:	07d8      	lsls	r0, r3, #31
 8007bd0:	d5ea      	bpl.n	8007ba8 <_printf_float+0x194>
 8007bd2:	1c4b      	adds	r3, r1, #1
 8007bd4:	e7e7      	b.n	8007ba6 <_printf_float+0x192>
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	bfd4      	ite	le
 8007bda:	f1c1 0202 	rsble	r2, r1, #2
 8007bde:	2201      	movgt	r2, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	e7e0      	b.n	8007ba6 <_printf_float+0x192>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	055a      	lsls	r2, r3, #21
 8007be8:	d407      	bmi.n	8007bfa <_printf_float+0x1e6>
 8007bea:	6923      	ldr	r3, [r4, #16]
 8007bec:	4642      	mov	r2, r8
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	d12b      	bne.n	8007c50 <_printf_float+0x23c>
 8007bf8:	e767      	b.n	8007aca <_printf_float+0xb6>
 8007bfa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007bfe:	f240 80dd 	bls.w	8007dbc <_printf_float+0x3a8>
 8007c02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c06:	2200      	movs	r2, #0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f7f8 ff85 	bl	8000b18 <__aeabi_dcmpeq>
 8007c0e:	2800      	cmp	r0, #0
 8007c10:	d033      	beq.n	8007c7a <_printf_float+0x266>
 8007c12:	4a37      	ldr	r2, [pc, #220]	@ (8007cf0 <_printf_float+0x2dc>)
 8007c14:	2301      	movs	r3, #1
 8007c16:	4631      	mov	r1, r6
 8007c18:	4628      	mov	r0, r5
 8007c1a:	47b8      	blx	r7
 8007c1c:	3001      	adds	r0, #1
 8007c1e:	f43f af54 	beq.w	8007aca <_printf_float+0xb6>
 8007c22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007c26:	4543      	cmp	r3, r8
 8007c28:	db02      	blt.n	8007c30 <_printf_float+0x21c>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	07d8      	lsls	r0, r3, #31
 8007c2e:	d50f      	bpl.n	8007c50 <_printf_float+0x23c>
 8007c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c34:	4631      	mov	r1, r6
 8007c36:	4628      	mov	r0, r5
 8007c38:	47b8      	blx	r7
 8007c3a:	3001      	adds	r0, #1
 8007c3c:	f43f af45 	beq.w	8007aca <_printf_float+0xb6>
 8007c40:	f04f 0900 	mov.w	r9, #0
 8007c44:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007c48:	f104 0a1a 	add.w	sl, r4, #26
 8007c4c:	45c8      	cmp	r8, r9
 8007c4e:	dc09      	bgt.n	8007c64 <_printf_float+0x250>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	079b      	lsls	r3, r3, #30
 8007c54:	f100 8103 	bmi.w	8007e5e <_printf_float+0x44a>
 8007c58:	68e0      	ldr	r0, [r4, #12]
 8007c5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c5c:	4298      	cmp	r0, r3
 8007c5e:	bfb8      	it	lt
 8007c60:	4618      	movlt	r0, r3
 8007c62:	e734      	b.n	8007ace <_printf_float+0xba>
 8007c64:	2301      	movs	r3, #1
 8007c66:	4652      	mov	r2, sl
 8007c68:	4631      	mov	r1, r6
 8007c6a:	4628      	mov	r0, r5
 8007c6c:	47b8      	blx	r7
 8007c6e:	3001      	adds	r0, #1
 8007c70:	f43f af2b 	beq.w	8007aca <_printf_float+0xb6>
 8007c74:	f109 0901 	add.w	r9, r9, #1
 8007c78:	e7e8      	b.n	8007c4c <_printf_float+0x238>
 8007c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	dc39      	bgt.n	8007cf4 <_printf_float+0x2e0>
 8007c80:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf0 <_printf_float+0x2dc>)
 8007c82:	2301      	movs	r3, #1
 8007c84:	4631      	mov	r1, r6
 8007c86:	4628      	mov	r0, r5
 8007c88:	47b8      	blx	r7
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	f43f af1d 	beq.w	8007aca <_printf_float+0xb6>
 8007c90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007c94:	ea59 0303 	orrs.w	r3, r9, r3
 8007c98:	d102      	bne.n	8007ca0 <_printf_float+0x28c>
 8007c9a:	6823      	ldr	r3, [r4, #0]
 8007c9c:	07d9      	lsls	r1, r3, #31
 8007c9e:	d5d7      	bpl.n	8007c50 <_printf_float+0x23c>
 8007ca0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ca4:	4631      	mov	r1, r6
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b8      	blx	r7
 8007caa:	3001      	adds	r0, #1
 8007cac:	f43f af0d 	beq.w	8007aca <_printf_float+0xb6>
 8007cb0:	f04f 0a00 	mov.w	sl, #0
 8007cb4:	f104 0b1a 	add.w	fp, r4, #26
 8007cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cba:	425b      	negs	r3, r3
 8007cbc:	4553      	cmp	r3, sl
 8007cbe:	dc01      	bgt.n	8007cc4 <_printf_float+0x2b0>
 8007cc0:	464b      	mov	r3, r9
 8007cc2:	e793      	b.n	8007bec <_printf_float+0x1d8>
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	465a      	mov	r2, fp
 8007cc8:	4631      	mov	r1, r6
 8007cca:	4628      	mov	r0, r5
 8007ccc:	47b8      	blx	r7
 8007cce:	3001      	adds	r0, #1
 8007cd0:	f43f aefb 	beq.w	8007aca <_printf_float+0xb6>
 8007cd4:	f10a 0a01 	add.w	sl, sl, #1
 8007cd8:	e7ee      	b.n	8007cb8 <_printf_float+0x2a4>
 8007cda:	bf00      	nop
 8007cdc:	7fefffff 	.word	0x7fefffff
 8007ce0:	0800b7f6 	.word	0x0800b7f6
 8007ce4:	0800b7f2 	.word	0x0800b7f2
 8007ce8:	0800b7fe 	.word	0x0800b7fe
 8007cec:	0800b7fa 	.word	0x0800b7fa
 8007cf0:	0800b802 	.word	0x0800b802
 8007cf4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007cf6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cfa:	4553      	cmp	r3, sl
 8007cfc:	bfa8      	it	ge
 8007cfe:	4653      	movge	r3, sl
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	4699      	mov	r9, r3
 8007d04:	dc36      	bgt.n	8007d74 <_printf_float+0x360>
 8007d06:	f04f 0b00 	mov.w	fp, #0
 8007d0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d0e:	f104 021a 	add.w	r2, r4, #26
 8007d12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007d14:	9306      	str	r3, [sp, #24]
 8007d16:	eba3 0309 	sub.w	r3, r3, r9
 8007d1a:	455b      	cmp	r3, fp
 8007d1c:	dc31      	bgt.n	8007d82 <_printf_float+0x36e>
 8007d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d20:	459a      	cmp	sl, r3
 8007d22:	dc3a      	bgt.n	8007d9a <_printf_float+0x386>
 8007d24:	6823      	ldr	r3, [r4, #0]
 8007d26:	07da      	lsls	r2, r3, #31
 8007d28:	d437      	bmi.n	8007d9a <_printf_float+0x386>
 8007d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d2c:	ebaa 0903 	sub.w	r9, sl, r3
 8007d30:	9b06      	ldr	r3, [sp, #24]
 8007d32:	ebaa 0303 	sub.w	r3, sl, r3
 8007d36:	4599      	cmp	r9, r3
 8007d38:	bfa8      	it	ge
 8007d3a:	4699      	movge	r9, r3
 8007d3c:	f1b9 0f00 	cmp.w	r9, #0
 8007d40:	dc33      	bgt.n	8007daa <_printf_float+0x396>
 8007d42:	f04f 0800 	mov.w	r8, #0
 8007d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007d4a:	f104 0b1a 	add.w	fp, r4, #26
 8007d4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d50:	ebaa 0303 	sub.w	r3, sl, r3
 8007d54:	eba3 0309 	sub.w	r3, r3, r9
 8007d58:	4543      	cmp	r3, r8
 8007d5a:	f77f af79 	ble.w	8007c50 <_printf_float+0x23c>
 8007d5e:	2301      	movs	r3, #1
 8007d60:	465a      	mov	r2, fp
 8007d62:	4631      	mov	r1, r6
 8007d64:	4628      	mov	r0, r5
 8007d66:	47b8      	blx	r7
 8007d68:	3001      	adds	r0, #1
 8007d6a:	f43f aeae 	beq.w	8007aca <_printf_float+0xb6>
 8007d6e:	f108 0801 	add.w	r8, r8, #1
 8007d72:	e7ec      	b.n	8007d4e <_printf_float+0x33a>
 8007d74:	4642      	mov	r2, r8
 8007d76:	4631      	mov	r1, r6
 8007d78:	4628      	mov	r0, r5
 8007d7a:	47b8      	blx	r7
 8007d7c:	3001      	adds	r0, #1
 8007d7e:	d1c2      	bne.n	8007d06 <_printf_float+0x2f2>
 8007d80:	e6a3      	b.n	8007aca <_printf_float+0xb6>
 8007d82:	2301      	movs	r3, #1
 8007d84:	4631      	mov	r1, r6
 8007d86:	4628      	mov	r0, r5
 8007d88:	9206      	str	r2, [sp, #24]
 8007d8a:	47b8      	blx	r7
 8007d8c:	3001      	adds	r0, #1
 8007d8e:	f43f ae9c 	beq.w	8007aca <_printf_float+0xb6>
 8007d92:	9a06      	ldr	r2, [sp, #24]
 8007d94:	f10b 0b01 	add.w	fp, fp, #1
 8007d98:	e7bb      	b.n	8007d12 <_printf_float+0x2fe>
 8007d9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d9e:	4631      	mov	r1, r6
 8007da0:	4628      	mov	r0, r5
 8007da2:	47b8      	blx	r7
 8007da4:	3001      	adds	r0, #1
 8007da6:	d1c0      	bne.n	8007d2a <_printf_float+0x316>
 8007da8:	e68f      	b.n	8007aca <_printf_float+0xb6>
 8007daa:	9a06      	ldr	r2, [sp, #24]
 8007dac:	464b      	mov	r3, r9
 8007dae:	4442      	add	r2, r8
 8007db0:	4631      	mov	r1, r6
 8007db2:	4628      	mov	r0, r5
 8007db4:	47b8      	blx	r7
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1c3      	bne.n	8007d42 <_printf_float+0x32e>
 8007dba:	e686      	b.n	8007aca <_printf_float+0xb6>
 8007dbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007dc0:	f1ba 0f01 	cmp.w	sl, #1
 8007dc4:	dc01      	bgt.n	8007dca <_printf_float+0x3b6>
 8007dc6:	07db      	lsls	r3, r3, #31
 8007dc8:	d536      	bpl.n	8007e38 <_printf_float+0x424>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	4642      	mov	r2, r8
 8007dce:	4631      	mov	r1, r6
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	47b8      	blx	r7
 8007dd4:	3001      	adds	r0, #1
 8007dd6:	f43f ae78 	beq.w	8007aca <_printf_float+0xb6>
 8007dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dde:	4631      	mov	r1, r6
 8007de0:	4628      	mov	r0, r5
 8007de2:	47b8      	blx	r7
 8007de4:	3001      	adds	r0, #1
 8007de6:	f43f ae70 	beq.w	8007aca <_printf_float+0xb6>
 8007dea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007dee:	2200      	movs	r2, #0
 8007df0:	2300      	movs	r3, #0
 8007df2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007df6:	f7f8 fe8f 	bl	8000b18 <__aeabi_dcmpeq>
 8007dfa:	b9c0      	cbnz	r0, 8007e2e <_printf_float+0x41a>
 8007dfc:	4653      	mov	r3, sl
 8007dfe:	f108 0201 	add.w	r2, r8, #1
 8007e02:	4631      	mov	r1, r6
 8007e04:	4628      	mov	r0, r5
 8007e06:	47b8      	blx	r7
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d10c      	bne.n	8007e26 <_printf_float+0x412>
 8007e0c:	e65d      	b.n	8007aca <_printf_float+0xb6>
 8007e0e:	2301      	movs	r3, #1
 8007e10:	465a      	mov	r2, fp
 8007e12:	4631      	mov	r1, r6
 8007e14:	4628      	mov	r0, r5
 8007e16:	47b8      	blx	r7
 8007e18:	3001      	adds	r0, #1
 8007e1a:	f43f ae56 	beq.w	8007aca <_printf_float+0xb6>
 8007e1e:	f108 0801 	add.w	r8, r8, #1
 8007e22:	45d0      	cmp	r8, sl
 8007e24:	dbf3      	blt.n	8007e0e <_printf_float+0x3fa>
 8007e26:	464b      	mov	r3, r9
 8007e28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007e2c:	e6df      	b.n	8007bee <_printf_float+0x1da>
 8007e2e:	f04f 0800 	mov.w	r8, #0
 8007e32:	f104 0b1a 	add.w	fp, r4, #26
 8007e36:	e7f4      	b.n	8007e22 <_printf_float+0x40e>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	e7e1      	b.n	8007e02 <_printf_float+0x3ee>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	464a      	mov	r2, r9
 8007e42:	4631      	mov	r1, r6
 8007e44:	4628      	mov	r0, r5
 8007e46:	47b8      	blx	r7
 8007e48:	3001      	adds	r0, #1
 8007e4a:	f43f ae3e 	beq.w	8007aca <_printf_float+0xb6>
 8007e4e:	f108 0801 	add.w	r8, r8, #1
 8007e52:	68e3      	ldr	r3, [r4, #12]
 8007e54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e56:	1a5b      	subs	r3, r3, r1
 8007e58:	4543      	cmp	r3, r8
 8007e5a:	dcf0      	bgt.n	8007e3e <_printf_float+0x42a>
 8007e5c:	e6fc      	b.n	8007c58 <_printf_float+0x244>
 8007e5e:	f04f 0800 	mov.w	r8, #0
 8007e62:	f104 0919 	add.w	r9, r4, #25
 8007e66:	e7f4      	b.n	8007e52 <_printf_float+0x43e>

08007e68 <_printf_common>:
 8007e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e6c:	4616      	mov	r6, r2
 8007e6e:	4698      	mov	r8, r3
 8007e70:	688a      	ldr	r2, [r1, #8]
 8007e72:	690b      	ldr	r3, [r1, #16]
 8007e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	bfb8      	it	lt
 8007e7c:	4613      	movlt	r3, r2
 8007e7e:	6033      	str	r3, [r6, #0]
 8007e80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e84:	4607      	mov	r7, r0
 8007e86:	460c      	mov	r4, r1
 8007e88:	b10a      	cbz	r2, 8007e8e <_printf_common+0x26>
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	6033      	str	r3, [r6, #0]
 8007e8e:	6823      	ldr	r3, [r4, #0]
 8007e90:	0699      	lsls	r1, r3, #26
 8007e92:	bf42      	ittt	mi
 8007e94:	6833      	ldrmi	r3, [r6, #0]
 8007e96:	3302      	addmi	r3, #2
 8007e98:	6033      	strmi	r3, [r6, #0]
 8007e9a:	6825      	ldr	r5, [r4, #0]
 8007e9c:	f015 0506 	ands.w	r5, r5, #6
 8007ea0:	d106      	bne.n	8007eb0 <_printf_common+0x48>
 8007ea2:	f104 0a19 	add.w	sl, r4, #25
 8007ea6:	68e3      	ldr	r3, [r4, #12]
 8007ea8:	6832      	ldr	r2, [r6, #0]
 8007eaa:	1a9b      	subs	r3, r3, r2
 8007eac:	42ab      	cmp	r3, r5
 8007eae:	dc26      	bgt.n	8007efe <_printf_common+0x96>
 8007eb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007eb4:	6822      	ldr	r2, [r4, #0]
 8007eb6:	3b00      	subs	r3, #0
 8007eb8:	bf18      	it	ne
 8007eba:	2301      	movne	r3, #1
 8007ebc:	0692      	lsls	r2, r2, #26
 8007ebe:	d42b      	bmi.n	8007f18 <_printf_common+0xb0>
 8007ec0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ec4:	4641      	mov	r1, r8
 8007ec6:	4638      	mov	r0, r7
 8007ec8:	47c8      	blx	r9
 8007eca:	3001      	adds	r0, #1
 8007ecc:	d01e      	beq.n	8007f0c <_printf_common+0xa4>
 8007ece:	6823      	ldr	r3, [r4, #0]
 8007ed0:	6922      	ldr	r2, [r4, #16]
 8007ed2:	f003 0306 	and.w	r3, r3, #6
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	bf02      	ittt	eq
 8007eda:	68e5      	ldreq	r5, [r4, #12]
 8007edc:	6833      	ldreq	r3, [r6, #0]
 8007ede:	1aed      	subeq	r5, r5, r3
 8007ee0:	68a3      	ldr	r3, [r4, #8]
 8007ee2:	bf0c      	ite	eq
 8007ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee8:	2500      	movne	r5, #0
 8007eea:	4293      	cmp	r3, r2
 8007eec:	bfc4      	itt	gt
 8007eee:	1a9b      	subgt	r3, r3, r2
 8007ef0:	18ed      	addgt	r5, r5, r3
 8007ef2:	2600      	movs	r6, #0
 8007ef4:	341a      	adds	r4, #26
 8007ef6:	42b5      	cmp	r5, r6
 8007ef8:	d11a      	bne.n	8007f30 <_printf_common+0xc8>
 8007efa:	2000      	movs	r0, #0
 8007efc:	e008      	b.n	8007f10 <_printf_common+0xa8>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4652      	mov	r2, sl
 8007f02:	4641      	mov	r1, r8
 8007f04:	4638      	mov	r0, r7
 8007f06:	47c8      	blx	r9
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d103      	bne.n	8007f14 <_printf_common+0xac>
 8007f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f14:	3501      	adds	r5, #1
 8007f16:	e7c6      	b.n	8007ea6 <_printf_common+0x3e>
 8007f18:	18e1      	adds	r1, r4, r3
 8007f1a:	1c5a      	adds	r2, r3, #1
 8007f1c:	2030      	movs	r0, #48	@ 0x30
 8007f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f22:	4422      	add	r2, r4
 8007f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f2c:	3302      	adds	r3, #2
 8007f2e:	e7c7      	b.n	8007ec0 <_printf_common+0x58>
 8007f30:	2301      	movs	r3, #1
 8007f32:	4622      	mov	r2, r4
 8007f34:	4641      	mov	r1, r8
 8007f36:	4638      	mov	r0, r7
 8007f38:	47c8      	blx	r9
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	d0e6      	beq.n	8007f0c <_printf_common+0xa4>
 8007f3e:	3601      	adds	r6, #1
 8007f40:	e7d9      	b.n	8007ef6 <_printf_common+0x8e>
	...

08007f44 <_printf_i>:
 8007f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f48:	7e0f      	ldrb	r7, [r1, #24]
 8007f4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f4c:	2f78      	cmp	r7, #120	@ 0x78
 8007f4e:	4691      	mov	r9, r2
 8007f50:	4680      	mov	r8, r0
 8007f52:	460c      	mov	r4, r1
 8007f54:	469a      	mov	sl, r3
 8007f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f5a:	d807      	bhi.n	8007f6c <_printf_i+0x28>
 8007f5c:	2f62      	cmp	r7, #98	@ 0x62
 8007f5e:	d80a      	bhi.n	8007f76 <_printf_i+0x32>
 8007f60:	2f00      	cmp	r7, #0
 8007f62:	f000 80d1 	beq.w	8008108 <_printf_i+0x1c4>
 8007f66:	2f58      	cmp	r7, #88	@ 0x58
 8007f68:	f000 80b8 	beq.w	80080dc <_printf_i+0x198>
 8007f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f74:	e03a      	b.n	8007fec <_printf_i+0xa8>
 8007f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f7a:	2b15      	cmp	r3, #21
 8007f7c:	d8f6      	bhi.n	8007f6c <_printf_i+0x28>
 8007f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8007f84 <_printf_i+0x40>)
 8007f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f84:	08007fdd 	.word	0x08007fdd
 8007f88:	08007ff1 	.word	0x08007ff1
 8007f8c:	08007f6d 	.word	0x08007f6d
 8007f90:	08007f6d 	.word	0x08007f6d
 8007f94:	08007f6d 	.word	0x08007f6d
 8007f98:	08007f6d 	.word	0x08007f6d
 8007f9c:	08007ff1 	.word	0x08007ff1
 8007fa0:	08007f6d 	.word	0x08007f6d
 8007fa4:	08007f6d 	.word	0x08007f6d
 8007fa8:	08007f6d 	.word	0x08007f6d
 8007fac:	08007f6d 	.word	0x08007f6d
 8007fb0:	080080ef 	.word	0x080080ef
 8007fb4:	0800801b 	.word	0x0800801b
 8007fb8:	080080a9 	.word	0x080080a9
 8007fbc:	08007f6d 	.word	0x08007f6d
 8007fc0:	08007f6d 	.word	0x08007f6d
 8007fc4:	08008111 	.word	0x08008111
 8007fc8:	08007f6d 	.word	0x08007f6d
 8007fcc:	0800801b 	.word	0x0800801b
 8007fd0:	08007f6d 	.word	0x08007f6d
 8007fd4:	08007f6d 	.word	0x08007f6d
 8007fd8:	080080b1 	.word	0x080080b1
 8007fdc:	6833      	ldr	r3, [r6, #0]
 8007fde:	1d1a      	adds	r2, r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	6032      	str	r2, [r6, #0]
 8007fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fec:	2301      	movs	r3, #1
 8007fee:	e09c      	b.n	800812a <_printf_i+0x1e6>
 8007ff0:	6833      	ldr	r3, [r6, #0]
 8007ff2:	6820      	ldr	r0, [r4, #0]
 8007ff4:	1d19      	adds	r1, r3, #4
 8007ff6:	6031      	str	r1, [r6, #0]
 8007ff8:	0606      	lsls	r6, r0, #24
 8007ffa:	d501      	bpl.n	8008000 <_printf_i+0xbc>
 8007ffc:	681d      	ldr	r5, [r3, #0]
 8007ffe:	e003      	b.n	8008008 <_printf_i+0xc4>
 8008000:	0645      	lsls	r5, r0, #25
 8008002:	d5fb      	bpl.n	8007ffc <_printf_i+0xb8>
 8008004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008008:	2d00      	cmp	r5, #0
 800800a:	da03      	bge.n	8008014 <_printf_i+0xd0>
 800800c:	232d      	movs	r3, #45	@ 0x2d
 800800e:	426d      	negs	r5, r5
 8008010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008014:	4858      	ldr	r0, [pc, #352]	@ (8008178 <_printf_i+0x234>)
 8008016:	230a      	movs	r3, #10
 8008018:	e011      	b.n	800803e <_printf_i+0xfa>
 800801a:	6821      	ldr	r1, [r4, #0]
 800801c:	6833      	ldr	r3, [r6, #0]
 800801e:	0608      	lsls	r0, r1, #24
 8008020:	f853 5b04 	ldr.w	r5, [r3], #4
 8008024:	d402      	bmi.n	800802c <_printf_i+0xe8>
 8008026:	0649      	lsls	r1, r1, #25
 8008028:	bf48      	it	mi
 800802a:	b2ad      	uxthmi	r5, r5
 800802c:	2f6f      	cmp	r7, #111	@ 0x6f
 800802e:	4852      	ldr	r0, [pc, #328]	@ (8008178 <_printf_i+0x234>)
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	bf14      	ite	ne
 8008034:	230a      	movne	r3, #10
 8008036:	2308      	moveq	r3, #8
 8008038:	2100      	movs	r1, #0
 800803a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800803e:	6866      	ldr	r6, [r4, #4]
 8008040:	60a6      	str	r6, [r4, #8]
 8008042:	2e00      	cmp	r6, #0
 8008044:	db05      	blt.n	8008052 <_printf_i+0x10e>
 8008046:	6821      	ldr	r1, [r4, #0]
 8008048:	432e      	orrs	r6, r5
 800804a:	f021 0104 	bic.w	r1, r1, #4
 800804e:	6021      	str	r1, [r4, #0]
 8008050:	d04b      	beq.n	80080ea <_printf_i+0x1a6>
 8008052:	4616      	mov	r6, r2
 8008054:	fbb5 f1f3 	udiv	r1, r5, r3
 8008058:	fb03 5711 	mls	r7, r3, r1, r5
 800805c:	5dc7      	ldrb	r7, [r0, r7]
 800805e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008062:	462f      	mov	r7, r5
 8008064:	42bb      	cmp	r3, r7
 8008066:	460d      	mov	r5, r1
 8008068:	d9f4      	bls.n	8008054 <_printf_i+0x110>
 800806a:	2b08      	cmp	r3, #8
 800806c:	d10b      	bne.n	8008086 <_printf_i+0x142>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	07df      	lsls	r7, r3, #31
 8008072:	d508      	bpl.n	8008086 <_printf_i+0x142>
 8008074:	6923      	ldr	r3, [r4, #16]
 8008076:	6861      	ldr	r1, [r4, #4]
 8008078:	4299      	cmp	r1, r3
 800807a:	bfde      	ittt	le
 800807c:	2330      	movle	r3, #48	@ 0x30
 800807e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008082:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008086:	1b92      	subs	r2, r2, r6
 8008088:	6122      	str	r2, [r4, #16]
 800808a:	f8cd a000 	str.w	sl, [sp]
 800808e:	464b      	mov	r3, r9
 8008090:	aa03      	add	r2, sp, #12
 8008092:	4621      	mov	r1, r4
 8008094:	4640      	mov	r0, r8
 8008096:	f7ff fee7 	bl	8007e68 <_printf_common>
 800809a:	3001      	adds	r0, #1
 800809c:	d14a      	bne.n	8008134 <_printf_i+0x1f0>
 800809e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80080a2:	b004      	add	sp, #16
 80080a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	f043 0320 	orr.w	r3, r3, #32
 80080ae:	6023      	str	r3, [r4, #0]
 80080b0:	4832      	ldr	r0, [pc, #200]	@ (800817c <_printf_i+0x238>)
 80080b2:	2778      	movs	r7, #120	@ 0x78
 80080b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080b8:	6823      	ldr	r3, [r4, #0]
 80080ba:	6831      	ldr	r1, [r6, #0]
 80080bc:	061f      	lsls	r7, r3, #24
 80080be:	f851 5b04 	ldr.w	r5, [r1], #4
 80080c2:	d402      	bmi.n	80080ca <_printf_i+0x186>
 80080c4:	065f      	lsls	r7, r3, #25
 80080c6:	bf48      	it	mi
 80080c8:	b2ad      	uxthmi	r5, r5
 80080ca:	6031      	str	r1, [r6, #0]
 80080cc:	07d9      	lsls	r1, r3, #31
 80080ce:	bf44      	itt	mi
 80080d0:	f043 0320 	orrmi.w	r3, r3, #32
 80080d4:	6023      	strmi	r3, [r4, #0]
 80080d6:	b11d      	cbz	r5, 80080e0 <_printf_i+0x19c>
 80080d8:	2310      	movs	r3, #16
 80080da:	e7ad      	b.n	8008038 <_printf_i+0xf4>
 80080dc:	4826      	ldr	r0, [pc, #152]	@ (8008178 <_printf_i+0x234>)
 80080de:	e7e9      	b.n	80080b4 <_printf_i+0x170>
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	f023 0320 	bic.w	r3, r3, #32
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	e7f6      	b.n	80080d8 <_printf_i+0x194>
 80080ea:	4616      	mov	r6, r2
 80080ec:	e7bd      	b.n	800806a <_printf_i+0x126>
 80080ee:	6833      	ldr	r3, [r6, #0]
 80080f0:	6825      	ldr	r5, [r4, #0]
 80080f2:	6961      	ldr	r1, [r4, #20]
 80080f4:	1d18      	adds	r0, r3, #4
 80080f6:	6030      	str	r0, [r6, #0]
 80080f8:	062e      	lsls	r6, r5, #24
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	d501      	bpl.n	8008102 <_printf_i+0x1be>
 80080fe:	6019      	str	r1, [r3, #0]
 8008100:	e002      	b.n	8008108 <_printf_i+0x1c4>
 8008102:	0668      	lsls	r0, r5, #25
 8008104:	d5fb      	bpl.n	80080fe <_printf_i+0x1ba>
 8008106:	8019      	strh	r1, [r3, #0]
 8008108:	2300      	movs	r3, #0
 800810a:	6123      	str	r3, [r4, #16]
 800810c:	4616      	mov	r6, r2
 800810e:	e7bc      	b.n	800808a <_printf_i+0x146>
 8008110:	6833      	ldr	r3, [r6, #0]
 8008112:	1d1a      	adds	r2, r3, #4
 8008114:	6032      	str	r2, [r6, #0]
 8008116:	681e      	ldr	r6, [r3, #0]
 8008118:	6862      	ldr	r2, [r4, #4]
 800811a:	2100      	movs	r1, #0
 800811c:	4630      	mov	r0, r6
 800811e:	f7f8 f87f 	bl	8000220 <memchr>
 8008122:	b108      	cbz	r0, 8008128 <_printf_i+0x1e4>
 8008124:	1b80      	subs	r0, r0, r6
 8008126:	6060      	str	r0, [r4, #4]
 8008128:	6863      	ldr	r3, [r4, #4]
 800812a:	6123      	str	r3, [r4, #16]
 800812c:	2300      	movs	r3, #0
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008132:	e7aa      	b.n	800808a <_printf_i+0x146>
 8008134:	6923      	ldr	r3, [r4, #16]
 8008136:	4632      	mov	r2, r6
 8008138:	4649      	mov	r1, r9
 800813a:	4640      	mov	r0, r8
 800813c:	47d0      	blx	sl
 800813e:	3001      	adds	r0, #1
 8008140:	d0ad      	beq.n	800809e <_printf_i+0x15a>
 8008142:	6823      	ldr	r3, [r4, #0]
 8008144:	079b      	lsls	r3, r3, #30
 8008146:	d413      	bmi.n	8008170 <_printf_i+0x22c>
 8008148:	68e0      	ldr	r0, [r4, #12]
 800814a:	9b03      	ldr	r3, [sp, #12]
 800814c:	4298      	cmp	r0, r3
 800814e:	bfb8      	it	lt
 8008150:	4618      	movlt	r0, r3
 8008152:	e7a6      	b.n	80080a2 <_printf_i+0x15e>
 8008154:	2301      	movs	r3, #1
 8008156:	4632      	mov	r2, r6
 8008158:	4649      	mov	r1, r9
 800815a:	4640      	mov	r0, r8
 800815c:	47d0      	blx	sl
 800815e:	3001      	adds	r0, #1
 8008160:	d09d      	beq.n	800809e <_printf_i+0x15a>
 8008162:	3501      	adds	r5, #1
 8008164:	68e3      	ldr	r3, [r4, #12]
 8008166:	9903      	ldr	r1, [sp, #12]
 8008168:	1a5b      	subs	r3, r3, r1
 800816a:	42ab      	cmp	r3, r5
 800816c:	dcf2      	bgt.n	8008154 <_printf_i+0x210>
 800816e:	e7eb      	b.n	8008148 <_printf_i+0x204>
 8008170:	2500      	movs	r5, #0
 8008172:	f104 0619 	add.w	r6, r4, #25
 8008176:	e7f5      	b.n	8008164 <_printf_i+0x220>
 8008178:	0800b804 	.word	0x0800b804
 800817c:	0800b815 	.word	0x0800b815

08008180 <_scanf_float>:
 8008180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008184:	b087      	sub	sp, #28
 8008186:	4691      	mov	r9, r2
 8008188:	9303      	str	r3, [sp, #12]
 800818a:	688b      	ldr	r3, [r1, #8]
 800818c:	1e5a      	subs	r2, r3, #1
 800818e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008192:	bf81      	itttt	hi
 8008194:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008198:	eb03 0b05 	addhi.w	fp, r3, r5
 800819c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80081a0:	608b      	strhi	r3, [r1, #8]
 80081a2:	680b      	ldr	r3, [r1, #0]
 80081a4:	460a      	mov	r2, r1
 80081a6:	f04f 0500 	mov.w	r5, #0
 80081aa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80081ae:	f842 3b1c 	str.w	r3, [r2], #28
 80081b2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80081b6:	4680      	mov	r8, r0
 80081b8:	460c      	mov	r4, r1
 80081ba:	bf98      	it	ls
 80081bc:	f04f 0b00 	movls.w	fp, #0
 80081c0:	9201      	str	r2, [sp, #4]
 80081c2:	4616      	mov	r6, r2
 80081c4:	46aa      	mov	sl, r5
 80081c6:	462f      	mov	r7, r5
 80081c8:	9502      	str	r5, [sp, #8]
 80081ca:	68a2      	ldr	r2, [r4, #8]
 80081cc:	b15a      	cbz	r2, 80081e6 <_scanf_float+0x66>
 80081ce:	f8d9 3000 	ldr.w	r3, [r9]
 80081d2:	781b      	ldrb	r3, [r3, #0]
 80081d4:	2b4e      	cmp	r3, #78	@ 0x4e
 80081d6:	d863      	bhi.n	80082a0 <_scanf_float+0x120>
 80081d8:	2b40      	cmp	r3, #64	@ 0x40
 80081da:	d83b      	bhi.n	8008254 <_scanf_float+0xd4>
 80081dc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80081e0:	b2c8      	uxtb	r0, r1
 80081e2:	280e      	cmp	r0, #14
 80081e4:	d939      	bls.n	800825a <_scanf_float+0xda>
 80081e6:	b11f      	cbz	r7, 80081f0 <_scanf_float+0x70>
 80081e8:	6823      	ldr	r3, [r4, #0]
 80081ea:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80081f4:	f1ba 0f01 	cmp.w	sl, #1
 80081f8:	f200 8114 	bhi.w	8008424 <_scanf_float+0x2a4>
 80081fc:	9b01      	ldr	r3, [sp, #4]
 80081fe:	429e      	cmp	r6, r3
 8008200:	f200 8105 	bhi.w	800840e <_scanf_float+0x28e>
 8008204:	2001      	movs	r0, #1
 8008206:	b007      	add	sp, #28
 8008208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800820c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008210:	2a0d      	cmp	r2, #13
 8008212:	d8e8      	bhi.n	80081e6 <_scanf_float+0x66>
 8008214:	a101      	add	r1, pc, #4	@ (adr r1, 800821c <_scanf_float+0x9c>)
 8008216:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008365 	.word	0x08008365
 8008220:	080081e7 	.word	0x080081e7
 8008224:	080081e7 	.word	0x080081e7
 8008228:	080081e7 	.word	0x080081e7
 800822c:	080083c1 	.word	0x080083c1
 8008230:	0800839b 	.word	0x0800839b
 8008234:	080081e7 	.word	0x080081e7
 8008238:	080081e7 	.word	0x080081e7
 800823c:	08008373 	.word	0x08008373
 8008240:	080081e7 	.word	0x080081e7
 8008244:	080081e7 	.word	0x080081e7
 8008248:	080081e7 	.word	0x080081e7
 800824c:	080081e7 	.word	0x080081e7
 8008250:	0800832f 	.word	0x0800832f
 8008254:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008258:	e7da      	b.n	8008210 <_scanf_float+0x90>
 800825a:	290e      	cmp	r1, #14
 800825c:	d8c3      	bhi.n	80081e6 <_scanf_float+0x66>
 800825e:	a001      	add	r0, pc, #4	@ (adr r0, 8008264 <_scanf_float+0xe4>)
 8008260:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008264:	0800831f 	.word	0x0800831f
 8008268:	080081e7 	.word	0x080081e7
 800826c:	0800831f 	.word	0x0800831f
 8008270:	080083af 	.word	0x080083af
 8008274:	080081e7 	.word	0x080081e7
 8008278:	080082c1 	.word	0x080082c1
 800827c:	08008305 	.word	0x08008305
 8008280:	08008305 	.word	0x08008305
 8008284:	08008305 	.word	0x08008305
 8008288:	08008305 	.word	0x08008305
 800828c:	08008305 	.word	0x08008305
 8008290:	08008305 	.word	0x08008305
 8008294:	08008305 	.word	0x08008305
 8008298:	08008305 	.word	0x08008305
 800829c:	08008305 	.word	0x08008305
 80082a0:	2b6e      	cmp	r3, #110	@ 0x6e
 80082a2:	d809      	bhi.n	80082b8 <_scanf_float+0x138>
 80082a4:	2b60      	cmp	r3, #96	@ 0x60
 80082a6:	d8b1      	bhi.n	800820c <_scanf_float+0x8c>
 80082a8:	2b54      	cmp	r3, #84	@ 0x54
 80082aa:	d07b      	beq.n	80083a4 <_scanf_float+0x224>
 80082ac:	2b59      	cmp	r3, #89	@ 0x59
 80082ae:	d19a      	bne.n	80081e6 <_scanf_float+0x66>
 80082b0:	2d07      	cmp	r5, #7
 80082b2:	d198      	bne.n	80081e6 <_scanf_float+0x66>
 80082b4:	2508      	movs	r5, #8
 80082b6:	e02f      	b.n	8008318 <_scanf_float+0x198>
 80082b8:	2b74      	cmp	r3, #116	@ 0x74
 80082ba:	d073      	beq.n	80083a4 <_scanf_float+0x224>
 80082bc:	2b79      	cmp	r3, #121	@ 0x79
 80082be:	e7f6      	b.n	80082ae <_scanf_float+0x12e>
 80082c0:	6821      	ldr	r1, [r4, #0]
 80082c2:	05c8      	lsls	r0, r1, #23
 80082c4:	d51e      	bpl.n	8008304 <_scanf_float+0x184>
 80082c6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80082ca:	6021      	str	r1, [r4, #0]
 80082cc:	3701      	adds	r7, #1
 80082ce:	f1bb 0f00 	cmp.w	fp, #0
 80082d2:	d003      	beq.n	80082dc <_scanf_float+0x15c>
 80082d4:	3201      	adds	r2, #1
 80082d6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80082da:	60a2      	str	r2, [r4, #8]
 80082dc:	68a3      	ldr	r3, [r4, #8]
 80082de:	3b01      	subs	r3, #1
 80082e0:	60a3      	str	r3, [r4, #8]
 80082e2:	6923      	ldr	r3, [r4, #16]
 80082e4:	3301      	adds	r3, #1
 80082e6:	6123      	str	r3, [r4, #16]
 80082e8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f8c9 3004 	str.w	r3, [r9, #4]
 80082f4:	f340 8082 	ble.w	80083fc <_scanf_float+0x27c>
 80082f8:	f8d9 3000 	ldr.w	r3, [r9]
 80082fc:	3301      	adds	r3, #1
 80082fe:	f8c9 3000 	str.w	r3, [r9]
 8008302:	e762      	b.n	80081ca <_scanf_float+0x4a>
 8008304:	eb1a 0105 	adds.w	r1, sl, r5
 8008308:	f47f af6d 	bne.w	80081e6 <_scanf_float+0x66>
 800830c:	6822      	ldr	r2, [r4, #0]
 800830e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008312:	6022      	str	r2, [r4, #0]
 8008314:	460d      	mov	r5, r1
 8008316:	468a      	mov	sl, r1
 8008318:	f806 3b01 	strb.w	r3, [r6], #1
 800831c:	e7de      	b.n	80082dc <_scanf_float+0x15c>
 800831e:	6822      	ldr	r2, [r4, #0]
 8008320:	0610      	lsls	r0, r2, #24
 8008322:	f57f af60 	bpl.w	80081e6 <_scanf_float+0x66>
 8008326:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	e7f4      	b.n	8008318 <_scanf_float+0x198>
 800832e:	f1ba 0f00 	cmp.w	sl, #0
 8008332:	d10c      	bne.n	800834e <_scanf_float+0x1ce>
 8008334:	b977      	cbnz	r7, 8008354 <_scanf_float+0x1d4>
 8008336:	6822      	ldr	r2, [r4, #0]
 8008338:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800833c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008340:	d108      	bne.n	8008354 <_scanf_float+0x1d4>
 8008342:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008346:	6022      	str	r2, [r4, #0]
 8008348:	f04f 0a01 	mov.w	sl, #1
 800834c:	e7e4      	b.n	8008318 <_scanf_float+0x198>
 800834e:	f1ba 0f02 	cmp.w	sl, #2
 8008352:	d050      	beq.n	80083f6 <_scanf_float+0x276>
 8008354:	2d01      	cmp	r5, #1
 8008356:	d002      	beq.n	800835e <_scanf_float+0x1de>
 8008358:	2d04      	cmp	r5, #4
 800835a:	f47f af44 	bne.w	80081e6 <_scanf_float+0x66>
 800835e:	3501      	adds	r5, #1
 8008360:	b2ed      	uxtb	r5, r5
 8008362:	e7d9      	b.n	8008318 <_scanf_float+0x198>
 8008364:	f1ba 0f01 	cmp.w	sl, #1
 8008368:	f47f af3d 	bne.w	80081e6 <_scanf_float+0x66>
 800836c:	f04f 0a02 	mov.w	sl, #2
 8008370:	e7d2      	b.n	8008318 <_scanf_float+0x198>
 8008372:	b975      	cbnz	r5, 8008392 <_scanf_float+0x212>
 8008374:	2f00      	cmp	r7, #0
 8008376:	f47f af37 	bne.w	80081e8 <_scanf_float+0x68>
 800837a:	6822      	ldr	r2, [r4, #0]
 800837c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008380:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008384:	f040 8103 	bne.w	800858e <_scanf_float+0x40e>
 8008388:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800838c:	6022      	str	r2, [r4, #0]
 800838e:	2501      	movs	r5, #1
 8008390:	e7c2      	b.n	8008318 <_scanf_float+0x198>
 8008392:	2d03      	cmp	r5, #3
 8008394:	d0e3      	beq.n	800835e <_scanf_float+0x1de>
 8008396:	2d05      	cmp	r5, #5
 8008398:	e7df      	b.n	800835a <_scanf_float+0x1da>
 800839a:	2d02      	cmp	r5, #2
 800839c:	f47f af23 	bne.w	80081e6 <_scanf_float+0x66>
 80083a0:	2503      	movs	r5, #3
 80083a2:	e7b9      	b.n	8008318 <_scanf_float+0x198>
 80083a4:	2d06      	cmp	r5, #6
 80083a6:	f47f af1e 	bne.w	80081e6 <_scanf_float+0x66>
 80083aa:	2507      	movs	r5, #7
 80083ac:	e7b4      	b.n	8008318 <_scanf_float+0x198>
 80083ae:	6822      	ldr	r2, [r4, #0]
 80083b0:	0591      	lsls	r1, r2, #22
 80083b2:	f57f af18 	bpl.w	80081e6 <_scanf_float+0x66>
 80083b6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80083ba:	6022      	str	r2, [r4, #0]
 80083bc:	9702      	str	r7, [sp, #8]
 80083be:	e7ab      	b.n	8008318 <_scanf_float+0x198>
 80083c0:	6822      	ldr	r2, [r4, #0]
 80083c2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80083c6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80083ca:	d005      	beq.n	80083d8 <_scanf_float+0x258>
 80083cc:	0550      	lsls	r0, r2, #21
 80083ce:	f57f af0a 	bpl.w	80081e6 <_scanf_float+0x66>
 80083d2:	2f00      	cmp	r7, #0
 80083d4:	f000 80db 	beq.w	800858e <_scanf_float+0x40e>
 80083d8:	0591      	lsls	r1, r2, #22
 80083da:	bf58      	it	pl
 80083dc:	9902      	ldrpl	r1, [sp, #8]
 80083de:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80083e2:	bf58      	it	pl
 80083e4:	1a79      	subpl	r1, r7, r1
 80083e6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80083ea:	bf58      	it	pl
 80083ec:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083f0:	6022      	str	r2, [r4, #0]
 80083f2:	2700      	movs	r7, #0
 80083f4:	e790      	b.n	8008318 <_scanf_float+0x198>
 80083f6:	f04f 0a03 	mov.w	sl, #3
 80083fa:	e78d      	b.n	8008318 <_scanf_float+0x198>
 80083fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008400:	4649      	mov	r1, r9
 8008402:	4640      	mov	r0, r8
 8008404:	4798      	blx	r3
 8008406:	2800      	cmp	r0, #0
 8008408:	f43f aedf 	beq.w	80081ca <_scanf_float+0x4a>
 800840c:	e6eb      	b.n	80081e6 <_scanf_float+0x66>
 800840e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008412:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008416:	464a      	mov	r2, r9
 8008418:	4640      	mov	r0, r8
 800841a:	4798      	blx	r3
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	6123      	str	r3, [r4, #16]
 8008422:	e6eb      	b.n	80081fc <_scanf_float+0x7c>
 8008424:	1e6b      	subs	r3, r5, #1
 8008426:	2b06      	cmp	r3, #6
 8008428:	d824      	bhi.n	8008474 <_scanf_float+0x2f4>
 800842a:	2d02      	cmp	r5, #2
 800842c:	d836      	bhi.n	800849c <_scanf_float+0x31c>
 800842e:	9b01      	ldr	r3, [sp, #4]
 8008430:	429e      	cmp	r6, r3
 8008432:	f67f aee7 	bls.w	8008204 <_scanf_float+0x84>
 8008436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800843a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800843e:	464a      	mov	r2, r9
 8008440:	4640      	mov	r0, r8
 8008442:	4798      	blx	r3
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	3b01      	subs	r3, #1
 8008448:	6123      	str	r3, [r4, #16]
 800844a:	e7f0      	b.n	800842e <_scanf_float+0x2ae>
 800844c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008450:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008454:	464a      	mov	r2, r9
 8008456:	4640      	mov	r0, r8
 8008458:	4798      	blx	r3
 800845a:	6923      	ldr	r3, [r4, #16]
 800845c:	3b01      	subs	r3, #1
 800845e:	6123      	str	r3, [r4, #16]
 8008460:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008464:	fa5f fa8a 	uxtb.w	sl, sl
 8008468:	f1ba 0f02 	cmp.w	sl, #2
 800846c:	d1ee      	bne.n	800844c <_scanf_float+0x2cc>
 800846e:	3d03      	subs	r5, #3
 8008470:	b2ed      	uxtb	r5, r5
 8008472:	1b76      	subs	r6, r6, r5
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	05da      	lsls	r2, r3, #23
 8008478:	d530      	bpl.n	80084dc <_scanf_float+0x35c>
 800847a:	055b      	lsls	r3, r3, #21
 800847c:	d511      	bpl.n	80084a2 <_scanf_float+0x322>
 800847e:	9b01      	ldr	r3, [sp, #4]
 8008480:	429e      	cmp	r6, r3
 8008482:	f67f aebf 	bls.w	8008204 <_scanf_float+0x84>
 8008486:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800848a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800848e:	464a      	mov	r2, r9
 8008490:	4640      	mov	r0, r8
 8008492:	4798      	blx	r3
 8008494:	6923      	ldr	r3, [r4, #16]
 8008496:	3b01      	subs	r3, #1
 8008498:	6123      	str	r3, [r4, #16]
 800849a:	e7f0      	b.n	800847e <_scanf_float+0x2fe>
 800849c:	46aa      	mov	sl, r5
 800849e:	46b3      	mov	fp, r6
 80084a0:	e7de      	b.n	8008460 <_scanf_float+0x2e0>
 80084a2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80084a6:	6923      	ldr	r3, [r4, #16]
 80084a8:	2965      	cmp	r1, #101	@ 0x65
 80084aa:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80084ae:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 80084b2:	6123      	str	r3, [r4, #16]
 80084b4:	d00c      	beq.n	80084d0 <_scanf_float+0x350>
 80084b6:	2945      	cmp	r1, #69	@ 0x45
 80084b8:	d00a      	beq.n	80084d0 <_scanf_float+0x350>
 80084ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084be:	464a      	mov	r2, r9
 80084c0:	4640      	mov	r0, r8
 80084c2:	4798      	blx	r3
 80084c4:	6923      	ldr	r3, [r4, #16]
 80084c6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	1eb5      	subs	r5, r6, #2
 80084ce:	6123      	str	r3, [r4, #16]
 80084d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80084d4:	464a      	mov	r2, r9
 80084d6:	4640      	mov	r0, r8
 80084d8:	4798      	blx	r3
 80084da:	462e      	mov	r6, r5
 80084dc:	6822      	ldr	r2, [r4, #0]
 80084de:	f012 0210 	ands.w	r2, r2, #16
 80084e2:	d001      	beq.n	80084e8 <_scanf_float+0x368>
 80084e4:	2000      	movs	r0, #0
 80084e6:	e68e      	b.n	8008206 <_scanf_float+0x86>
 80084e8:	7032      	strb	r2, [r6, #0]
 80084ea:	6823      	ldr	r3, [r4, #0]
 80084ec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80084f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084f4:	d125      	bne.n	8008542 <_scanf_float+0x3c2>
 80084f6:	9b02      	ldr	r3, [sp, #8]
 80084f8:	429f      	cmp	r7, r3
 80084fa:	d00a      	beq.n	8008512 <_scanf_float+0x392>
 80084fc:	1bda      	subs	r2, r3, r7
 80084fe:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008502:	429e      	cmp	r6, r3
 8008504:	bf28      	it	cs
 8008506:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800850a:	4922      	ldr	r1, [pc, #136]	@ (8008594 <_scanf_float+0x414>)
 800850c:	4630      	mov	r0, r6
 800850e:	f000 f9ad 	bl	800886c <siprintf>
 8008512:	9901      	ldr	r1, [sp, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	4640      	mov	r0, r8
 8008518:	f7ff f9d6 	bl	80078c8 <_strtod_r>
 800851c:	9b03      	ldr	r3, [sp, #12]
 800851e:	6821      	ldr	r1, [r4, #0]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f011 0f02 	tst.w	r1, #2
 8008526:	ec57 6b10 	vmov	r6, r7, d0
 800852a:	f103 0204 	add.w	r2, r3, #4
 800852e:	d015      	beq.n	800855c <_scanf_float+0x3dc>
 8008530:	9903      	ldr	r1, [sp, #12]
 8008532:	600a      	str	r2, [r1, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	e9c3 6700 	strd	r6, r7, [r3]
 800853a:	68e3      	ldr	r3, [r4, #12]
 800853c:	3301      	adds	r3, #1
 800853e:	60e3      	str	r3, [r4, #12]
 8008540:	e7d0      	b.n	80084e4 <_scanf_float+0x364>
 8008542:	9b04      	ldr	r3, [sp, #16]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0e4      	beq.n	8008512 <_scanf_float+0x392>
 8008548:	9905      	ldr	r1, [sp, #20]
 800854a:	230a      	movs	r3, #10
 800854c:	3101      	adds	r1, #1
 800854e:	4640      	mov	r0, r8
 8008550:	f002 fafe 	bl	800ab50 <_strtol_r>
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	9e05      	ldr	r6, [sp, #20]
 8008558:	1ac2      	subs	r2, r0, r3
 800855a:	e7d0      	b.n	80084fe <_scanf_float+0x37e>
 800855c:	f011 0f04 	tst.w	r1, #4
 8008560:	9903      	ldr	r1, [sp, #12]
 8008562:	600a      	str	r2, [r1, #0]
 8008564:	d1e6      	bne.n	8008534 <_scanf_float+0x3b4>
 8008566:	681d      	ldr	r5, [r3, #0]
 8008568:	4632      	mov	r2, r6
 800856a:	463b      	mov	r3, r7
 800856c:	4630      	mov	r0, r6
 800856e:	4639      	mov	r1, r7
 8008570:	f7f8 fb04 	bl	8000b7c <__aeabi_dcmpun>
 8008574:	b128      	cbz	r0, 8008582 <_scanf_float+0x402>
 8008576:	4808      	ldr	r0, [pc, #32]	@ (8008598 <_scanf_float+0x418>)
 8008578:	f000 fb1a 	bl	8008bb0 <nanf>
 800857c:	ed85 0a00 	vstr	s0, [r5]
 8008580:	e7db      	b.n	800853a <_scanf_float+0x3ba>
 8008582:	4630      	mov	r0, r6
 8008584:	4639      	mov	r1, r7
 8008586:	f7f8 fb57 	bl	8000c38 <__aeabi_d2f>
 800858a:	6028      	str	r0, [r5, #0]
 800858c:	e7d5      	b.n	800853a <_scanf_float+0x3ba>
 800858e:	2700      	movs	r7, #0
 8008590:	e62e      	b.n	80081f0 <_scanf_float+0x70>
 8008592:	bf00      	nop
 8008594:	0800b826 	.word	0x0800b826
 8008598:	0800b9c5 	.word	0x0800b9c5

0800859c <std>:
 800859c:	2300      	movs	r3, #0
 800859e:	b510      	push	{r4, lr}
 80085a0:	4604      	mov	r4, r0
 80085a2:	e9c0 3300 	strd	r3, r3, [r0]
 80085a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80085aa:	6083      	str	r3, [r0, #8]
 80085ac:	8181      	strh	r1, [r0, #12]
 80085ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80085b0:	81c2      	strh	r2, [r0, #14]
 80085b2:	6183      	str	r3, [r0, #24]
 80085b4:	4619      	mov	r1, r3
 80085b6:	2208      	movs	r2, #8
 80085b8:	305c      	adds	r0, #92	@ 0x5c
 80085ba:	f000 fa51 	bl	8008a60 <memset>
 80085be:	4b0d      	ldr	r3, [pc, #52]	@ (80085f4 <std+0x58>)
 80085c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80085c2:	4b0d      	ldr	r3, [pc, #52]	@ (80085f8 <std+0x5c>)
 80085c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80085c6:	4b0d      	ldr	r3, [pc, #52]	@ (80085fc <std+0x60>)
 80085c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80085ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008600 <std+0x64>)
 80085cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80085ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008604 <std+0x68>)
 80085d0:	6224      	str	r4, [r4, #32]
 80085d2:	429c      	cmp	r4, r3
 80085d4:	d006      	beq.n	80085e4 <std+0x48>
 80085d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80085da:	4294      	cmp	r4, r2
 80085dc:	d002      	beq.n	80085e4 <std+0x48>
 80085de:	33d0      	adds	r3, #208	@ 0xd0
 80085e0:	429c      	cmp	r4, r3
 80085e2:	d105      	bne.n	80085f0 <std+0x54>
 80085e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80085e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ec:	f000 bac6 	b.w	8008b7c <__retarget_lock_init_recursive>
 80085f0:	bd10      	pop	{r4, pc}
 80085f2:	bf00      	nop
 80085f4:	080088b1 	.word	0x080088b1
 80085f8:	080088d3 	.word	0x080088d3
 80085fc:	0800890b 	.word	0x0800890b
 8008600:	0800892f 	.word	0x0800892f
 8008604:	200005e0 	.word	0x200005e0

08008608 <stdio_exit_handler>:
 8008608:	4a02      	ldr	r2, [pc, #8]	@ (8008614 <stdio_exit_handler+0xc>)
 800860a:	4903      	ldr	r1, [pc, #12]	@ (8008618 <stdio_exit_handler+0x10>)
 800860c:	4803      	ldr	r0, [pc, #12]	@ (800861c <stdio_exit_handler+0x14>)
 800860e:	f000 b869 	b.w	80086e4 <_fwalk_sglue>
 8008612:	bf00      	nop
 8008614:	2000000c 	.word	0x2000000c
 8008618:	0800b1a9 	.word	0x0800b1a9
 800861c:	20000188 	.word	0x20000188

08008620 <cleanup_stdio>:
 8008620:	6841      	ldr	r1, [r0, #4]
 8008622:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <cleanup_stdio+0x34>)
 8008624:	4299      	cmp	r1, r3
 8008626:	b510      	push	{r4, lr}
 8008628:	4604      	mov	r4, r0
 800862a:	d001      	beq.n	8008630 <cleanup_stdio+0x10>
 800862c:	f002 fdbc 	bl	800b1a8 <_fflush_r>
 8008630:	68a1      	ldr	r1, [r4, #8]
 8008632:	4b09      	ldr	r3, [pc, #36]	@ (8008658 <cleanup_stdio+0x38>)
 8008634:	4299      	cmp	r1, r3
 8008636:	d002      	beq.n	800863e <cleanup_stdio+0x1e>
 8008638:	4620      	mov	r0, r4
 800863a:	f002 fdb5 	bl	800b1a8 <_fflush_r>
 800863e:	68e1      	ldr	r1, [r4, #12]
 8008640:	4b06      	ldr	r3, [pc, #24]	@ (800865c <cleanup_stdio+0x3c>)
 8008642:	4299      	cmp	r1, r3
 8008644:	d004      	beq.n	8008650 <cleanup_stdio+0x30>
 8008646:	4620      	mov	r0, r4
 8008648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864c:	f002 bdac 	b.w	800b1a8 <_fflush_r>
 8008650:	bd10      	pop	{r4, pc}
 8008652:	bf00      	nop
 8008654:	200005e0 	.word	0x200005e0
 8008658:	20000648 	.word	0x20000648
 800865c:	200006b0 	.word	0x200006b0

08008660 <global_stdio_init.part.0>:
 8008660:	b510      	push	{r4, lr}
 8008662:	4b0b      	ldr	r3, [pc, #44]	@ (8008690 <global_stdio_init.part.0+0x30>)
 8008664:	4c0b      	ldr	r4, [pc, #44]	@ (8008694 <global_stdio_init.part.0+0x34>)
 8008666:	4a0c      	ldr	r2, [pc, #48]	@ (8008698 <global_stdio_init.part.0+0x38>)
 8008668:	601a      	str	r2, [r3, #0]
 800866a:	4620      	mov	r0, r4
 800866c:	2200      	movs	r2, #0
 800866e:	2104      	movs	r1, #4
 8008670:	f7ff ff94 	bl	800859c <std>
 8008674:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008678:	2201      	movs	r2, #1
 800867a:	2109      	movs	r1, #9
 800867c:	f7ff ff8e 	bl	800859c <std>
 8008680:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008684:	2202      	movs	r2, #2
 8008686:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800868a:	2112      	movs	r1, #18
 800868c:	f7ff bf86 	b.w	800859c <std>
 8008690:	20000718 	.word	0x20000718
 8008694:	200005e0 	.word	0x200005e0
 8008698:	08008609 	.word	0x08008609

0800869c <__sfp_lock_acquire>:
 800869c:	4801      	ldr	r0, [pc, #4]	@ (80086a4 <__sfp_lock_acquire+0x8>)
 800869e:	f000 ba6e 	b.w	8008b7e <__retarget_lock_acquire_recursive>
 80086a2:	bf00      	nop
 80086a4:	20000721 	.word	0x20000721

080086a8 <__sfp_lock_release>:
 80086a8:	4801      	ldr	r0, [pc, #4]	@ (80086b0 <__sfp_lock_release+0x8>)
 80086aa:	f000 ba69 	b.w	8008b80 <__retarget_lock_release_recursive>
 80086ae:	bf00      	nop
 80086b0:	20000721 	.word	0x20000721

080086b4 <__sinit>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	4604      	mov	r4, r0
 80086b8:	f7ff fff0 	bl	800869c <__sfp_lock_acquire>
 80086bc:	6a23      	ldr	r3, [r4, #32]
 80086be:	b11b      	cbz	r3, 80086c8 <__sinit+0x14>
 80086c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086c4:	f7ff bff0 	b.w	80086a8 <__sfp_lock_release>
 80086c8:	4b04      	ldr	r3, [pc, #16]	@ (80086dc <__sinit+0x28>)
 80086ca:	6223      	str	r3, [r4, #32]
 80086cc:	4b04      	ldr	r3, [pc, #16]	@ (80086e0 <__sinit+0x2c>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1f5      	bne.n	80086c0 <__sinit+0xc>
 80086d4:	f7ff ffc4 	bl	8008660 <global_stdio_init.part.0>
 80086d8:	e7f2      	b.n	80086c0 <__sinit+0xc>
 80086da:	bf00      	nop
 80086dc:	08008621 	.word	0x08008621
 80086e0:	20000718 	.word	0x20000718

080086e4 <_fwalk_sglue>:
 80086e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086e8:	4607      	mov	r7, r0
 80086ea:	4688      	mov	r8, r1
 80086ec:	4614      	mov	r4, r2
 80086ee:	2600      	movs	r6, #0
 80086f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086f4:	f1b9 0901 	subs.w	r9, r9, #1
 80086f8:	d505      	bpl.n	8008706 <_fwalk_sglue+0x22>
 80086fa:	6824      	ldr	r4, [r4, #0]
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	d1f7      	bne.n	80086f0 <_fwalk_sglue+0xc>
 8008700:	4630      	mov	r0, r6
 8008702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008706:	89ab      	ldrh	r3, [r5, #12]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d907      	bls.n	800871c <_fwalk_sglue+0x38>
 800870c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008710:	3301      	adds	r3, #1
 8008712:	d003      	beq.n	800871c <_fwalk_sglue+0x38>
 8008714:	4629      	mov	r1, r5
 8008716:	4638      	mov	r0, r7
 8008718:	47c0      	blx	r8
 800871a:	4306      	orrs	r6, r0
 800871c:	3568      	adds	r5, #104	@ 0x68
 800871e:	e7e9      	b.n	80086f4 <_fwalk_sglue+0x10>

08008720 <iprintf>:
 8008720:	b40f      	push	{r0, r1, r2, r3}
 8008722:	b507      	push	{r0, r1, r2, lr}
 8008724:	4906      	ldr	r1, [pc, #24]	@ (8008740 <iprintf+0x20>)
 8008726:	ab04      	add	r3, sp, #16
 8008728:	6808      	ldr	r0, [r1, #0]
 800872a:	f853 2b04 	ldr.w	r2, [r3], #4
 800872e:	6881      	ldr	r1, [r0, #8]
 8008730:	9301      	str	r3, [sp, #4]
 8008732:	f002 fb9d 	bl	800ae70 <_vfiprintf_r>
 8008736:	b003      	add	sp, #12
 8008738:	f85d eb04 	ldr.w	lr, [sp], #4
 800873c:	b004      	add	sp, #16
 800873e:	4770      	bx	lr
 8008740:	20000184 	.word	0x20000184

08008744 <_puts_r>:
 8008744:	6a03      	ldr	r3, [r0, #32]
 8008746:	b570      	push	{r4, r5, r6, lr}
 8008748:	6884      	ldr	r4, [r0, #8]
 800874a:	4605      	mov	r5, r0
 800874c:	460e      	mov	r6, r1
 800874e:	b90b      	cbnz	r3, 8008754 <_puts_r+0x10>
 8008750:	f7ff ffb0 	bl	80086b4 <__sinit>
 8008754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008756:	07db      	lsls	r3, r3, #31
 8008758:	d405      	bmi.n	8008766 <_puts_r+0x22>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	0598      	lsls	r0, r3, #22
 800875e:	d402      	bmi.n	8008766 <_puts_r+0x22>
 8008760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008762:	f000 fa0c 	bl	8008b7e <__retarget_lock_acquire_recursive>
 8008766:	89a3      	ldrh	r3, [r4, #12]
 8008768:	0719      	lsls	r1, r3, #28
 800876a:	d502      	bpl.n	8008772 <_puts_r+0x2e>
 800876c:	6923      	ldr	r3, [r4, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d135      	bne.n	80087de <_puts_r+0x9a>
 8008772:	4621      	mov	r1, r4
 8008774:	4628      	mov	r0, r5
 8008776:	f000 f91d 	bl	80089b4 <__swsetup_r>
 800877a:	b380      	cbz	r0, 80087de <_puts_r+0x9a>
 800877c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008780:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008782:	07da      	lsls	r2, r3, #31
 8008784:	d405      	bmi.n	8008792 <_puts_r+0x4e>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	059b      	lsls	r3, r3, #22
 800878a:	d402      	bmi.n	8008792 <_puts_r+0x4e>
 800878c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800878e:	f000 f9f7 	bl	8008b80 <__retarget_lock_release_recursive>
 8008792:	4628      	mov	r0, r5
 8008794:	bd70      	pop	{r4, r5, r6, pc}
 8008796:	2b00      	cmp	r3, #0
 8008798:	da04      	bge.n	80087a4 <_puts_r+0x60>
 800879a:	69a2      	ldr	r2, [r4, #24]
 800879c:	429a      	cmp	r2, r3
 800879e:	dc17      	bgt.n	80087d0 <_puts_r+0x8c>
 80087a0:	290a      	cmp	r1, #10
 80087a2:	d015      	beq.n	80087d0 <_puts_r+0x8c>
 80087a4:	6823      	ldr	r3, [r4, #0]
 80087a6:	1c5a      	adds	r2, r3, #1
 80087a8:	6022      	str	r2, [r4, #0]
 80087aa:	7019      	strb	r1, [r3, #0]
 80087ac:	68a3      	ldr	r3, [r4, #8]
 80087ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087b2:	3b01      	subs	r3, #1
 80087b4:	60a3      	str	r3, [r4, #8]
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d1ed      	bne.n	8008796 <_puts_r+0x52>
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da11      	bge.n	80087e2 <_puts_r+0x9e>
 80087be:	4622      	mov	r2, r4
 80087c0:	210a      	movs	r1, #10
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 f8b7 	bl	8008936 <__swbuf_r>
 80087c8:	3001      	adds	r0, #1
 80087ca:	d0d7      	beq.n	800877c <_puts_r+0x38>
 80087cc:	250a      	movs	r5, #10
 80087ce:	e7d7      	b.n	8008780 <_puts_r+0x3c>
 80087d0:	4622      	mov	r2, r4
 80087d2:	4628      	mov	r0, r5
 80087d4:	f000 f8af 	bl	8008936 <__swbuf_r>
 80087d8:	3001      	adds	r0, #1
 80087da:	d1e7      	bne.n	80087ac <_puts_r+0x68>
 80087dc:	e7ce      	b.n	800877c <_puts_r+0x38>
 80087de:	3e01      	subs	r6, #1
 80087e0:	e7e4      	b.n	80087ac <_puts_r+0x68>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	6022      	str	r2, [r4, #0]
 80087e8:	220a      	movs	r2, #10
 80087ea:	701a      	strb	r2, [r3, #0]
 80087ec:	e7ee      	b.n	80087cc <_puts_r+0x88>
	...

080087f0 <puts>:
 80087f0:	4b02      	ldr	r3, [pc, #8]	@ (80087fc <puts+0xc>)
 80087f2:	4601      	mov	r1, r0
 80087f4:	6818      	ldr	r0, [r3, #0]
 80087f6:	f7ff bfa5 	b.w	8008744 <_puts_r>
 80087fa:	bf00      	nop
 80087fc:	20000184 	.word	0x20000184

08008800 <sniprintf>:
 8008800:	b40c      	push	{r2, r3}
 8008802:	b530      	push	{r4, r5, lr}
 8008804:	4b18      	ldr	r3, [pc, #96]	@ (8008868 <sniprintf+0x68>)
 8008806:	1e0c      	subs	r4, r1, #0
 8008808:	681d      	ldr	r5, [r3, #0]
 800880a:	b09d      	sub	sp, #116	@ 0x74
 800880c:	da08      	bge.n	8008820 <sniprintf+0x20>
 800880e:	238b      	movs	r3, #139	@ 0x8b
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008816:	b01d      	add	sp, #116	@ 0x74
 8008818:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800881c:	b002      	add	sp, #8
 800881e:	4770      	bx	lr
 8008820:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008824:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008828:	f04f 0300 	mov.w	r3, #0
 800882c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800882e:	bf14      	ite	ne
 8008830:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008834:	4623      	moveq	r3, r4
 8008836:	9304      	str	r3, [sp, #16]
 8008838:	9307      	str	r3, [sp, #28]
 800883a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800883e:	9002      	str	r0, [sp, #8]
 8008840:	9006      	str	r0, [sp, #24]
 8008842:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008846:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008848:	ab21      	add	r3, sp, #132	@ 0x84
 800884a:	a902      	add	r1, sp, #8
 800884c:	4628      	mov	r0, r5
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	f002 f9e8 	bl	800ac24 <_svfiprintf_r>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	bfbc      	itt	lt
 8008858:	238b      	movlt	r3, #139	@ 0x8b
 800885a:	602b      	strlt	r3, [r5, #0]
 800885c:	2c00      	cmp	r4, #0
 800885e:	d0da      	beq.n	8008816 <sniprintf+0x16>
 8008860:	9b02      	ldr	r3, [sp, #8]
 8008862:	2200      	movs	r2, #0
 8008864:	701a      	strb	r2, [r3, #0]
 8008866:	e7d6      	b.n	8008816 <sniprintf+0x16>
 8008868:	20000184 	.word	0x20000184

0800886c <siprintf>:
 800886c:	b40e      	push	{r1, r2, r3}
 800886e:	b510      	push	{r4, lr}
 8008870:	b09d      	sub	sp, #116	@ 0x74
 8008872:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008874:	9002      	str	r0, [sp, #8]
 8008876:	9006      	str	r0, [sp, #24]
 8008878:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800887c:	480a      	ldr	r0, [pc, #40]	@ (80088a8 <siprintf+0x3c>)
 800887e:	9107      	str	r1, [sp, #28]
 8008880:	9104      	str	r1, [sp, #16]
 8008882:	490a      	ldr	r1, [pc, #40]	@ (80088ac <siprintf+0x40>)
 8008884:	f853 2b04 	ldr.w	r2, [r3], #4
 8008888:	9105      	str	r1, [sp, #20]
 800888a:	2400      	movs	r4, #0
 800888c:	a902      	add	r1, sp, #8
 800888e:	6800      	ldr	r0, [r0, #0]
 8008890:	9301      	str	r3, [sp, #4]
 8008892:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008894:	f002 f9c6 	bl	800ac24 <_svfiprintf_r>
 8008898:	9b02      	ldr	r3, [sp, #8]
 800889a:	701c      	strb	r4, [r3, #0]
 800889c:	b01d      	add	sp, #116	@ 0x74
 800889e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088a2:	b003      	add	sp, #12
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	20000184 	.word	0x20000184
 80088ac:	ffff0208 	.word	0xffff0208

080088b0 <__sread>:
 80088b0:	b510      	push	{r4, lr}
 80088b2:	460c      	mov	r4, r1
 80088b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088b8:	f000 f912 	bl	8008ae0 <_read_r>
 80088bc:	2800      	cmp	r0, #0
 80088be:	bfab      	itete	ge
 80088c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088c2:	89a3      	ldrhlt	r3, [r4, #12]
 80088c4:	181b      	addge	r3, r3, r0
 80088c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088ca:	bfac      	ite	ge
 80088cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088ce:	81a3      	strhlt	r3, [r4, #12]
 80088d0:	bd10      	pop	{r4, pc}

080088d2 <__swrite>:
 80088d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088d6:	461f      	mov	r7, r3
 80088d8:	898b      	ldrh	r3, [r1, #12]
 80088da:	05db      	lsls	r3, r3, #23
 80088dc:	4605      	mov	r5, r0
 80088de:	460c      	mov	r4, r1
 80088e0:	4616      	mov	r6, r2
 80088e2:	d505      	bpl.n	80088f0 <__swrite+0x1e>
 80088e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e8:	2302      	movs	r3, #2
 80088ea:	2200      	movs	r2, #0
 80088ec:	f000 f8e6 	bl	8008abc <_lseek_r>
 80088f0:	89a3      	ldrh	r3, [r4, #12]
 80088f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80088fa:	81a3      	strh	r3, [r4, #12]
 80088fc:	4632      	mov	r2, r6
 80088fe:	463b      	mov	r3, r7
 8008900:	4628      	mov	r0, r5
 8008902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008906:	f000 b8fd 	b.w	8008b04 <_write_r>

0800890a <__sseek>:
 800890a:	b510      	push	{r4, lr}
 800890c:	460c      	mov	r4, r1
 800890e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008912:	f000 f8d3 	bl	8008abc <_lseek_r>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	89a3      	ldrh	r3, [r4, #12]
 800891a:	bf15      	itete	ne
 800891c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800891e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008922:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008926:	81a3      	strheq	r3, [r4, #12]
 8008928:	bf18      	it	ne
 800892a:	81a3      	strhne	r3, [r4, #12]
 800892c:	bd10      	pop	{r4, pc}

0800892e <__sclose>:
 800892e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008932:	f000 b8b3 	b.w	8008a9c <_close_r>

08008936 <__swbuf_r>:
 8008936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008938:	460e      	mov	r6, r1
 800893a:	4614      	mov	r4, r2
 800893c:	4605      	mov	r5, r0
 800893e:	b118      	cbz	r0, 8008948 <__swbuf_r+0x12>
 8008940:	6a03      	ldr	r3, [r0, #32]
 8008942:	b90b      	cbnz	r3, 8008948 <__swbuf_r+0x12>
 8008944:	f7ff feb6 	bl	80086b4 <__sinit>
 8008948:	69a3      	ldr	r3, [r4, #24]
 800894a:	60a3      	str	r3, [r4, #8]
 800894c:	89a3      	ldrh	r3, [r4, #12]
 800894e:	071a      	lsls	r2, r3, #28
 8008950:	d501      	bpl.n	8008956 <__swbuf_r+0x20>
 8008952:	6923      	ldr	r3, [r4, #16]
 8008954:	b943      	cbnz	r3, 8008968 <__swbuf_r+0x32>
 8008956:	4621      	mov	r1, r4
 8008958:	4628      	mov	r0, r5
 800895a:	f000 f82b 	bl	80089b4 <__swsetup_r>
 800895e:	b118      	cbz	r0, 8008968 <__swbuf_r+0x32>
 8008960:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008964:	4638      	mov	r0, r7
 8008966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008968:	6823      	ldr	r3, [r4, #0]
 800896a:	6922      	ldr	r2, [r4, #16]
 800896c:	1a98      	subs	r0, r3, r2
 800896e:	6963      	ldr	r3, [r4, #20]
 8008970:	b2f6      	uxtb	r6, r6
 8008972:	4283      	cmp	r3, r0
 8008974:	4637      	mov	r7, r6
 8008976:	dc05      	bgt.n	8008984 <__swbuf_r+0x4e>
 8008978:	4621      	mov	r1, r4
 800897a:	4628      	mov	r0, r5
 800897c:	f002 fc14 	bl	800b1a8 <_fflush_r>
 8008980:	2800      	cmp	r0, #0
 8008982:	d1ed      	bne.n	8008960 <__swbuf_r+0x2a>
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	3b01      	subs	r3, #1
 8008988:	60a3      	str	r3, [r4, #8]
 800898a:	6823      	ldr	r3, [r4, #0]
 800898c:	1c5a      	adds	r2, r3, #1
 800898e:	6022      	str	r2, [r4, #0]
 8008990:	701e      	strb	r6, [r3, #0]
 8008992:	6962      	ldr	r2, [r4, #20]
 8008994:	1c43      	adds	r3, r0, #1
 8008996:	429a      	cmp	r2, r3
 8008998:	d004      	beq.n	80089a4 <__swbuf_r+0x6e>
 800899a:	89a3      	ldrh	r3, [r4, #12]
 800899c:	07db      	lsls	r3, r3, #31
 800899e:	d5e1      	bpl.n	8008964 <__swbuf_r+0x2e>
 80089a0:	2e0a      	cmp	r6, #10
 80089a2:	d1df      	bne.n	8008964 <__swbuf_r+0x2e>
 80089a4:	4621      	mov	r1, r4
 80089a6:	4628      	mov	r0, r5
 80089a8:	f002 fbfe 	bl	800b1a8 <_fflush_r>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d0d9      	beq.n	8008964 <__swbuf_r+0x2e>
 80089b0:	e7d6      	b.n	8008960 <__swbuf_r+0x2a>
	...

080089b4 <__swsetup_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	4b29      	ldr	r3, [pc, #164]	@ (8008a5c <__swsetup_r+0xa8>)
 80089b8:	4605      	mov	r5, r0
 80089ba:	6818      	ldr	r0, [r3, #0]
 80089bc:	460c      	mov	r4, r1
 80089be:	b118      	cbz	r0, 80089c8 <__swsetup_r+0x14>
 80089c0:	6a03      	ldr	r3, [r0, #32]
 80089c2:	b90b      	cbnz	r3, 80089c8 <__swsetup_r+0x14>
 80089c4:	f7ff fe76 	bl	80086b4 <__sinit>
 80089c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089cc:	0719      	lsls	r1, r3, #28
 80089ce:	d422      	bmi.n	8008a16 <__swsetup_r+0x62>
 80089d0:	06da      	lsls	r2, r3, #27
 80089d2:	d407      	bmi.n	80089e4 <__swsetup_r+0x30>
 80089d4:	2209      	movs	r2, #9
 80089d6:	602a      	str	r2, [r5, #0]
 80089d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089dc:	81a3      	strh	r3, [r4, #12]
 80089de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089e2:	e033      	b.n	8008a4c <__swsetup_r+0x98>
 80089e4:	0758      	lsls	r0, r3, #29
 80089e6:	d512      	bpl.n	8008a0e <__swsetup_r+0x5a>
 80089e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089ea:	b141      	cbz	r1, 80089fe <__swsetup_r+0x4a>
 80089ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80089f0:	4299      	cmp	r1, r3
 80089f2:	d002      	beq.n	80089fa <__swsetup_r+0x46>
 80089f4:	4628      	mov	r0, r5
 80089f6:	f000 ff3b 	bl	8009870 <_free_r>
 80089fa:	2300      	movs	r3, #0
 80089fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80089fe:	89a3      	ldrh	r3, [r4, #12]
 8008a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a04:	81a3      	strh	r3, [r4, #12]
 8008a06:	2300      	movs	r3, #0
 8008a08:	6063      	str	r3, [r4, #4]
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	6023      	str	r3, [r4, #0]
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f043 0308 	orr.w	r3, r3, #8
 8008a14:	81a3      	strh	r3, [r4, #12]
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	b94b      	cbnz	r3, 8008a2e <__swsetup_r+0x7a>
 8008a1a:	89a3      	ldrh	r3, [r4, #12]
 8008a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a24:	d003      	beq.n	8008a2e <__swsetup_r+0x7a>
 8008a26:	4621      	mov	r1, r4
 8008a28:	4628      	mov	r0, r5
 8008a2a:	f002 fc0b 	bl	800b244 <__smakebuf_r>
 8008a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a32:	f013 0201 	ands.w	r2, r3, #1
 8008a36:	d00a      	beq.n	8008a4e <__swsetup_r+0x9a>
 8008a38:	2200      	movs	r2, #0
 8008a3a:	60a2      	str	r2, [r4, #8]
 8008a3c:	6962      	ldr	r2, [r4, #20]
 8008a3e:	4252      	negs	r2, r2
 8008a40:	61a2      	str	r2, [r4, #24]
 8008a42:	6922      	ldr	r2, [r4, #16]
 8008a44:	b942      	cbnz	r2, 8008a58 <__swsetup_r+0xa4>
 8008a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a4a:	d1c5      	bne.n	80089d8 <__swsetup_r+0x24>
 8008a4c:	bd38      	pop	{r3, r4, r5, pc}
 8008a4e:	0799      	lsls	r1, r3, #30
 8008a50:	bf58      	it	pl
 8008a52:	6962      	ldrpl	r2, [r4, #20]
 8008a54:	60a2      	str	r2, [r4, #8]
 8008a56:	e7f4      	b.n	8008a42 <__swsetup_r+0x8e>
 8008a58:	2000      	movs	r0, #0
 8008a5a:	e7f7      	b.n	8008a4c <__swsetup_r+0x98>
 8008a5c:	20000184 	.word	0x20000184

08008a60 <memset>:
 8008a60:	4402      	add	r2, r0
 8008a62:	4603      	mov	r3, r0
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d100      	bne.n	8008a6a <memset+0xa>
 8008a68:	4770      	bx	lr
 8008a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8008a6e:	e7f9      	b.n	8008a64 <memset+0x4>

08008a70 <strncmp>:
 8008a70:	b510      	push	{r4, lr}
 8008a72:	b16a      	cbz	r2, 8008a90 <strncmp+0x20>
 8008a74:	3901      	subs	r1, #1
 8008a76:	1884      	adds	r4, r0, r2
 8008a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a7c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d103      	bne.n	8008a8c <strncmp+0x1c>
 8008a84:	42a0      	cmp	r0, r4
 8008a86:	d001      	beq.n	8008a8c <strncmp+0x1c>
 8008a88:	2a00      	cmp	r2, #0
 8008a8a:	d1f5      	bne.n	8008a78 <strncmp+0x8>
 8008a8c:	1ad0      	subs	r0, r2, r3
 8008a8e:	bd10      	pop	{r4, pc}
 8008a90:	4610      	mov	r0, r2
 8008a92:	e7fc      	b.n	8008a8e <strncmp+0x1e>

08008a94 <_localeconv_r>:
 8008a94:	4800      	ldr	r0, [pc, #0]	@ (8008a98 <_localeconv_r+0x4>)
 8008a96:	4770      	bx	lr
 8008a98:	20000108 	.word	0x20000108

08008a9c <_close_r>:
 8008a9c:	b538      	push	{r3, r4, r5, lr}
 8008a9e:	4d06      	ldr	r5, [pc, #24]	@ (8008ab8 <_close_r+0x1c>)
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	4604      	mov	r4, r0
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	602b      	str	r3, [r5, #0]
 8008aa8:	f7f8 fdba 	bl	8001620 <_close>
 8008aac:	1c43      	adds	r3, r0, #1
 8008aae:	d102      	bne.n	8008ab6 <_close_r+0x1a>
 8008ab0:	682b      	ldr	r3, [r5, #0]
 8008ab2:	b103      	cbz	r3, 8008ab6 <_close_r+0x1a>
 8008ab4:	6023      	str	r3, [r4, #0]
 8008ab6:	bd38      	pop	{r3, r4, r5, pc}
 8008ab8:	2000071c 	.word	0x2000071c

08008abc <_lseek_r>:
 8008abc:	b538      	push	{r3, r4, r5, lr}
 8008abe:	4d07      	ldr	r5, [pc, #28]	@ (8008adc <_lseek_r+0x20>)
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	4608      	mov	r0, r1
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	602a      	str	r2, [r5, #0]
 8008aca:	461a      	mov	r2, r3
 8008acc:	f7f8 fdcf 	bl	800166e <_lseek>
 8008ad0:	1c43      	adds	r3, r0, #1
 8008ad2:	d102      	bne.n	8008ada <_lseek_r+0x1e>
 8008ad4:	682b      	ldr	r3, [r5, #0]
 8008ad6:	b103      	cbz	r3, 8008ada <_lseek_r+0x1e>
 8008ad8:	6023      	str	r3, [r4, #0]
 8008ada:	bd38      	pop	{r3, r4, r5, pc}
 8008adc:	2000071c 	.word	0x2000071c

08008ae0 <_read_r>:
 8008ae0:	b538      	push	{r3, r4, r5, lr}
 8008ae2:	4d07      	ldr	r5, [pc, #28]	@ (8008b00 <_read_r+0x20>)
 8008ae4:	4604      	mov	r4, r0
 8008ae6:	4608      	mov	r0, r1
 8008ae8:	4611      	mov	r1, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	602a      	str	r2, [r5, #0]
 8008aee:	461a      	mov	r2, r3
 8008af0:	f7f8 fd5d 	bl	80015ae <_read>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_read_r+0x1e>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_read_r+0x1e>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	2000071c 	.word	0x2000071c

08008b04 <_write_r>:
 8008b04:	b538      	push	{r3, r4, r5, lr}
 8008b06:	4d07      	ldr	r5, [pc, #28]	@ (8008b24 <_write_r+0x20>)
 8008b08:	4604      	mov	r4, r0
 8008b0a:	4608      	mov	r0, r1
 8008b0c:	4611      	mov	r1, r2
 8008b0e:	2200      	movs	r2, #0
 8008b10:	602a      	str	r2, [r5, #0]
 8008b12:	461a      	mov	r2, r3
 8008b14:	f7f8 fd68 	bl	80015e8 <_write>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_write_r+0x1e>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_write_r+0x1e>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	2000071c 	.word	0x2000071c

08008b28 <__errno>:
 8008b28:	4b01      	ldr	r3, [pc, #4]	@ (8008b30 <__errno+0x8>)
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	20000184 	.word	0x20000184

08008b34 <__libc_init_array>:
 8008b34:	b570      	push	{r4, r5, r6, lr}
 8008b36:	4d0d      	ldr	r5, [pc, #52]	@ (8008b6c <__libc_init_array+0x38>)
 8008b38:	4c0d      	ldr	r4, [pc, #52]	@ (8008b70 <__libc_init_array+0x3c>)
 8008b3a:	1b64      	subs	r4, r4, r5
 8008b3c:	10a4      	asrs	r4, r4, #2
 8008b3e:	2600      	movs	r6, #0
 8008b40:	42a6      	cmp	r6, r4
 8008b42:	d109      	bne.n	8008b58 <__libc_init_array+0x24>
 8008b44:	4d0b      	ldr	r5, [pc, #44]	@ (8008b74 <__libc_init_array+0x40>)
 8008b46:	4c0c      	ldr	r4, [pc, #48]	@ (8008b78 <__libc_init_array+0x44>)
 8008b48:	f002 fcca 	bl	800b4e0 <_init>
 8008b4c:	1b64      	subs	r4, r4, r5
 8008b4e:	10a4      	asrs	r4, r4, #2
 8008b50:	2600      	movs	r6, #0
 8008b52:	42a6      	cmp	r6, r4
 8008b54:	d105      	bne.n	8008b62 <__libc_init_array+0x2e>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}
 8008b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b5c:	4798      	blx	r3
 8008b5e:	3601      	adds	r6, #1
 8008b60:	e7ee      	b.n	8008b40 <__libc_init_array+0xc>
 8008b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b66:	4798      	blx	r3
 8008b68:	3601      	adds	r6, #1
 8008b6a:	e7f2      	b.n	8008b52 <__libc_init_array+0x1e>
 8008b6c:	0800bc24 	.word	0x0800bc24
 8008b70:	0800bc24 	.word	0x0800bc24
 8008b74:	0800bc24 	.word	0x0800bc24
 8008b78:	0800bc28 	.word	0x0800bc28

08008b7c <__retarget_lock_init_recursive>:
 8008b7c:	4770      	bx	lr

08008b7e <__retarget_lock_acquire_recursive>:
 8008b7e:	4770      	bx	lr

08008b80 <__retarget_lock_release_recursive>:
 8008b80:	4770      	bx	lr

08008b82 <memcpy>:
 8008b82:	440a      	add	r2, r1
 8008b84:	4291      	cmp	r1, r2
 8008b86:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008b8a:	d100      	bne.n	8008b8e <memcpy+0xc>
 8008b8c:	4770      	bx	lr
 8008b8e:	b510      	push	{r4, lr}
 8008b90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b98:	4291      	cmp	r1, r2
 8008b9a:	d1f9      	bne.n	8008b90 <memcpy+0xe>
 8008b9c:	bd10      	pop	{r4, pc}
	...

08008ba0 <nan>:
 8008ba0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008ba8 <nan+0x8>
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	00000000 	.word	0x00000000
 8008bac:	7ff80000 	.word	0x7ff80000

08008bb0 <nanf>:
 8008bb0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008bb8 <nanf+0x8>
 8008bb4:	4770      	bx	lr
 8008bb6:	bf00      	nop
 8008bb8:	7fc00000 	.word	0x7fc00000

08008bbc <quorem>:
 8008bbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc0:	6903      	ldr	r3, [r0, #16]
 8008bc2:	690c      	ldr	r4, [r1, #16]
 8008bc4:	42a3      	cmp	r3, r4
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	db7e      	blt.n	8008cc8 <quorem+0x10c>
 8008bca:	3c01      	subs	r4, #1
 8008bcc:	f101 0814 	add.w	r8, r1, #20
 8008bd0:	00a3      	lsls	r3, r4, #2
 8008bd2:	f100 0514 	add.w	r5, r0, #20
 8008bd6:	9300      	str	r3, [sp, #0]
 8008bd8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bdc:	9301      	str	r3, [sp, #4]
 8008bde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008be2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008be6:	3301      	adds	r3, #1
 8008be8:	429a      	cmp	r2, r3
 8008bea:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008bee:	fbb2 f6f3 	udiv	r6, r2, r3
 8008bf2:	d32e      	bcc.n	8008c52 <quorem+0x96>
 8008bf4:	f04f 0a00 	mov.w	sl, #0
 8008bf8:	46c4      	mov	ip, r8
 8008bfa:	46ae      	mov	lr, r5
 8008bfc:	46d3      	mov	fp, sl
 8008bfe:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008c02:	b298      	uxth	r0, r3
 8008c04:	fb06 a000 	mla	r0, r6, r0, sl
 8008c08:	0c02      	lsrs	r2, r0, #16
 8008c0a:	0c1b      	lsrs	r3, r3, #16
 8008c0c:	fb06 2303 	mla	r3, r6, r3, r2
 8008c10:	f8de 2000 	ldr.w	r2, [lr]
 8008c14:	b280      	uxth	r0, r0
 8008c16:	b292      	uxth	r2, r2
 8008c18:	1a12      	subs	r2, r2, r0
 8008c1a:	445a      	add	r2, fp
 8008c1c:	f8de 0000 	ldr.w	r0, [lr]
 8008c20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008c24:	b29b      	uxth	r3, r3
 8008c26:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008c2a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008c2e:	b292      	uxth	r2, r2
 8008c30:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008c34:	45e1      	cmp	r9, ip
 8008c36:	f84e 2b04 	str.w	r2, [lr], #4
 8008c3a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008c3e:	d2de      	bcs.n	8008bfe <quorem+0x42>
 8008c40:	9b00      	ldr	r3, [sp, #0]
 8008c42:	58eb      	ldr	r3, [r5, r3]
 8008c44:	b92b      	cbnz	r3, 8008c52 <quorem+0x96>
 8008c46:	9b01      	ldr	r3, [sp, #4]
 8008c48:	3b04      	subs	r3, #4
 8008c4a:	429d      	cmp	r5, r3
 8008c4c:	461a      	mov	r2, r3
 8008c4e:	d32f      	bcc.n	8008cb0 <quorem+0xf4>
 8008c50:	613c      	str	r4, [r7, #16]
 8008c52:	4638      	mov	r0, r7
 8008c54:	f001 fd14 	bl	800a680 <__mcmp>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	db25      	blt.n	8008ca8 <quorem+0xec>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	2000      	movs	r0, #0
 8008c60:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c64:	f8d1 c000 	ldr.w	ip, [r1]
 8008c68:	fa1f fe82 	uxth.w	lr, r2
 8008c6c:	fa1f f38c 	uxth.w	r3, ip
 8008c70:	eba3 030e 	sub.w	r3, r3, lr
 8008c74:	4403      	add	r3, r0
 8008c76:	0c12      	lsrs	r2, r2, #16
 8008c78:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008c7c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008c80:	b29b      	uxth	r3, r3
 8008c82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c86:	45c1      	cmp	r9, r8
 8008c88:	f841 3b04 	str.w	r3, [r1], #4
 8008c8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c90:	d2e6      	bcs.n	8008c60 <quorem+0xa4>
 8008c92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c9a:	b922      	cbnz	r2, 8008ca6 <quorem+0xea>
 8008c9c:	3b04      	subs	r3, #4
 8008c9e:	429d      	cmp	r5, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	d30b      	bcc.n	8008cbc <quorem+0x100>
 8008ca4:	613c      	str	r4, [r7, #16]
 8008ca6:	3601      	adds	r6, #1
 8008ca8:	4630      	mov	r0, r6
 8008caa:	b003      	add	sp, #12
 8008cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb0:	6812      	ldr	r2, [r2, #0]
 8008cb2:	3b04      	subs	r3, #4
 8008cb4:	2a00      	cmp	r2, #0
 8008cb6:	d1cb      	bne.n	8008c50 <quorem+0x94>
 8008cb8:	3c01      	subs	r4, #1
 8008cba:	e7c6      	b.n	8008c4a <quorem+0x8e>
 8008cbc:	6812      	ldr	r2, [r2, #0]
 8008cbe:	3b04      	subs	r3, #4
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	d1ef      	bne.n	8008ca4 <quorem+0xe8>
 8008cc4:	3c01      	subs	r4, #1
 8008cc6:	e7ea      	b.n	8008c9e <quorem+0xe2>
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7ee      	b.n	8008caa <quorem+0xee>
 8008ccc:	0000      	movs	r0, r0
	...

08008cd0 <_dtoa_r>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	69c7      	ldr	r7, [r0, #28]
 8008cd6:	b097      	sub	sp, #92	@ 0x5c
 8008cd8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008cdc:	ec55 4b10 	vmov	r4, r5, d0
 8008ce0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008ce2:	9107      	str	r1, [sp, #28]
 8008ce4:	4681      	mov	r9, r0
 8008ce6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008ce8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008cea:	b97f      	cbnz	r7, 8008d0c <_dtoa_r+0x3c>
 8008cec:	2010      	movs	r0, #16
 8008cee:	f001 f943 	bl	8009f78 <malloc>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008cf8:	b920      	cbnz	r0, 8008d04 <_dtoa_r+0x34>
 8008cfa:	4ba9      	ldr	r3, [pc, #676]	@ (8008fa0 <_dtoa_r+0x2d0>)
 8008cfc:	21ef      	movs	r1, #239	@ 0xef
 8008cfe:	48a9      	ldr	r0, [pc, #676]	@ (8008fa4 <_dtoa_r+0x2d4>)
 8008d00:	f002 fb28 	bl	800b354 <__assert_func>
 8008d04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008d08:	6007      	str	r7, [r0, #0]
 8008d0a:	60c7      	str	r7, [r0, #12]
 8008d0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d10:	6819      	ldr	r1, [r3, #0]
 8008d12:	b159      	cbz	r1, 8008d2c <_dtoa_r+0x5c>
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	604a      	str	r2, [r1, #4]
 8008d18:	2301      	movs	r3, #1
 8008d1a:	4093      	lsls	r3, r2
 8008d1c:	608b      	str	r3, [r1, #8]
 8008d1e:	4648      	mov	r0, r9
 8008d20:	f001 fa32 	bl	800a188 <_Bfree>
 8008d24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]
 8008d2c:	1e2b      	subs	r3, r5, #0
 8008d2e:	bfb9      	ittee	lt
 8008d30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008d34:	9305      	strlt	r3, [sp, #20]
 8008d36:	2300      	movge	r3, #0
 8008d38:	6033      	strge	r3, [r6, #0]
 8008d3a:	9f05      	ldr	r7, [sp, #20]
 8008d3c:	4b9a      	ldr	r3, [pc, #616]	@ (8008fa8 <_dtoa_r+0x2d8>)
 8008d3e:	bfbc      	itt	lt
 8008d40:	2201      	movlt	r2, #1
 8008d42:	6032      	strlt	r2, [r6, #0]
 8008d44:	43bb      	bics	r3, r7
 8008d46:	d112      	bne.n	8008d6e <_dtoa_r+0x9e>
 8008d48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008d4e:	6013      	str	r3, [r2, #0]
 8008d50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d54:	4323      	orrs	r3, r4
 8008d56:	f000 855a 	beq.w	800980e <_dtoa_r+0xb3e>
 8008d5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008fbc <_dtoa_r+0x2ec>
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 855c 	beq.w	800981e <_dtoa_r+0xb4e>
 8008d66:	f10a 0303 	add.w	r3, sl, #3
 8008d6a:	f000 bd56 	b.w	800981a <_dtoa_r+0xb4a>
 8008d6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008d72:	2200      	movs	r2, #0
 8008d74:	ec51 0b17 	vmov	r0, r1, d7
 8008d78:	2300      	movs	r3, #0
 8008d7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008d7e:	f7f7 fecb 	bl	8000b18 <__aeabi_dcmpeq>
 8008d82:	4680      	mov	r8, r0
 8008d84:	b158      	cbz	r0, 8008d9e <_dtoa_r+0xce>
 8008d86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008d88:	2301      	movs	r3, #1
 8008d8a:	6013      	str	r3, [r2, #0]
 8008d8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008d8e:	b113      	cbz	r3, 8008d96 <_dtoa_r+0xc6>
 8008d90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008d92:	4b86      	ldr	r3, [pc, #536]	@ (8008fac <_dtoa_r+0x2dc>)
 8008d94:	6013      	str	r3, [r2, #0]
 8008d96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008fc0 <_dtoa_r+0x2f0>
 8008d9a:	f000 bd40 	b.w	800981e <_dtoa_r+0xb4e>
 8008d9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008da2:	aa14      	add	r2, sp, #80	@ 0x50
 8008da4:	a915      	add	r1, sp, #84	@ 0x54
 8008da6:	4648      	mov	r0, r9
 8008da8:	f001 fd8a 	bl	800a8c0 <__d2b>
 8008dac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008db0:	9002      	str	r0, [sp, #8]
 8008db2:	2e00      	cmp	r6, #0
 8008db4:	d078      	beq.n	8008ea8 <_dtoa_r+0x1d8>
 8008db6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008db8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dc0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008dc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008dc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008dcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	4b76      	ldr	r3, [pc, #472]	@ (8008fb0 <_dtoa_r+0x2e0>)
 8008dd6:	f7f7 fa7f 	bl	80002d8 <__aeabi_dsub>
 8008dda:	a36b      	add	r3, pc, #428	@ (adr r3, 8008f88 <_dtoa_r+0x2b8>)
 8008ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de0:	f7f7 fc32 	bl	8000648 <__aeabi_dmul>
 8008de4:	a36a      	add	r3, pc, #424	@ (adr r3, 8008f90 <_dtoa_r+0x2c0>)
 8008de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dea:	f7f7 fa77 	bl	80002dc <__adddf3>
 8008dee:	4604      	mov	r4, r0
 8008df0:	4630      	mov	r0, r6
 8008df2:	460d      	mov	r5, r1
 8008df4:	f7f7 fbbe 	bl	8000574 <__aeabi_i2d>
 8008df8:	a367      	add	r3, pc, #412	@ (adr r3, 8008f98 <_dtoa_r+0x2c8>)
 8008dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dfe:	f7f7 fc23 	bl	8000648 <__aeabi_dmul>
 8008e02:	4602      	mov	r2, r0
 8008e04:	460b      	mov	r3, r1
 8008e06:	4620      	mov	r0, r4
 8008e08:	4629      	mov	r1, r5
 8008e0a:	f7f7 fa67 	bl	80002dc <__adddf3>
 8008e0e:	4604      	mov	r4, r0
 8008e10:	460d      	mov	r5, r1
 8008e12:	f7f7 fec9 	bl	8000ba8 <__aeabi_d2iz>
 8008e16:	2200      	movs	r2, #0
 8008e18:	4607      	mov	r7, r0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	4629      	mov	r1, r5
 8008e20:	f7f7 fe84 	bl	8000b2c <__aeabi_dcmplt>
 8008e24:	b140      	cbz	r0, 8008e38 <_dtoa_r+0x168>
 8008e26:	4638      	mov	r0, r7
 8008e28:	f7f7 fba4 	bl	8000574 <__aeabi_i2d>
 8008e2c:	4622      	mov	r2, r4
 8008e2e:	462b      	mov	r3, r5
 8008e30:	f7f7 fe72 	bl	8000b18 <__aeabi_dcmpeq>
 8008e34:	b900      	cbnz	r0, 8008e38 <_dtoa_r+0x168>
 8008e36:	3f01      	subs	r7, #1
 8008e38:	2f16      	cmp	r7, #22
 8008e3a:	d852      	bhi.n	8008ee2 <_dtoa_r+0x212>
 8008e3c:	4b5d      	ldr	r3, [pc, #372]	@ (8008fb4 <_dtoa_r+0x2e4>)
 8008e3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e4a:	f7f7 fe6f 	bl	8000b2c <__aeabi_dcmplt>
 8008e4e:	2800      	cmp	r0, #0
 8008e50:	d049      	beq.n	8008ee6 <_dtoa_r+0x216>
 8008e52:	3f01      	subs	r7, #1
 8008e54:	2300      	movs	r3, #0
 8008e56:	9310      	str	r3, [sp, #64]	@ 0x40
 8008e58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008e5a:	1b9b      	subs	r3, r3, r6
 8008e5c:	1e5a      	subs	r2, r3, #1
 8008e5e:	bf45      	ittet	mi
 8008e60:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e64:	9300      	strmi	r3, [sp, #0]
 8008e66:	2300      	movpl	r3, #0
 8008e68:	2300      	movmi	r3, #0
 8008e6a:	9206      	str	r2, [sp, #24]
 8008e6c:	bf54      	ite	pl
 8008e6e:	9300      	strpl	r3, [sp, #0]
 8008e70:	9306      	strmi	r3, [sp, #24]
 8008e72:	2f00      	cmp	r7, #0
 8008e74:	db39      	blt.n	8008eea <_dtoa_r+0x21a>
 8008e76:	9b06      	ldr	r3, [sp, #24]
 8008e78:	970d      	str	r7, [sp, #52]	@ 0x34
 8008e7a:	443b      	add	r3, r7
 8008e7c:	9306      	str	r3, [sp, #24]
 8008e7e:	2300      	movs	r3, #0
 8008e80:	9308      	str	r3, [sp, #32]
 8008e82:	9b07      	ldr	r3, [sp, #28]
 8008e84:	2b09      	cmp	r3, #9
 8008e86:	d863      	bhi.n	8008f50 <_dtoa_r+0x280>
 8008e88:	2b05      	cmp	r3, #5
 8008e8a:	bfc4      	itt	gt
 8008e8c:	3b04      	subgt	r3, #4
 8008e8e:	9307      	strgt	r3, [sp, #28]
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	f1a3 0302 	sub.w	r3, r3, #2
 8008e96:	bfcc      	ite	gt
 8008e98:	2400      	movgt	r4, #0
 8008e9a:	2401      	movle	r4, #1
 8008e9c:	2b03      	cmp	r3, #3
 8008e9e:	d863      	bhi.n	8008f68 <_dtoa_r+0x298>
 8008ea0:	e8df f003 	tbb	[pc, r3]
 8008ea4:	2b375452 	.word	0x2b375452
 8008ea8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008eac:	441e      	add	r6, r3
 8008eae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	bfc1      	itttt	gt
 8008eb6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008eba:	409f      	lslgt	r7, r3
 8008ebc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008ec0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008ec4:	bfd6      	itet	le
 8008ec6:	f1c3 0320 	rsble	r3, r3, #32
 8008eca:	ea47 0003 	orrgt.w	r0, r7, r3
 8008ece:	fa04 f003 	lslle.w	r0, r4, r3
 8008ed2:	f7f7 fb3f 	bl	8000554 <__aeabi_ui2d>
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008edc:	3e01      	subs	r6, #1
 8008ede:	9212      	str	r2, [sp, #72]	@ 0x48
 8008ee0:	e776      	b.n	8008dd0 <_dtoa_r+0x100>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e7b7      	b.n	8008e56 <_dtoa_r+0x186>
 8008ee6:	9010      	str	r0, [sp, #64]	@ 0x40
 8008ee8:	e7b6      	b.n	8008e58 <_dtoa_r+0x188>
 8008eea:	9b00      	ldr	r3, [sp, #0]
 8008eec:	1bdb      	subs	r3, r3, r7
 8008eee:	9300      	str	r3, [sp, #0]
 8008ef0:	427b      	negs	r3, r7
 8008ef2:	9308      	str	r3, [sp, #32]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	930d      	str	r3, [sp, #52]	@ 0x34
 8008ef8:	e7c3      	b.n	8008e82 <_dtoa_r+0x1b2>
 8008efa:	2301      	movs	r3, #1
 8008efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8008efe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f00:	eb07 0b03 	add.w	fp, r7, r3
 8008f04:	f10b 0301 	add.w	r3, fp, #1
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	9303      	str	r3, [sp, #12]
 8008f0c:	bfb8      	it	lt
 8008f0e:	2301      	movlt	r3, #1
 8008f10:	e006      	b.n	8008f20 <_dtoa_r+0x250>
 8008f12:	2301      	movs	r3, #1
 8008f14:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	dd28      	ble.n	8008f6e <_dtoa_r+0x29e>
 8008f1c:	469b      	mov	fp, r3
 8008f1e:	9303      	str	r3, [sp, #12]
 8008f20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008f24:	2100      	movs	r1, #0
 8008f26:	2204      	movs	r2, #4
 8008f28:	f102 0514 	add.w	r5, r2, #20
 8008f2c:	429d      	cmp	r5, r3
 8008f2e:	d926      	bls.n	8008f7e <_dtoa_r+0x2ae>
 8008f30:	6041      	str	r1, [r0, #4]
 8008f32:	4648      	mov	r0, r9
 8008f34:	f001 f8e8 	bl	800a108 <_Balloc>
 8008f38:	4682      	mov	sl, r0
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d142      	bne.n	8008fc4 <_dtoa_r+0x2f4>
 8008f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb8 <_dtoa_r+0x2e8>)
 8008f40:	4602      	mov	r2, r0
 8008f42:	f240 11af 	movw	r1, #431	@ 0x1af
 8008f46:	e6da      	b.n	8008cfe <_dtoa_r+0x2e>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e7e3      	b.n	8008f14 <_dtoa_r+0x244>
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	e7d5      	b.n	8008efc <_dtoa_r+0x22c>
 8008f50:	2401      	movs	r4, #1
 8008f52:	2300      	movs	r3, #0
 8008f54:	9307      	str	r3, [sp, #28]
 8008f56:	9409      	str	r4, [sp, #36]	@ 0x24
 8008f58:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f62:	2312      	movs	r3, #18
 8008f64:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f66:	e7db      	b.n	8008f20 <_dtoa_r+0x250>
 8008f68:	2301      	movs	r3, #1
 8008f6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f6c:	e7f4      	b.n	8008f58 <_dtoa_r+0x288>
 8008f6e:	f04f 0b01 	mov.w	fp, #1
 8008f72:	f8cd b00c 	str.w	fp, [sp, #12]
 8008f76:	465b      	mov	r3, fp
 8008f78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008f7c:	e7d0      	b.n	8008f20 <_dtoa_r+0x250>
 8008f7e:	3101      	adds	r1, #1
 8008f80:	0052      	lsls	r2, r2, #1
 8008f82:	e7d1      	b.n	8008f28 <_dtoa_r+0x258>
 8008f84:	f3af 8000 	nop.w
 8008f88:	636f4361 	.word	0x636f4361
 8008f8c:	3fd287a7 	.word	0x3fd287a7
 8008f90:	8b60c8b3 	.word	0x8b60c8b3
 8008f94:	3fc68a28 	.word	0x3fc68a28
 8008f98:	509f79fb 	.word	0x509f79fb
 8008f9c:	3fd34413 	.word	0x3fd34413
 8008fa0:	0800b840 	.word	0x0800b840
 8008fa4:	0800b857 	.word	0x0800b857
 8008fa8:	7ff00000 	.word	0x7ff00000
 8008fac:	0800b803 	.word	0x0800b803
 8008fb0:	3ff80000 	.word	0x3ff80000
 8008fb4:	0800ba50 	.word	0x0800ba50
 8008fb8:	0800b8af 	.word	0x0800b8af
 8008fbc:	0800b83c 	.word	0x0800b83c
 8008fc0:	0800b802 	.word	0x0800b802
 8008fc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fc8:	6018      	str	r0, [r3, #0]
 8008fca:	9b03      	ldr	r3, [sp, #12]
 8008fcc:	2b0e      	cmp	r3, #14
 8008fce:	f200 80a1 	bhi.w	8009114 <_dtoa_r+0x444>
 8008fd2:	2c00      	cmp	r4, #0
 8008fd4:	f000 809e 	beq.w	8009114 <_dtoa_r+0x444>
 8008fd8:	2f00      	cmp	r7, #0
 8008fda:	dd33      	ble.n	8009044 <_dtoa_r+0x374>
 8008fdc:	4b9c      	ldr	r3, [pc, #624]	@ (8009250 <_dtoa_r+0x580>)
 8008fde:	f007 020f 	and.w	r2, r7, #15
 8008fe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fe6:	ed93 7b00 	vldr	d7, [r3]
 8008fea:	05f8      	lsls	r0, r7, #23
 8008fec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008ff0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008ff4:	d516      	bpl.n	8009024 <_dtoa_r+0x354>
 8008ff6:	4b97      	ldr	r3, [pc, #604]	@ (8009254 <_dtoa_r+0x584>)
 8008ff8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008ffc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009000:	f7f7 fc4c 	bl	800089c <__aeabi_ddiv>
 8009004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009008:	f004 040f 	and.w	r4, r4, #15
 800900c:	2603      	movs	r6, #3
 800900e:	4d91      	ldr	r5, [pc, #580]	@ (8009254 <_dtoa_r+0x584>)
 8009010:	b954      	cbnz	r4, 8009028 <_dtoa_r+0x358>
 8009012:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009016:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800901a:	f7f7 fc3f 	bl	800089c <__aeabi_ddiv>
 800901e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009022:	e028      	b.n	8009076 <_dtoa_r+0x3a6>
 8009024:	2602      	movs	r6, #2
 8009026:	e7f2      	b.n	800900e <_dtoa_r+0x33e>
 8009028:	07e1      	lsls	r1, r4, #31
 800902a:	d508      	bpl.n	800903e <_dtoa_r+0x36e>
 800902c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009030:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009034:	f7f7 fb08 	bl	8000648 <__aeabi_dmul>
 8009038:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800903c:	3601      	adds	r6, #1
 800903e:	1064      	asrs	r4, r4, #1
 8009040:	3508      	adds	r5, #8
 8009042:	e7e5      	b.n	8009010 <_dtoa_r+0x340>
 8009044:	f000 80af 	beq.w	80091a6 <_dtoa_r+0x4d6>
 8009048:	427c      	negs	r4, r7
 800904a:	4b81      	ldr	r3, [pc, #516]	@ (8009250 <_dtoa_r+0x580>)
 800904c:	4d81      	ldr	r5, [pc, #516]	@ (8009254 <_dtoa_r+0x584>)
 800904e:	f004 020f 	and.w	r2, r4, #15
 8009052:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800905e:	f7f7 faf3 	bl	8000648 <__aeabi_dmul>
 8009062:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009066:	1124      	asrs	r4, r4, #4
 8009068:	2300      	movs	r3, #0
 800906a:	2602      	movs	r6, #2
 800906c:	2c00      	cmp	r4, #0
 800906e:	f040 808f 	bne.w	8009190 <_dtoa_r+0x4c0>
 8009072:	2b00      	cmp	r3, #0
 8009074:	d1d3      	bne.n	800901e <_dtoa_r+0x34e>
 8009076:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009078:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800907c:	2b00      	cmp	r3, #0
 800907e:	f000 8094 	beq.w	80091aa <_dtoa_r+0x4da>
 8009082:	4b75      	ldr	r3, [pc, #468]	@ (8009258 <_dtoa_r+0x588>)
 8009084:	2200      	movs	r2, #0
 8009086:	4620      	mov	r0, r4
 8009088:	4629      	mov	r1, r5
 800908a:	f7f7 fd4f 	bl	8000b2c <__aeabi_dcmplt>
 800908e:	2800      	cmp	r0, #0
 8009090:	f000 808b 	beq.w	80091aa <_dtoa_r+0x4da>
 8009094:	9b03      	ldr	r3, [sp, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	f000 8087 	beq.w	80091aa <_dtoa_r+0x4da>
 800909c:	f1bb 0f00 	cmp.w	fp, #0
 80090a0:	dd34      	ble.n	800910c <_dtoa_r+0x43c>
 80090a2:	4620      	mov	r0, r4
 80090a4:	4b6d      	ldr	r3, [pc, #436]	@ (800925c <_dtoa_r+0x58c>)
 80090a6:	2200      	movs	r2, #0
 80090a8:	4629      	mov	r1, r5
 80090aa:	f7f7 facd 	bl	8000648 <__aeabi_dmul>
 80090ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090b2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80090b6:	3601      	adds	r6, #1
 80090b8:	465c      	mov	r4, fp
 80090ba:	4630      	mov	r0, r6
 80090bc:	f7f7 fa5a 	bl	8000574 <__aeabi_i2d>
 80090c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090c4:	f7f7 fac0 	bl	8000648 <__aeabi_dmul>
 80090c8:	4b65      	ldr	r3, [pc, #404]	@ (8009260 <_dtoa_r+0x590>)
 80090ca:	2200      	movs	r2, #0
 80090cc:	f7f7 f906 	bl	80002dc <__adddf3>
 80090d0:	4605      	mov	r5, r0
 80090d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80090d6:	2c00      	cmp	r4, #0
 80090d8:	d16a      	bne.n	80091b0 <_dtoa_r+0x4e0>
 80090da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090de:	4b61      	ldr	r3, [pc, #388]	@ (8009264 <_dtoa_r+0x594>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	f7f7 f8f9 	bl	80002d8 <__aeabi_dsub>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80090ee:	462a      	mov	r2, r5
 80090f0:	4633      	mov	r3, r6
 80090f2:	f7f7 fd39 	bl	8000b68 <__aeabi_dcmpgt>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	f040 8298 	bne.w	800962c <_dtoa_r+0x95c>
 80090fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009100:	462a      	mov	r2, r5
 8009102:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009106:	f7f7 fd11 	bl	8000b2c <__aeabi_dcmplt>
 800910a:	bb38      	cbnz	r0, 800915c <_dtoa_r+0x48c>
 800910c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009110:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009114:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009116:	2b00      	cmp	r3, #0
 8009118:	f2c0 8157 	blt.w	80093ca <_dtoa_r+0x6fa>
 800911c:	2f0e      	cmp	r7, #14
 800911e:	f300 8154 	bgt.w	80093ca <_dtoa_r+0x6fa>
 8009122:	4b4b      	ldr	r3, [pc, #300]	@ (8009250 <_dtoa_r+0x580>)
 8009124:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009128:	ed93 7b00 	vldr	d7, [r3]
 800912c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800912e:	2b00      	cmp	r3, #0
 8009130:	ed8d 7b00 	vstr	d7, [sp]
 8009134:	f280 80e5 	bge.w	8009302 <_dtoa_r+0x632>
 8009138:	9b03      	ldr	r3, [sp, #12]
 800913a:	2b00      	cmp	r3, #0
 800913c:	f300 80e1 	bgt.w	8009302 <_dtoa_r+0x632>
 8009140:	d10c      	bne.n	800915c <_dtoa_r+0x48c>
 8009142:	4b48      	ldr	r3, [pc, #288]	@ (8009264 <_dtoa_r+0x594>)
 8009144:	2200      	movs	r2, #0
 8009146:	ec51 0b17 	vmov	r0, r1, d7
 800914a:	f7f7 fa7d 	bl	8000648 <__aeabi_dmul>
 800914e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009152:	f7f7 fcff 	bl	8000b54 <__aeabi_dcmpge>
 8009156:	2800      	cmp	r0, #0
 8009158:	f000 8266 	beq.w	8009628 <_dtoa_r+0x958>
 800915c:	2400      	movs	r4, #0
 800915e:	4625      	mov	r5, r4
 8009160:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009162:	4656      	mov	r6, sl
 8009164:	ea6f 0803 	mvn.w	r8, r3
 8009168:	2700      	movs	r7, #0
 800916a:	4621      	mov	r1, r4
 800916c:	4648      	mov	r0, r9
 800916e:	f001 f80b 	bl	800a188 <_Bfree>
 8009172:	2d00      	cmp	r5, #0
 8009174:	f000 80bd 	beq.w	80092f2 <_dtoa_r+0x622>
 8009178:	b12f      	cbz	r7, 8009186 <_dtoa_r+0x4b6>
 800917a:	42af      	cmp	r7, r5
 800917c:	d003      	beq.n	8009186 <_dtoa_r+0x4b6>
 800917e:	4639      	mov	r1, r7
 8009180:	4648      	mov	r0, r9
 8009182:	f001 f801 	bl	800a188 <_Bfree>
 8009186:	4629      	mov	r1, r5
 8009188:	4648      	mov	r0, r9
 800918a:	f000 fffd 	bl	800a188 <_Bfree>
 800918e:	e0b0      	b.n	80092f2 <_dtoa_r+0x622>
 8009190:	07e2      	lsls	r2, r4, #31
 8009192:	d505      	bpl.n	80091a0 <_dtoa_r+0x4d0>
 8009194:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009198:	f7f7 fa56 	bl	8000648 <__aeabi_dmul>
 800919c:	3601      	adds	r6, #1
 800919e:	2301      	movs	r3, #1
 80091a0:	1064      	asrs	r4, r4, #1
 80091a2:	3508      	adds	r5, #8
 80091a4:	e762      	b.n	800906c <_dtoa_r+0x39c>
 80091a6:	2602      	movs	r6, #2
 80091a8:	e765      	b.n	8009076 <_dtoa_r+0x3a6>
 80091aa:	9c03      	ldr	r4, [sp, #12]
 80091ac:	46b8      	mov	r8, r7
 80091ae:	e784      	b.n	80090ba <_dtoa_r+0x3ea>
 80091b0:	4b27      	ldr	r3, [pc, #156]	@ (8009250 <_dtoa_r+0x580>)
 80091b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80091b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091bc:	4454      	add	r4, sl
 80091be:	2900      	cmp	r1, #0
 80091c0:	d054      	beq.n	800926c <_dtoa_r+0x59c>
 80091c2:	4929      	ldr	r1, [pc, #164]	@ (8009268 <_dtoa_r+0x598>)
 80091c4:	2000      	movs	r0, #0
 80091c6:	f7f7 fb69 	bl	800089c <__aeabi_ddiv>
 80091ca:	4633      	mov	r3, r6
 80091cc:	462a      	mov	r2, r5
 80091ce:	f7f7 f883 	bl	80002d8 <__aeabi_dsub>
 80091d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80091d6:	4656      	mov	r6, sl
 80091d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091dc:	f7f7 fce4 	bl	8000ba8 <__aeabi_d2iz>
 80091e0:	4605      	mov	r5, r0
 80091e2:	f7f7 f9c7 	bl	8000574 <__aeabi_i2d>
 80091e6:	4602      	mov	r2, r0
 80091e8:	460b      	mov	r3, r1
 80091ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091ee:	f7f7 f873 	bl	80002d8 <__aeabi_dsub>
 80091f2:	3530      	adds	r5, #48	@ 0x30
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091fc:	f806 5b01 	strb.w	r5, [r6], #1
 8009200:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009204:	f7f7 fc92 	bl	8000b2c <__aeabi_dcmplt>
 8009208:	2800      	cmp	r0, #0
 800920a:	d172      	bne.n	80092f2 <_dtoa_r+0x622>
 800920c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009210:	4911      	ldr	r1, [pc, #68]	@ (8009258 <_dtoa_r+0x588>)
 8009212:	2000      	movs	r0, #0
 8009214:	f7f7 f860 	bl	80002d8 <__aeabi_dsub>
 8009218:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800921c:	f7f7 fc86 	bl	8000b2c <__aeabi_dcmplt>
 8009220:	2800      	cmp	r0, #0
 8009222:	f040 80b4 	bne.w	800938e <_dtoa_r+0x6be>
 8009226:	42a6      	cmp	r6, r4
 8009228:	f43f af70 	beq.w	800910c <_dtoa_r+0x43c>
 800922c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009230:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <_dtoa_r+0x58c>)
 8009232:	2200      	movs	r2, #0
 8009234:	f7f7 fa08 	bl	8000648 <__aeabi_dmul>
 8009238:	4b08      	ldr	r3, [pc, #32]	@ (800925c <_dtoa_r+0x58c>)
 800923a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800923e:	2200      	movs	r2, #0
 8009240:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009244:	f7f7 fa00 	bl	8000648 <__aeabi_dmul>
 8009248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800924c:	e7c4      	b.n	80091d8 <_dtoa_r+0x508>
 800924e:	bf00      	nop
 8009250:	0800ba50 	.word	0x0800ba50
 8009254:	0800ba28 	.word	0x0800ba28
 8009258:	3ff00000 	.word	0x3ff00000
 800925c:	40240000 	.word	0x40240000
 8009260:	401c0000 	.word	0x401c0000
 8009264:	40140000 	.word	0x40140000
 8009268:	3fe00000 	.word	0x3fe00000
 800926c:	4631      	mov	r1, r6
 800926e:	4628      	mov	r0, r5
 8009270:	f7f7 f9ea 	bl	8000648 <__aeabi_dmul>
 8009274:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009278:	9413      	str	r4, [sp, #76]	@ 0x4c
 800927a:	4656      	mov	r6, sl
 800927c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009280:	f7f7 fc92 	bl	8000ba8 <__aeabi_d2iz>
 8009284:	4605      	mov	r5, r0
 8009286:	f7f7 f975 	bl	8000574 <__aeabi_i2d>
 800928a:	4602      	mov	r2, r0
 800928c:	460b      	mov	r3, r1
 800928e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009292:	f7f7 f821 	bl	80002d8 <__aeabi_dsub>
 8009296:	3530      	adds	r5, #48	@ 0x30
 8009298:	f806 5b01 	strb.w	r5, [r6], #1
 800929c:	4602      	mov	r2, r0
 800929e:	460b      	mov	r3, r1
 80092a0:	42a6      	cmp	r6, r4
 80092a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092a6:	f04f 0200 	mov.w	r2, #0
 80092aa:	d124      	bne.n	80092f6 <_dtoa_r+0x626>
 80092ac:	4baf      	ldr	r3, [pc, #700]	@ (800956c <_dtoa_r+0x89c>)
 80092ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092b2:	f7f7 f813 	bl	80002dc <__adddf3>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092be:	f7f7 fc53 	bl	8000b68 <__aeabi_dcmpgt>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d163      	bne.n	800938e <_dtoa_r+0x6be>
 80092c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092ca:	49a8      	ldr	r1, [pc, #672]	@ (800956c <_dtoa_r+0x89c>)
 80092cc:	2000      	movs	r0, #0
 80092ce:	f7f7 f803 	bl	80002d8 <__aeabi_dsub>
 80092d2:	4602      	mov	r2, r0
 80092d4:	460b      	mov	r3, r1
 80092d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092da:	f7f7 fc27 	bl	8000b2c <__aeabi_dcmplt>
 80092de:	2800      	cmp	r0, #0
 80092e0:	f43f af14 	beq.w	800910c <_dtoa_r+0x43c>
 80092e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80092e6:	1e73      	subs	r3, r6, #1
 80092e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80092ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092ee:	2b30      	cmp	r3, #48	@ 0x30
 80092f0:	d0f8      	beq.n	80092e4 <_dtoa_r+0x614>
 80092f2:	4647      	mov	r7, r8
 80092f4:	e03b      	b.n	800936e <_dtoa_r+0x69e>
 80092f6:	4b9e      	ldr	r3, [pc, #632]	@ (8009570 <_dtoa_r+0x8a0>)
 80092f8:	f7f7 f9a6 	bl	8000648 <__aeabi_dmul>
 80092fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009300:	e7bc      	b.n	800927c <_dtoa_r+0x5ac>
 8009302:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009306:	4656      	mov	r6, sl
 8009308:	e9dd 2300 	ldrd	r2, r3, [sp]
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f7 fac4 	bl	800089c <__aeabi_ddiv>
 8009314:	f7f7 fc48 	bl	8000ba8 <__aeabi_d2iz>
 8009318:	4680      	mov	r8, r0
 800931a:	f7f7 f92b 	bl	8000574 <__aeabi_i2d>
 800931e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009322:	f7f7 f991 	bl	8000648 <__aeabi_dmul>
 8009326:	4602      	mov	r2, r0
 8009328:	460b      	mov	r3, r1
 800932a:	4620      	mov	r0, r4
 800932c:	4629      	mov	r1, r5
 800932e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009332:	f7f6 ffd1 	bl	80002d8 <__aeabi_dsub>
 8009336:	f806 4b01 	strb.w	r4, [r6], #1
 800933a:	9d03      	ldr	r5, [sp, #12]
 800933c:	eba6 040a 	sub.w	r4, r6, sl
 8009340:	42a5      	cmp	r5, r4
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	d133      	bne.n	80093b0 <_dtoa_r+0x6e0>
 8009348:	f7f6 ffc8 	bl	80002dc <__adddf3>
 800934c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009350:	4604      	mov	r4, r0
 8009352:	460d      	mov	r5, r1
 8009354:	f7f7 fc08 	bl	8000b68 <__aeabi_dcmpgt>
 8009358:	b9c0      	cbnz	r0, 800938c <_dtoa_r+0x6bc>
 800935a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935e:	4620      	mov	r0, r4
 8009360:	4629      	mov	r1, r5
 8009362:	f7f7 fbd9 	bl	8000b18 <__aeabi_dcmpeq>
 8009366:	b110      	cbz	r0, 800936e <_dtoa_r+0x69e>
 8009368:	f018 0f01 	tst.w	r8, #1
 800936c:	d10e      	bne.n	800938c <_dtoa_r+0x6bc>
 800936e:	9902      	ldr	r1, [sp, #8]
 8009370:	4648      	mov	r0, r9
 8009372:	f000 ff09 	bl	800a188 <_Bfree>
 8009376:	2300      	movs	r3, #0
 8009378:	7033      	strb	r3, [r6, #0]
 800937a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800937c:	3701      	adds	r7, #1
 800937e:	601f      	str	r7, [r3, #0]
 8009380:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009382:	2b00      	cmp	r3, #0
 8009384:	f000 824b 	beq.w	800981e <_dtoa_r+0xb4e>
 8009388:	601e      	str	r6, [r3, #0]
 800938a:	e248      	b.n	800981e <_dtoa_r+0xb4e>
 800938c:	46b8      	mov	r8, r7
 800938e:	4633      	mov	r3, r6
 8009390:	461e      	mov	r6, r3
 8009392:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009396:	2a39      	cmp	r2, #57	@ 0x39
 8009398:	d106      	bne.n	80093a8 <_dtoa_r+0x6d8>
 800939a:	459a      	cmp	sl, r3
 800939c:	d1f8      	bne.n	8009390 <_dtoa_r+0x6c0>
 800939e:	2230      	movs	r2, #48	@ 0x30
 80093a0:	f108 0801 	add.w	r8, r8, #1
 80093a4:	f88a 2000 	strb.w	r2, [sl]
 80093a8:	781a      	ldrb	r2, [r3, #0]
 80093aa:	3201      	adds	r2, #1
 80093ac:	701a      	strb	r2, [r3, #0]
 80093ae:	e7a0      	b.n	80092f2 <_dtoa_r+0x622>
 80093b0:	4b6f      	ldr	r3, [pc, #444]	@ (8009570 <_dtoa_r+0x8a0>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	f7f7 f948 	bl	8000648 <__aeabi_dmul>
 80093b8:	2200      	movs	r2, #0
 80093ba:	2300      	movs	r3, #0
 80093bc:	4604      	mov	r4, r0
 80093be:	460d      	mov	r5, r1
 80093c0:	f7f7 fbaa 	bl	8000b18 <__aeabi_dcmpeq>
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d09f      	beq.n	8009308 <_dtoa_r+0x638>
 80093c8:	e7d1      	b.n	800936e <_dtoa_r+0x69e>
 80093ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80093cc:	2a00      	cmp	r2, #0
 80093ce:	f000 80ea 	beq.w	80095a6 <_dtoa_r+0x8d6>
 80093d2:	9a07      	ldr	r2, [sp, #28]
 80093d4:	2a01      	cmp	r2, #1
 80093d6:	f300 80cd 	bgt.w	8009574 <_dtoa_r+0x8a4>
 80093da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80093dc:	2a00      	cmp	r2, #0
 80093de:	f000 80c1 	beq.w	8009564 <_dtoa_r+0x894>
 80093e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80093e6:	9c08      	ldr	r4, [sp, #32]
 80093e8:	9e00      	ldr	r6, [sp, #0]
 80093ea:	9a00      	ldr	r2, [sp, #0]
 80093ec:	441a      	add	r2, r3
 80093ee:	9200      	str	r2, [sp, #0]
 80093f0:	9a06      	ldr	r2, [sp, #24]
 80093f2:	2101      	movs	r1, #1
 80093f4:	441a      	add	r2, r3
 80093f6:	4648      	mov	r0, r9
 80093f8:	9206      	str	r2, [sp, #24]
 80093fa:	f000 ffc3 	bl	800a384 <__i2b>
 80093fe:	4605      	mov	r5, r0
 8009400:	b166      	cbz	r6, 800941c <_dtoa_r+0x74c>
 8009402:	9b06      	ldr	r3, [sp, #24]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd09      	ble.n	800941c <_dtoa_r+0x74c>
 8009408:	42b3      	cmp	r3, r6
 800940a:	9a00      	ldr	r2, [sp, #0]
 800940c:	bfa8      	it	ge
 800940e:	4633      	movge	r3, r6
 8009410:	1ad2      	subs	r2, r2, r3
 8009412:	9200      	str	r2, [sp, #0]
 8009414:	9a06      	ldr	r2, [sp, #24]
 8009416:	1af6      	subs	r6, r6, r3
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	9306      	str	r3, [sp, #24]
 800941c:	9b08      	ldr	r3, [sp, #32]
 800941e:	b30b      	cbz	r3, 8009464 <_dtoa_r+0x794>
 8009420:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 80c6 	beq.w	80095b4 <_dtoa_r+0x8e4>
 8009428:	2c00      	cmp	r4, #0
 800942a:	f000 80c0 	beq.w	80095ae <_dtoa_r+0x8de>
 800942e:	4629      	mov	r1, r5
 8009430:	4622      	mov	r2, r4
 8009432:	4648      	mov	r0, r9
 8009434:	f001 f85e 	bl	800a4f4 <__pow5mult>
 8009438:	9a02      	ldr	r2, [sp, #8]
 800943a:	4601      	mov	r1, r0
 800943c:	4605      	mov	r5, r0
 800943e:	4648      	mov	r0, r9
 8009440:	f000 ffb6 	bl	800a3b0 <__multiply>
 8009444:	9902      	ldr	r1, [sp, #8]
 8009446:	4680      	mov	r8, r0
 8009448:	4648      	mov	r0, r9
 800944a:	f000 fe9d 	bl	800a188 <_Bfree>
 800944e:	9b08      	ldr	r3, [sp, #32]
 8009450:	1b1b      	subs	r3, r3, r4
 8009452:	9308      	str	r3, [sp, #32]
 8009454:	f000 80b1 	beq.w	80095ba <_dtoa_r+0x8ea>
 8009458:	9a08      	ldr	r2, [sp, #32]
 800945a:	4641      	mov	r1, r8
 800945c:	4648      	mov	r0, r9
 800945e:	f001 f849 	bl	800a4f4 <__pow5mult>
 8009462:	9002      	str	r0, [sp, #8]
 8009464:	2101      	movs	r1, #1
 8009466:	4648      	mov	r0, r9
 8009468:	f000 ff8c 	bl	800a384 <__i2b>
 800946c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800946e:	4604      	mov	r4, r0
 8009470:	2b00      	cmp	r3, #0
 8009472:	f000 81d8 	beq.w	8009826 <_dtoa_r+0xb56>
 8009476:	461a      	mov	r2, r3
 8009478:	4601      	mov	r1, r0
 800947a:	4648      	mov	r0, r9
 800947c:	f001 f83a 	bl	800a4f4 <__pow5mult>
 8009480:	9b07      	ldr	r3, [sp, #28]
 8009482:	2b01      	cmp	r3, #1
 8009484:	4604      	mov	r4, r0
 8009486:	f300 809f 	bgt.w	80095c8 <_dtoa_r+0x8f8>
 800948a:	9b04      	ldr	r3, [sp, #16]
 800948c:	2b00      	cmp	r3, #0
 800948e:	f040 8097 	bne.w	80095c0 <_dtoa_r+0x8f0>
 8009492:	9b05      	ldr	r3, [sp, #20]
 8009494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009498:	2b00      	cmp	r3, #0
 800949a:	f040 8093 	bne.w	80095c4 <_dtoa_r+0x8f4>
 800949e:	9b05      	ldr	r3, [sp, #20]
 80094a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80094a4:	0d1b      	lsrs	r3, r3, #20
 80094a6:	051b      	lsls	r3, r3, #20
 80094a8:	b133      	cbz	r3, 80094b8 <_dtoa_r+0x7e8>
 80094aa:	9b00      	ldr	r3, [sp, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	9300      	str	r3, [sp, #0]
 80094b0:	9b06      	ldr	r3, [sp, #24]
 80094b2:	3301      	adds	r3, #1
 80094b4:	9306      	str	r3, [sp, #24]
 80094b6:	2301      	movs	r3, #1
 80094b8:	9308      	str	r3, [sp, #32]
 80094ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094bc:	2b00      	cmp	r3, #0
 80094be:	f000 81b8 	beq.w	8009832 <_dtoa_r+0xb62>
 80094c2:	6923      	ldr	r3, [r4, #16]
 80094c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80094c8:	6918      	ldr	r0, [r3, #16]
 80094ca:	f000 ff0f 	bl	800a2ec <__hi0bits>
 80094ce:	f1c0 0020 	rsb	r0, r0, #32
 80094d2:	9b06      	ldr	r3, [sp, #24]
 80094d4:	4418      	add	r0, r3
 80094d6:	f010 001f 	ands.w	r0, r0, #31
 80094da:	f000 8082 	beq.w	80095e2 <_dtoa_r+0x912>
 80094de:	f1c0 0320 	rsb	r3, r0, #32
 80094e2:	2b04      	cmp	r3, #4
 80094e4:	dd73      	ble.n	80095ce <_dtoa_r+0x8fe>
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	f1c0 001c 	rsb	r0, r0, #28
 80094ec:	4403      	add	r3, r0
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	9b06      	ldr	r3, [sp, #24]
 80094f2:	4403      	add	r3, r0
 80094f4:	4406      	add	r6, r0
 80094f6:	9306      	str	r3, [sp, #24]
 80094f8:	9b00      	ldr	r3, [sp, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	dd05      	ble.n	800950a <_dtoa_r+0x83a>
 80094fe:	9902      	ldr	r1, [sp, #8]
 8009500:	461a      	mov	r2, r3
 8009502:	4648      	mov	r0, r9
 8009504:	f001 f850 	bl	800a5a8 <__lshift>
 8009508:	9002      	str	r0, [sp, #8]
 800950a:	9b06      	ldr	r3, [sp, #24]
 800950c:	2b00      	cmp	r3, #0
 800950e:	dd05      	ble.n	800951c <_dtoa_r+0x84c>
 8009510:	4621      	mov	r1, r4
 8009512:	461a      	mov	r2, r3
 8009514:	4648      	mov	r0, r9
 8009516:	f001 f847 	bl	800a5a8 <__lshift>
 800951a:	4604      	mov	r4, r0
 800951c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d061      	beq.n	80095e6 <_dtoa_r+0x916>
 8009522:	9802      	ldr	r0, [sp, #8]
 8009524:	4621      	mov	r1, r4
 8009526:	f001 f8ab 	bl	800a680 <__mcmp>
 800952a:	2800      	cmp	r0, #0
 800952c:	da5b      	bge.n	80095e6 <_dtoa_r+0x916>
 800952e:	2300      	movs	r3, #0
 8009530:	9902      	ldr	r1, [sp, #8]
 8009532:	220a      	movs	r2, #10
 8009534:	4648      	mov	r0, r9
 8009536:	f000 fe49 	bl	800a1cc <__multadd>
 800953a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953c:	9002      	str	r0, [sp, #8]
 800953e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009542:	2b00      	cmp	r3, #0
 8009544:	f000 8177 	beq.w	8009836 <_dtoa_r+0xb66>
 8009548:	4629      	mov	r1, r5
 800954a:	2300      	movs	r3, #0
 800954c:	220a      	movs	r2, #10
 800954e:	4648      	mov	r0, r9
 8009550:	f000 fe3c 	bl	800a1cc <__multadd>
 8009554:	f1bb 0f00 	cmp.w	fp, #0
 8009558:	4605      	mov	r5, r0
 800955a:	dc6f      	bgt.n	800963c <_dtoa_r+0x96c>
 800955c:	9b07      	ldr	r3, [sp, #28]
 800955e:	2b02      	cmp	r3, #2
 8009560:	dc49      	bgt.n	80095f6 <_dtoa_r+0x926>
 8009562:	e06b      	b.n	800963c <_dtoa_r+0x96c>
 8009564:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009566:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800956a:	e73c      	b.n	80093e6 <_dtoa_r+0x716>
 800956c:	3fe00000 	.word	0x3fe00000
 8009570:	40240000 	.word	0x40240000
 8009574:	9b03      	ldr	r3, [sp, #12]
 8009576:	1e5c      	subs	r4, r3, #1
 8009578:	9b08      	ldr	r3, [sp, #32]
 800957a:	42a3      	cmp	r3, r4
 800957c:	db09      	blt.n	8009592 <_dtoa_r+0x8c2>
 800957e:	1b1c      	subs	r4, r3, r4
 8009580:	9b03      	ldr	r3, [sp, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	f6bf af30 	bge.w	80093e8 <_dtoa_r+0x718>
 8009588:	9b00      	ldr	r3, [sp, #0]
 800958a:	9a03      	ldr	r2, [sp, #12]
 800958c:	1a9e      	subs	r6, r3, r2
 800958e:	2300      	movs	r3, #0
 8009590:	e72b      	b.n	80093ea <_dtoa_r+0x71a>
 8009592:	9b08      	ldr	r3, [sp, #32]
 8009594:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009596:	9408      	str	r4, [sp, #32]
 8009598:	1ae3      	subs	r3, r4, r3
 800959a:	441a      	add	r2, r3
 800959c:	9e00      	ldr	r6, [sp, #0]
 800959e:	9b03      	ldr	r3, [sp, #12]
 80095a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80095a2:	2400      	movs	r4, #0
 80095a4:	e721      	b.n	80093ea <_dtoa_r+0x71a>
 80095a6:	9c08      	ldr	r4, [sp, #32]
 80095a8:	9e00      	ldr	r6, [sp, #0]
 80095aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80095ac:	e728      	b.n	8009400 <_dtoa_r+0x730>
 80095ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80095b2:	e751      	b.n	8009458 <_dtoa_r+0x788>
 80095b4:	9a08      	ldr	r2, [sp, #32]
 80095b6:	9902      	ldr	r1, [sp, #8]
 80095b8:	e750      	b.n	800945c <_dtoa_r+0x78c>
 80095ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80095be:	e751      	b.n	8009464 <_dtoa_r+0x794>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e779      	b.n	80094b8 <_dtoa_r+0x7e8>
 80095c4:	9b04      	ldr	r3, [sp, #16]
 80095c6:	e777      	b.n	80094b8 <_dtoa_r+0x7e8>
 80095c8:	2300      	movs	r3, #0
 80095ca:	9308      	str	r3, [sp, #32]
 80095cc:	e779      	b.n	80094c2 <_dtoa_r+0x7f2>
 80095ce:	d093      	beq.n	80094f8 <_dtoa_r+0x828>
 80095d0:	9a00      	ldr	r2, [sp, #0]
 80095d2:	331c      	adds	r3, #28
 80095d4:	441a      	add	r2, r3
 80095d6:	9200      	str	r2, [sp, #0]
 80095d8:	9a06      	ldr	r2, [sp, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	441e      	add	r6, r3
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	e78a      	b.n	80094f8 <_dtoa_r+0x828>
 80095e2:	4603      	mov	r3, r0
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x900>
 80095e6:	9b03      	ldr	r3, [sp, #12]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	46b8      	mov	r8, r7
 80095ec:	dc20      	bgt.n	8009630 <_dtoa_r+0x960>
 80095ee:	469b      	mov	fp, r3
 80095f0:	9b07      	ldr	r3, [sp, #28]
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	dd1e      	ble.n	8009634 <_dtoa_r+0x964>
 80095f6:	f1bb 0f00 	cmp.w	fp, #0
 80095fa:	f47f adb1 	bne.w	8009160 <_dtoa_r+0x490>
 80095fe:	4621      	mov	r1, r4
 8009600:	465b      	mov	r3, fp
 8009602:	2205      	movs	r2, #5
 8009604:	4648      	mov	r0, r9
 8009606:	f000 fde1 	bl	800a1cc <__multadd>
 800960a:	4601      	mov	r1, r0
 800960c:	4604      	mov	r4, r0
 800960e:	9802      	ldr	r0, [sp, #8]
 8009610:	f001 f836 	bl	800a680 <__mcmp>
 8009614:	2800      	cmp	r0, #0
 8009616:	f77f ada3 	ble.w	8009160 <_dtoa_r+0x490>
 800961a:	4656      	mov	r6, sl
 800961c:	2331      	movs	r3, #49	@ 0x31
 800961e:	f806 3b01 	strb.w	r3, [r6], #1
 8009622:	f108 0801 	add.w	r8, r8, #1
 8009626:	e59f      	b.n	8009168 <_dtoa_r+0x498>
 8009628:	9c03      	ldr	r4, [sp, #12]
 800962a:	46b8      	mov	r8, r7
 800962c:	4625      	mov	r5, r4
 800962e:	e7f4      	b.n	800961a <_dtoa_r+0x94a>
 8009630:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009634:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009636:	2b00      	cmp	r3, #0
 8009638:	f000 8101 	beq.w	800983e <_dtoa_r+0xb6e>
 800963c:	2e00      	cmp	r6, #0
 800963e:	dd05      	ble.n	800964c <_dtoa_r+0x97c>
 8009640:	4629      	mov	r1, r5
 8009642:	4632      	mov	r2, r6
 8009644:	4648      	mov	r0, r9
 8009646:	f000 ffaf 	bl	800a5a8 <__lshift>
 800964a:	4605      	mov	r5, r0
 800964c:	9b08      	ldr	r3, [sp, #32]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d05c      	beq.n	800970c <_dtoa_r+0xa3c>
 8009652:	6869      	ldr	r1, [r5, #4]
 8009654:	4648      	mov	r0, r9
 8009656:	f000 fd57 	bl	800a108 <_Balloc>
 800965a:	4606      	mov	r6, r0
 800965c:	b928      	cbnz	r0, 800966a <_dtoa_r+0x99a>
 800965e:	4b82      	ldr	r3, [pc, #520]	@ (8009868 <_dtoa_r+0xb98>)
 8009660:	4602      	mov	r2, r0
 8009662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009666:	f7ff bb4a 	b.w	8008cfe <_dtoa_r+0x2e>
 800966a:	692a      	ldr	r2, [r5, #16]
 800966c:	3202      	adds	r2, #2
 800966e:	0092      	lsls	r2, r2, #2
 8009670:	f105 010c 	add.w	r1, r5, #12
 8009674:	300c      	adds	r0, #12
 8009676:	f7ff fa84 	bl	8008b82 <memcpy>
 800967a:	2201      	movs	r2, #1
 800967c:	4631      	mov	r1, r6
 800967e:	4648      	mov	r0, r9
 8009680:	f000 ff92 	bl	800a5a8 <__lshift>
 8009684:	f10a 0301 	add.w	r3, sl, #1
 8009688:	9300      	str	r3, [sp, #0]
 800968a:	eb0a 030b 	add.w	r3, sl, fp
 800968e:	9308      	str	r3, [sp, #32]
 8009690:	9b04      	ldr	r3, [sp, #16]
 8009692:	f003 0301 	and.w	r3, r3, #1
 8009696:	462f      	mov	r7, r5
 8009698:	9306      	str	r3, [sp, #24]
 800969a:	4605      	mov	r5, r0
 800969c:	9b00      	ldr	r3, [sp, #0]
 800969e:	9802      	ldr	r0, [sp, #8]
 80096a0:	4621      	mov	r1, r4
 80096a2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 80096a6:	f7ff fa89 	bl	8008bbc <quorem>
 80096aa:	4603      	mov	r3, r0
 80096ac:	3330      	adds	r3, #48	@ 0x30
 80096ae:	9003      	str	r0, [sp, #12]
 80096b0:	4639      	mov	r1, r7
 80096b2:	9802      	ldr	r0, [sp, #8]
 80096b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80096b6:	f000 ffe3 	bl	800a680 <__mcmp>
 80096ba:	462a      	mov	r2, r5
 80096bc:	9004      	str	r0, [sp, #16]
 80096be:	4621      	mov	r1, r4
 80096c0:	4648      	mov	r0, r9
 80096c2:	f000 fff9 	bl	800a6b8 <__mdiff>
 80096c6:	68c2      	ldr	r2, [r0, #12]
 80096c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ca:	4606      	mov	r6, r0
 80096cc:	bb02      	cbnz	r2, 8009710 <_dtoa_r+0xa40>
 80096ce:	4601      	mov	r1, r0
 80096d0:	9802      	ldr	r0, [sp, #8]
 80096d2:	f000 ffd5 	bl	800a680 <__mcmp>
 80096d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096d8:	4602      	mov	r2, r0
 80096da:	4631      	mov	r1, r6
 80096dc:	4648      	mov	r0, r9
 80096de:	920c      	str	r2, [sp, #48]	@ 0x30
 80096e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80096e2:	f000 fd51 	bl	800a188 <_Bfree>
 80096e6:	9b07      	ldr	r3, [sp, #28]
 80096e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80096ea:	9e00      	ldr	r6, [sp, #0]
 80096ec:	ea42 0103 	orr.w	r1, r2, r3
 80096f0:	9b06      	ldr	r3, [sp, #24]
 80096f2:	4319      	orrs	r1, r3
 80096f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096f6:	d10d      	bne.n	8009714 <_dtoa_r+0xa44>
 80096f8:	2b39      	cmp	r3, #57	@ 0x39
 80096fa:	d027      	beq.n	800974c <_dtoa_r+0xa7c>
 80096fc:	9a04      	ldr	r2, [sp, #16]
 80096fe:	2a00      	cmp	r2, #0
 8009700:	dd01      	ble.n	8009706 <_dtoa_r+0xa36>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	3331      	adds	r3, #49	@ 0x31
 8009706:	f88b 3000 	strb.w	r3, [fp]
 800970a:	e52e      	b.n	800916a <_dtoa_r+0x49a>
 800970c:	4628      	mov	r0, r5
 800970e:	e7b9      	b.n	8009684 <_dtoa_r+0x9b4>
 8009710:	2201      	movs	r2, #1
 8009712:	e7e2      	b.n	80096da <_dtoa_r+0xa0a>
 8009714:	9904      	ldr	r1, [sp, #16]
 8009716:	2900      	cmp	r1, #0
 8009718:	db04      	blt.n	8009724 <_dtoa_r+0xa54>
 800971a:	9807      	ldr	r0, [sp, #28]
 800971c:	4301      	orrs	r1, r0
 800971e:	9806      	ldr	r0, [sp, #24]
 8009720:	4301      	orrs	r1, r0
 8009722:	d120      	bne.n	8009766 <_dtoa_r+0xa96>
 8009724:	2a00      	cmp	r2, #0
 8009726:	ddee      	ble.n	8009706 <_dtoa_r+0xa36>
 8009728:	9902      	ldr	r1, [sp, #8]
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	2201      	movs	r2, #1
 800972e:	4648      	mov	r0, r9
 8009730:	f000 ff3a 	bl	800a5a8 <__lshift>
 8009734:	4621      	mov	r1, r4
 8009736:	9002      	str	r0, [sp, #8]
 8009738:	f000 ffa2 	bl	800a680 <__mcmp>
 800973c:	2800      	cmp	r0, #0
 800973e:	9b00      	ldr	r3, [sp, #0]
 8009740:	dc02      	bgt.n	8009748 <_dtoa_r+0xa78>
 8009742:	d1e0      	bne.n	8009706 <_dtoa_r+0xa36>
 8009744:	07da      	lsls	r2, r3, #31
 8009746:	d5de      	bpl.n	8009706 <_dtoa_r+0xa36>
 8009748:	2b39      	cmp	r3, #57	@ 0x39
 800974a:	d1da      	bne.n	8009702 <_dtoa_r+0xa32>
 800974c:	2339      	movs	r3, #57	@ 0x39
 800974e:	f88b 3000 	strb.w	r3, [fp]
 8009752:	4633      	mov	r3, r6
 8009754:	461e      	mov	r6, r3
 8009756:	3b01      	subs	r3, #1
 8009758:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800975c:	2a39      	cmp	r2, #57	@ 0x39
 800975e:	d04e      	beq.n	80097fe <_dtoa_r+0xb2e>
 8009760:	3201      	adds	r2, #1
 8009762:	701a      	strb	r2, [r3, #0]
 8009764:	e501      	b.n	800916a <_dtoa_r+0x49a>
 8009766:	2a00      	cmp	r2, #0
 8009768:	dd03      	ble.n	8009772 <_dtoa_r+0xaa2>
 800976a:	2b39      	cmp	r3, #57	@ 0x39
 800976c:	d0ee      	beq.n	800974c <_dtoa_r+0xa7c>
 800976e:	3301      	adds	r3, #1
 8009770:	e7c9      	b.n	8009706 <_dtoa_r+0xa36>
 8009772:	9a00      	ldr	r2, [sp, #0]
 8009774:	9908      	ldr	r1, [sp, #32]
 8009776:	f802 3c01 	strb.w	r3, [r2, #-1]
 800977a:	428a      	cmp	r2, r1
 800977c:	d028      	beq.n	80097d0 <_dtoa_r+0xb00>
 800977e:	9902      	ldr	r1, [sp, #8]
 8009780:	2300      	movs	r3, #0
 8009782:	220a      	movs	r2, #10
 8009784:	4648      	mov	r0, r9
 8009786:	f000 fd21 	bl	800a1cc <__multadd>
 800978a:	42af      	cmp	r7, r5
 800978c:	9002      	str	r0, [sp, #8]
 800978e:	f04f 0300 	mov.w	r3, #0
 8009792:	f04f 020a 	mov.w	r2, #10
 8009796:	4639      	mov	r1, r7
 8009798:	4648      	mov	r0, r9
 800979a:	d107      	bne.n	80097ac <_dtoa_r+0xadc>
 800979c:	f000 fd16 	bl	800a1cc <__multadd>
 80097a0:	4607      	mov	r7, r0
 80097a2:	4605      	mov	r5, r0
 80097a4:	9b00      	ldr	r3, [sp, #0]
 80097a6:	3301      	adds	r3, #1
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	e777      	b.n	800969c <_dtoa_r+0x9cc>
 80097ac:	f000 fd0e 	bl	800a1cc <__multadd>
 80097b0:	4629      	mov	r1, r5
 80097b2:	4607      	mov	r7, r0
 80097b4:	2300      	movs	r3, #0
 80097b6:	220a      	movs	r2, #10
 80097b8:	4648      	mov	r0, r9
 80097ba:	f000 fd07 	bl	800a1cc <__multadd>
 80097be:	4605      	mov	r5, r0
 80097c0:	e7f0      	b.n	80097a4 <_dtoa_r+0xad4>
 80097c2:	f1bb 0f00 	cmp.w	fp, #0
 80097c6:	bfcc      	ite	gt
 80097c8:	465e      	movgt	r6, fp
 80097ca:	2601      	movle	r6, #1
 80097cc:	4456      	add	r6, sl
 80097ce:	2700      	movs	r7, #0
 80097d0:	9902      	ldr	r1, [sp, #8]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	2201      	movs	r2, #1
 80097d6:	4648      	mov	r0, r9
 80097d8:	f000 fee6 	bl	800a5a8 <__lshift>
 80097dc:	4621      	mov	r1, r4
 80097de:	9002      	str	r0, [sp, #8]
 80097e0:	f000 ff4e 	bl	800a680 <__mcmp>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	dcb4      	bgt.n	8009752 <_dtoa_r+0xa82>
 80097e8:	d102      	bne.n	80097f0 <_dtoa_r+0xb20>
 80097ea:	9b00      	ldr	r3, [sp, #0]
 80097ec:	07db      	lsls	r3, r3, #31
 80097ee:	d4b0      	bmi.n	8009752 <_dtoa_r+0xa82>
 80097f0:	4633      	mov	r3, r6
 80097f2:	461e      	mov	r6, r3
 80097f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097f8:	2a30      	cmp	r2, #48	@ 0x30
 80097fa:	d0fa      	beq.n	80097f2 <_dtoa_r+0xb22>
 80097fc:	e4b5      	b.n	800916a <_dtoa_r+0x49a>
 80097fe:	459a      	cmp	sl, r3
 8009800:	d1a8      	bne.n	8009754 <_dtoa_r+0xa84>
 8009802:	2331      	movs	r3, #49	@ 0x31
 8009804:	f108 0801 	add.w	r8, r8, #1
 8009808:	f88a 3000 	strb.w	r3, [sl]
 800980c:	e4ad      	b.n	800916a <_dtoa_r+0x49a>
 800980e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009810:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800986c <_dtoa_r+0xb9c>
 8009814:	b11b      	cbz	r3, 800981e <_dtoa_r+0xb4e>
 8009816:	f10a 0308 	add.w	r3, sl, #8
 800981a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800981c:	6013      	str	r3, [r2, #0]
 800981e:	4650      	mov	r0, sl
 8009820:	b017      	add	sp, #92	@ 0x5c
 8009822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009826:	9b07      	ldr	r3, [sp, #28]
 8009828:	2b01      	cmp	r3, #1
 800982a:	f77f ae2e 	ble.w	800948a <_dtoa_r+0x7ba>
 800982e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	2001      	movs	r0, #1
 8009834:	e64d      	b.n	80094d2 <_dtoa_r+0x802>
 8009836:	f1bb 0f00 	cmp.w	fp, #0
 800983a:	f77f aed9 	ble.w	80095f0 <_dtoa_r+0x920>
 800983e:	4656      	mov	r6, sl
 8009840:	9802      	ldr	r0, [sp, #8]
 8009842:	4621      	mov	r1, r4
 8009844:	f7ff f9ba 	bl	8008bbc <quorem>
 8009848:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800984c:	f806 3b01 	strb.w	r3, [r6], #1
 8009850:	eba6 020a 	sub.w	r2, r6, sl
 8009854:	4593      	cmp	fp, r2
 8009856:	ddb4      	ble.n	80097c2 <_dtoa_r+0xaf2>
 8009858:	9902      	ldr	r1, [sp, #8]
 800985a:	2300      	movs	r3, #0
 800985c:	220a      	movs	r2, #10
 800985e:	4648      	mov	r0, r9
 8009860:	f000 fcb4 	bl	800a1cc <__multadd>
 8009864:	9002      	str	r0, [sp, #8]
 8009866:	e7eb      	b.n	8009840 <_dtoa_r+0xb70>
 8009868:	0800b8af 	.word	0x0800b8af
 800986c:	0800b833 	.word	0x0800b833

08009870 <_free_r>:
 8009870:	b538      	push	{r3, r4, r5, lr}
 8009872:	4605      	mov	r5, r0
 8009874:	2900      	cmp	r1, #0
 8009876:	d041      	beq.n	80098fc <_free_r+0x8c>
 8009878:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800987c:	1f0c      	subs	r4, r1, #4
 800987e:	2b00      	cmp	r3, #0
 8009880:	bfb8      	it	lt
 8009882:	18e4      	addlt	r4, r4, r3
 8009884:	f000 fc34 	bl	800a0f0 <__malloc_lock>
 8009888:	4a1d      	ldr	r2, [pc, #116]	@ (8009900 <_free_r+0x90>)
 800988a:	6813      	ldr	r3, [r2, #0]
 800988c:	b933      	cbnz	r3, 800989c <_free_r+0x2c>
 800988e:	6063      	str	r3, [r4, #4]
 8009890:	6014      	str	r4, [r2, #0]
 8009892:	4628      	mov	r0, r5
 8009894:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009898:	f000 bc30 	b.w	800a0fc <__malloc_unlock>
 800989c:	42a3      	cmp	r3, r4
 800989e:	d908      	bls.n	80098b2 <_free_r+0x42>
 80098a0:	6820      	ldr	r0, [r4, #0]
 80098a2:	1821      	adds	r1, r4, r0
 80098a4:	428b      	cmp	r3, r1
 80098a6:	bf01      	itttt	eq
 80098a8:	6819      	ldreq	r1, [r3, #0]
 80098aa:	685b      	ldreq	r3, [r3, #4]
 80098ac:	1809      	addeq	r1, r1, r0
 80098ae:	6021      	streq	r1, [r4, #0]
 80098b0:	e7ed      	b.n	800988e <_free_r+0x1e>
 80098b2:	461a      	mov	r2, r3
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	b10b      	cbz	r3, 80098bc <_free_r+0x4c>
 80098b8:	42a3      	cmp	r3, r4
 80098ba:	d9fa      	bls.n	80098b2 <_free_r+0x42>
 80098bc:	6811      	ldr	r1, [r2, #0]
 80098be:	1850      	adds	r0, r2, r1
 80098c0:	42a0      	cmp	r0, r4
 80098c2:	d10b      	bne.n	80098dc <_free_r+0x6c>
 80098c4:	6820      	ldr	r0, [r4, #0]
 80098c6:	4401      	add	r1, r0
 80098c8:	1850      	adds	r0, r2, r1
 80098ca:	4283      	cmp	r3, r0
 80098cc:	6011      	str	r1, [r2, #0]
 80098ce:	d1e0      	bne.n	8009892 <_free_r+0x22>
 80098d0:	6818      	ldr	r0, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	6053      	str	r3, [r2, #4]
 80098d6:	4408      	add	r0, r1
 80098d8:	6010      	str	r0, [r2, #0]
 80098da:	e7da      	b.n	8009892 <_free_r+0x22>
 80098dc:	d902      	bls.n	80098e4 <_free_r+0x74>
 80098de:	230c      	movs	r3, #12
 80098e0:	602b      	str	r3, [r5, #0]
 80098e2:	e7d6      	b.n	8009892 <_free_r+0x22>
 80098e4:	6820      	ldr	r0, [r4, #0]
 80098e6:	1821      	adds	r1, r4, r0
 80098e8:	428b      	cmp	r3, r1
 80098ea:	bf04      	itt	eq
 80098ec:	6819      	ldreq	r1, [r3, #0]
 80098ee:	685b      	ldreq	r3, [r3, #4]
 80098f0:	6063      	str	r3, [r4, #4]
 80098f2:	bf04      	itt	eq
 80098f4:	1809      	addeq	r1, r1, r0
 80098f6:	6021      	streq	r1, [r4, #0]
 80098f8:	6054      	str	r4, [r2, #4]
 80098fa:	e7ca      	b.n	8009892 <_free_r+0x22>
 80098fc:	bd38      	pop	{r3, r4, r5, pc}
 80098fe:	bf00      	nop
 8009900:	20000728 	.word	0x20000728

08009904 <rshift>:
 8009904:	6903      	ldr	r3, [r0, #16]
 8009906:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800990a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800990e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009912:	f100 0414 	add.w	r4, r0, #20
 8009916:	dd45      	ble.n	80099a4 <rshift+0xa0>
 8009918:	f011 011f 	ands.w	r1, r1, #31
 800991c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009920:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009924:	d10c      	bne.n	8009940 <rshift+0x3c>
 8009926:	f100 0710 	add.w	r7, r0, #16
 800992a:	4629      	mov	r1, r5
 800992c:	42b1      	cmp	r1, r6
 800992e:	d334      	bcc.n	800999a <rshift+0x96>
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	009b      	lsls	r3, r3, #2
 8009934:	1eea      	subs	r2, r5, #3
 8009936:	4296      	cmp	r6, r2
 8009938:	bf38      	it	cc
 800993a:	2300      	movcc	r3, #0
 800993c:	4423      	add	r3, r4
 800993e:	e015      	b.n	800996c <rshift+0x68>
 8009940:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009944:	f1c1 0820 	rsb	r8, r1, #32
 8009948:	40cf      	lsrs	r7, r1
 800994a:	f105 0e04 	add.w	lr, r5, #4
 800994e:	46a1      	mov	r9, r4
 8009950:	4576      	cmp	r6, lr
 8009952:	46f4      	mov	ip, lr
 8009954:	d815      	bhi.n	8009982 <rshift+0x7e>
 8009956:	1a9a      	subs	r2, r3, r2
 8009958:	0092      	lsls	r2, r2, #2
 800995a:	3a04      	subs	r2, #4
 800995c:	3501      	adds	r5, #1
 800995e:	42ae      	cmp	r6, r5
 8009960:	bf38      	it	cc
 8009962:	2200      	movcc	r2, #0
 8009964:	18a3      	adds	r3, r4, r2
 8009966:	50a7      	str	r7, [r4, r2]
 8009968:	b107      	cbz	r7, 800996c <rshift+0x68>
 800996a:	3304      	adds	r3, #4
 800996c:	1b1a      	subs	r2, r3, r4
 800996e:	42a3      	cmp	r3, r4
 8009970:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009974:	bf08      	it	eq
 8009976:	2300      	moveq	r3, #0
 8009978:	6102      	str	r2, [r0, #16]
 800997a:	bf08      	it	eq
 800997c:	6143      	streq	r3, [r0, #20]
 800997e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009982:	f8dc c000 	ldr.w	ip, [ip]
 8009986:	fa0c fc08 	lsl.w	ip, ip, r8
 800998a:	ea4c 0707 	orr.w	r7, ip, r7
 800998e:	f849 7b04 	str.w	r7, [r9], #4
 8009992:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009996:	40cf      	lsrs	r7, r1
 8009998:	e7da      	b.n	8009950 <rshift+0x4c>
 800999a:	f851 cb04 	ldr.w	ip, [r1], #4
 800999e:	f847 cf04 	str.w	ip, [r7, #4]!
 80099a2:	e7c3      	b.n	800992c <rshift+0x28>
 80099a4:	4623      	mov	r3, r4
 80099a6:	e7e1      	b.n	800996c <rshift+0x68>

080099a8 <__hexdig_fun>:
 80099a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80099ac:	2b09      	cmp	r3, #9
 80099ae:	d802      	bhi.n	80099b6 <__hexdig_fun+0xe>
 80099b0:	3820      	subs	r0, #32
 80099b2:	b2c0      	uxtb	r0, r0
 80099b4:	4770      	bx	lr
 80099b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80099ba:	2b05      	cmp	r3, #5
 80099bc:	d801      	bhi.n	80099c2 <__hexdig_fun+0x1a>
 80099be:	3847      	subs	r0, #71	@ 0x47
 80099c0:	e7f7      	b.n	80099b2 <__hexdig_fun+0xa>
 80099c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80099c6:	2b05      	cmp	r3, #5
 80099c8:	d801      	bhi.n	80099ce <__hexdig_fun+0x26>
 80099ca:	3827      	subs	r0, #39	@ 0x27
 80099cc:	e7f1      	b.n	80099b2 <__hexdig_fun+0xa>
 80099ce:	2000      	movs	r0, #0
 80099d0:	4770      	bx	lr
	...

080099d4 <__gethex>:
 80099d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d8:	b085      	sub	sp, #20
 80099da:	468a      	mov	sl, r1
 80099dc:	9302      	str	r3, [sp, #8]
 80099de:	680b      	ldr	r3, [r1, #0]
 80099e0:	9001      	str	r0, [sp, #4]
 80099e2:	4690      	mov	r8, r2
 80099e4:	1c9c      	adds	r4, r3, #2
 80099e6:	46a1      	mov	r9, r4
 80099e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80099ec:	2830      	cmp	r0, #48	@ 0x30
 80099ee:	d0fa      	beq.n	80099e6 <__gethex+0x12>
 80099f0:	eba9 0303 	sub.w	r3, r9, r3
 80099f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80099f8:	f7ff ffd6 	bl	80099a8 <__hexdig_fun>
 80099fc:	4605      	mov	r5, r0
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d168      	bne.n	8009ad4 <__gethex+0x100>
 8009a02:	49a0      	ldr	r1, [pc, #640]	@ (8009c84 <__gethex+0x2b0>)
 8009a04:	2201      	movs	r2, #1
 8009a06:	4648      	mov	r0, r9
 8009a08:	f7ff f832 	bl	8008a70 <strncmp>
 8009a0c:	4607      	mov	r7, r0
 8009a0e:	2800      	cmp	r0, #0
 8009a10:	d167      	bne.n	8009ae2 <__gethex+0x10e>
 8009a12:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009a16:	4626      	mov	r6, r4
 8009a18:	f7ff ffc6 	bl	80099a8 <__hexdig_fun>
 8009a1c:	2800      	cmp	r0, #0
 8009a1e:	d062      	beq.n	8009ae6 <__gethex+0x112>
 8009a20:	4623      	mov	r3, r4
 8009a22:	7818      	ldrb	r0, [r3, #0]
 8009a24:	2830      	cmp	r0, #48	@ 0x30
 8009a26:	4699      	mov	r9, r3
 8009a28:	f103 0301 	add.w	r3, r3, #1
 8009a2c:	d0f9      	beq.n	8009a22 <__gethex+0x4e>
 8009a2e:	f7ff ffbb 	bl	80099a8 <__hexdig_fun>
 8009a32:	fab0 f580 	clz	r5, r0
 8009a36:	096d      	lsrs	r5, r5, #5
 8009a38:	f04f 0b01 	mov.w	fp, #1
 8009a3c:	464a      	mov	r2, r9
 8009a3e:	4616      	mov	r6, r2
 8009a40:	3201      	adds	r2, #1
 8009a42:	7830      	ldrb	r0, [r6, #0]
 8009a44:	f7ff ffb0 	bl	80099a8 <__hexdig_fun>
 8009a48:	2800      	cmp	r0, #0
 8009a4a:	d1f8      	bne.n	8009a3e <__gethex+0x6a>
 8009a4c:	498d      	ldr	r1, [pc, #564]	@ (8009c84 <__gethex+0x2b0>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	4630      	mov	r0, r6
 8009a52:	f7ff f80d 	bl	8008a70 <strncmp>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d13f      	bne.n	8009ada <__gethex+0x106>
 8009a5a:	b944      	cbnz	r4, 8009a6e <__gethex+0x9a>
 8009a5c:	1c74      	adds	r4, r6, #1
 8009a5e:	4622      	mov	r2, r4
 8009a60:	4616      	mov	r6, r2
 8009a62:	3201      	adds	r2, #1
 8009a64:	7830      	ldrb	r0, [r6, #0]
 8009a66:	f7ff ff9f 	bl	80099a8 <__hexdig_fun>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d1f8      	bne.n	8009a60 <__gethex+0x8c>
 8009a6e:	1ba4      	subs	r4, r4, r6
 8009a70:	00a7      	lsls	r7, r4, #2
 8009a72:	7833      	ldrb	r3, [r6, #0]
 8009a74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009a78:	2b50      	cmp	r3, #80	@ 0x50
 8009a7a:	d13e      	bne.n	8009afa <__gethex+0x126>
 8009a7c:	7873      	ldrb	r3, [r6, #1]
 8009a7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009a80:	d033      	beq.n	8009aea <__gethex+0x116>
 8009a82:	2b2d      	cmp	r3, #45	@ 0x2d
 8009a84:	d034      	beq.n	8009af0 <__gethex+0x11c>
 8009a86:	1c71      	adds	r1, r6, #1
 8009a88:	2400      	movs	r4, #0
 8009a8a:	7808      	ldrb	r0, [r1, #0]
 8009a8c:	f7ff ff8c 	bl	80099a8 <__hexdig_fun>
 8009a90:	1e43      	subs	r3, r0, #1
 8009a92:	b2db      	uxtb	r3, r3
 8009a94:	2b18      	cmp	r3, #24
 8009a96:	d830      	bhi.n	8009afa <__gethex+0x126>
 8009a98:	f1a0 0210 	sub.w	r2, r0, #16
 8009a9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009aa0:	f7ff ff82 	bl	80099a8 <__hexdig_fun>
 8009aa4:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009aa8:	fa5f fc8c 	uxtb.w	ip, ip
 8009aac:	f1bc 0f18 	cmp.w	ip, #24
 8009ab0:	f04f 030a 	mov.w	r3, #10
 8009ab4:	d91e      	bls.n	8009af4 <__gethex+0x120>
 8009ab6:	b104      	cbz	r4, 8009aba <__gethex+0xe6>
 8009ab8:	4252      	negs	r2, r2
 8009aba:	4417      	add	r7, r2
 8009abc:	f8ca 1000 	str.w	r1, [sl]
 8009ac0:	b1ed      	cbz	r5, 8009afe <__gethex+0x12a>
 8009ac2:	f1bb 0f00 	cmp.w	fp, #0
 8009ac6:	bf0c      	ite	eq
 8009ac8:	2506      	moveq	r5, #6
 8009aca:	2500      	movne	r5, #0
 8009acc:	4628      	mov	r0, r5
 8009ace:	b005      	add	sp, #20
 8009ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ad4:	2500      	movs	r5, #0
 8009ad6:	462c      	mov	r4, r5
 8009ad8:	e7b0      	b.n	8009a3c <__gethex+0x68>
 8009ada:	2c00      	cmp	r4, #0
 8009adc:	d1c7      	bne.n	8009a6e <__gethex+0x9a>
 8009ade:	4627      	mov	r7, r4
 8009ae0:	e7c7      	b.n	8009a72 <__gethex+0x9e>
 8009ae2:	464e      	mov	r6, r9
 8009ae4:	462f      	mov	r7, r5
 8009ae6:	2501      	movs	r5, #1
 8009ae8:	e7c3      	b.n	8009a72 <__gethex+0x9e>
 8009aea:	2400      	movs	r4, #0
 8009aec:	1cb1      	adds	r1, r6, #2
 8009aee:	e7cc      	b.n	8009a8a <__gethex+0xb6>
 8009af0:	2401      	movs	r4, #1
 8009af2:	e7fb      	b.n	8009aec <__gethex+0x118>
 8009af4:	fb03 0002 	mla	r0, r3, r2, r0
 8009af8:	e7ce      	b.n	8009a98 <__gethex+0xc4>
 8009afa:	4631      	mov	r1, r6
 8009afc:	e7de      	b.n	8009abc <__gethex+0xe8>
 8009afe:	eba6 0309 	sub.w	r3, r6, r9
 8009b02:	3b01      	subs	r3, #1
 8009b04:	4629      	mov	r1, r5
 8009b06:	2b07      	cmp	r3, #7
 8009b08:	dc0a      	bgt.n	8009b20 <__gethex+0x14c>
 8009b0a:	9801      	ldr	r0, [sp, #4]
 8009b0c:	f000 fafc 	bl	800a108 <_Balloc>
 8009b10:	4604      	mov	r4, r0
 8009b12:	b940      	cbnz	r0, 8009b26 <__gethex+0x152>
 8009b14:	4b5c      	ldr	r3, [pc, #368]	@ (8009c88 <__gethex+0x2b4>)
 8009b16:	4602      	mov	r2, r0
 8009b18:	21e4      	movs	r1, #228	@ 0xe4
 8009b1a:	485c      	ldr	r0, [pc, #368]	@ (8009c8c <__gethex+0x2b8>)
 8009b1c:	f001 fc1a 	bl	800b354 <__assert_func>
 8009b20:	3101      	adds	r1, #1
 8009b22:	105b      	asrs	r3, r3, #1
 8009b24:	e7ef      	b.n	8009b06 <__gethex+0x132>
 8009b26:	f100 0a14 	add.w	sl, r0, #20
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	4655      	mov	r5, sl
 8009b2e:	469b      	mov	fp, r3
 8009b30:	45b1      	cmp	r9, r6
 8009b32:	d337      	bcc.n	8009ba4 <__gethex+0x1d0>
 8009b34:	f845 bb04 	str.w	fp, [r5], #4
 8009b38:	eba5 050a 	sub.w	r5, r5, sl
 8009b3c:	10ad      	asrs	r5, r5, #2
 8009b3e:	6125      	str	r5, [r4, #16]
 8009b40:	4658      	mov	r0, fp
 8009b42:	f000 fbd3 	bl	800a2ec <__hi0bits>
 8009b46:	016d      	lsls	r5, r5, #5
 8009b48:	f8d8 6000 	ldr.w	r6, [r8]
 8009b4c:	1a2d      	subs	r5, r5, r0
 8009b4e:	42b5      	cmp	r5, r6
 8009b50:	dd54      	ble.n	8009bfc <__gethex+0x228>
 8009b52:	1bad      	subs	r5, r5, r6
 8009b54:	4629      	mov	r1, r5
 8009b56:	4620      	mov	r0, r4
 8009b58:	f000 ff5f 	bl	800aa1a <__any_on>
 8009b5c:	4681      	mov	r9, r0
 8009b5e:	b178      	cbz	r0, 8009b80 <__gethex+0x1ac>
 8009b60:	1e6b      	subs	r3, r5, #1
 8009b62:	1159      	asrs	r1, r3, #5
 8009b64:	f003 021f 	and.w	r2, r3, #31
 8009b68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009b6c:	f04f 0901 	mov.w	r9, #1
 8009b70:	fa09 f202 	lsl.w	r2, r9, r2
 8009b74:	420a      	tst	r2, r1
 8009b76:	d003      	beq.n	8009b80 <__gethex+0x1ac>
 8009b78:	454b      	cmp	r3, r9
 8009b7a:	dc36      	bgt.n	8009bea <__gethex+0x216>
 8009b7c:	f04f 0902 	mov.w	r9, #2
 8009b80:	4629      	mov	r1, r5
 8009b82:	4620      	mov	r0, r4
 8009b84:	f7ff febe 	bl	8009904 <rshift>
 8009b88:	442f      	add	r7, r5
 8009b8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009b8e:	42bb      	cmp	r3, r7
 8009b90:	da42      	bge.n	8009c18 <__gethex+0x244>
 8009b92:	9801      	ldr	r0, [sp, #4]
 8009b94:	4621      	mov	r1, r4
 8009b96:	f000 faf7 	bl	800a188 <_Bfree>
 8009b9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	6013      	str	r3, [r2, #0]
 8009ba0:	25a3      	movs	r5, #163	@ 0xa3
 8009ba2:	e793      	b.n	8009acc <__gethex+0xf8>
 8009ba4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ba8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009baa:	d012      	beq.n	8009bd2 <__gethex+0x1fe>
 8009bac:	2b20      	cmp	r3, #32
 8009bae:	d104      	bne.n	8009bba <__gethex+0x1e6>
 8009bb0:	f845 bb04 	str.w	fp, [r5], #4
 8009bb4:	f04f 0b00 	mov.w	fp, #0
 8009bb8:	465b      	mov	r3, fp
 8009bba:	7830      	ldrb	r0, [r6, #0]
 8009bbc:	9303      	str	r3, [sp, #12]
 8009bbe:	f7ff fef3 	bl	80099a8 <__hexdig_fun>
 8009bc2:	9b03      	ldr	r3, [sp, #12]
 8009bc4:	f000 000f 	and.w	r0, r0, #15
 8009bc8:	4098      	lsls	r0, r3
 8009bca:	ea4b 0b00 	orr.w	fp, fp, r0
 8009bce:	3304      	adds	r3, #4
 8009bd0:	e7ae      	b.n	8009b30 <__gethex+0x15c>
 8009bd2:	45b1      	cmp	r9, r6
 8009bd4:	d8ea      	bhi.n	8009bac <__gethex+0x1d8>
 8009bd6:	492b      	ldr	r1, [pc, #172]	@ (8009c84 <__gethex+0x2b0>)
 8009bd8:	9303      	str	r3, [sp, #12]
 8009bda:	2201      	movs	r2, #1
 8009bdc:	4630      	mov	r0, r6
 8009bde:	f7fe ff47 	bl	8008a70 <strncmp>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d1e1      	bne.n	8009bac <__gethex+0x1d8>
 8009be8:	e7a2      	b.n	8009b30 <__gethex+0x15c>
 8009bea:	1ea9      	subs	r1, r5, #2
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 ff14 	bl	800aa1a <__any_on>
 8009bf2:	2800      	cmp	r0, #0
 8009bf4:	d0c2      	beq.n	8009b7c <__gethex+0x1a8>
 8009bf6:	f04f 0903 	mov.w	r9, #3
 8009bfa:	e7c1      	b.n	8009b80 <__gethex+0x1ac>
 8009bfc:	da09      	bge.n	8009c12 <__gethex+0x23e>
 8009bfe:	1b75      	subs	r5, r6, r5
 8009c00:	4621      	mov	r1, r4
 8009c02:	9801      	ldr	r0, [sp, #4]
 8009c04:	462a      	mov	r2, r5
 8009c06:	f000 fccf 	bl	800a5a8 <__lshift>
 8009c0a:	1b7f      	subs	r7, r7, r5
 8009c0c:	4604      	mov	r4, r0
 8009c0e:	f100 0a14 	add.w	sl, r0, #20
 8009c12:	f04f 0900 	mov.w	r9, #0
 8009c16:	e7b8      	b.n	8009b8a <__gethex+0x1b6>
 8009c18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c1c:	42bd      	cmp	r5, r7
 8009c1e:	dd6f      	ble.n	8009d00 <__gethex+0x32c>
 8009c20:	1bed      	subs	r5, r5, r7
 8009c22:	42ae      	cmp	r6, r5
 8009c24:	dc34      	bgt.n	8009c90 <__gethex+0x2bc>
 8009c26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d022      	beq.n	8009c74 <__gethex+0x2a0>
 8009c2e:	2b03      	cmp	r3, #3
 8009c30:	d024      	beq.n	8009c7c <__gethex+0x2a8>
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d115      	bne.n	8009c62 <__gethex+0x28e>
 8009c36:	42ae      	cmp	r6, r5
 8009c38:	d113      	bne.n	8009c62 <__gethex+0x28e>
 8009c3a:	2e01      	cmp	r6, #1
 8009c3c:	d10b      	bne.n	8009c56 <__gethex+0x282>
 8009c3e:	9a02      	ldr	r2, [sp, #8]
 8009c40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009c44:	6013      	str	r3, [r2, #0]
 8009c46:	2301      	movs	r3, #1
 8009c48:	6123      	str	r3, [r4, #16]
 8009c4a:	f8ca 3000 	str.w	r3, [sl]
 8009c4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c50:	2562      	movs	r5, #98	@ 0x62
 8009c52:	601c      	str	r4, [r3, #0]
 8009c54:	e73a      	b.n	8009acc <__gethex+0xf8>
 8009c56:	1e71      	subs	r1, r6, #1
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f000 fede 	bl	800aa1a <__any_on>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	d1ed      	bne.n	8009c3e <__gethex+0x26a>
 8009c62:	9801      	ldr	r0, [sp, #4]
 8009c64:	4621      	mov	r1, r4
 8009c66:	f000 fa8f 	bl	800a188 <_Bfree>
 8009c6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	2550      	movs	r5, #80	@ 0x50
 8009c72:	e72b      	b.n	8009acc <__gethex+0xf8>
 8009c74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1f3      	bne.n	8009c62 <__gethex+0x28e>
 8009c7a:	e7e0      	b.n	8009c3e <__gethex+0x26a>
 8009c7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d1dd      	bne.n	8009c3e <__gethex+0x26a>
 8009c82:	e7ee      	b.n	8009c62 <__gethex+0x28e>
 8009c84:	0800b7f0 	.word	0x0800b7f0
 8009c88:	0800b8af 	.word	0x0800b8af
 8009c8c:	0800b8c0 	.word	0x0800b8c0
 8009c90:	1e6f      	subs	r7, r5, #1
 8009c92:	f1b9 0f00 	cmp.w	r9, #0
 8009c96:	d130      	bne.n	8009cfa <__gethex+0x326>
 8009c98:	b127      	cbz	r7, 8009ca4 <__gethex+0x2d0>
 8009c9a:	4639      	mov	r1, r7
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	f000 febc 	bl	800aa1a <__any_on>
 8009ca2:	4681      	mov	r9, r0
 8009ca4:	117a      	asrs	r2, r7, #5
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009cac:	f007 071f 	and.w	r7, r7, #31
 8009cb0:	40bb      	lsls	r3, r7
 8009cb2:	4213      	tst	r3, r2
 8009cb4:	4629      	mov	r1, r5
 8009cb6:	4620      	mov	r0, r4
 8009cb8:	bf18      	it	ne
 8009cba:	f049 0902 	orrne.w	r9, r9, #2
 8009cbe:	f7ff fe21 	bl	8009904 <rshift>
 8009cc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009cc6:	1b76      	subs	r6, r6, r5
 8009cc8:	2502      	movs	r5, #2
 8009cca:	f1b9 0f00 	cmp.w	r9, #0
 8009cce:	d047      	beq.n	8009d60 <__gethex+0x38c>
 8009cd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009cd4:	2b02      	cmp	r3, #2
 8009cd6:	d015      	beq.n	8009d04 <__gethex+0x330>
 8009cd8:	2b03      	cmp	r3, #3
 8009cda:	d017      	beq.n	8009d0c <__gethex+0x338>
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d109      	bne.n	8009cf4 <__gethex+0x320>
 8009ce0:	f019 0f02 	tst.w	r9, #2
 8009ce4:	d006      	beq.n	8009cf4 <__gethex+0x320>
 8009ce6:	f8da 3000 	ldr.w	r3, [sl]
 8009cea:	ea49 0903 	orr.w	r9, r9, r3
 8009cee:	f019 0f01 	tst.w	r9, #1
 8009cf2:	d10e      	bne.n	8009d12 <__gethex+0x33e>
 8009cf4:	f045 0510 	orr.w	r5, r5, #16
 8009cf8:	e032      	b.n	8009d60 <__gethex+0x38c>
 8009cfa:	f04f 0901 	mov.w	r9, #1
 8009cfe:	e7d1      	b.n	8009ca4 <__gethex+0x2d0>
 8009d00:	2501      	movs	r5, #1
 8009d02:	e7e2      	b.n	8009cca <__gethex+0x2f6>
 8009d04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d06:	f1c3 0301 	rsb	r3, r3, #1
 8009d0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009d0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d0f0      	beq.n	8009cf4 <__gethex+0x320>
 8009d12:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009d16:	f104 0314 	add.w	r3, r4, #20
 8009d1a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009d1e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009d22:	f04f 0c00 	mov.w	ip, #0
 8009d26:	4618      	mov	r0, r3
 8009d28:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d2c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009d30:	d01b      	beq.n	8009d6a <__gethex+0x396>
 8009d32:	3201      	adds	r2, #1
 8009d34:	6002      	str	r2, [r0, #0]
 8009d36:	2d02      	cmp	r5, #2
 8009d38:	f104 0314 	add.w	r3, r4, #20
 8009d3c:	d13c      	bne.n	8009db8 <__gethex+0x3e4>
 8009d3e:	f8d8 2000 	ldr.w	r2, [r8]
 8009d42:	3a01      	subs	r2, #1
 8009d44:	42b2      	cmp	r2, r6
 8009d46:	d109      	bne.n	8009d5c <__gethex+0x388>
 8009d48:	1171      	asrs	r1, r6, #5
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d50:	f006 061f 	and.w	r6, r6, #31
 8009d54:	fa02 f606 	lsl.w	r6, r2, r6
 8009d58:	421e      	tst	r6, r3
 8009d5a:	d13a      	bne.n	8009dd2 <__gethex+0x3fe>
 8009d5c:	f045 0520 	orr.w	r5, r5, #32
 8009d60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d62:	601c      	str	r4, [r3, #0]
 8009d64:	9b02      	ldr	r3, [sp, #8]
 8009d66:	601f      	str	r7, [r3, #0]
 8009d68:	e6b0      	b.n	8009acc <__gethex+0xf8>
 8009d6a:	4299      	cmp	r1, r3
 8009d6c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009d70:	d8d9      	bhi.n	8009d26 <__gethex+0x352>
 8009d72:	68a3      	ldr	r3, [r4, #8]
 8009d74:	459b      	cmp	fp, r3
 8009d76:	db17      	blt.n	8009da8 <__gethex+0x3d4>
 8009d78:	6861      	ldr	r1, [r4, #4]
 8009d7a:	9801      	ldr	r0, [sp, #4]
 8009d7c:	3101      	adds	r1, #1
 8009d7e:	f000 f9c3 	bl	800a108 <_Balloc>
 8009d82:	4681      	mov	r9, r0
 8009d84:	b918      	cbnz	r0, 8009d8e <__gethex+0x3ba>
 8009d86:	4b1a      	ldr	r3, [pc, #104]	@ (8009df0 <__gethex+0x41c>)
 8009d88:	4602      	mov	r2, r0
 8009d8a:	2184      	movs	r1, #132	@ 0x84
 8009d8c:	e6c5      	b.n	8009b1a <__gethex+0x146>
 8009d8e:	6922      	ldr	r2, [r4, #16]
 8009d90:	3202      	adds	r2, #2
 8009d92:	f104 010c 	add.w	r1, r4, #12
 8009d96:	0092      	lsls	r2, r2, #2
 8009d98:	300c      	adds	r0, #12
 8009d9a:	f7fe fef2 	bl	8008b82 <memcpy>
 8009d9e:	4621      	mov	r1, r4
 8009da0:	9801      	ldr	r0, [sp, #4]
 8009da2:	f000 f9f1 	bl	800a188 <_Bfree>
 8009da6:	464c      	mov	r4, r9
 8009da8:	6923      	ldr	r3, [r4, #16]
 8009daa:	1c5a      	adds	r2, r3, #1
 8009dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009db0:	6122      	str	r2, [r4, #16]
 8009db2:	2201      	movs	r2, #1
 8009db4:	615a      	str	r2, [r3, #20]
 8009db6:	e7be      	b.n	8009d36 <__gethex+0x362>
 8009db8:	6922      	ldr	r2, [r4, #16]
 8009dba:	455a      	cmp	r2, fp
 8009dbc:	dd0b      	ble.n	8009dd6 <__gethex+0x402>
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff fd9f 	bl	8009904 <rshift>
 8009dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dca:	3701      	adds	r7, #1
 8009dcc:	42bb      	cmp	r3, r7
 8009dce:	f6ff aee0 	blt.w	8009b92 <__gethex+0x1be>
 8009dd2:	2501      	movs	r5, #1
 8009dd4:	e7c2      	b.n	8009d5c <__gethex+0x388>
 8009dd6:	f016 061f 	ands.w	r6, r6, #31
 8009dda:	d0fa      	beq.n	8009dd2 <__gethex+0x3fe>
 8009ddc:	4453      	add	r3, sl
 8009dde:	f1c6 0620 	rsb	r6, r6, #32
 8009de2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009de6:	f000 fa81 	bl	800a2ec <__hi0bits>
 8009dea:	42b0      	cmp	r0, r6
 8009dec:	dbe7      	blt.n	8009dbe <__gethex+0x3ea>
 8009dee:	e7f0      	b.n	8009dd2 <__gethex+0x3fe>
 8009df0:	0800b8af 	.word	0x0800b8af

08009df4 <L_shift>:
 8009df4:	f1c2 0208 	rsb	r2, r2, #8
 8009df8:	0092      	lsls	r2, r2, #2
 8009dfa:	b570      	push	{r4, r5, r6, lr}
 8009dfc:	f1c2 0620 	rsb	r6, r2, #32
 8009e00:	6843      	ldr	r3, [r0, #4]
 8009e02:	6804      	ldr	r4, [r0, #0]
 8009e04:	fa03 f506 	lsl.w	r5, r3, r6
 8009e08:	432c      	orrs	r4, r5
 8009e0a:	40d3      	lsrs	r3, r2
 8009e0c:	6004      	str	r4, [r0, #0]
 8009e0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009e12:	4288      	cmp	r0, r1
 8009e14:	d3f4      	bcc.n	8009e00 <L_shift+0xc>
 8009e16:	bd70      	pop	{r4, r5, r6, pc}

08009e18 <__match>:
 8009e18:	b530      	push	{r4, r5, lr}
 8009e1a:	6803      	ldr	r3, [r0, #0]
 8009e1c:	3301      	adds	r3, #1
 8009e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e22:	b914      	cbnz	r4, 8009e2a <__match+0x12>
 8009e24:	6003      	str	r3, [r0, #0]
 8009e26:	2001      	movs	r0, #1
 8009e28:	bd30      	pop	{r4, r5, pc}
 8009e2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009e32:	2d19      	cmp	r5, #25
 8009e34:	bf98      	it	ls
 8009e36:	3220      	addls	r2, #32
 8009e38:	42a2      	cmp	r2, r4
 8009e3a:	d0f0      	beq.n	8009e1e <__match+0x6>
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	e7f3      	b.n	8009e28 <__match+0x10>

08009e40 <__hexnan>:
 8009e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e44:	680b      	ldr	r3, [r1, #0]
 8009e46:	6801      	ldr	r1, [r0, #0]
 8009e48:	115e      	asrs	r6, r3, #5
 8009e4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009e4e:	f013 031f 	ands.w	r3, r3, #31
 8009e52:	b087      	sub	sp, #28
 8009e54:	bf18      	it	ne
 8009e56:	3604      	addne	r6, #4
 8009e58:	2500      	movs	r5, #0
 8009e5a:	1f37      	subs	r7, r6, #4
 8009e5c:	4682      	mov	sl, r0
 8009e5e:	4690      	mov	r8, r2
 8009e60:	9301      	str	r3, [sp, #4]
 8009e62:	f846 5c04 	str.w	r5, [r6, #-4]
 8009e66:	46b9      	mov	r9, r7
 8009e68:	463c      	mov	r4, r7
 8009e6a:	9502      	str	r5, [sp, #8]
 8009e6c:	46ab      	mov	fp, r5
 8009e6e:	784a      	ldrb	r2, [r1, #1]
 8009e70:	1c4b      	adds	r3, r1, #1
 8009e72:	9303      	str	r3, [sp, #12]
 8009e74:	b342      	cbz	r2, 8009ec8 <__hexnan+0x88>
 8009e76:	4610      	mov	r0, r2
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	9204      	str	r2, [sp, #16]
 8009e7c:	f7ff fd94 	bl	80099a8 <__hexdig_fun>
 8009e80:	2800      	cmp	r0, #0
 8009e82:	d151      	bne.n	8009f28 <__hexnan+0xe8>
 8009e84:	9a04      	ldr	r2, [sp, #16]
 8009e86:	9905      	ldr	r1, [sp, #20]
 8009e88:	2a20      	cmp	r2, #32
 8009e8a:	d818      	bhi.n	8009ebe <__hexnan+0x7e>
 8009e8c:	9b02      	ldr	r3, [sp, #8]
 8009e8e:	459b      	cmp	fp, r3
 8009e90:	dd13      	ble.n	8009eba <__hexnan+0x7a>
 8009e92:	454c      	cmp	r4, r9
 8009e94:	d206      	bcs.n	8009ea4 <__hexnan+0x64>
 8009e96:	2d07      	cmp	r5, #7
 8009e98:	dc04      	bgt.n	8009ea4 <__hexnan+0x64>
 8009e9a:	462a      	mov	r2, r5
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f7ff ffa8 	bl	8009df4 <L_shift>
 8009ea4:	4544      	cmp	r4, r8
 8009ea6:	d952      	bls.n	8009f4e <__hexnan+0x10e>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	f1a4 0904 	sub.w	r9, r4, #4
 8009eae:	f844 3c04 	str.w	r3, [r4, #-4]
 8009eb2:	f8cd b008 	str.w	fp, [sp, #8]
 8009eb6:	464c      	mov	r4, r9
 8009eb8:	461d      	mov	r5, r3
 8009eba:	9903      	ldr	r1, [sp, #12]
 8009ebc:	e7d7      	b.n	8009e6e <__hexnan+0x2e>
 8009ebe:	2a29      	cmp	r2, #41	@ 0x29
 8009ec0:	d157      	bne.n	8009f72 <__hexnan+0x132>
 8009ec2:	3102      	adds	r1, #2
 8009ec4:	f8ca 1000 	str.w	r1, [sl]
 8009ec8:	f1bb 0f00 	cmp.w	fp, #0
 8009ecc:	d051      	beq.n	8009f72 <__hexnan+0x132>
 8009ece:	454c      	cmp	r4, r9
 8009ed0:	d206      	bcs.n	8009ee0 <__hexnan+0xa0>
 8009ed2:	2d07      	cmp	r5, #7
 8009ed4:	dc04      	bgt.n	8009ee0 <__hexnan+0xa0>
 8009ed6:	462a      	mov	r2, r5
 8009ed8:	4649      	mov	r1, r9
 8009eda:	4620      	mov	r0, r4
 8009edc:	f7ff ff8a 	bl	8009df4 <L_shift>
 8009ee0:	4544      	cmp	r4, r8
 8009ee2:	d936      	bls.n	8009f52 <__hexnan+0x112>
 8009ee4:	f1a8 0204 	sub.w	r2, r8, #4
 8009ee8:	4623      	mov	r3, r4
 8009eea:	f853 1b04 	ldr.w	r1, [r3], #4
 8009eee:	f842 1f04 	str.w	r1, [r2, #4]!
 8009ef2:	429f      	cmp	r7, r3
 8009ef4:	d2f9      	bcs.n	8009eea <__hexnan+0xaa>
 8009ef6:	1b3b      	subs	r3, r7, r4
 8009ef8:	f023 0303 	bic.w	r3, r3, #3
 8009efc:	3304      	adds	r3, #4
 8009efe:	3401      	adds	r4, #1
 8009f00:	3e03      	subs	r6, #3
 8009f02:	42b4      	cmp	r4, r6
 8009f04:	bf88      	it	hi
 8009f06:	2304      	movhi	r3, #4
 8009f08:	4443      	add	r3, r8
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	f843 2b04 	str.w	r2, [r3], #4
 8009f10:	429f      	cmp	r7, r3
 8009f12:	d2fb      	bcs.n	8009f0c <__hexnan+0xcc>
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	b91b      	cbnz	r3, 8009f20 <__hexnan+0xe0>
 8009f18:	4547      	cmp	r7, r8
 8009f1a:	d128      	bne.n	8009f6e <__hexnan+0x12e>
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	603b      	str	r3, [r7, #0]
 8009f20:	2005      	movs	r0, #5
 8009f22:	b007      	add	sp, #28
 8009f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f28:	3501      	adds	r5, #1
 8009f2a:	2d08      	cmp	r5, #8
 8009f2c:	f10b 0b01 	add.w	fp, fp, #1
 8009f30:	dd06      	ble.n	8009f40 <__hexnan+0x100>
 8009f32:	4544      	cmp	r4, r8
 8009f34:	d9c1      	bls.n	8009eba <__hexnan+0x7a>
 8009f36:	2300      	movs	r3, #0
 8009f38:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f3c:	2501      	movs	r5, #1
 8009f3e:	3c04      	subs	r4, #4
 8009f40:	6822      	ldr	r2, [r4, #0]
 8009f42:	f000 000f 	and.w	r0, r0, #15
 8009f46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009f4a:	6020      	str	r0, [r4, #0]
 8009f4c:	e7b5      	b.n	8009eba <__hexnan+0x7a>
 8009f4e:	2508      	movs	r5, #8
 8009f50:	e7b3      	b.n	8009eba <__hexnan+0x7a>
 8009f52:	9b01      	ldr	r3, [sp, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0dd      	beq.n	8009f14 <__hexnan+0xd4>
 8009f58:	f1c3 0320 	rsb	r3, r3, #32
 8009f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f60:	40da      	lsrs	r2, r3
 8009f62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009f66:	4013      	ands	r3, r2
 8009f68:	f846 3c04 	str.w	r3, [r6, #-4]
 8009f6c:	e7d2      	b.n	8009f14 <__hexnan+0xd4>
 8009f6e:	3f04      	subs	r7, #4
 8009f70:	e7d0      	b.n	8009f14 <__hexnan+0xd4>
 8009f72:	2004      	movs	r0, #4
 8009f74:	e7d5      	b.n	8009f22 <__hexnan+0xe2>
	...

08009f78 <malloc>:
 8009f78:	4b02      	ldr	r3, [pc, #8]	@ (8009f84 <malloc+0xc>)
 8009f7a:	4601      	mov	r1, r0
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	f000 b825 	b.w	8009fcc <_malloc_r>
 8009f82:	bf00      	nop
 8009f84:	20000184 	.word	0x20000184

08009f88 <sbrk_aligned>:
 8009f88:	b570      	push	{r4, r5, r6, lr}
 8009f8a:	4e0f      	ldr	r6, [pc, #60]	@ (8009fc8 <sbrk_aligned+0x40>)
 8009f8c:	460c      	mov	r4, r1
 8009f8e:	6831      	ldr	r1, [r6, #0]
 8009f90:	4605      	mov	r5, r0
 8009f92:	b911      	cbnz	r1, 8009f9a <sbrk_aligned+0x12>
 8009f94:	f001 f9ce 	bl	800b334 <_sbrk_r>
 8009f98:	6030      	str	r0, [r6, #0]
 8009f9a:	4621      	mov	r1, r4
 8009f9c:	4628      	mov	r0, r5
 8009f9e:	f001 f9c9 	bl	800b334 <_sbrk_r>
 8009fa2:	1c43      	adds	r3, r0, #1
 8009fa4:	d103      	bne.n	8009fae <sbrk_aligned+0x26>
 8009fa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009faa:	4620      	mov	r0, r4
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
 8009fae:	1cc4      	adds	r4, r0, #3
 8009fb0:	f024 0403 	bic.w	r4, r4, #3
 8009fb4:	42a0      	cmp	r0, r4
 8009fb6:	d0f8      	beq.n	8009faa <sbrk_aligned+0x22>
 8009fb8:	1a21      	subs	r1, r4, r0
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f001 f9ba 	bl	800b334 <_sbrk_r>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d1f2      	bne.n	8009faa <sbrk_aligned+0x22>
 8009fc4:	e7ef      	b.n	8009fa6 <sbrk_aligned+0x1e>
 8009fc6:	bf00      	nop
 8009fc8:	20000724 	.word	0x20000724

08009fcc <_malloc_r>:
 8009fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd0:	1ccd      	adds	r5, r1, #3
 8009fd2:	f025 0503 	bic.w	r5, r5, #3
 8009fd6:	3508      	adds	r5, #8
 8009fd8:	2d0c      	cmp	r5, #12
 8009fda:	bf38      	it	cc
 8009fdc:	250c      	movcc	r5, #12
 8009fde:	2d00      	cmp	r5, #0
 8009fe0:	4606      	mov	r6, r0
 8009fe2:	db01      	blt.n	8009fe8 <_malloc_r+0x1c>
 8009fe4:	42a9      	cmp	r1, r5
 8009fe6:	d904      	bls.n	8009ff2 <_malloc_r+0x26>
 8009fe8:	230c      	movs	r3, #12
 8009fea:	6033      	str	r3, [r6, #0]
 8009fec:	2000      	movs	r0, #0
 8009fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ff2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a0c8 <_malloc_r+0xfc>
 8009ff6:	f000 f87b 	bl	800a0f0 <__malloc_lock>
 8009ffa:	f8d8 3000 	ldr.w	r3, [r8]
 8009ffe:	461c      	mov	r4, r3
 800a000:	bb44      	cbnz	r4, 800a054 <_malloc_r+0x88>
 800a002:	4629      	mov	r1, r5
 800a004:	4630      	mov	r0, r6
 800a006:	f7ff ffbf 	bl	8009f88 <sbrk_aligned>
 800a00a:	1c43      	adds	r3, r0, #1
 800a00c:	4604      	mov	r4, r0
 800a00e:	d158      	bne.n	800a0c2 <_malloc_r+0xf6>
 800a010:	f8d8 4000 	ldr.w	r4, [r8]
 800a014:	4627      	mov	r7, r4
 800a016:	2f00      	cmp	r7, #0
 800a018:	d143      	bne.n	800a0a2 <_malloc_r+0xd6>
 800a01a:	2c00      	cmp	r4, #0
 800a01c:	d04b      	beq.n	800a0b6 <_malloc_r+0xea>
 800a01e:	6823      	ldr	r3, [r4, #0]
 800a020:	4639      	mov	r1, r7
 800a022:	4630      	mov	r0, r6
 800a024:	eb04 0903 	add.w	r9, r4, r3
 800a028:	f001 f984 	bl	800b334 <_sbrk_r>
 800a02c:	4581      	cmp	r9, r0
 800a02e:	d142      	bne.n	800a0b6 <_malloc_r+0xea>
 800a030:	6821      	ldr	r1, [r4, #0]
 800a032:	1a6d      	subs	r5, r5, r1
 800a034:	4629      	mov	r1, r5
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ffa6 	bl	8009f88 <sbrk_aligned>
 800a03c:	3001      	adds	r0, #1
 800a03e:	d03a      	beq.n	800a0b6 <_malloc_r+0xea>
 800a040:	6823      	ldr	r3, [r4, #0]
 800a042:	442b      	add	r3, r5
 800a044:	6023      	str	r3, [r4, #0]
 800a046:	f8d8 3000 	ldr.w	r3, [r8]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	bb62      	cbnz	r2, 800a0a8 <_malloc_r+0xdc>
 800a04e:	f8c8 7000 	str.w	r7, [r8]
 800a052:	e00f      	b.n	800a074 <_malloc_r+0xa8>
 800a054:	6822      	ldr	r2, [r4, #0]
 800a056:	1b52      	subs	r2, r2, r5
 800a058:	d420      	bmi.n	800a09c <_malloc_r+0xd0>
 800a05a:	2a0b      	cmp	r2, #11
 800a05c:	d917      	bls.n	800a08e <_malloc_r+0xc2>
 800a05e:	1961      	adds	r1, r4, r5
 800a060:	42a3      	cmp	r3, r4
 800a062:	6025      	str	r5, [r4, #0]
 800a064:	bf18      	it	ne
 800a066:	6059      	strne	r1, [r3, #4]
 800a068:	6863      	ldr	r3, [r4, #4]
 800a06a:	bf08      	it	eq
 800a06c:	f8c8 1000 	streq.w	r1, [r8]
 800a070:	5162      	str	r2, [r4, r5]
 800a072:	604b      	str	r3, [r1, #4]
 800a074:	4630      	mov	r0, r6
 800a076:	f000 f841 	bl	800a0fc <__malloc_unlock>
 800a07a:	f104 000b 	add.w	r0, r4, #11
 800a07e:	1d23      	adds	r3, r4, #4
 800a080:	f020 0007 	bic.w	r0, r0, #7
 800a084:	1ac2      	subs	r2, r0, r3
 800a086:	bf1c      	itt	ne
 800a088:	1a1b      	subne	r3, r3, r0
 800a08a:	50a3      	strne	r3, [r4, r2]
 800a08c:	e7af      	b.n	8009fee <_malloc_r+0x22>
 800a08e:	6862      	ldr	r2, [r4, #4]
 800a090:	42a3      	cmp	r3, r4
 800a092:	bf0c      	ite	eq
 800a094:	f8c8 2000 	streq.w	r2, [r8]
 800a098:	605a      	strne	r2, [r3, #4]
 800a09a:	e7eb      	b.n	800a074 <_malloc_r+0xa8>
 800a09c:	4623      	mov	r3, r4
 800a09e:	6864      	ldr	r4, [r4, #4]
 800a0a0:	e7ae      	b.n	800a000 <_malloc_r+0x34>
 800a0a2:	463c      	mov	r4, r7
 800a0a4:	687f      	ldr	r7, [r7, #4]
 800a0a6:	e7b6      	b.n	800a016 <_malloc_r+0x4a>
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	d1fb      	bne.n	800a0a8 <_malloc_r+0xdc>
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	6053      	str	r3, [r2, #4]
 800a0b4:	e7de      	b.n	800a074 <_malloc_r+0xa8>
 800a0b6:	230c      	movs	r3, #12
 800a0b8:	6033      	str	r3, [r6, #0]
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f000 f81e 	bl	800a0fc <__malloc_unlock>
 800a0c0:	e794      	b.n	8009fec <_malloc_r+0x20>
 800a0c2:	6005      	str	r5, [r0, #0]
 800a0c4:	e7d6      	b.n	800a074 <_malloc_r+0xa8>
 800a0c6:	bf00      	nop
 800a0c8:	20000728 	.word	0x20000728

0800a0cc <__ascii_mbtowc>:
 800a0cc:	b082      	sub	sp, #8
 800a0ce:	b901      	cbnz	r1, 800a0d2 <__ascii_mbtowc+0x6>
 800a0d0:	a901      	add	r1, sp, #4
 800a0d2:	b142      	cbz	r2, 800a0e6 <__ascii_mbtowc+0x1a>
 800a0d4:	b14b      	cbz	r3, 800a0ea <__ascii_mbtowc+0x1e>
 800a0d6:	7813      	ldrb	r3, [r2, #0]
 800a0d8:	600b      	str	r3, [r1, #0]
 800a0da:	7812      	ldrb	r2, [r2, #0]
 800a0dc:	1e10      	subs	r0, r2, #0
 800a0de:	bf18      	it	ne
 800a0e0:	2001      	movne	r0, #1
 800a0e2:	b002      	add	sp, #8
 800a0e4:	4770      	bx	lr
 800a0e6:	4610      	mov	r0, r2
 800a0e8:	e7fb      	b.n	800a0e2 <__ascii_mbtowc+0x16>
 800a0ea:	f06f 0001 	mvn.w	r0, #1
 800a0ee:	e7f8      	b.n	800a0e2 <__ascii_mbtowc+0x16>

0800a0f0 <__malloc_lock>:
 800a0f0:	4801      	ldr	r0, [pc, #4]	@ (800a0f8 <__malloc_lock+0x8>)
 800a0f2:	f7fe bd44 	b.w	8008b7e <__retarget_lock_acquire_recursive>
 800a0f6:	bf00      	nop
 800a0f8:	20000720 	.word	0x20000720

0800a0fc <__malloc_unlock>:
 800a0fc:	4801      	ldr	r0, [pc, #4]	@ (800a104 <__malloc_unlock+0x8>)
 800a0fe:	f7fe bd3f 	b.w	8008b80 <__retarget_lock_release_recursive>
 800a102:	bf00      	nop
 800a104:	20000720 	.word	0x20000720

0800a108 <_Balloc>:
 800a108:	b570      	push	{r4, r5, r6, lr}
 800a10a:	69c6      	ldr	r6, [r0, #28]
 800a10c:	4604      	mov	r4, r0
 800a10e:	460d      	mov	r5, r1
 800a110:	b976      	cbnz	r6, 800a130 <_Balloc+0x28>
 800a112:	2010      	movs	r0, #16
 800a114:	f7ff ff30 	bl	8009f78 <malloc>
 800a118:	4602      	mov	r2, r0
 800a11a:	61e0      	str	r0, [r4, #28]
 800a11c:	b920      	cbnz	r0, 800a128 <_Balloc+0x20>
 800a11e:	4b18      	ldr	r3, [pc, #96]	@ (800a180 <_Balloc+0x78>)
 800a120:	4818      	ldr	r0, [pc, #96]	@ (800a184 <_Balloc+0x7c>)
 800a122:	216b      	movs	r1, #107	@ 0x6b
 800a124:	f001 f916 	bl	800b354 <__assert_func>
 800a128:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a12c:	6006      	str	r6, [r0, #0]
 800a12e:	60c6      	str	r6, [r0, #12]
 800a130:	69e6      	ldr	r6, [r4, #28]
 800a132:	68f3      	ldr	r3, [r6, #12]
 800a134:	b183      	cbz	r3, 800a158 <_Balloc+0x50>
 800a136:	69e3      	ldr	r3, [r4, #28]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a13e:	b9b8      	cbnz	r0, 800a170 <_Balloc+0x68>
 800a140:	2101      	movs	r1, #1
 800a142:	fa01 f605 	lsl.w	r6, r1, r5
 800a146:	1d72      	adds	r2, r6, #5
 800a148:	0092      	lsls	r2, r2, #2
 800a14a:	4620      	mov	r0, r4
 800a14c:	f001 f920 	bl	800b390 <_calloc_r>
 800a150:	b160      	cbz	r0, 800a16c <_Balloc+0x64>
 800a152:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a156:	e00e      	b.n	800a176 <_Balloc+0x6e>
 800a158:	2221      	movs	r2, #33	@ 0x21
 800a15a:	2104      	movs	r1, #4
 800a15c:	4620      	mov	r0, r4
 800a15e:	f001 f917 	bl	800b390 <_calloc_r>
 800a162:	69e3      	ldr	r3, [r4, #28]
 800a164:	60f0      	str	r0, [r6, #12]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1e4      	bne.n	800a136 <_Balloc+0x2e>
 800a16c:	2000      	movs	r0, #0
 800a16e:	bd70      	pop	{r4, r5, r6, pc}
 800a170:	6802      	ldr	r2, [r0, #0]
 800a172:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a176:	2300      	movs	r3, #0
 800a178:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a17c:	e7f7      	b.n	800a16e <_Balloc+0x66>
 800a17e:	bf00      	nop
 800a180:	0800b840 	.word	0x0800b840
 800a184:	0800b920 	.word	0x0800b920

0800a188 <_Bfree>:
 800a188:	b570      	push	{r4, r5, r6, lr}
 800a18a:	69c6      	ldr	r6, [r0, #28]
 800a18c:	4605      	mov	r5, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	b976      	cbnz	r6, 800a1b0 <_Bfree+0x28>
 800a192:	2010      	movs	r0, #16
 800a194:	f7ff fef0 	bl	8009f78 <malloc>
 800a198:	4602      	mov	r2, r0
 800a19a:	61e8      	str	r0, [r5, #28]
 800a19c:	b920      	cbnz	r0, 800a1a8 <_Bfree+0x20>
 800a19e:	4b09      	ldr	r3, [pc, #36]	@ (800a1c4 <_Bfree+0x3c>)
 800a1a0:	4809      	ldr	r0, [pc, #36]	@ (800a1c8 <_Bfree+0x40>)
 800a1a2:	218f      	movs	r1, #143	@ 0x8f
 800a1a4:	f001 f8d6 	bl	800b354 <__assert_func>
 800a1a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1ac:	6006      	str	r6, [r0, #0]
 800a1ae:	60c6      	str	r6, [r0, #12]
 800a1b0:	b13c      	cbz	r4, 800a1c2 <_Bfree+0x3a>
 800a1b2:	69eb      	ldr	r3, [r5, #28]
 800a1b4:	6862      	ldr	r2, [r4, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1bc:	6021      	str	r1, [r4, #0]
 800a1be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1c2:	bd70      	pop	{r4, r5, r6, pc}
 800a1c4:	0800b840 	.word	0x0800b840
 800a1c8:	0800b920 	.word	0x0800b920

0800a1cc <__multadd>:
 800a1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d0:	690d      	ldr	r5, [r1, #16]
 800a1d2:	4607      	mov	r7, r0
 800a1d4:	460c      	mov	r4, r1
 800a1d6:	461e      	mov	r6, r3
 800a1d8:	f101 0c14 	add.w	ip, r1, #20
 800a1dc:	2000      	movs	r0, #0
 800a1de:	f8dc 3000 	ldr.w	r3, [ip]
 800a1e2:	b299      	uxth	r1, r3
 800a1e4:	fb02 6101 	mla	r1, r2, r1, r6
 800a1e8:	0c1e      	lsrs	r6, r3, #16
 800a1ea:	0c0b      	lsrs	r3, r1, #16
 800a1ec:	fb02 3306 	mla	r3, r2, r6, r3
 800a1f0:	b289      	uxth	r1, r1
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1f8:	4285      	cmp	r5, r0
 800a1fa:	f84c 1b04 	str.w	r1, [ip], #4
 800a1fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a202:	dcec      	bgt.n	800a1de <__multadd+0x12>
 800a204:	b30e      	cbz	r6, 800a24a <__multadd+0x7e>
 800a206:	68a3      	ldr	r3, [r4, #8]
 800a208:	42ab      	cmp	r3, r5
 800a20a:	dc19      	bgt.n	800a240 <__multadd+0x74>
 800a20c:	6861      	ldr	r1, [r4, #4]
 800a20e:	4638      	mov	r0, r7
 800a210:	3101      	adds	r1, #1
 800a212:	f7ff ff79 	bl	800a108 <_Balloc>
 800a216:	4680      	mov	r8, r0
 800a218:	b928      	cbnz	r0, 800a226 <__multadd+0x5a>
 800a21a:	4602      	mov	r2, r0
 800a21c:	4b0c      	ldr	r3, [pc, #48]	@ (800a250 <__multadd+0x84>)
 800a21e:	480d      	ldr	r0, [pc, #52]	@ (800a254 <__multadd+0x88>)
 800a220:	21ba      	movs	r1, #186	@ 0xba
 800a222:	f001 f897 	bl	800b354 <__assert_func>
 800a226:	6922      	ldr	r2, [r4, #16]
 800a228:	3202      	adds	r2, #2
 800a22a:	f104 010c 	add.w	r1, r4, #12
 800a22e:	0092      	lsls	r2, r2, #2
 800a230:	300c      	adds	r0, #12
 800a232:	f7fe fca6 	bl	8008b82 <memcpy>
 800a236:	4621      	mov	r1, r4
 800a238:	4638      	mov	r0, r7
 800a23a:	f7ff ffa5 	bl	800a188 <_Bfree>
 800a23e:	4644      	mov	r4, r8
 800a240:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a244:	3501      	adds	r5, #1
 800a246:	615e      	str	r6, [r3, #20]
 800a248:	6125      	str	r5, [r4, #16]
 800a24a:	4620      	mov	r0, r4
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	0800b8af 	.word	0x0800b8af
 800a254:	0800b920 	.word	0x0800b920

0800a258 <__s2b>:
 800a258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a25c:	460c      	mov	r4, r1
 800a25e:	4615      	mov	r5, r2
 800a260:	461f      	mov	r7, r3
 800a262:	2209      	movs	r2, #9
 800a264:	3308      	adds	r3, #8
 800a266:	4606      	mov	r6, r0
 800a268:	fb93 f3f2 	sdiv	r3, r3, r2
 800a26c:	2100      	movs	r1, #0
 800a26e:	2201      	movs	r2, #1
 800a270:	429a      	cmp	r2, r3
 800a272:	db09      	blt.n	800a288 <__s2b+0x30>
 800a274:	4630      	mov	r0, r6
 800a276:	f7ff ff47 	bl	800a108 <_Balloc>
 800a27a:	b940      	cbnz	r0, 800a28e <__s2b+0x36>
 800a27c:	4602      	mov	r2, r0
 800a27e:	4b19      	ldr	r3, [pc, #100]	@ (800a2e4 <__s2b+0x8c>)
 800a280:	4819      	ldr	r0, [pc, #100]	@ (800a2e8 <__s2b+0x90>)
 800a282:	21d3      	movs	r1, #211	@ 0xd3
 800a284:	f001 f866 	bl	800b354 <__assert_func>
 800a288:	0052      	lsls	r2, r2, #1
 800a28a:	3101      	adds	r1, #1
 800a28c:	e7f0      	b.n	800a270 <__s2b+0x18>
 800a28e:	9b08      	ldr	r3, [sp, #32]
 800a290:	6143      	str	r3, [r0, #20]
 800a292:	2d09      	cmp	r5, #9
 800a294:	f04f 0301 	mov.w	r3, #1
 800a298:	6103      	str	r3, [r0, #16]
 800a29a:	dd16      	ble.n	800a2ca <__s2b+0x72>
 800a29c:	f104 0909 	add.w	r9, r4, #9
 800a2a0:	46c8      	mov	r8, r9
 800a2a2:	442c      	add	r4, r5
 800a2a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a2a8:	4601      	mov	r1, r0
 800a2aa:	3b30      	subs	r3, #48	@ 0x30
 800a2ac:	220a      	movs	r2, #10
 800a2ae:	4630      	mov	r0, r6
 800a2b0:	f7ff ff8c 	bl	800a1cc <__multadd>
 800a2b4:	45a0      	cmp	r8, r4
 800a2b6:	d1f5      	bne.n	800a2a4 <__s2b+0x4c>
 800a2b8:	f1a5 0408 	sub.w	r4, r5, #8
 800a2bc:	444c      	add	r4, r9
 800a2be:	1b2d      	subs	r5, r5, r4
 800a2c0:	1963      	adds	r3, r4, r5
 800a2c2:	42bb      	cmp	r3, r7
 800a2c4:	db04      	blt.n	800a2d0 <__s2b+0x78>
 800a2c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	340a      	adds	r4, #10
 800a2cc:	2509      	movs	r5, #9
 800a2ce:	e7f6      	b.n	800a2be <__s2b+0x66>
 800a2d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	3b30      	subs	r3, #48	@ 0x30
 800a2d8:	220a      	movs	r2, #10
 800a2da:	4630      	mov	r0, r6
 800a2dc:	f7ff ff76 	bl	800a1cc <__multadd>
 800a2e0:	e7ee      	b.n	800a2c0 <__s2b+0x68>
 800a2e2:	bf00      	nop
 800a2e4:	0800b8af 	.word	0x0800b8af
 800a2e8:	0800b920 	.word	0x0800b920

0800a2ec <__hi0bits>:
 800a2ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	bf36      	itet	cc
 800a2f4:	0403      	lslcc	r3, r0, #16
 800a2f6:	2000      	movcs	r0, #0
 800a2f8:	2010      	movcc	r0, #16
 800a2fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a2fe:	bf3c      	itt	cc
 800a300:	021b      	lslcc	r3, r3, #8
 800a302:	3008      	addcc	r0, #8
 800a304:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a308:	bf3c      	itt	cc
 800a30a:	011b      	lslcc	r3, r3, #4
 800a30c:	3004      	addcc	r0, #4
 800a30e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a312:	bf3c      	itt	cc
 800a314:	009b      	lslcc	r3, r3, #2
 800a316:	3002      	addcc	r0, #2
 800a318:	2b00      	cmp	r3, #0
 800a31a:	db05      	blt.n	800a328 <__hi0bits+0x3c>
 800a31c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a320:	f100 0001 	add.w	r0, r0, #1
 800a324:	bf08      	it	eq
 800a326:	2020      	moveq	r0, #32
 800a328:	4770      	bx	lr

0800a32a <__lo0bits>:
 800a32a:	6803      	ldr	r3, [r0, #0]
 800a32c:	4602      	mov	r2, r0
 800a32e:	f013 0007 	ands.w	r0, r3, #7
 800a332:	d00b      	beq.n	800a34c <__lo0bits+0x22>
 800a334:	07d9      	lsls	r1, r3, #31
 800a336:	d421      	bmi.n	800a37c <__lo0bits+0x52>
 800a338:	0798      	lsls	r0, r3, #30
 800a33a:	bf49      	itett	mi
 800a33c:	085b      	lsrmi	r3, r3, #1
 800a33e:	089b      	lsrpl	r3, r3, #2
 800a340:	2001      	movmi	r0, #1
 800a342:	6013      	strmi	r3, [r2, #0]
 800a344:	bf5c      	itt	pl
 800a346:	6013      	strpl	r3, [r2, #0]
 800a348:	2002      	movpl	r0, #2
 800a34a:	4770      	bx	lr
 800a34c:	b299      	uxth	r1, r3
 800a34e:	b909      	cbnz	r1, 800a354 <__lo0bits+0x2a>
 800a350:	0c1b      	lsrs	r3, r3, #16
 800a352:	2010      	movs	r0, #16
 800a354:	b2d9      	uxtb	r1, r3
 800a356:	b909      	cbnz	r1, 800a35c <__lo0bits+0x32>
 800a358:	3008      	adds	r0, #8
 800a35a:	0a1b      	lsrs	r3, r3, #8
 800a35c:	0719      	lsls	r1, r3, #28
 800a35e:	bf04      	itt	eq
 800a360:	091b      	lsreq	r3, r3, #4
 800a362:	3004      	addeq	r0, #4
 800a364:	0799      	lsls	r1, r3, #30
 800a366:	bf04      	itt	eq
 800a368:	089b      	lsreq	r3, r3, #2
 800a36a:	3002      	addeq	r0, #2
 800a36c:	07d9      	lsls	r1, r3, #31
 800a36e:	d403      	bmi.n	800a378 <__lo0bits+0x4e>
 800a370:	085b      	lsrs	r3, r3, #1
 800a372:	f100 0001 	add.w	r0, r0, #1
 800a376:	d003      	beq.n	800a380 <__lo0bits+0x56>
 800a378:	6013      	str	r3, [r2, #0]
 800a37a:	4770      	bx	lr
 800a37c:	2000      	movs	r0, #0
 800a37e:	4770      	bx	lr
 800a380:	2020      	movs	r0, #32
 800a382:	4770      	bx	lr

0800a384 <__i2b>:
 800a384:	b510      	push	{r4, lr}
 800a386:	460c      	mov	r4, r1
 800a388:	2101      	movs	r1, #1
 800a38a:	f7ff febd 	bl	800a108 <_Balloc>
 800a38e:	4602      	mov	r2, r0
 800a390:	b928      	cbnz	r0, 800a39e <__i2b+0x1a>
 800a392:	4b05      	ldr	r3, [pc, #20]	@ (800a3a8 <__i2b+0x24>)
 800a394:	4805      	ldr	r0, [pc, #20]	@ (800a3ac <__i2b+0x28>)
 800a396:	f240 1145 	movw	r1, #325	@ 0x145
 800a39a:	f000 ffdb 	bl	800b354 <__assert_func>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	6144      	str	r4, [r0, #20]
 800a3a2:	6103      	str	r3, [r0, #16]
 800a3a4:	bd10      	pop	{r4, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0800b8af 	.word	0x0800b8af
 800a3ac:	0800b920 	.word	0x0800b920

0800a3b0 <__multiply>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	4617      	mov	r7, r2
 800a3b6:	690a      	ldr	r2, [r1, #16]
 800a3b8:	693b      	ldr	r3, [r7, #16]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	bfa8      	it	ge
 800a3be:	463b      	movge	r3, r7
 800a3c0:	4689      	mov	r9, r1
 800a3c2:	bfa4      	itt	ge
 800a3c4:	460f      	movge	r7, r1
 800a3c6:	4699      	movge	r9, r3
 800a3c8:	693d      	ldr	r5, [r7, #16]
 800a3ca:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	eb05 060a 	add.w	r6, r5, sl
 800a3d6:	42b3      	cmp	r3, r6
 800a3d8:	b085      	sub	sp, #20
 800a3da:	bfb8      	it	lt
 800a3dc:	3101      	addlt	r1, #1
 800a3de:	f7ff fe93 	bl	800a108 <_Balloc>
 800a3e2:	b930      	cbnz	r0, 800a3f2 <__multiply+0x42>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	4b41      	ldr	r3, [pc, #260]	@ (800a4ec <__multiply+0x13c>)
 800a3e8:	4841      	ldr	r0, [pc, #260]	@ (800a4f0 <__multiply+0x140>)
 800a3ea:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a3ee:	f000 ffb1 	bl	800b354 <__assert_func>
 800a3f2:	f100 0414 	add.w	r4, r0, #20
 800a3f6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a3fa:	4623      	mov	r3, r4
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	4573      	cmp	r3, lr
 800a400:	d320      	bcc.n	800a444 <__multiply+0x94>
 800a402:	f107 0814 	add.w	r8, r7, #20
 800a406:	f109 0114 	add.w	r1, r9, #20
 800a40a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a40e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a412:	9302      	str	r3, [sp, #8]
 800a414:	1beb      	subs	r3, r5, r7
 800a416:	3b15      	subs	r3, #21
 800a418:	f023 0303 	bic.w	r3, r3, #3
 800a41c:	3304      	adds	r3, #4
 800a41e:	3715      	adds	r7, #21
 800a420:	42bd      	cmp	r5, r7
 800a422:	bf38      	it	cc
 800a424:	2304      	movcc	r3, #4
 800a426:	9301      	str	r3, [sp, #4]
 800a428:	9b02      	ldr	r3, [sp, #8]
 800a42a:	9103      	str	r1, [sp, #12]
 800a42c:	428b      	cmp	r3, r1
 800a42e:	d80c      	bhi.n	800a44a <__multiply+0x9a>
 800a430:	2e00      	cmp	r6, #0
 800a432:	dd03      	ble.n	800a43c <__multiply+0x8c>
 800a434:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d055      	beq.n	800a4e8 <__multiply+0x138>
 800a43c:	6106      	str	r6, [r0, #16]
 800a43e:	b005      	add	sp, #20
 800a440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a444:	f843 2b04 	str.w	r2, [r3], #4
 800a448:	e7d9      	b.n	800a3fe <__multiply+0x4e>
 800a44a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a44e:	f1ba 0f00 	cmp.w	sl, #0
 800a452:	d01f      	beq.n	800a494 <__multiply+0xe4>
 800a454:	46c4      	mov	ip, r8
 800a456:	46a1      	mov	r9, r4
 800a458:	2700      	movs	r7, #0
 800a45a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a45e:	f8d9 3000 	ldr.w	r3, [r9]
 800a462:	fa1f fb82 	uxth.w	fp, r2
 800a466:	b29b      	uxth	r3, r3
 800a468:	fb0a 330b 	mla	r3, sl, fp, r3
 800a46c:	443b      	add	r3, r7
 800a46e:	f8d9 7000 	ldr.w	r7, [r9]
 800a472:	0c12      	lsrs	r2, r2, #16
 800a474:	0c3f      	lsrs	r7, r7, #16
 800a476:	fb0a 7202 	mla	r2, sl, r2, r7
 800a47a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a47e:	b29b      	uxth	r3, r3
 800a480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a484:	4565      	cmp	r5, ip
 800a486:	f849 3b04 	str.w	r3, [r9], #4
 800a48a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a48e:	d8e4      	bhi.n	800a45a <__multiply+0xaa>
 800a490:	9b01      	ldr	r3, [sp, #4]
 800a492:	50e7      	str	r7, [r4, r3]
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a49a:	3104      	adds	r1, #4
 800a49c:	f1b9 0f00 	cmp.w	r9, #0
 800a4a0:	d020      	beq.n	800a4e4 <__multiply+0x134>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	4647      	mov	r7, r8
 800a4a6:	46a4      	mov	ip, r4
 800a4a8:	f04f 0a00 	mov.w	sl, #0
 800a4ac:	f8b7 b000 	ldrh.w	fp, [r7]
 800a4b0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a4b4:	fb09 220b 	mla	r2, r9, fp, r2
 800a4b8:	4452      	add	r2, sl
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4c0:	f84c 3b04 	str.w	r3, [ip], #4
 800a4c4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a4c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4cc:	f8bc 3000 	ldrh.w	r3, [ip]
 800a4d0:	fb09 330a 	mla	r3, r9, sl, r3
 800a4d4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a4d8:	42bd      	cmp	r5, r7
 800a4da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4de:	d8e5      	bhi.n	800a4ac <__multiply+0xfc>
 800a4e0:	9a01      	ldr	r2, [sp, #4]
 800a4e2:	50a3      	str	r3, [r4, r2]
 800a4e4:	3404      	adds	r4, #4
 800a4e6:	e79f      	b.n	800a428 <__multiply+0x78>
 800a4e8:	3e01      	subs	r6, #1
 800a4ea:	e7a1      	b.n	800a430 <__multiply+0x80>
 800a4ec:	0800b8af 	.word	0x0800b8af
 800a4f0:	0800b920 	.word	0x0800b920

0800a4f4 <__pow5mult>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	f012 0203 	ands.w	r2, r2, #3
 800a4fe:	4607      	mov	r7, r0
 800a500:	460e      	mov	r6, r1
 800a502:	d007      	beq.n	800a514 <__pow5mult+0x20>
 800a504:	4c25      	ldr	r4, [pc, #148]	@ (800a59c <__pow5mult+0xa8>)
 800a506:	3a01      	subs	r2, #1
 800a508:	2300      	movs	r3, #0
 800a50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a50e:	f7ff fe5d 	bl	800a1cc <__multadd>
 800a512:	4606      	mov	r6, r0
 800a514:	10ad      	asrs	r5, r5, #2
 800a516:	d03d      	beq.n	800a594 <__pow5mult+0xa0>
 800a518:	69fc      	ldr	r4, [r7, #28]
 800a51a:	b97c      	cbnz	r4, 800a53c <__pow5mult+0x48>
 800a51c:	2010      	movs	r0, #16
 800a51e:	f7ff fd2b 	bl	8009f78 <malloc>
 800a522:	4602      	mov	r2, r0
 800a524:	61f8      	str	r0, [r7, #28]
 800a526:	b928      	cbnz	r0, 800a534 <__pow5mult+0x40>
 800a528:	4b1d      	ldr	r3, [pc, #116]	@ (800a5a0 <__pow5mult+0xac>)
 800a52a:	481e      	ldr	r0, [pc, #120]	@ (800a5a4 <__pow5mult+0xb0>)
 800a52c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a530:	f000 ff10 	bl	800b354 <__assert_func>
 800a534:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a538:	6004      	str	r4, [r0, #0]
 800a53a:	60c4      	str	r4, [r0, #12]
 800a53c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a540:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a544:	b94c      	cbnz	r4, 800a55a <__pow5mult+0x66>
 800a546:	f240 2171 	movw	r1, #625	@ 0x271
 800a54a:	4638      	mov	r0, r7
 800a54c:	f7ff ff1a 	bl	800a384 <__i2b>
 800a550:	2300      	movs	r3, #0
 800a552:	f8c8 0008 	str.w	r0, [r8, #8]
 800a556:	4604      	mov	r4, r0
 800a558:	6003      	str	r3, [r0, #0]
 800a55a:	f04f 0900 	mov.w	r9, #0
 800a55e:	07eb      	lsls	r3, r5, #31
 800a560:	d50a      	bpl.n	800a578 <__pow5mult+0x84>
 800a562:	4631      	mov	r1, r6
 800a564:	4622      	mov	r2, r4
 800a566:	4638      	mov	r0, r7
 800a568:	f7ff ff22 	bl	800a3b0 <__multiply>
 800a56c:	4631      	mov	r1, r6
 800a56e:	4680      	mov	r8, r0
 800a570:	4638      	mov	r0, r7
 800a572:	f7ff fe09 	bl	800a188 <_Bfree>
 800a576:	4646      	mov	r6, r8
 800a578:	106d      	asrs	r5, r5, #1
 800a57a:	d00b      	beq.n	800a594 <__pow5mult+0xa0>
 800a57c:	6820      	ldr	r0, [r4, #0]
 800a57e:	b938      	cbnz	r0, 800a590 <__pow5mult+0x9c>
 800a580:	4622      	mov	r2, r4
 800a582:	4621      	mov	r1, r4
 800a584:	4638      	mov	r0, r7
 800a586:	f7ff ff13 	bl	800a3b0 <__multiply>
 800a58a:	6020      	str	r0, [r4, #0]
 800a58c:	f8c0 9000 	str.w	r9, [r0]
 800a590:	4604      	mov	r4, r0
 800a592:	e7e4      	b.n	800a55e <__pow5mult+0x6a>
 800a594:	4630      	mov	r0, r6
 800a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59a:	bf00      	nop
 800a59c:	0800ba18 	.word	0x0800ba18
 800a5a0:	0800b840 	.word	0x0800b840
 800a5a4:	0800b920 	.word	0x0800b920

0800a5a8 <__lshift>:
 800a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ac:	460c      	mov	r4, r1
 800a5ae:	6849      	ldr	r1, [r1, #4]
 800a5b0:	6923      	ldr	r3, [r4, #16]
 800a5b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5b6:	68a3      	ldr	r3, [r4, #8]
 800a5b8:	4607      	mov	r7, r0
 800a5ba:	4691      	mov	r9, r2
 800a5bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5c0:	f108 0601 	add.w	r6, r8, #1
 800a5c4:	42b3      	cmp	r3, r6
 800a5c6:	db0b      	blt.n	800a5e0 <__lshift+0x38>
 800a5c8:	4638      	mov	r0, r7
 800a5ca:	f7ff fd9d 	bl	800a108 <_Balloc>
 800a5ce:	4605      	mov	r5, r0
 800a5d0:	b948      	cbnz	r0, 800a5e6 <__lshift+0x3e>
 800a5d2:	4602      	mov	r2, r0
 800a5d4:	4b28      	ldr	r3, [pc, #160]	@ (800a678 <__lshift+0xd0>)
 800a5d6:	4829      	ldr	r0, [pc, #164]	@ (800a67c <__lshift+0xd4>)
 800a5d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a5dc:	f000 feba 	bl	800b354 <__assert_func>
 800a5e0:	3101      	adds	r1, #1
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	e7ee      	b.n	800a5c4 <__lshift+0x1c>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f100 0114 	add.w	r1, r0, #20
 800a5ec:	f100 0210 	add.w	r2, r0, #16
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	4553      	cmp	r3, sl
 800a5f4:	db33      	blt.n	800a65e <__lshift+0xb6>
 800a5f6:	6920      	ldr	r0, [r4, #16]
 800a5f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5fc:	f104 0314 	add.w	r3, r4, #20
 800a600:	f019 091f 	ands.w	r9, r9, #31
 800a604:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a608:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a60c:	d02b      	beq.n	800a666 <__lshift+0xbe>
 800a60e:	f1c9 0e20 	rsb	lr, r9, #32
 800a612:	468a      	mov	sl, r1
 800a614:	2200      	movs	r2, #0
 800a616:	6818      	ldr	r0, [r3, #0]
 800a618:	fa00 f009 	lsl.w	r0, r0, r9
 800a61c:	4310      	orrs	r0, r2
 800a61e:	f84a 0b04 	str.w	r0, [sl], #4
 800a622:	f853 2b04 	ldr.w	r2, [r3], #4
 800a626:	459c      	cmp	ip, r3
 800a628:	fa22 f20e 	lsr.w	r2, r2, lr
 800a62c:	d8f3      	bhi.n	800a616 <__lshift+0x6e>
 800a62e:	ebac 0304 	sub.w	r3, ip, r4
 800a632:	3b15      	subs	r3, #21
 800a634:	f023 0303 	bic.w	r3, r3, #3
 800a638:	3304      	adds	r3, #4
 800a63a:	f104 0015 	add.w	r0, r4, #21
 800a63e:	4560      	cmp	r0, ip
 800a640:	bf88      	it	hi
 800a642:	2304      	movhi	r3, #4
 800a644:	50ca      	str	r2, [r1, r3]
 800a646:	b10a      	cbz	r2, 800a64c <__lshift+0xa4>
 800a648:	f108 0602 	add.w	r6, r8, #2
 800a64c:	3e01      	subs	r6, #1
 800a64e:	4638      	mov	r0, r7
 800a650:	612e      	str	r6, [r5, #16]
 800a652:	4621      	mov	r1, r4
 800a654:	f7ff fd98 	bl	800a188 <_Bfree>
 800a658:	4628      	mov	r0, r5
 800a65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a65e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a662:	3301      	adds	r3, #1
 800a664:	e7c5      	b.n	800a5f2 <__lshift+0x4a>
 800a666:	3904      	subs	r1, #4
 800a668:	f853 2b04 	ldr.w	r2, [r3], #4
 800a66c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a670:	459c      	cmp	ip, r3
 800a672:	d8f9      	bhi.n	800a668 <__lshift+0xc0>
 800a674:	e7ea      	b.n	800a64c <__lshift+0xa4>
 800a676:	bf00      	nop
 800a678:	0800b8af 	.word	0x0800b8af
 800a67c:	0800b920 	.word	0x0800b920

0800a680 <__mcmp>:
 800a680:	690a      	ldr	r2, [r1, #16]
 800a682:	4603      	mov	r3, r0
 800a684:	6900      	ldr	r0, [r0, #16]
 800a686:	1a80      	subs	r0, r0, r2
 800a688:	b530      	push	{r4, r5, lr}
 800a68a:	d10e      	bne.n	800a6aa <__mcmp+0x2a>
 800a68c:	3314      	adds	r3, #20
 800a68e:	3114      	adds	r1, #20
 800a690:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a694:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a698:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a69c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a6a0:	4295      	cmp	r5, r2
 800a6a2:	d003      	beq.n	800a6ac <__mcmp+0x2c>
 800a6a4:	d205      	bcs.n	800a6b2 <__mcmp+0x32>
 800a6a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6aa:	bd30      	pop	{r4, r5, pc}
 800a6ac:	42a3      	cmp	r3, r4
 800a6ae:	d3f3      	bcc.n	800a698 <__mcmp+0x18>
 800a6b0:	e7fb      	b.n	800a6aa <__mcmp+0x2a>
 800a6b2:	2001      	movs	r0, #1
 800a6b4:	e7f9      	b.n	800a6aa <__mcmp+0x2a>
	...

0800a6b8 <__mdiff>:
 800a6b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	4689      	mov	r9, r1
 800a6be:	4606      	mov	r6, r0
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	4648      	mov	r0, r9
 800a6c4:	4614      	mov	r4, r2
 800a6c6:	f7ff ffdb 	bl	800a680 <__mcmp>
 800a6ca:	1e05      	subs	r5, r0, #0
 800a6cc:	d112      	bne.n	800a6f4 <__mdiff+0x3c>
 800a6ce:	4629      	mov	r1, r5
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7ff fd19 	bl	800a108 <_Balloc>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	b928      	cbnz	r0, 800a6e6 <__mdiff+0x2e>
 800a6da:	4b3f      	ldr	r3, [pc, #252]	@ (800a7d8 <__mdiff+0x120>)
 800a6dc:	f240 2137 	movw	r1, #567	@ 0x237
 800a6e0:	483e      	ldr	r0, [pc, #248]	@ (800a7dc <__mdiff+0x124>)
 800a6e2:	f000 fe37 	bl	800b354 <__assert_func>
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6ec:	4610      	mov	r0, r2
 800a6ee:	b003      	add	sp, #12
 800a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6f4:	bfbc      	itt	lt
 800a6f6:	464b      	movlt	r3, r9
 800a6f8:	46a1      	movlt	r9, r4
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a700:	bfba      	itte	lt
 800a702:	461c      	movlt	r4, r3
 800a704:	2501      	movlt	r5, #1
 800a706:	2500      	movge	r5, #0
 800a708:	f7ff fcfe 	bl	800a108 <_Balloc>
 800a70c:	4602      	mov	r2, r0
 800a70e:	b918      	cbnz	r0, 800a718 <__mdiff+0x60>
 800a710:	4b31      	ldr	r3, [pc, #196]	@ (800a7d8 <__mdiff+0x120>)
 800a712:	f240 2145 	movw	r1, #581	@ 0x245
 800a716:	e7e3      	b.n	800a6e0 <__mdiff+0x28>
 800a718:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a71c:	6926      	ldr	r6, [r4, #16]
 800a71e:	60c5      	str	r5, [r0, #12]
 800a720:	f109 0310 	add.w	r3, r9, #16
 800a724:	f109 0514 	add.w	r5, r9, #20
 800a728:	f104 0e14 	add.w	lr, r4, #20
 800a72c:	f100 0b14 	add.w	fp, r0, #20
 800a730:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a734:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a738:	9301      	str	r3, [sp, #4]
 800a73a:	46d9      	mov	r9, fp
 800a73c:	f04f 0c00 	mov.w	ip, #0
 800a740:	9b01      	ldr	r3, [sp, #4]
 800a742:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a746:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a74a:	9301      	str	r3, [sp, #4]
 800a74c:	fa1f f38a 	uxth.w	r3, sl
 800a750:	4619      	mov	r1, r3
 800a752:	b283      	uxth	r3, r0
 800a754:	1acb      	subs	r3, r1, r3
 800a756:	0c00      	lsrs	r0, r0, #16
 800a758:	4463      	add	r3, ip
 800a75a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a75e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a762:	b29b      	uxth	r3, r3
 800a764:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a768:	4576      	cmp	r6, lr
 800a76a:	f849 3b04 	str.w	r3, [r9], #4
 800a76e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a772:	d8e5      	bhi.n	800a740 <__mdiff+0x88>
 800a774:	1b33      	subs	r3, r6, r4
 800a776:	3b15      	subs	r3, #21
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3415      	adds	r4, #21
 800a77e:	3304      	adds	r3, #4
 800a780:	42a6      	cmp	r6, r4
 800a782:	bf38      	it	cc
 800a784:	2304      	movcc	r3, #4
 800a786:	441d      	add	r5, r3
 800a788:	445b      	add	r3, fp
 800a78a:	461e      	mov	r6, r3
 800a78c:	462c      	mov	r4, r5
 800a78e:	4544      	cmp	r4, r8
 800a790:	d30e      	bcc.n	800a7b0 <__mdiff+0xf8>
 800a792:	f108 0103 	add.w	r1, r8, #3
 800a796:	1b49      	subs	r1, r1, r5
 800a798:	f021 0103 	bic.w	r1, r1, #3
 800a79c:	3d03      	subs	r5, #3
 800a79e:	45a8      	cmp	r8, r5
 800a7a0:	bf38      	it	cc
 800a7a2:	2100      	movcc	r1, #0
 800a7a4:	440b      	add	r3, r1
 800a7a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a7aa:	b191      	cbz	r1, 800a7d2 <__mdiff+0x11a>
 800a7ac:	6117      	str	r7, [r2, #16]
 800a7ae:	e79d      	b.n	800a6ec <__mdiff+0x34>
 800a7b0:	f854 1b04 	ldr.w	r1, [r4], #4
 800a7b4:	46e6      	mov	lr, ip
 800a7b6:	0c08      	lsrs	r0, r1, #16
 800a7b8:	fa1c fc81 	uxtah	ip, ip, r1
 800a7bc:	4471      	add	r1, lr
 800a7be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a7c2:	b289      	uxth	r1, r1
 800a7c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a7c8:	f846 1b04 	str.w	r1, [r6], #4
 800a7cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a7d0:	e7dd      	b.n	800a78e <__mdiff+0xd6>
 800a7d2:	3f01      	subs	r7, #1
 800a7d4:	e7e7      	b.n	800a7a6 <__mdiff+0xee>
 800a7d6:	bf00      	nop
 800a7d8:	0800b8af 	.word	0x0800b8af
 800a7dc:	0800b920 	.word	0x0800b920

0800a7e0 <__ulp>:
 800a7e0:	b082      	sub	sp, #8
 800a7e2:	ed8d 0b00 	vstr	d0, [sp]
 800a7e6:	9a01      	ldr	r2, [sp, #4]
 800a7e8:	4b0f      	ldr	r3, [pc, #60]	@ (800a828 <__ulp+0x48>)
 800a7ea:	4013      	ands	r3, r2
 800a7ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dc08      	bgt.n	800a806 <__ulp+0x26>
 800a7f4:	425b      	negs	r3, r3
 800a7f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a7fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a7fe:	da04      	bge.n	800a80a <__ulp+0x2a>
 800a800:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a804:	4113      	asrs	r3, r2
 800a806:	2200      	movs	r2, #0
 800a808:	e008      	b.n	800a81c <__ulp+0x3c>
 800a80a:	f1a2 0314 	sub.w	r3, r2, #20
 800a80e:	2b1e      	cmp	r3, #30
 800a810:	bfda      	itte	le
 800a812:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a816:	40da      	lsrle	r2, r3
 800a818:	2201      	movgt	r2, #1
 800a81a:	2300      	movs	r3, #0
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	ec41 0b10 	vmov	d0, r0, r1
 800a824:	b002      	add	sp, #8
 800a826:	4770      	bx	lr
 800a828:	7ff00000 	.word	0x7ff00000

0800a82c <__b2d>:
 800a82c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a830:	6906      	ldr	r6, [r0, #16]
 800a832:	f100 0814 	add.w	r8, r0, #20
 800a836:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a83a:	1f37      	subs	r7, r6, #4
 800a83c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a840:	4610      	mov	r0, r2
 800a842:	f7ff fd53 	bl	800a2ec <__hi0bits>
 800a846:	f1c0 0320 	rsb	r3, r0, #32
 800a84a:	280a      	cmp	r0, #10
 800a84c:	600b      	str	r3, [r1, #0]
 800a84e:	491b      	ldr	r1, [pc, #108]	@ (800a8bc <__b2d+0x90>)
 800a850:	dc15      	bgt.n	800a87e <__b2d+0x52>
 800a852:	f1c0 0c0b 	rsb	ip, r0, #11
 800a856:	fa22 f30c 	lsr.w	r3, r2, ip
 800a85a:	45b8      	cmp	r8, r7
 800a85c:	ea43 0501 	orr.w	r5, r3, r1
 800a860:	bf34      	ite	cc
 800a862:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a866:	2300      	movcs	r3, #0
 800a868:	3015      	adds	r0, #21
 800a86a:	fa02 f000 	lsl.w	r0, r2, r0
 800a86e:	fa23 f30c 	lsr.w	r3, r3, ip
 800a872:	4303      	orrs	r3, r0
 800a874:	461c      	mov	r4, r3
 800a876:	ec45 4b10 	vmov	d0, r4, r5
 800a87a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a87e:	45b8      	cmp	r8, r7
 800a880:	bf3a      	itte	cc
 800a882:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a886:	f1a6 0708 	subcc.w	r7, r6, #8
 800a88a:	2300      	movcs	r3, #0
 800a88c:	380b      	subs	r0, #11
 800a88e:	d012      	beq.n	800a8b6 <__b2d+0x8a>
 800a890:	f1c0 0120 	rsb	r1, r0, #32
 800a894:	fa23 f401 	lsr.w	r4, r3, r1
 800a898:	4082      	lsls	r2, r0
 800a89a:	4322      	orrs	r2, r4
 800a89c:	4547      	cmp	r7, r8
 800a89e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a8a2:	bf8c      	ite	hi
 800a8a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a8a8:	2200      	movls	r2, #0
 800a8aa:	4083      	lsls	r3, r0
 800a8ac:	40ca      	lsrs	r2, r1
 800a8ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	e7de      	b.n	800a874 <__b2d+0x48>
 800a8b6:	ea42 0501 	orr.w	r5, r2, r1
 800a8ba:	e7db      	b.n	800a874 <__b2d+0x48>
 800a8bc:	3ff00000 	.word	0x3ff00000

0800a8c0 <__d2b>:
 800a8c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8c4:	460f      	mov	r7, r1
 800a8c6:	2101      	movs	r1, #1
 800a8c8:	ec59 8b10 	vmov	r8, r9, d0
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	f7ff fc1b 	bl	800a108 <_Balloc>
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	b930      	cbnz	r0, 800a8e4 <__d2b+0x24>
 800a8d6:	4602      	mov	r2, r0
 800a8d8:	4b23      	ldr	r3, [pc, #140]	@ (800a968 <__d2b+0xa8>)
 800a8da:	4824      	ldr	r0, [pc, #144]	@ (800a96c <__d2b+0xac>)
 800a8dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800a8e0:	f000 fd38 	bl	800b354 <__assert_func>
 800a8e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a8e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a8ec:	b10d      	cbz	r5, 800a8f2 <__d2b+0x32>
 800a8ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a8f2:	9301      	str	r3, [sp, #4]
 800a8f4:	f1b8 0300 	subs.w	r3, r8, #0
 800a8f8:	d023      	beq.n	800a942 <__d2b+0x82>
 800a8fa:	4668      	mov	r0, sp
 800a8fc:	9300      	str	r3, [sp, #0]
 800a8fe:	f7ff fd14 	bl	800a32a <__lo0bits>
 800a902:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a906:	b1d0      	cbz	r0, 800a93e <__d2b+0x7e>
 800a908:	f1c0 0320 	rsb	r3, r0, #32
 800a90c:	fa02 f303 	lsl.w	r3, r2, r3
 800a910:	430b      	orrs	r3, r1
 800a912:	40c2      	lsrs	r2, r0
 800a914:	6163      	str	r3, [r4, #20]
 800a916:	9201      	str	r2, [sp, #4]
 800a918:	9b01      	ldr	r3, [sp, #4]
 800a91a:	61a3      	str	r3, [r4, #24]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	bf0c      	ite	eq
 800a920:	2201      	moveq	r2, #1
 800a922:	2202      	movne	r2, #2
 800a924:	6122      	str	r2, [r4, #16]
 800a926:	b1a5      	cbz	r5, 800a952 <__d2b+0x92>
 800a928:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a92c:	4405      	add	r5, r0
 800a92e:	603d      	str	r5, [r7, #0]
 800a930:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a934:	6030      	str	r0, [r6, #0]
 800a936:	4620      	mov	r0, r4
 800a938:	b003      	add	sp, #12
 800a93a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a93e:	6161      	str	r1, [r4, #20]
 800a940:	e7ea      	b.n	800a918 <__d2b+0x58>
 800a942:	a801      	add	r0, sp, #4
 800a944:	f7ff fcf1 	bl	800a32a <__lo0bits>
 800a948:	9b01      	ldr	r3, [sp, #4]
 800a94a:	6163      	str	r3, [r4, #20]
 800a94c:	3020      	adds	r0, #32
 800a94e:	2201      	movs	r2, #1
 800a950:	e7e8      	b.n	800a924 <__d2b+0x64>
 800a952:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a956:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a95a:	6038      	str	r0, [r7, #0]
 800a95c:	6918      	ldr	r0, [r3, #16]
 800a95e:	f7ff fcc5 	bl	800a2ec <__hi0bits>
 800a962:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a966:	e7e5      	b.n	800a934 <__d2b+0x74>
 800a968:	0800b8af 	.word	0x0800b8af
 800a96c:	0800b920 	.word	0x0800b920

0800a970 <__ratio>:
 800a970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a974:	b085      	sub	sp, #20
 800a976:	e9cd 1000 	strd	r1, r0, [sp]
 800a97a:	a902      	add	r1, sp, #8
 800a97c:	f7ff ff56 	bl	800a82c <__b2d>
 800a980:	9800      	ldr	r0, [sp, #0]
 800a982:	a903      	add	r1, sp, #12
 800a984:	ec55 4b10 	vmov	r4, r5, d0
 800a988:	f7ff ff50 	bl	800a82c <__b2d>
 800a98c:	9b01      	ldr	r3, [sp, #4]
 800a98e:	6919      	ldr	r1, [r3, #16]
 800a990:	9b00      	ldr	r3, [sp, #0]
 800a992:	691b      	ldr	r3, [r3, #16]
 800a994:	1ac9      	subs	r1, r1, r3
 800a996:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a99a:	1a9b      	subs	r3, r3, r2
 800a99c:	ec5b ab10 	vmov	sl, fp, d0
 800a9a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	bfce      	itee	gt
 800a9a8:	462a      	movgt	r2, r5
 800a9aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9ae:	465a      	movle	r2, fp
 800a9b0:	462f      	mov	r7, r5
 800a9b2:	46d9      	mov	r9, fp
 800a9b4:	bfcc      	ite	gt
 800a9b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a9be:	464b      	mov	r3, r9
 800a9c0:	4652      	mov	r2, sl
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	4639      	mov	r1, r7
 800a9c6:	f7f5 ff69 	bl	800089c <__aeabi_ddiv>
 800a9ca:	ec41 0b10 	vmov	d0, r0, r1
 800a9ce:	b005      	add	sp, #20
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9d4 <__copybits>:
 800a9d4:	3901      	subs	r1, #1
 800a9d6:	b570      	push	{r4, r5, r6, lr}
 800a9d8:	1149      	asrs	r1, r1, #5
 800a9da:	6914      	ldr	r4, [r2, #16]
 800a9dc:	3101      	adds	r1, #1
 800a9de:	f102 0314 	add.w	r3, r2, #20
 800a9e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a9e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a9ea:	1f05      	subs	r5, r0, #4
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d30c      	bcc.n	800aa0a <__copybits+0x36>
 800a9f0:	1aa3      	subs	r3, r4, r2
 800a9f2:	3b11      	subs	r3, #17
 800a9f4:	f023 0303 	bic.w	r3, r3, #3
 800a9f8:	3211      	adds	r2, #17
 800a9fa:	42a2      	cmp	r2, r4
 800a9fc:	bf88      	it	hi
 800a9fe:	2300      	movhi	r3, #0
 800aa00:	4418      	add	r0, r3
 800aa02:	2300      	movs	r3, #0
 800aa04:	4288      	cmp	r0, r1
 800aa06:	d305      	bcc.n	800aa14 <__copybits+0x40>
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
 800aa0a:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa0e:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa12:	e7eb      	b.n	800a9ec <__copybits+0x18>
 800aa14:	f840 3b04 	str.w	r3, [r0], #4
 800aa18:	e7f4      	b.n	800aa04 <__copybits+0x30>

0800aa1a <__any_on>:
 800aa1a:	f100 0214 	add.w	r2, r0, #20
 800aa1e:	6900      	ldr	r0, [r0, #16]
 800aa20:	114b      	asrs	r3, r1, #5
 800aa22:	4298      	cmp	r0, r3
 800aa24:	b510      	push	{r4, lr}
 800aa26:	db11      	blt.n	800aa4c <__any_on+0x32>
 800aa28:	dd0a      	ble.n	800aa40 <__any_on+0x26>
 800aa2a:	f011 011f 	ands.w	r1, r1, #31
 800aa2e:	d007      	beq.n	800aa40 <__any_on+0x26>
 800aa30:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa34:	fa24 f001 	lsr.w	r0, r4, r1
 800aa38:	fa00 f101 	lsl.w	r1, r0, r1
 800aa3c:	428c      	cmp	r4, r1
 800aa3e:	d10b      	bne.n	800aa58 <__any_on+0x3e>
 800aa40:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d803      	bhi.n	800aa50 <__any_on+0x36>
 800aa48:	2000      	movs	r0, #0
 800aa4a:	bd10      	pop	{r4, pc}
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	e7f7      	b.n	800aa40 <__any_on+0x26>
 800aa50:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa54:	2900      	cmp	r1, #0
 800aa56:	d0f5      	beq.n	800aa44 <__any_on+0x2a>
 800aa58:	2001      	movs	r0, #1
 800aa5a:	e7f6      	b.n	800aa4a <__any_on+0x30>

0800aa5c <_strtol_l.isra.0>:
 800aa5c:	2b24      	cmp	r3, #36	@ 0x24
 800aa5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa62:	4686      	mov	lr, r0
 800aa64:	4690      	mov	r8, r2
 800aa66:	d801      	bhi.n	800aa6c <_strtol_l.isra.0+0x10>
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d106      	bne.n	800aa7a <_strtol_l.isra.0+0x1e>
 800aa6c:	f7fe f85c 	bl	8008b28 <__errno>
 800aa70:	2316      	movs	r3, #22
 800aa72:	6003      	str	r3, [r0, #0]
 800aa74:	2000      	movs	r0, #0
 800aa76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa7a:	4834      	ldr	r0, [pc, #208]	@ (800ab4c <_strtol_l.isra.0+0xf0>)
 800aa7c:	460d      	mov	r5, r1
 800aa7e:	462a      	mov	r2, r5
 800aa80:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa84:	5d06      	ldrb	r6, [r0, r4]
 800aa86:	f016 0608 	ands.w	r6, r6, #8
 800aa8a:	d1f8      	bne.n	800aa7e <_strtol_l.isra.0+0x22>
 800aa8c:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa8e:	d110      	bne.n	800aab2 <_strtol_l.isra.0+0x56>
 800aa90:	782c      	ldrb	r4, [r5, #0]
 800aa92:	2601      	movs	r6, #1
 800aa94:	1c95      	adds	r5, r2, #2
 800aa96:	f033 0210 	bics.w	r2, r3, #16
 800aa9a:	d115      	bne.n	800aac8 <_strtol_l.isra.0+0x6c>
 800aa9c:	2c30      	cmp	r4, #48	@ 0x30
 800aa9e:	d10d      	bne.n	800aabc <_strtol_l.isra.0+0x60>
 800aaa0:	782a      	ldrb	r2, [r5, #0]
 800aaa2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800aaa6:	2a58      	cmp	r2, #88	@ 0x58
 800aaa8:	d108      	bne.n	800aabc <_strtol_l.isra.0+0x60>
 800aaaa:	786c      	ldrb	r4, [r5, #1]
 800aaac:	3502      	adds	r5, #2
 800aaae:	2310      	movs	r3, #16
 800aab0:	e00a      	b.n	800aac8 <_strtol_l.isra.0+0x6c>
 800aab2:	2c2b      	cmp	r4, #43	@ 0x2b
 800aab4:	bf04      	itt	eq
 800aab6:	782c      	ldrbeq	r4, [r5, #0]
 800aab8:	1c95      	addeq	r5, r2, #2
 800aaba:	e7ec      	b.n	800aa96 <_strtol_l.isra.0+0x3a>
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d1f6      	bne.n	800aaae <_strtol_l.isra.0+0x52>
 800aac0:	2c30      	cmp	r4, #48	@ 0x30
 800aac2:	bf14      	ite	ne
 800aac4:	230a      	movne	r3, #10
 800aac6:	2308      	moveq	r3, #8
 800aac8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800aacc:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800aad0:	2200      	movs	r2, #0
 800aad2:	fbbc f9f3 	udiv	r9, ip, r3
 800aad6:	4610      	mov	r0, r2
 800aad8:	fb03 ca19 	mls	sl, r3, r9, ip
 800aadc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800aae0:	2f09      	cmp	r7, #9
 800aae2:	d80f      	bhi.n	800ab04 <_strtol_l.isra.0+0xa8>
 800aae4:	463c      	mov	r4, r7
 800aae6:	42a3      	cmp	r3, r4
 800aae8:	dd1b      	ble.n	800ab22 <_strtol_l.isra.0+0xc6>
 800aaea:	1c57      	adds	r7, r2, #1
 800aaec:	d007      	beq.n	800aafe <_strtol_l.isra.0+0xa2>
 800aaee:	4581      	cmp	r9, r0
 800aaf0:	d314      	bcc.n	800ab1c <_strtol_l.isra.0+0xc0>
 800aaf2:	d101      	bne.n	800aaf8 <_strtol_l.isra.0+0x9c>
 800aaf4:	45a2      	cmp	sl, r4
 800aaf6:	db11      	blt.n	800ab1c <_strtol_l.isra.0+0xc0>
 800aaf8:	fb00 4003 	mla	r0, r0, r3, r4
 800aafc:	2201      	movs	r2, #1
 800aafe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab02:	e7eb      	b.n	800aadc <_strtol_l.isra.0+0x80>
 800ab04:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ab08:	2f19      	cmp	r7, #25
 800ab0a:	d801      	bhi.n	800ab10 <_strtol_l.isra.0+0xb4>
 800ab0c:	3c37      	subs	r4, #55	@ 0x37
 800ab0e:	e7ea      	b.n	800aae6 <_strtol_l.isra.0+0x8a>
 800ab10:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ab14:	2f19      	cmp	r7, #25
 800ab16:	d804      	bhi.n	800ab22 <_strtol_l.isra.0+0xc6>
 800ab18:	3c57      	subs	r4, #87	@ 0x57
 800ab1a:	e7e4      	b.n	800aae6 <_strtol_l.isra.0+0x8a>
 800ab1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ab20:	e7ed      	b.n	800aafe <_strtol_l.isra.0+0xa2>
 800ab22:	1c53      	adds	r3, r2, #1
 800ab24:	d108      	bne.n	800ab38 <_strtol_l.isra.0+0xdc>
 800ab26:	2322      	movs	r3, #34	@ 0x22
 800ab28:	f8ce 3000 	str.w	r3, [lr]
 800ab2c:	4660      	mov	r0, ip
 800ab2e:	f1b8 0f00 	cmp.w	r8, #0
 800ab32:	d0a0      	beq.n	800aa76 <_strtol_l.isra.0+0x1a>
 800ab34:	1e69      	subs	r1, r5, #1
 800ab36:	e006      	b.n	800ab46 <_strtol_l.isra.0+0xea>
 800ab38:	b106      	cbz	r6, 800ab3c <_strtol_l.isra.0+0xe0>
 800ab3a:	4240      	negs	r0, r0
 800ab3c:	f1b8 0f00 	cmp.w	r8, #0
 800ab40:	d099      	beq.n	800aa76 <_strtol_l.isra.0+0x1a>
 800ab42:	2a00      	cmp	r2, #0
 800ab44:	d1f6      	bne.n	800ab34 <_strtol_l.isra.0+0xd8>
 800ab46:	f8c8 1000 	str.w	r1, [r8]
 800ab4a:	e794      	b.n	800aa76 <_strtol_l.isra.0+0x1a>
 800ab4c:	0800bb19 	.word	0x0800bb19

0800ab50 <_strtol_r>:
 800ab50:	f7ff bf84 	b.w	800aa5c <_strtol_l.isra.0>

0800ab54 <__ascii_wctomb>:
 800ab54:	4603      	mov	r3, r0
 800ab56:	4608      	mov	r0, r1
 800ab58:	b141      	cbz	r1, 800ab6c <__ascii_wctomb+0x18>
 800ab5a:	2aff      	cmp	r2, #255	@ 0xff
 800ab5c:	d904      	bls.n	800ab68 <__ascii_wctomb+0x14>
 800ab5e:	228a      	movs	r2, #138	@ 0x8a
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab66:	4770      	bx	lr
 800ab68:	700a      	strb	r2, [r1, #0]
 800ab6a:	2001      	movs	r0, #1
 800ab6c:	4770      	bx	lr

0800ab6e <__ssputs_r>:
 800ab6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab72:	688e      	ldr	r6, [r1, #8]
 800ab74:	461f      	mov	r7, r3
 800ab76:	42be      	cmp	r6, r7
 800ab78:	680b      	ldr	r3, [r1, #0]
 800ab7a:	4682      	mov	sl, r0
 800ab7c:	460c      	mov	r4, r1
 800ab7e:	4690      	mov	r8, r2
 800ab80:	d82d      	bhi.n	800abde <__ssputs_r+0x70>
 800ab82:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab86:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab8a:	d026      	beq.n	800abda <__ssputs_r+0x6c>
 800ab8c:	6965      	ldr	r5, [r4, #20]
 800ab8e:	6909      	ldr	r1, [r1, #16]
 800ab90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab94:	eba3 0901 	sub.w	r9, r3, r1
 800ab98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab9c:	1c7b      	adds	r3, r7, #1
 800ab9e:	444b      	add	r3, r9
 800aba0:	106d      	asrs	r5, r5, #1
 800aba2:	429d      	cmp	r5, r3
 800aba4:	bf38      	it	cc
 800aba6:	461d      	movcc	r5, r3
 800aba8:	0553      	lsls	r3, r2, #21
 800abaa:	d527      	bpl.n	800abfc <__ssputs_r+0x8e>
 800abac:	4629      	mov	r1, r5
 800abae:	f7ff fa0d 	bl	8009fcc <_malloc_r>
 800abb2:	4606      	mov	r6, r0
 800abb4:	b360      	cbz	r0, 800ac10 <__ssputs_r+0xa2>
 800abb6:	6921      	ldr	r1, [r4, #16]
 800abb8:	464a      	mov	r2, r9
 800abba:	f7fd ffe2 	bl	8008b82 <memcpy>
 800abbe:	89a3      	ldrh	r3, [r4, #12]
 800abc0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abc8:	81a3      	strh	r3, [r4, #12]
 800abca:	6126      	str	r6, [r4, #16]
 800abcc:	6165      	str	r5, [r4, #20]
 800abce:	444e      	add	r6, r9
 800abd0:	eba5 0509 	sub.w	r5, r5, r9
 800abd4:	6026      	str	r6, [r4, #0]
 800abd6:	60a5      	str	r5, [r4, #8]
 800abd8:	463e      	mov	r6, r7
 800abda:	42be      	cmp	r6, r7
 800abdc:	d900      	bls.n	800abe0 <__ssputs_r+0x72>
 800abde:	463e      	mov	r6, r7
 800abe0:	6820      	ldr	r0, [r4, #0]
 800abe2:	4632      	mov	r2, r6
 800abe4:	4641      	mov	r1, r8
 800abe6:	f000 fb69 	bl	800b2bc <memmove>
 800abea:	68a3      	ldr	r3, [r4, #8]
 800abec:	1b9b      	subs	r3, r3, r6
 800abee:	60a3      	str	r3, [r4, #8]
 800abf0:	6823      	ldr	r3, [r4, #0]
 800abf2:	4433      	add	r3, r6
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	2000      	movs	r0, #0
 800abf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abfc:	462a      	mov	r2, r5
 800abfe:	f000 fbdb 	bl	800b3b8 <_realloc_r>
 800ac02:	4606      	mov	r6, r0
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d1e0      	bne.n	800abca <__ssputs_r+0x5c>
 800ac08:	6921      	ldr	r1, [r4, #16]
 800ac0a:	4650      	mov	r0, sl
 800ac0c:	f7fe fe30 	bl	8009870 <_free_r>
 800ac10:	230c      	movs	r3, #12
 800ac12:	f8ca 3000 	str.w	r3, [sl]
 800ac16:	89a3      	ldrh	r3, [r4, #12]
 800ac18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac1c:	81a3      	strh	r3, [r4, #12]
 800ac1e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac22:	e7e9      	b.n	800abf8 <__ssputs_r+0x8a>

0800ac24 <_svfiprintf_r>:
 800ac24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac28:	4698      	mov	r8, r3
 800ac2a:	898b      	ldrh	r3, [r1, #12]
 800ac2c:	061b      	lsls	r3, r3, #24
 800ac2e:	b09d      	sub	sp, #116	@ 0x74
 800ac30:	4607      	mov	r7, r0
 800ac32:	460d      	mov	r5, r1
 800ac34:	4614      	mov	r4, r2
 800ac36:	d510      	bpl.n	800ac5a <_svfiprintf_r+0x36>
 800ac38:	690b      	ldr	r3, [r1, #16]
 800ac3a:	b973      	cbnz	r3, 800ac5a <_svfiprintf_r+0x36>
 800ac3c:	2140      	movs	r1, #64	@ 0x40
 800ac3e:	f7ff f9c5 	bl	8009fcc <_malloc_r>
 800ac42:	6028      	str	r0, [r5, #0]
 800ac44:	6128      	str	r0, [r5, #16]
 800ac46:	b930      	cbnz	r0, 800ac56 <_svfiprintf_r+0x32>
 800ac48:	230c      	movs	r3, #12
 800ac4a:	603b      	str	r3, [r7, #0]
 800ac4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac50:	b01d      	add	sp, #116	@ 0x74
 800ac52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac56:	2340      	movs	r3, #64	@ 0x40
 800ac58:	616b      	str	r3, [r5, #20]
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5e:	2320      	movs	r3, #32
 800ac60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac64:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac68:	2330      	movs	r3, #48	@ 0x30
 800ac6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae08 <_svfiprintf_r+0x1e4>
 800ac6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac72:	f04f 0901 	mov.w	r9, #1
 800ac76:	4623      	mov	r3, r4
 800ac78:	469a      	mov	sl, r3
 800ac7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac7e:	b10a      	cbz	r2, 800ac84 <_svfiprintf_r+0x60>
 800ac80:	2a25      	cmp	r2, #37	@ 0x25
 800ac82:	d1f9      	bne.n	800ac78 <_svfiprintf_r+0x54>
 800ac84:	ebba 0b04 	subs.w	fp, sl, r4
 800ac88:	d00b      	beq.n	800aca2 <_svfiprintf_r+0x7e>
 800ac8a:	465b      	mov	r3, fp
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4629      	mov	r1, r5
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff ff6c 	bl	800ab6e <__ssputs_r>
 800ac96:	3001      	adds	r0, #1
 800ac98:	f000 80a7 	beq.w	800adea <_svfiprintf_r+0x1c6>
 800ac9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac9e:	445a      	add	r2, fp
 800aca0:	9209      	str	r2, [sp, #36]	@ 0x24
 800aca2:	f89a 3000 	ldrb.w	r3, [sl]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	f000 809f 	beq.w	800adea <_svfiprintf_r+0x1c6>
 800acac:	2300      	movs	r3, #0
 800acae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800acb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acb6:	f10a 0a01 	add.w	sl, sl, #1
 800acba:	9304      	str	r3, [sp, #16]
 800acbc:	9307      	str	r3, [sp, #28]
 800acbe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acc2:	931a      	str	r3, [sp, #104]	@ 0x68
 800acc4:	4654      	mov	r4, sl
 800acc6:	2205      	movs	r2, #5
 800acc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800accc:	484e      	ldr	r0, [pc, #312]	@ (800ae08 <_svfiprintf_r+0x1e4>)
 800acce:	f7f5 faa7 	bl	8000220 <memchr>
 800acd2:	9a04      	ldr	r2, [sp, #16]
 800acd4:	b9d8      	cbnz	r0, 800ad0e <_svfiprintf_r+0xea>
 800acd6:	06d0      	lsls	r0, r2, #27
 800acd8:	bf44      	itt	mi
 800acda:	2320      	movmi	r3, #32
 800acdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ace0:	0711      	lsls	r1, r2, #28
 800ace2:	bf44      	itt	mi
 800ace4:	232b      	movmi	r3, #43	@ 0x2b
 800ace6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acea:	f89a 3000 	ldrb.w	r3, [sl]
 800acee:	2b2a      	cmp	r3, #42	@ 0x2a
 800acf0:	d015      	beq.n	800ad1e <_svfiprintf_r+0xfa>
 800acf2:	9a07      	ldr	r2, [sp, #28]
 800acf4:	4654      	mov	r4, sl
 800acf6:	2000      	movs	r0, #0
 800acf8:	f04f 0c0a 	mov.w	ip, #10
 800acfc:	4621      	mov	r1, r4
 800acfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad02:	3b30      	subs	r3, #48	@ 0x30
 800ad04:	2b09      	cmp	r3, #9
 800ad06:	d94b      	bls.n	800ada0 <_svfiprintf_r+0x17c>
 800ad08:	b1b0      	cbz	r0, 800ad38 <_svfiprintf_r+0x114>
 800ad0a:	9207      	str	r2, [sp, #28]
 800ad0c:	e014      	b.n	800ad38 <_svfiprintf_r+0x114>
 800ad0e:	eba0 0308 	sub.w	r3, r0, r8
 800ad12:	fa09 f303 	lsl.w	r3, r9, r3
 800ad16:	4313      	orrs	r3, r2
 800ad18:	9304      	str	r3, [sp, #16]
 800ad1a:	46a2      	mov	sl, r4
 800ad1c:	e7d2      	b.n	800acc4 <_svfiprintf_r+0xa0>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	1d19      	adds	r1, r3, #4
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	9103      	str	r1, [sp, #12]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	bfbb      	ittet	lt
 800ad2a:	425b      	neglt	r3, r3
 800ad2c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad30:	9307      	strge	r3, [sp, #28]
 800ad32:	9307      	strlt	r3, [sp, #28]
 800ad34:	bfb8      	it	lt
 800ad36:	9204      	strlt	r2, [sp, #16]
 800ad38:	7823      	ldrb	r3, [r4, #0]
 800ad3a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad3c:	d10a      	bne.n	800ad54 <_svfiprintf_r+0x130>
 800ad3e:	7863      	ldrb	r3, [r4, #1]
 800ad40:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad42:	d132      	bne.n	800adaa <_svfiprintf_r+0x186>
 800ad44:	9b03      	ldr	r3, [sp, #12]
 800ad46:	1d1a      	adds	r2, r3, #4
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	9203      	str	r2, [sp, #12]
 800ad4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad50:	3402      	adds	r4, #2
 800ad52:	9305      	str	r3, [sp, #20]
 800ad54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae18 <_svfiprintf_r+0x1f4>
 800ad58:	7821      	ldrb	r1, [r4, #0]
 800ad5a:	2203      	movs	r2, #3
 800ad5c:	4650      	mov	r0, sl
 800ad5e:	f7f5 fa5f 	bl	8000220 <memchr>
 800ad62:	b138      	cbz	r0, 800ad74 <_svfiprintf_r+0x150>
 800ad64:	9b04      	ldr	r3, [sp, #16]
 800ad66:	eba0 000a 	sub.w	r0, r0, sl
 800ad6a:	2240      	movs	r2, #64	@ 0x40
 800ad6c:	4082      	lsls	r2, r0
 800ad6e:	4313      	orrs	r3, r2
 800ad70:	3401      	adds	r4, #1
 800ad72:	9304      	str	r3, [sp, #16]
 800ad74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad78:	4824      	ldr	r0, [pc, #144]	@ (800ae0c <_svfiprintf_r+0x1e8>)
 800ad7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad7e:	2206      	movs	r2, #6
 800ad80:	f7f5 fa4e 	bl	8000220 <memchr>
 800ad84:	2800      	cmp	r0, #0
 800ad86:	d036      	beq.n	800adf6 <_svfiprintf_r+0x1d2>
 800ad88:	4b21      	ldr	r3, [pc, #132]	@ (800ae10 <_svfiprintf_r+0x1ec>)
 800ad8a:	bb1b      	cbnz	r3, 800add4 <_svfiprintf_r+0x1b0>
 800ad8c:	9b03      	ldr	r3, [sp, #12]
 800ad8e:	3307      	adds	r3, #7
 800ad90:	f023 0307 	bic.w	r3, r3, #7
 800ad94:	3308      	adds	r3, #8
 800ad96:	9303      	str	r3, [sp, #12]
 800ad98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad9a:	4433      	add	r3, r6
 800ad9c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad9e:	e76a      	b.n	800ac76 <_svfiprintf_r+0x52>
 800ada0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ada4:	460c      	mov	r4, r1
 800ada6:	2001      	movs	r0, #1
 800ada8:	e7a8      	b.n	800acfc <_svfiprintf_r+0xd8>
 800adaa:	2300      	movs	r3, #0
 800adac:	3401      	adds	r4, #1
 800adae:	9305      	str	r3, [sp, #20]
 800adb0:	4619      	mov	r1, r3
 800adb2:	f04f 0c0a 	mov.w	ip, #10
 800adb6:	4620      	mov	r0, r4
 800adb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adbc:	3a30      	subs	r2, #48	@ 0x30
 800adbe:	2a09      	cmp	r2, #9
 800adc0:	d903      	bls.n	800adca <_svfiprintf_r+0x1a6>
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d0c6      	beq.n	800ad54 <_svfiprintf_r+0x130>
 800adc6:	9105      	str	r1, [sp, #20]
 800adc8:	e7c4      	b.n	800ad54 <_svfiprintf_r+0x130>
 800adca:	fb0c 2101 	mla	r1, ip, r1, r2
 800adce:	4604      	mov	r4, r0
 800add0:	2301      	movs	r3, #1
 800add2:	e7f0      	b.n	800adb6 <_svfiprintf_r+0x192>
 800add4:	ab03      	add	r3, sp, #12
 800add6:	9300      	str	r3, [sp, #0]
 800add8:	462a      	mov	r2, r5
 800adda:	4b0e      	ldr	r3, [pc, #56]	@ (800ae14 <_svfiprintf_r+0x1f0>)
 800addc:	a904      	add	r1, sp, #16
 800adde:	4638      	mov	r0, r7
 800ade0:	f7fc fe18 	bl	8007a14 <_printf_float>
 800ade4:	1c42      	adds	r2, r0, #1
 800ade6:	4606      	mov	r6, r0
 800ade8:	d1d6      	bne.n	800ad98 <_svfiprintf_r+0x174>
 800adea:	89ab      	ldrh	r3, [r5, #12]
 800adec:	065b      	lsls	r3, r3, #25
 800adee:	f53f af2d 	bmi.w	800ac4c <_svfiprintf_r+0x28>
 800adf2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800adf4:	e72c      	b.n	800ac50 <_svfiprintf_r+0x2c>
 800adf6:	ab03      	add	r3, sp, #12
 800adf8:	9300      	str	r3, [sp, #0]
 800adfa:	462a      	mov	r2, r5
 800adfc:	4b05      	ldr	r3, [pc, #20]	@ (800ae14 <_svfiprintf_r+0x1f0>)
 800adfe:	a904      	add	r1, sp, #16
 800ae00:	4638      	mov	r0, r7
 800ae02:	f7fd f89f 	bl	8007f44 <_printf_i>
 800ae06:	e7ed      	b.n	800ade4 <_svfiprintf_r+0x1c0>
 800ae08:	0800b979 	.word	0x0800b979
 800ae0c:	0800b983 	.word	0x0800b983
 800ae10:	08007a15 	.word	0x08007a15
 800ae14:	0800ab6f 	.word	0x0800ab6f
 800ae18:	0800b97f 	.word	0x0800b97f

0800ae1c <__sfputc_r>:
 800ae1c:	6893      	ldr	r3, [r2, #8]
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	b410      	push	{r4}
 800ae24:	6093      	str	r3, [r2, #8]
 800ae26:	da08      	bge.n	800ae3a <__sfputc_r+0x1e>
 800ae28:	6994      	ldr	r4, [r2, #24]
 800ae2a:	42a3      	cmp	r3, r4
 800ae2c:	db01      	blt.n	800ae32 <__sfputc_r+0x16>
 800ae2e:	290a      	cmp	r1, #10
 800ae30:	d103      	bne.n	800ae3a <__sfputc_r+0x1e>
 800ae32:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae36:	f7fd bd7e 	b.w	8008936 <__swbuf_r>
 800ae3a:	6813      	ldr	r3, [r2, #0]
 800ae3c:	1c58      	adds	r0, r3, #1
 800ae3e:	6010      	str	r0, [r2, #0]
 800ae40:	7019      	strb	r1, [r3, #0]
 800ae42:	4608      	mov	r0, r1
 800ae44:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <__sfputs_r>:
 800ae4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4c:	4606      	mov	r6, r0
 800ae4e:	460f      	mov	r7, r1
 800ae50:	4614      	mov	r4, r2
 800ae52:	18d5      	adds	r5, r2, r3
 800ae54:	42ac      	cmp	r4, r5
 800ae56:	d101      	bne.n	800ae5c <__sfputs_r+0x12>
 800ae58:	2000      	movs	r0, #0
 800ae5a:	e007      	b.n	800ae6c <__sfputs_r+0x22>
 800ae5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae60:	463a      	mov	r2, r7
 800ae62:	4630      	mov	r0, r6
 800ae64:	f7ff ffda 	bl	800ae1c <__sfputc_r>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d1f3      	bne.n	800ae54 <__sfputs_r+0xa>
 800ae6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae70 <_vfiprintf_r>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	460d      	mov	r5, r1
 800ae76:	b09d      	sub	sp, #116	@ 0x74
 800ae78:	4614      	mov	r4, r2
 800ae7a:	4698      	mov	r8, r3
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	b118      	cbz	r0, 800ae88 <_vfiprintf_r+0x18>
 800ae80:	6a03      	ldr	r3, [r0, #32]
 800ae82:	b90b      	cbnz	r3, 800ae88 <_vfiprintf_r+0x18>
 800ae84:	f7fd fc16 	bl	80086b4 <__sinit>
 800ae88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae8a:	07d9      	lsls	r1, r3, #31
 800ae8c:	d405      	bmi.n	800ae9a <_vfiprintf_r+0x2a>
 800ae8e:	89ab      	ldrh	r3, [r5, #12]
 800ae90:	059a      	lsls	r2, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_vfiprintf_r+0x2a>
 800ae94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae96:	f7fd fe72 	bl	8008b7e <__retarget_lock_acquire_recursive>
 800ae9a:	89ab      	ldrh	r3, [r5, #12]
 800ae9c:	071b      	lsls	r3, r3, #28
 800ae9e:	d501      	bpl.n	800aea4 <_vfiprintf_r+0x34>
 800aea0:	692b      	ldr	r3, [r5, #16]
 800aea2:	b99b      	cbnz	r3, 800aecc <_vfiprintf_r+0x5c>
 800aea4:	4629      	mov	r1, r5
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7fd fd84 	bl	80089b4 <__swsetup_r>
 800aeac:	b170      	cbz	r0, 800aecc <_vfiprintf_r+0x5c>
 800aeae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aeb0:	07dc      	lsls	r4, r3, #31
 800aeb2:	d504      	bpl.n	800aebe <_vfiprintf_r+0x4e>
 800aeb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aeb8:	b01d      	add	sp, #116	@ 0x74
 800aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aebe:	89ab      	ldrh	r3, [r5, #12]
 800aec0:	0598      	lsls	r0, r3, #22
 800aec2:	d4f7      	bmi.n	800aeb4 <_vfiprintf_r+0x44>
 800aec4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aec6:	f7fd fe5b 	bl	8008b80 <__retarget_lock_release_recursive>
 800aeca:	e7f3      	b.n	800aeb4 <_vfiprintf_r+0x44>
 800aecc:	2300      	movs	r3, #0
 800aece:	9309      	str	r3, [sp, #36]	@ 0x24
 800aed0:	2320      	movs	r3, #32
 800aed2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aed6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeda:	2330      	movs	r3, #48	@ 0x30
 800aedc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b08c <_vfiprintf_r+0x21c>
 800aee0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aee4:	f04f 0901 	mov.w	r9, #1
 800aee8:	4623      	mov	r3, r4
 800aeea:	469a      	mov	sl, r3
 800aeec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aef0:	b10a      	cbz	r2, 800aef6 <_vfiprintf_r+0x86>
 800aef2:	2a25      	cmp	r2, #37	@ 0x25
 800aef4:	d1f9      	bne.n	800aeea <_vfiprintf_r+0x7a>
 800aef6:	ebba 0b04 	subs.w	fp, sl, r4
 800aefa:	d00b      	beq.n	800af14 <_vfiprintf_r+0xa4>
 800aefc:	465b      	mov	r3, fp
 800aefe:	4622      	mov	r2, r4
 800af00:	4629      	mov	r1, r5
 800af02:	4630      	mov	r0, r6
 800af04:	f7ff ffa1 	bl	800ae4a <__sfputs_r>
 800af08:	3001      	adds	r0, #1
 800af0a:	f000 80a7 	beq.w	800b05c <_vfiprintf_r+0x1ec>
 800af0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af10:	445a      	add	r2, fp
 800af12:	9209      	str	r2, [sp, #36]	@ 0x24
 800af14:	f89a 3000 	ldrb.w	r3, [sl]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	f000 809f 	beq.w	800b05c <_vfiprintf_r+0x1ec>
 800af1e:	2300      	movs	r3, #0
 800af20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af28:	f10a 0a01 	add.w	sl, sl, #1
 800af2c:	9304      	str	r3, [sp, #16]
 800af2e:	9307      	str	r3, [sp, #28]
 800af30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af34:	931a      	str	r3, [sp, #104]	@ 0x68
 800af36:	4654      	mov	r4, sl
 800af38:	2205      	movs	r2, #5
 800af3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af3e:	4853      	ldr	r0, [pc, #332]	@ (800b08c <_vfiprintf_r+0x21c>)
 800af40:	f7f5 f96e 	bl	8000220 <memchr>
 800af44:	9a04      	ldr	r2, [sp, #16]
 800af46:	b9d8      	cbnz	r0, 800af80 <_vfiprintf_r+0x110>
 800af48:	06d1      	lsls	r1, r2, #27
 800af4a:	bf44      	itt	mi
 800af4c:	2320      	movmi	r3, #32
 800af4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af52:	0713      	lsls	r3, r2, #28
 800af54:	bf44      	itt	mi
 800af56:	232b      	movmi	r3, #43	@ 0x2b
 800af58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af5c:	f89a 3000 	ldrb.w	r3, [sl]
 800af60:	2b2a      	cmp	r3, #42	@ 0x2a
 800af62:	d015      	beq.n	800af90 <_vfiprintf_r+0x120>
 800af64:	9a07      	ldr	r2, [sp, #28]
 800af66:	4654      	mov	r4, sl
 800af68:	2000      	movs	r0, #0
 800af6a:	f04f 0c0a 	mov.w	ip, #10
 800af6e:	4621      	mov	r1, r4
 800af70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af74:	3b30      	subs	r3, #48	@ 0x30
 800af76:	2b09      	cmp	r3, #9
 800af78:	d94b      	bls.n	800b012 <_vfiprintf_r+0x1a2>
 800af7a:	b1b0      	cbz	r0, 800afaa <_vfiprintf_r+0x13a>
 800af7c:	9207      	str	r2, [sp, #28]
 800af7e:	e014      	b.n	800afaa <_vfiprintf_r+0x13a>
 800af80:	eba0 0308 	sub.w	r3, r0, r8
 800af84:	fa09 f303 	lsl.w	r3, r9, r3
 800af88:	4313      	orrs	r3, r2
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	46a2      	mov	sl, r4
 800af8e:	e7d2      	b.n	800af36 <_vfiprintf_r+0xc6>
 800af90:	9b03      	ldr	r3, [sp, #12]
 800af92:	1d19      	adds	r1, r3, #4
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	9103      	str	r1, [sp, #12]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	bfbb      	ittet	lt
 800af9c:	425b      	neglt	r3, r3
 800af9e:	f042 0202 	orrlt.w	r2, r2, #2
 800afa2:	9307      	strge	r3, [sp, #28]
 800afa4:	9307      	strlt	r3, [sp, #28]
 800afa6:	bfb8      	it	lt
 800afa8:	9204      	strlt	r2, [sp, #16]
 800afaa:	7823      	ldrb	r3, [r4, #0]
 800afac:	2b2e      	cmp	r3, #46	@ 0x2e
 800afae:	d10a      	bne.n	800afc6 <_vfiprintf_r+0x156>
 800afb0:	7863      	ldrb	r3, [r4, #1]
 800afb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800afb4:	d132      	bne.n	800b01c <_vfiprintf_r+0x1ac>
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	1d1a      	adds	r2, r3, #4
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	9203      	str	r2, [sp, #12]
 800afbe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afc2:	3402      	adds	r4, #2
 800afc4:	9305      	str	r3, [sp, #20]
 800afc6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b09c <_vfiprintf_r+0x22c>
 800afca:	7821      	ldrb	r1, [r4, #0]
 800afcc:	2203      	movs	r2, #3
 800afce:	4650      	mov	r0, sl
 800afd0:	f7f5 f926 	bl	8000220 <memchr>
 800afd4:	b138      	cbz	r0, 800afe6 <_vfiprintf_r+0x176>
 800afd6:	9b04      	ldr	r3, [sp, #16]
 800afd8:	eba0 000a 	sub.w	r0, r0, sl
 800afdc:	2240      	movs	r2, #64	@ 0x40
 800afde:	4082      	lsls	r2, r0
 800afe0:	4313      	orrs	r3, r2
 800afe2:	3401      	adds	r4, #1
 800afe4:	9304      	str	r3, [sp, #16]
 800afe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afea:	4829      	ldr	r0, [pc, #164]	@ (800b090 <_vfiprintf_r+0x220>)
 800afec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aff0:	2206      	movs	r2, #6
 800aff2:	f7f5 f915 	bl	8000220 <memchr>
 800aff6:	2800      	cmp	r0, #0
 800aff8:	d03f      	beq.n	800b07a <_vfiprintf_r+0x20a>
 800affa:	4b26      	ldr	r3, [pc, #152]	@ (800b094 <_vfiprintf_r+0x224>)
 800affc:	bb1b      	cbnz	r3, 800b046 <_vfiprintf_r+0x1d6>
 800affe:	9b03      	ldr	r3, [sp, #12]
 800b000:	3307      	adds	r3, #7
 800b002:	f023 0307 	bic.w	r3, r3, #7
 800b006:	3308      	adds	r3, #8
 800b008:	9303      	str	r3, [sp, #12]
 800b00a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b00c:	443b      	add	r3, r7
 800b00e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b010:	e76a      	b.n	800aee8 <_vfiprintf_r+0x78>
 800b012:	fb0c 3202 	mla	r2, ip, r2, r3
 800b016:	460c      	mov	r4, r1
 800b018:	2001      	movs	r0, #1
 800b01a:	e7a8      	b.n	800af6e <_vfiprintf_r+0xfe>
 800b01c:	2300      	movs	r3, #0
 800b01e:	3401      	adds	r4, #1
 800b020:	9305      	str	r3, [sp, #20]
 800b022:	4619      	mov	r1, r3
 800b024:	f04f 0c0a 	mov.w	ip, #10
 800b028:	4620      	mov	r0, r4
 800b02a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b02e:	3a30      	subs	r2, #48	@ 0x30
 800b030:	2a09      	cmp	r2, #9
 800b032:	d903      	bls.n	800b03c <_vfiprintf_r+0x1cc>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d0c6      	beq.n	800afc6 <_vfiprintf_r+0x156>
 800b038:	9105      	str	r1, [sp, #20]
 800b03a:	e7c4      	b.n	800afc6 <_vfiprintf_r+0x156>
 800b03c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b040:	4604      	mov	r4, r0
 800b042:	2301      	movs	r3, #1
 800b044:	e7f0      	b.n	800b028 <_vfiprintf_r+0x1b8>
 800b046:	ab03      	add	r3, sp, #12
 800b048:	9300      	str	r3, [sp, #0]
 800b04a:	462a      	mov	r2, r5
 800b04c:	4b12      	ldr	r3, [pc, #72]	@ (800b098 <_vfiprintf_r+0x228>)
 800b04e:	a904      	add	r1, sp, #16
 800b050:	4630      	mov	r0, r6
 800b052:	f7fc fcdf 	bl	8007a14 <_printf_float>
 800b056:	4607      	mov	r7, r0
 800b058:	1c78      	adds	r0, r7, #1
 800b05a:	d1d6      	bne.n	800b00a <_vfiprintf_r+0x19a>
 800b05c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b05e:	07d9      	lsls	r1, r3, #31
 800b060:	d405      	bmi.n	800b06e <_vfiprintf_r+0x1fe>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	059a      	lsls	r2, r3, #22
 800b066:	d402      	bmi.n	800b06e <_vfiprintf_r+0x1fe>
 800b068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b06a:	f7fd fd89 	bl	8008b80 <__retarget_lock_release_recursive>
 800b06e:	89ab      	ldrh	r3, [r5, #12]
 800b070:	065b      	lsls	r3, r3, #25
 800b072:	f53f af1f 	bmi.w	800aeb4 <_vfiprintf_r+0x44>
 800b076:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b078:	e71e      	b.n	800aeb8 <_vfiprintf_r+0x48>
 800b07a:	ab03      	add	r3, sp, #12
 800b07c:	9300      	str	r3, [sp, #0]
 800b07e:	462a      	mov	r2, r5
 800b080:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <_vfiprintf_r+0x228>)
 800b082:	a904      	add	r1, sp, #16
 800b084:	4630      	mov	r0, r6
 800b086:	f7fc ff5d 	bl	8007f44 <_printf_i>
 800b08a:	e7e4      	b.n	800b056 <_vfiprintf_r+0x1e6>
 800b08c:	0800b979 	.word	0x0800b979
 800b090:	0800b983 	.word	0x0800b983
 800b094:	08007a15 	.word	0x08007a15
 800b098:	0800ae4b 	.word	0x0800ae4b
 800b09c:	0800b97f 	.word	0x0800b97f

0800b0a0 <__sflush_r>:
 800b0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a8:	0716      	lsls	r6, r2, #28
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	460c      	mov	r4, r1
 800b0ae:	d454      	bmi.n	800b15a <__sflush_r+0xba>
 800b0b0:	684b      	ldr	r3, [r1, #4]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dc02      	bgt.n	800b0bc <__sflush_r+0x1c>
 800b0b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	dd48      	ble.n	800b14e <__sflush_r+0xae>
 800b0bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	d045      	beq.n	800b14e <__sflush_r+0xae>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0c8:	682f      	ldr	r7, [r5, #0]
 800b0ca:	6a21      	ldr	r1, [r4, #32]
 800b0cc:	602b      	str	r3, [r5, #0]
 800b0ce:	d030      	beq.n	800b132 <__sflush_r+0x92>
 800b0d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0d2:	89a3      	ldrh	r3, [r4, #12]
 800b0d4:	0759      	lsls	r1, r3, #29
 800b0d6:	d505      	bpl.n	800b0e4 <__sflush_r+0x44>
 800b0d8:	6863      	ldr	r3, [r4, #4]
 800b0da:	1ad2      	subs	r2, r2, r3
 800b0dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0de:	b10b      	cbz	r3, 800b0e4 <__sflush_r+0x44>
 800b0e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0e2:	1ad2      	subs	r2, r2, r3
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0e8:	6a21      	ldr	r1, [r4, #32]
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b0      	blx	r6
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	d106      	bne.n	800b102 <__sflush_r+0x62>
 800b0f4:	6829      	ldr	r1, [r5, #0]
 800b0f6:	291d      	cmp	r1, #29
 800b0f8:	d82b      	bhi.n	800b152 <__sflush_r+0xb2>
 800b0fa:	4a2a      	ldr	r2, [pc, #168]	@ (800b1a4 <__sflush_r+0x104>)
 800b0fc:	40ca      	lsrs	r2, r1
 800b0fe:	07d6      	lsls	r6, r2, #31
 800b100:	d527      	bpl.n	800b152 <__sflush_r+0xb2>
 800b102:	2200      	movs	r2, #0
 800b104:	6062      	str	r2, [r4, #4]
 800b106:	04d9      	lsls	r1, r3, #19
 800b108:	6922      	ldr	r2, [r4, #16]
 800b10a:	6022      	str	r2, [r4, #0]
 800b10c:	d504      	bpl.n	800b118 <__sflush_r+0x78>
 800b10e:	1c42      	adds	r2, r0, #1
 800b110:	d101      	bne.n	800b116 <__sflush_r+0x76>
 800b112:	682b      	ldr	r3, [r5, #0]
 800b114:	b903      	cbnz	r3, 800b118 <__sflush_r+0x78>
 800b116:	6560      	str	r0, [r4, #84]	@ 0x54
 800b118:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b11a:	602f      	str	r7, [r5, #0]
 800b11c:	b1b9      	cbz	r1, 800b14e <__sflush_r+0xae>
 800b11e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b122:	4299      	cmp	r1, r3
 800b124:	d002      	beq.n	800b12c <__sflush_r+0x8c>
 800b126:	4628      	mov	r0, r5
 800b128:	f7fe fba2 	bl	8009870 <_free_r>
 800b12c:	2300      	movs	r3, #0
 800b12e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b130:	e00d      	b.n	800b14e <__sflush_r+0xae>
 800b132:	2301      	movs	r3, #1
 800b134:	4628      	mov	r0, r5
 800b136:	47b0      	blx	r6
 800b138:	4602      	mov	r2, r0
 800b13a:	1c50      	adds	r0, r2, #1
 800b13c:	d1c9      	bne.n	800b0d2 <__sflush_r+0x32>
 800b13e:	682b      	ldr	r3, [r5, #0]
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0c6      	beq.n	800b0d2 <__sflush_r+0x32>
 800b144:	2b1d      	cmp	r3, #29
 800b146:	d001      	beq.n	800b14c <__sflush_r+0xac>
 800b148:	2b16      	cmp	r3, #22
 800b14a:	d11e      	bne.n	800b18a <__sflush_r+0xea>
 800b14c:	602f      	str	r7, [r5, #0]
 800b14e:	2000      	movs	r0, #0
 800b150:	e022      	b.n	800b198 <__sflush_r+0xf8>
 800b152:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b156:	b21b      	sxth	r3, r3
 800b158:	e01b      	b.n	800b192 <__sflush_r+0xf2>
 800b15a:	690f      	ldr	r7, [r1, #16]
 800b15c:	2f00      	cmp	r7, #0
 800b15e:	d0f6      	beq.n	800b14e <__sflush_r+0xae>
 800b160:	0793      	lsls	r3, r2, #30
 800b162:	680e      	ldr	r6, [r1, #0]
 800b164:	bf08      	it	eq
 800b166:	694b      	ldreq	r3, [r1, #20]
 800b168:	600f      	str	r7, [r1, #0]
 800b16a:	bf18      	it	ne
 800b16c:	2300      	movne	r3, #0
 800b16e:	eba6 0807 	sub.w	r8, r6, r7
 800b172:	608b      	str	r3, [r1, #8]
 800b174:	f1b8 0f00 	cmp.w	r8, #0
 800b178:	dde9      	ble.n	800b14e <__sflush_r+0xae>
 800b17a:	6a21      	ldr	r1, [r4, #32]
 800b17c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b17e:	4643      	mov	r3, r8
 800b180:	463a      	mov	r2, r7
 800b182:	4628      	mov	r0, r5
 800b184:	47b0      	blx	r6
 800b186:	2800      	cmp	r0, #0
 800b188:	dc08      	bgt.n	800b19c <__sflush_r+0xfc>
 800b18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b19c:	4407      	add	r7, r0
 800b19e:	eba8 0800 	sub.w	r8, r8, r0
 800b1a2:	e7e7      	b.n	800b174 <__sflush_r+0xd4>
 800b1a4:	20400001 	.word	0x20400001

0800b1a8 <_fflush_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	690b      	ldr	r3, [r1, #16]
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	b913      	cbnz	r3, 800b1b8 <_fflush_r+0x10>
 800b1b2:	2500      	movs	r5, #0
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	b118      	cbz	r0, 800b1c2 <_fflush_r+0x1a>
 800b1ba:	6a03      	ldr	r3, [r0, #32]
 800b1bc:	b90b      	cbnz	r3, 800b1c2 <_fflush_r+0x1a>
 800b1be:	f7fd fa79 	bl	80086b4 <__sinit>
 800b1c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d0f3      	beq.n	800b1b2 <_fflush_r+0xa>
 800b1ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1cc:	07d0      	lsls	r0, r2, #31
 800b1ce:	d404      	bmi.n	800b1da <_fflush_r+0x32>
 800b1d0:	0599      	lsls	r1, r3, #22
 800b1d2:	d402      	bmi.n	800b1da <_fflush_r+0x32>
 800b1d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1d6:	f7fd fcd2 	bl	8008b7e <__retarget_lock_acquire_recursive>
 800b1da:	4628      	mov	r0, r5
 800b1dc:	4621      	mov	r1, r4
 800b1de:	f7ff ff5f 	bl	800b0a0 <__sflush_r>
 800b1e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1e4:	07da      	lsls	r2, r3, #31
 800b1e6:	4605      	mov	r5, r0
 800b1e8:	d4e4      	bmi.n	800b1b4 <_fflush_r+0xc>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	059b      	lsls	r3, r3, #22
 800b1ee:	d4e1      	bmi.n	800b1b4 <_fflush_r+0xc>
 800b1f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1f2:	f7fd fcc5 	bl	8008b80 <__retarget_lock_release_recursive>
 800b1f6:	e7dd      	b.n	800b1b4 <_fflush_r+0xc>

0800b1f8 <__swhatbuf_r>:
 800b1f8:	b570      	push	{r4, r5, r6, lr}
 800b1fa:	460c      	mov	r4, r1
 800b1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b200:	2900      	cmp	r1, #0
 800b202:	b096      	sub	sp, #88	@ 0x58
 800b204:	4615      	mov	r5, r2
 800b206:	461e      	mov	r6, r3
 800b208:	da0d      	bge.n	800b226 <__swhatbuf_r+0x2e>
 800b20a:	89a3      	ldrh	r3, [r4, #12]
 800b20c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b210:	f04f 0100 	mov.w	r1, #0
 800b214:	bf14      	ite	ne
 800b216:	2340      	movne	r3, #64	@ 0x40
 800b218:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b21c:	2000      	movs	r0, #0
 800b21e:	6031      	str	r1, [r6, #0]
 800b220:	602b      	str	r3, [r5, #0]
 800b222:	b016      	add	sp, #88	@ 0x58
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	466a      	mov	r2, sp
 800b228:	f000 f862 	bl	800b2f0 <_fstat_r>
 800b22c:	2800      	cmp	r0, #0
 800b22e:	dbec      	blt.n	800b20a <__swhatbuf_r+0x12>
 800b230:	9901      	ldr	r1, [sp, #4]
 800b232:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b236:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b23a:	4259      	negs	r1, r3
 800b23c:	4159      	adcs	r1, r3
 800b23e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b242:	e7eb      	b.n	800b21c <__swhatbuf_r+0x24>

0800b244 <__smakebuf_r>:
 800b244:	898b      	ldrh	r3, [r1, #12]
 800b246:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b248:	079d      	lsls	r5, r3, #30
 800b24a:	4606      	mov	r6, r0
 800b24c:	460c      	mov	r4, r1
 800b24e:	d507      	bpl.n	800b260 <__smakebuf_r+0x1c>
 800b250:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b254:	6023      	str	r3, [r4, #0]
 800b256:	6123      	str	r3, [r4, #16]
 800b258:	2301      	movs	r3, #1
 800b25a:	6163      	str	r3, [r4, #20]
 800b25c:	b003      	add	sp, #12
 800b25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b260:	ab01      	add	r3, sp, #4
 800b262:	466a      	mov	r2, sp
 800b264:	f7ff ffc8 	bl	800b1f8 <__swhatbuf_r>
 800b268:	9f00      	ldr	r7, [sp, #0]
 800b26a:	4605      	mov	r5, r0
 800b26c:	4639      	mov	r1, r7
 800b26e:	4630      	mov	r0, r6
 800b270:	f7fe feac 	bl	8009fcc <_malloc_r>
 800b274:	b948      	cbnz	r0, 800b28a <__smakebuf_r+0x46>
 800b276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27a:	059a      	lsls	r2, r3, #22
 800b27c:	d4ee      	bmi.n	800b25c <__smakebuf_r+0x18>
 800b27e:	f023 0303 	bic.w	r3, r3, #3
 800b282:	f043 0302 	orr.w	r3, r3, #2
 800b286:	81a3      	strh	r3, [r4, #12]
 800b288:	e7e2      	b.n	800b250 <__smakebuf_r+0xc>
 800b28a:	89a3      	ldrh	r3, [r4, #12]
 800b28c:	6020      	str	r0, [r4, #0]
 800b28e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b292:	81a3      	strh	r3, [r4, #12]
 800b294:	9b01      	ldr	r3, [sp, #4]
 800b296:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b29a:	b15b      	cbz	r3, 800b2b4 <__smakebuf_r+0x70>
 800b29c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a0:	4630      	mov	r0, r6
 800b2a2:	f000 f837 	bl	800b314 <_isatty_r>
 800b2a6:	b128      	cbz	r0, 800b2b4 <__smakebuf_r+0x70>
 800b2a8:	89a3      	ldrh	r3, [r4, #12]
 800b2aa:	f023 0303 	bic.w	r3, r3, #3
 800b2ae:	f043 0301 	orr.w	r3, r3, #1
 800b2b2:	81a3      	strh	r3, [r4, #12]
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	431d      	orrs	r5, r3
 800b2b8:	81a5      	strh	r5, [r4, #12]
 800b2ba:	e7cf      	b.n	800b25c <__smakebuf_r+0x18>

0800b2bc <memmove>:
 800b2bc:	4288      	cmp	r0, r1
 800b2be:	b510      	push	{r4, lr}
 800b2c0:	eb01 0402 	add.w	r4, r1, r2
 800b2c4:	d902      	bls.n	800b2cc <memmove+0x10>
 800b2c6:	4284      	cmp	r4, r0
 800b2c8:	4623      	mov	r3, r4
 800b2ca:	d807      	bhi.n	800b2dc <memmove+0x20>
 800b2cc:	1e43      	subs	r3, r0, #1
 800b2ce:	42a1      	cmp	r1, r4
 800b2d0:	d008      	beq.n	800b2e4 <memmove+0x28>
 800b2d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2da:	e7f8      	b.n	800b2ce <memmove+0x12>
 800b2dc:	4402      	add	r2, r0
 800b2de:	4601      	mov	r1, r0
 800b2e0:	428a      	cmp	r2, r1
 800b2e2:	d100      	bne.n	800b2e6 <memmove+0x2a>
 800b2e4:	bd10      	pop	{r4, pc}
 800b2e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2ee:	e7f7      	b.n	800b2e0 <memmove+0x24>

0800b2f0 <_fstat_r>:
 800b2f0:	b538      	push	{r3, r4, r5, lr}
 800b2f2:	4d07      	ldr	r5, [pc, #28]	@ (800b310 <_fstat_r+0x20>)
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	4604      	mov	r4, r0
 800b2f8:	4608      	mov	r0, r1
 800b2fa:	4611      	mov	r1, r2
 800b2fc:	602b      	str	r3, [r5, #0]
 800b2fe:	f7f6 f99b 	bl	8001638 <_fstat>
 800b302:	1c43      	adds	r3, r0, #1
 800b304:	d102      	bne.n	800b30c <_fstat_r+0x1c>
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	b103      	cbz	r3, 800b30c <_fstat_r+0x1c>
 800b30a:	6023      	str	r3, [r4, #0]
 800b30c:	bd38      	pop	{r3, r4, r5, pc}
 800b30e:	bf00      	nop
 800b310:	2000071c 	.word	0x2000071c

0800b314 <_isatty_r>:
 800b314:	b538      	push	{r3, r4, r5, lr}
 800b316:	4d06      	ldr	r5, [pc, #24]	@ (800b330 <_isatty_r+0x1c>)
 800b318:	2300      	movs	r3, #0
 800b31a:	4604      	mov	r4, r0
 800b31c:	4608      	mov	r0, r1
 800b31e:	602b      	str	r3, [r5, #0]
 800b320:	f7f6 f99a 	bl	8001658 <_isatty>
 800b324:	1c43      	adds	r3, r0, #1
 800b326:	d102      	bne.n	800b32e <_isatty_r+0x1a>
 800b328:	682b      	ldr	r3, [r5, #0]
 800b32a:	b103      	cbz	r3, 800b32e <_isatty_r+0x1a>
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	bd38      	pop	{r3, r4, r5, pc}
 800b330:	2000071c 	.word	0x2000071c

0800b334 <_sbrk_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d06      	ldr	r5, [pc, #24]	@ (800b350 <_sbrk_r+0x1c>)
 800b338:	2300      	movs	r3, #0
 800b33a:	4604      	mov	r4, r0
 800b33c:	4608      	mov	r0, r1
 800b33e:	602b      	str	r3, [r5, #0]
 800b340:	f7f6 f9a2 	bl	8001688 <_sbrk>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	d102      	bne.n	800b34e <_sbrk_r+0x1a>
 800b348:	682b      	ldr	r3, [r5, #0]
 800b34a:	b103      	cbz	r3, 800b34e <_sbrk_r+0x1a>
 800b34c:	6023      	str	r3, [r4, #0]
 800b34e:	bd38      	pop	{r3, r4, r5, pc}
 800b350:	2000071c 	.word	0x2000071c

0800b354 <__assert_func>:
 800b354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b356:	4614      	mov	r4, r2
 800b358:	461a      	mov	r2, r3
 800b35a:	4b09      	ldr	r3, [pc, #36]	@ (800b380 <__assert_func+0x2c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4605      	mov	r5, r0
 800b360:	68d8      	ldr	r0, [r3, #12]
 800b362:	b14c      	cbz	r4, 800b378 <__assert_func+0x24>
 800b364:	4b07      	ldr	r3, [pc, #28]	@ (800b384 <__assert_func+0x30>)
 800b366:	9100      	str	r1, [sp, #0]
 800b368:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b36c:	4906      	ldr	r1, [pc, #24]	@ (800b388 <__assert_func+0x34>)
 800b36e:	462b      	mov	r3, r5
 800b370:	f000 f850 	bl	800b414 <fiprintf>
 800b374:	f000 f860 	bl	800b438 <abort>
 800b378:	4b04      	ldr	r3, [pc, #16]	@ (800b38c <__assert_func+0x38>)
 800b37a:	461c      	mov	r4, r3
 800b37c:	e7f3      	b.n	800b366 <__assert_func+0x12>
 800b37e:	bf00      	nop
 800b380:	20000184 	.word	0x20000184
 800b384:	0800b98a 	.word	0x0800b98a
 800b388:	0800b997 	.word	0x0800b997
 800b38c:	0800b9c5 	.word	0x0800b9c5

0800b390 <_calloc_r>:
 800b390:	b570      	push	{r4, r5, r6, lr}
 800b392:	fba1 5402 	umull	r5, r4, r1, r2
 800b396:	b934      	cbnz	r4, 800b3a6 <_calloc_r+0x16>
 800b398:	4629      	mov	r1, r5
 800b39a:	f7fe fe17 	bl	8009fcc <_malloc_r>
 800b39e:	4606      	mov	r6, r0
 800b3a0:	b928      	cbnz	r0, 800b3ae <_calloc_r+0x1e>
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	bd70      	pop	{r4, r5, r6, pc}
 800b3a6:	220c      	movs	r2, #12
 800b3a8:	6002      	str	r2, [r0, #0]
 800b3aa:	2600      	movs	r6, #0
 800b3ac:	e7f9      	b.n	800b3a2 <_calloc_r+0x12>
 800b3ae:	462a      	mov	r2, r5
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	f7fd fb55 	bl	8008a60 <memset>
 800b3b6:	e7f4      	b.n	800b3a2 <_calloc_r+0x12>

0800b3b8 <_realloc_r>:
 800b3b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3bc:	4607      	mov	r7, r0
 800b3be:	4614      	mov	r4, r2
 800b3c0:	460d      	mov	r5, r1
 800b3c2:	b921      	cbnz	r1, 800b3ce <_realloc_r+0x16>
 800b3c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	4611      	mov	r1, r2
 800b3ca:	f7fe bdff 	b.w	8009fcc <_malloc_r>
 800b3ce:	b92a      	cbnz	r2, 800b3dc <_realloc_r+0x24>
 800b3d0:	f7fe fa4e 	bl	8009870 <_free_r>
 800b3d4:	4625      	mov	r5, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3dc:	f000 f833 	bl	800b446 <_malloc_usable_size_r>
 800b3e0:	4284      	cmp	r4, r0
 800b3e2:	4606      	mov	r6, r0
 800b3e4:	d802      	bhi.n	800b3ec <_realloc_r+0x34>
 800b3e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3ea:	d8f4      	bhi.n	800b3d6 <_realloc_r+0x1e>
 800b3ec:	4621      	mov	r1, r4
 800b3ee:	4638      	mov	r0, r7
 800b3f0:	f7fe fdec 	bl	8009fcc <_malloc_r>
 800b3f4:	4680      	mov	r8, r0
 800b3f6:	b908      	cbnz	r0, 800b3fc <_realloc_r+0x44>
 800b3f8:	4645      	mov	r5, r8
 800b3fa:	e7ec      	b.n	800b3d6 <_realloc_r+0x1e>
 800b3fc:	42b4      	cmp	r4, r6
 800b3fe:	4622      	mov	r2, r4
 800b400:	4629      	mov	r1, r5
 800b402:	bf28      	it	cs
 800b404:	4632      	movcs	r2, r6
 800b406:	f7fd fbbc 	bl	8008b82 <memcpy>
 800b40a:	4629      	mov	r1, r5
 800b40c:	4638      	mov	r0, r7
 800b40e:	f7fe fa2f 	bl	8009870 <_free_r>
 800b412:	e7f1      	b.n	800b3f8 <_realloc_r+0x40>

0800b414 <fiprintf>:
 800b414:	b40e      	push	{r1, r2, r3}
 800b416:	b503      	push	{r0, r1, lr}
 800b418:	4601      	mov	r1, r0
 800b41a:	ab03      	add	r3, sp, #12
 800b41c:	4805      	ldr	r0, [pc, #20]	@ (800b434 <fiprintf+0x20>)
 800b41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b422:	6800      	ldr	r0, [r0, #0]
 800b424:	9301      	str	r3, [sp, #4]
 800b426:	f7ff fd23 	bl	800ae70 <_vfiprintf_r>
 800b42a:	b002      	add	sp, #8
 800b42c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b430:	b003      	add	sp, #12
 800b432:	4770      	bx	lr
 800b434:	20000184 	.word	0x20000184

0800b438 <abort>:
 800b438:	b508      	push	{r3, lr}
 800b43a:	2006      	movs	r0, #6
 800b43c:	f000 f834 	bl	800b4a8 <raise>
 800b440:	2001      	movs	r0, #1
 800b442:	f7f6 f8a9 	bl	8001598 <_exit>

0800b446 <_malloc_usable_size_r>:
 800b446:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b44a:	1f18      	subs	r0, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	bfbc      	itt	lt
 800b450:	580b      	ldrlt	r3, [r1, r0]
 800b452:	18c0      	addlt	r0, r0, r3
 800b454:	4770      	bx	lr

0800b456 <_raise_r>:
 800b456:	291f      	cmp	r1, #31
 800b458:	b538      	push	{r3, r4, r5, lr}
 800b45a:	4605      	mov	r5, r0
 800b45c:	460c      	mov	r4, r1
 800b45e:	d904      	bls.n	800b46a <_raise_r+0x14>
 800b460:	2316      	movs	r3, #22
 800b462:	6003      	str	r3, [r0, #0]
 800b464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b468:	bd38      	pop	{r3, r4, r5, pc}
 800b46a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b46c:	b112      	cbz	r2, 800b474 <_raise_r+0x1e>
 800b46e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b472:	b94b      	cbnz	r3, 800b488 <_raise_r+0x32>
 800b474:	4628      	mov	r0, r5
 800b476:	f000 f831 	bl	800b4dc <_getpid_r>
 800b47a:	4622      	mov	r2, r4
 800b47c:	4601      	mov	r1, r0
 800b47e:	4628      	mov	r0, r5
 800b480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b484:	f000 b818 	b.w	800b4b8 <_kill_r>
 800b488:	2b01      	cmp	r3, #1
 800b48a:	d00a      	beq.n	800b4a2 <_raise_r+0x4c>
 800b48c:	1c59      	adds	r1, r3, #1
 800b48e:	d103      	bne.n	800b498 <_raise_r+0x42>
 800b490:	2316      	movs	r3, #22
 800b492:	6003      	str	r3, [r0, #0]
 800b494:	2001      	movs	r0, #1
 800b496:	e7e7      	b.n	800b468 <_raise_r+0x12>
 800b498:	2100      	movs	r1, #0
 800b49a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	4798      	blx	r3
 800b4a2:	2000      	movs	r0, #0
 800b4a4:	e7e0      	b.n	800b468 <_raise_r+0x12>
	...

0800b4a8 <raise>:
 800b4a8:	4b02      	ldr	r3, [pc, #8]	@ (800b4b4 <raise+0xc>)
 800b4aa:	4601      	mov	r1, r0
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	f7ff bfd2 	b.w	800b456 <_raise_r>
 800b4b2:	bf00      	nop
 800b4b4:	20000184 	.word	0x20000184

0800b4b8 <_kill_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	4d07      	ldr	r5, [pc, #28]	@ (800b4d8 <_kill_r+0x20>)
 800b4bc:	2300      	movs	r3, #0
 800b4be:	4604      	mov	r4, r0
 800b4c0:	4608      	mov	r0, r1
 800b4c2:	4611      	mov	r1, r2
 800b4c4:	602b      	str	r3, [r5, #0]
 800b4c6:	f7f6 f857 	bl	8001578 <_kill>
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	d102      	bne.n	800b4d4 <_kill_r+0x1c>
 800b4ce:	682b      	ldr	r3, [r5, #0]
 800b4d0:	b103      	cbz	r3, 800b4d4 <_kill_r+0x1c>
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	bd38      	pop	{r3, r4, r5, pc}
 800b4d6:	bf00      	nop
 800b4d8:	2000071c 	.word	0x2000071c

0800b4dc <_getpid_r>:
 800b4dc:	f7f6 b844 	b.w	8001568 <_getpid>

0800b4e0 <_init>:
 800b4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e2:	bf00      	nop
 800b4e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4e6:	bc08      	pop	{r3}
 800b4e8:	469e      	mov	lr, r3
 800b4ea:	4770      	bx	lr

0800b4ec <_fini>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr
