
2A_DEA_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ba50  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800bc30  0800bc30  0000cc30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0a0  0800c0a0  0000e1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0a0  0800c0a0  0000d0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0a8  0800c0a8  0000e1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0a8  0800c0a8  0000d0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c0ac  0800c0ac  0000d0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800c0b0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  200001d4  0800c284  0000e1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000800  0800c284  0000e800  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167dd  00000000  00000000  0000e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ad3  00000000  00000000  000249e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  000274b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ff8  00000000  00000000  00028908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000351e  00000000  00000000  00029900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000181e1  00000000  00000000  0002ce1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101e1d  00000000  00000000  00044fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146e1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c10  00000000  00000000  00146e60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0014da70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bc18 	.word	0x0800bc18

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	0800bc18 	.word	0x0800bc18

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800103c:	1d39      	adds	r1, r7, #4
 800103e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001042:	2201      	movs	r2, #1
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <__io_putchar+0x20>)
 8001046:	f004 f8b9 	bl	80051bc <HAL_UART_Transmit>
    return ch;
 800104a:	687b      	ldr	r3, [r7, #4]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200004b0 	.word	0x200004b0

08001058 <__io_getchar>:

GETCHAR_PROTOTYPE
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800105e:	2300      	movs	r3, #0
 8001060:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8001062:	4b0b      	ldr	r3, [pc, #44]	@ (8001090 <__io_getchar+0x38>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2208      	movs	r2, #8
 8001068:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800106a:	1df9      	adds	r1, r7, #7
 800106c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001070:	2201      	movs	r2, #1
 8001072:	4807      	ldr	r0, [pc, #28]	@ (8001090 <__io_getchar+0x38>)
 8001074:	f004 f930 	bl	80052d8 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001078:	1df9      	adds	r1, r7, #7
 800107a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800107e:	2201      	movs	r2, #1
 8001080:	4803      	ldr	r0, [pc, #12]	@ (8001090 <__io_getchar+0x38>)
 8001082:	f004 f89b 	bl	80051bc <HAL_UART_Transmit>
	return ch;
 8001086:	79fb      	ldrb	r3, [r7, #7]
}
 8001088:	4618      	mov	r0, r3
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	200004b0 	.word	0x200004b0

08001094 <HAL_UART_RxCpltCallback>:
int UARTReceiverState = 0;

volatile int flagUART1 = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	// Re-enable UART interrupt reception
	HAL_UART_Receive_IT(&huart3, &rx_char, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	4911      	ldr	r1, [pc, #68]	@ (80010e4 <HAL_UART_RxCpltCallback+0x50>)
 80010a0:	4811      	ldr	r0, [pc, #68]	@ (80010e8 <HAL_UART_RxCpltCallback+0x54>)
 80010a2:	f004 f9e1 	bl	8005468 <HAL_UART_Receive_IT>

	instruction[instructionIndex] = rx_char;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <HAL_UART_RxCpltCallback+0x58>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_UART_RxCpltCallback+0x50>)
 80010ac:	7811      	ldrb	r1, [r2, #0]
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <HAL_UART_RxCpltCallback+0x5c>)
 80010b0:	54d1      	strb	r1, [r2, r3]
	instructionIndex++;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <HAL_UART_RxCpltCallback+0x58>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	4a0c      	ldr	r2, [pc, #48]	@ (80010ec <HAL_UART_RxCpltCallback+0x58>)
 80010ba:	6013      	str	r3, [r2, #0]

	if (rx_char == '#')
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_UART_RxCpltCallback+0x50>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b23      	cmp	r3, #35	@ 0x23
 80010c2:	d10a      	bne.n	80010da <HAL_UART_RxCpltCallback+0x46>
	{
		instruction[instructionIndex] = 0; // 0 character for the printf
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <HAL_UART_RxCpltCallback+0x58>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_UART_RxCpltCallback+0x5c>)
 80010ca:	2100      	movs	r1, #0
 80010cc:	54d1      	strb	r1, [r2, r3]
		instructionIndex = 0;
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <HAL_UART_RxCpltCallback+0x58>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
		flagUART1 = 1;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <HAL_UART_RxCpltCallback+0x60>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
	}
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200005d8 	.word	0x200005d8
 80010e8:	20000544 	.word	0x20000544
 80010ec:	200006a4 	.word	0x200006a4
 80010f0:	200005dc 	.word	0x200005dc
 80010f4:	200006a8 	.word	0x200006a8

080010f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f001 f839 	bl	8002172 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 f820 	bl	8001144 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f000 fbc6 	bl	8001894 <MX_GPIO_Init>
  MX_DMA_Init();
 8001108:	f000 fb9a 	bl	8001840 <MX_DMA_Init>
  MX_TIM1_Init();
 800110c:	f000 f89a 	bl	8001244 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001110:	f000 f960 	bl	80013d4 <MX_TIM2_Init>
  MX_UART4_Init();
 8001114:	f000 fa60 	bl	80015d8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001118:	f000 faae 	bl	8001678 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800111c:	f000 faf8 	bl	8001710 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001120:	f000 fb42 	bl	80017a8 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8001124:	f000 f84e 	bl	80011c4 <MX_I2C3_Init>
  MX_TIM4_Init();
 8001128:	f000 f9e0 	bl	80014ec <MX_TIM4_Init>
//  };
//  printf("volume = %f\r\n", volume);
//  applyLabelValue(lv_test, dictOfVars);
//  printf("volume = %f\r\n", volume);

  HAL_UART_Receive_IT(&huart3,&rx_char,1);
 800112c:	2201      	movs	r2, #1
 800112e:	4903      	ldr	r1, [pc, #12]	@ (800113c <main+0x44>)
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <main+0x48>)
 8001132:	f004 f999 	bl	8005468 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001136:	bf00      	nop
 8001138:	e7fd      	b.n	8001136 <main+0x3e>
 800113a:	bf00      	nop
 800113c:	200005d8 	.word	0x200005d8
 8001140:	20000544 	.word	0x20000544

08001144 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b094      	sub	sp, #80	@ 0x50
 8001148:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800114a:	f107 0318 	add.w	r3, r7, #24
 800114e:	2238      	movs	r2, #56	@ 0x38
 8001150:	2100      	movs	r1, #0
 8001152:	4618      	mov	r0, r3
 8001154:	f008 f824 	bl	80091a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
 8001164:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001166:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800116a:	f001 fec9 	bl	8002f00 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116e:	2302      	movs	r3, #2
 8001170:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001172:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2340      	movs	r3, #64	@ 0x40
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 0318 	add.w	r3, r7, #24
 8001184:	4618      	mov	r0, r3
 8001186:	f001 ff6f 	bl	8003068 <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001190:	f000 fbec 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001198:	2301      	movs	r3, #1
 800119a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2100      	movs	r1, #0
 80011ac:	4618      	mov	r0, r3
 80011ae:	f002 fa6d 	bl	800368c <HAL_RCC_ClockConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80011b8:	f000 fbd8 	bl	800196c <Error_Handler>
  }
}
 80011bc:	bf00      	nop
 80011be:	3750      	adds	r7, #80	@ 0x50
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	@ (800123c <MX_I2C3_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	@ (8001240 <MX_I2C3_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80011d4:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <MX_I2C3_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	@ (8001238 <MX_I2C3_Init+0x74>)
 8001200:	f001 fd4c 	bl	8002c9c <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800120a:	f000 fbaf 	bl	800196c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4809      	ldr	r0, [pc, #36]	@ (8001238 <MX_I2C3_Init+0x74>)
 8001212:	f001 fdde 	bl	8002dd2 <HAL_I2CEx_ConfigAnalogFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 fba6 	bl	800196c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	@ (8001238 <MX_I2C3_Init+0x74>)
 8001224:	f001 fe20 	bl	8002e68 <HAL_I2CEx_ConfigDigitalFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 fb9d 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001f0 	.word	0x200001f0
 800123c:	40007800 	.word	0x40007800
 8001240:	00503d58 	.word	0x00503d58

08001244 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b09c      	sub	sp, #112	@ 0x70
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	605a      	str	r2, [r3, #4]
 8001254:	609a      	str	r2, [r3, #8]
 8001256:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2234      	movs	r2, #52	@ 0x34
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f007 ff8e 	bl	80091a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001284:	4b51      	ldr	r3, [pc, #324]	@ (80013cc <MX_TIM1_Init+0x188>)
 8001286:	4a52      	ldr	r2, [pc, #328]	@ (80013d0 <MX_TIM1_Init+0x18c>)
 8001288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800128a:	4b50      	ldr	r3, [pc, #320]	@ (80013cc <MX_TIM1_Init+0x188>)
 800128c:	2200      	movs	r2, #0
 800128e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b4e      	ldr	r3, [pc, #312]	@ (80013cc <MX_TIM1_Init+0x188>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001296:	4b4d      	ldr	r3, [pc, #308]	@ (80013cc <MX_TIM1_Init+0x188>)
 8001298:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800129c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b4b      	ldr	r3, [pc, #300]	@ (80013cc <MX_TIM1_Init+0x188>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a4:	4b49      	ldr	r3, [pc, #292]	@ (80013cc <MX_TIM1_Init+0x188>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b48      	ldr	r3, [pc, #288]	@ (80013cc <MX_TIM1_Init+0x188>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012b0:	4846      	ldr	r0, [pc, #280]	@ (80013cc <MX_TIM1_Init+0x188>)
 80012b2:	f002 fe55 	bl	8003f60 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012bc:	f000 fb56 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80012ca:	4619      	mov	r1, r3
 80012cc:	483f      	ldr	r0, [pc, #252]	@ (80013cc <MX_TIM1_Init+0x188>)
 80012ce:	f003 f813 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012d8:	f000 fb48 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012dc:	483b      	ldr	r0, [pc, #236]	@ (80013cc <MX_TIM1_Init+0x188>)
 80012de:	f002 fe96 	bl	800400e <HAL_TIM_PWM_Init>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012e8:	f000 fb40 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012f0:	2300      	movs	r3, #0
 80012f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012fc:	4619      	mov	r1, r3
 80012fe:	4833      	ldr	r0, [pc, #204]	@ (80013cc <MX_TIM1_Init+0x188>)
 8001300:	f003 fd8a 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800130a:	f000 fb2f 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800130e:	2360      	movs	r3, #96	@ 0x60
 8001310:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001316:	2300      	movs	r3, #0
 8001318:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800131a:	2300      	movs	r3, #0
 800131c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800132a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800132e:	2200      	movs	r2, #0
 8001330:	4619      	mov	r1, r3
 8001332:	4826      	ldr	r0, [pc, #152]	@ (80013cc <MX_TIM1_Init+0x188>)
 8001334:	f002 fecc 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800133e:	f000 fb15 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001342:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001346:	2204      	movs	r2, #4
 8001348:	4619      	mov	r1, r3
 800134a:	4820      	ldr	r0, [pc, #128]	@ (80013cc <MX_TIM1_Init+0x188>)
 800134c:	f002 fec0 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001356:	f000 fb09 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800135a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800135e:	2208      	movs	r2, #8
 8001360:	4619      	mov	r1, r3
 8001362:	481a      	ldr	r0, [pc, #104]	@ (80013cc <MX_TIM1_Init+0x188>)
 8001364:	f002 feb4 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800136e:	f000 fafd 	bl	800196c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001386:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800138a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001398:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4619      	mov	r1, r3
 80013ae:	4807      	ldr	r0, [pc, #28]	@ (80013cc <MX_TIM1_Init+0x188>)
 80013b0:	f003 fdc8 	bl	8004f44 <HAL_TIMEx_ConfigBreakDeadTime>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 80013ba:	f000 fad7 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013be:	4803      	ldr	r0, [pc, #12]	@ (80013cc <MX_TIM1_Init+0x188>)
 80013c0:	f000 fbcc 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 80013c4:	bf00      	nop
 80013c6:	3770      	adds	r7, #112	@ 0x70
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000244 	.word	0x20000244
 80013d0:	40012c00 	.word	0x40012c00

080013d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08e      	sub	sp, #56	@ 0x38
 80013d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013de:	2200      	movs	r2, #0
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	609a      	str	r2, [r3, #8]
 80013e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	f107 031c 	add.w	r3, r7, #28
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f4:	463b      	mov	r3, r7
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001406:	4b38      	ldr	r3, [pc, #224]	@ (80014e8 <MX_TIM2_Init+0x114>)
 8001408:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800140c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140e:	4b36      	ldr	r3, [pc, #216]	@ (80014e8 <MX_TIM2_Init+0x114>)
 8001410:	2200      	movs	r2, #0
 8001412:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b34      	ldr	r3, [pc, #208]	@ (80014e8 <MX_TIM2_Init+0x114>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800141a:	4b33      	ldr	r3, [pc, #204]	@ (80014e8 <MX_TIM2_Init+0x114>)
 800141c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001420:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b31      	ldr	r3, [pc, #196]	@ (80014e8 <MX_TIM2_Init+0x114>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b2f      	ldr	r3, [pc, #188]	@ (80014e8 <MX_TIM2_Init+0x114>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142e:	482e      	ldr	r0, [pc, #184]	@ (80014e8 <MX_TIM2_Init+0x114>)
 8001430:	f002 fd96 	bl	8003f60 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800143a:	f000 fa97 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001444:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001448:	4619      	mov	r1, r3
 800144a:	4827      	ldr	r0, [pc, #156]	@ (80014e8 <MX_TIM2_Init+0x114>)
 800144c:	f002 ff54 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001456:	f000 fa89 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800145a:	4823      	ldr	r0, [pc, #140]	@ (80014e8 <MX_TIM2_Init+0x114>)
 800145c:	f002 fdd7 	bl	800400e <HAL_TIM_PWM_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001466:	f000 fa81 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	481b      	ldr	r0, [pc, #108]	@ (80014e8 <MX_TIM2_Init+0x114>)
 800147a:	f003 fccd 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001484:	f000 fa72 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001488:	2360      	movs	r3, #96	@ 0x60
 800148a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800148c:	2300      	movs	r3, #0
 800148e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001490:	2300      	movs	r3, #0
 8001492:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001498:	463b      	mov	r3, r7
 800149a:	2200      	movs	r2, #0
 800149c:	4619      	mov	r1, r3
 800149e:	4812      	ldr	r0, [pc, #72]	@ (80014e8 <MX_TIM2_Init+0x114>)
 80014a0:	f002 fe16 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014aa:	f000 fa5f 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ae:	463b      	mov	r3, r7
 80014b0:	2204      	movs	r2, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <MX_TIM2_Init+0x114>)
 80014b6:	f002 fe0b 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80014c0:	f000 fa54 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014c4:	463b      	mov	r3, r7
 80014c6:	2208      	movs	r2, #8
 80014c8:	4619      	mov	r1, r3
 80014ca:	4807      	ldr	r0, [pc, #28]	@ (80014e8 <MX_TIM2_Init+0x114>)
 80014cc:	f002 fe00 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80014d6:	f000 fa49 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014da:	4803      	ldr	r0, [pc, #12]	@ (80014e8 <MX_TIM2_Init+0x114>)
 80014dc:	f000 fb3e 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 80014e0:	bf00      	nop
 80014e2:	3738      	adds	r7, #56	@ 0x38
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20000290 	.word	0x20000290

080014ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08e      	sub	sp, #56	@ 0x38
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800150c:	463b      	mov	r3, r7
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
 8001518:	611a      	str	r2, [r3, #16]
 800151a:	615a      	str	r2, [r3, #20]
 800151c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800151e:	4b2c      	ldr	r3, [pc, #176]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001520:	4a2c      	ldr	r2, [pc, #176]	@ (80015d4 <MX_TIM4_Init+0xe8>)
 8001522:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001524:	4b2a      	ldr	r3, [pc, #168]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001526:	2200      	movs	r2, #0
 8001528:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152a:	4b29      	ldr	r3, [pc, #164]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19;
 8001530:	4b27      	ldr	r3, [pc, #156]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001532:	2213      	movs	r2, #19
 8001534:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b26      	ldr	r3, [pc, #152]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153c:	4b24      	ldr	r3, [pc, #144]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001542:	4823      	ldr	r0, [pc, #140]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001544:	f002 fd0c 	bl	8003f60 <HAL_TIM_Base_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800154e:	f000 fa0d 	bl	800196c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001552:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001558:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800155c:	4619      	mov	r1, r3
 800155e:	481c      	ldr	r0, [pc, #112]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001560:	f002 feca 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800156a:	f000 f9ff 	bl	800196c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800156e:	4818      	ldr	r0, [pc, #96]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 8001570:	f002 fd4d 	bl	800400e <HAL_TIM_PWM_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800157a:	f000 f9f7 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4810      	ldr	r0, [pc, #64]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 800158e:	f003 fc43 	bl	8004e18 <HAL_TIMEx_MasterConfigSynchronization>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001598:	f000 f9e8 	bl	800196c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800159c:	2360      	movs	r3, #96	@ 0x60
 800159e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015a4:	2300      	movs	r3, #0
 80015a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	2200      	movs	r2, #0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4807      	ldr	r0, [pc, #28]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 80015b4:	f002 fd8c 	bl	80040d0 <HAL_TIM_PWM_ConfigChannel>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80015be:	f000 f9d5 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80015c2:	4803      	ldr	r0, [pc, #12]	@ (80015d0 <MX_TIM4_Init+0xe4>)
 80015c4:	f000 faca 	bl	8001b5c <HAL_TIM_MspPostInit>

}
 80015c8:	bf00      	nop
 80015ca:	3738      	adds	r7, #56	@ 0x38
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200002dc 	.word	0x200002dc
 80015d4:	40000800 	.word	0x40000800

080015d8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015dc:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_UART4_Init+0x98>)
 80015de:	4a25      	ldr	r2, [pc, #148]	@ (8001674 <MX_UART4_Init+0x9c>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80015e2:	4b23      	ldr	r3, [pc, #140]	@ (8001670 <MX_UART4_Init+0x98>)
 80015e4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_UART4_Init+0x98>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001670 <MX_UART4_Init+0x98>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001670 <MX_UART4_Init+0x98>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001670 <MX_UART4_Init+0x98>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b1b      	ldr	r3, [pc, #108]	@ (8001670 <MX_UART4_Init+0x98>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_UART4_Init+0x98>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160e:	4b18      	ldr	r3, [pc, #96]	@ (8001670 <MX_UART4_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001614:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_UART4_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <MX_UART4_Init+0x98>)
 800161c:	2208      	movs	r2, #8
 800161e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8001620:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_UART4_Init+0x98>)
 8001622:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001626:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001628:	4811      	ldr	r0, [pc, #68]	@ (8001670 <MX_UART4_Init+0x98>)
 800162a:	f003 fd1f 	bl	800506c <HAL_UART_Init>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8001634:	f000 f99a 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001638:	2100      	movs	r1, #0
 800163a:	480d      	ldr	r0, [pc, #52]	@ (8001670 <MX_UART4_Init+0x98>)
 800163c:	f005 feb5 	bl	80073aa <HAL_UARTEx_SetTxFifoThreshold>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8001646:	f000 f991 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800164a:	2100      	movs	r1, #0
 800164c:	4808      	ldr	r0, [pc, #32]	@ (8001670 <MX_UART4_Init+0x98>)
 800164e:	f005 feea 	bl	8007426 <HAL_UARTEx_SetRxFifoThreshold>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8001658:	f000 f988 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800165c:	4804      	ldr	r0, [pc, #16]	@ (8001670 <MX_UART4_Init+0x98>)
 800165e:	f005 fe6b 	bl	8007338 <HAL_UARTEx_DisableFifoMode>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8001668:	f000 f980 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000388 	.word	0x20000388
 8001674:	40004c00 	.word	0x40004c00

08001678 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800167c:	4b22      	ldr	r3, [pc, #136]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800167e:	4a23      	ldr	r2, [pc, #140]	@ (800170c <MX_USART1_UART_Init+0x94>)
 8001680:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001684:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001688:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b1d      	ldr	r3, [pc, #116]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b17      	ldr	r3, [pc, #92]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b16      	ldr	r3, [pc, #88]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	4b14      	ldr	r3, [pc, #80]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ba:	4b13      	ldr	r3, [pc, #76]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016bc:	2200      	movs	r2, #0
 80016be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 80016c0:	4811      	ldr	r0, [pc, #68]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016c2:	f003 fd23 	bl	800510c <HAL_HalfDuplex_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80016cc:	f000 f94e 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016d0:	2100      	movs	r1, #0
 80016d2:	480d      	ldr	r0, [pc, #52]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016d4:	f005 fe69 	bl	80073aa <HAL_UARTEx_SetTxFifoThreshold>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016de:	f000 f945 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e2:	2100      	movs	r1, #0
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016e6:	f005 fe9e 	bl	8007426 <HAL_UARTEx_SetRxFifoThreshold>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016f0:	f000 f93c 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016f4:	4804      	ldr	r0, [pc, #16]	@ (8001708 <MX_USART1_UART_Init+0x90>)
 80016f6:	f005 fe1f 	bl	8007338 <HAL_UARTEx_DisableFifoMode>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001700:	f000 f934 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}
 8001708:	2000041c 	.word	0x2000041c
 800170c:	40013800 	.word	0x40013800

08001710 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001714:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001716:	4a23      	ldr	r2, [pc, #140]	@ (80017a4 <MX_USART2_UART_Init+0x94>)
 8001718:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800171a:	4b21      	ldr	r3, [pc, #132]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800171c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001720:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001722:	4b1f      	ldr	r3, [pc, #124]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001728:	4b1d      	ldr	r3, [pc, #116]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172e:	4b1c      	ldr	r3, [pc, #112]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001734:	4b1a      	ldr	r3, [pc, #104]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001736:	220c      	movs	r2, #12
 8001738:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173a:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800173c:	2200      	movs	r2, #0
 800173e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001740:	4b17      	ldr	r3, [pc, #92]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001742:	2200      	movs	r2, #0
 8001744:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001746:	4b16      	ldr	r3, [pc, #88]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001748:	2200      	movs	r2, #0
 800174a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800174c:	4b14      	ldr	r3, [pc, #80]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001752:	4b13      	ldr	r3, [pc, #76]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 8001754:	2200      	movs	r2, #0
 8001756:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001758:	4811      	ldr	r0, [pc, #68]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800175a:	f003 fc87 	bl	800506c <HAL_UART_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001764:	f000 f902 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001768:	2100      	movs	r1, #0
 800176a:	480d      	ldr	r0, [pc, #52]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800176c:	f005 fe1d 	bl	80073aa <HAL_UARTEx_SetTxFifoThreshold>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001776:	f000 f8f9 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800177e:	f005 fe52 	bl	8007426 <HAL_UARTEx_SetRxFifoThreshold>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001788:	f000 f8f0 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800178c:	4804      	ldr	r0, [pc, #16]	@ (80017a0 <MX_USART2_UART_Init+0x90>)
 800178e:	f005 fdd3 	bl	8007338 <HAL_UARTEx_DisableFifoMode>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001798:	f000 f8e8 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	200004b0 	.word	0x200004b0
 80017a4:	40004400 	.word	0x40004400

080017a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017ac:	4b22      	ldr	r3, [pc, #136]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017ae:	4a23      	ldr	r2, [pc, #140]	@ (800183c <MX_USART3_UART_Init+0x94>)
 80017b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017b2:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017b4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017ce:	220c      	movs	r2, #12
 80017d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017d2:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017da:	2200      	movs	r2, #0
 80017dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017f0:	4811      	ldr	r0, [pc, #68]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 80017f2:	f003 fc3b 	bl	800506c <HAL_UART_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017fc:	f000 f8b6 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001800:	2100      	movs	r1, #0
 8001802:	480d      	ldr	r0, [pc, #52]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 8001804:	f005 fdd1 	bl	80073aa <HAL_UARTEx_SetTxFifoThreshold>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800180e:	f000 f8ad 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001812:	2100      	movs	r1, #0
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 8001816:	f005 fe06 	bl	8007426 <HAL_UARTEx_SetRxFifoThreshold>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001820:	f000 f8a4 	bl	800196c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_USART3_UART_Init+0x90>)
 8001826:	f005 fd87 	bl	8007338 <HAL_UARTEx_DisableFifoMode>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001830:	f000 f89c 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000544 	.word	0x20000544
 800183c:	40004800 	.word	0x40004800

08001840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <MX_DMA_Init+0x50>)
 8001848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800184a:	4a11      	ldr	r2, [pc, #68]	@ (8001890 <MX_DMA_Init+0x50>)
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	6493      	str	r3, [r2, #72]	@ 0x48
 8001852:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <MX_DMA_Init+0x50>)
 8001854:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001856:	f003 0304 	and.w	r3, r3, #4
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800185e:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_DMA_Init+0x50>)
 8001860:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001862:	4a0b      	ldr	r2, [pc, #44]	@ (8001890 <MX_DMA_Init+0x50>)
 8001864:	f043 0301 	orr.w	r3, r3, #1
 8001868:	6493      	str	r3, [r2, #72]	@ 0x48
 800186a:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_DMA_Init+0x50>)
 800186c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	603b      	str	r3, [r7, #0]
 8001874:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001876:	2200      	movs	r2, #0
 8001878:	2100      	movs	r1, #0
 800187a:	200b      	movs	r0, #11
 800187c:	f000 fdc5 	bl	800240a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001880:	200b      	movs	r0, #11
 8001882:	f000 fddc 	bl	800243e <HAL_NVIC_EnableIRQ>

}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40021000 	.word	0x40021000

08001894 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800189a:	f107 030c 	add.w	r3, r7, #12
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
 80018a2:	605a      	str	r2, [r3, #4]
 80018a4:	609a      	str	r2, [r3, #8]
 80018a6:	60da      	str	r2, [r3, #12]
 80018a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018aa:	4b2d      	ldr	r3, [pc, #180]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	4a2c      	ldr	r2, [pc, #176]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b27      	ldr	r3, [pc, #156]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	4a26      	ldr	r2, [pc, #152]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ce:	4b24      	ldr	r3, [pc, #144]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018de:	4a20      	ldr	r2, [pc, #128]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018e0:	f043 0302 	orr.w	r3, r3, #2
 80018e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001960 <MX_GPIO_Init+0xcc>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_GPIO_GPIO_Port, TOF_GPIO_Pin, GPIO_PIN_RESET);
 80018f2:	2200      	movs	r2, #0
 80018f4:	2180      	movs	r1, #128	@ 0x80
 80018f6:	481b      	ldr	r0, [pc, #108]	@ (8001964 <MX_GPIO_Init+0xd0>)
 80018f8:	f001 f9b8 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80018fc:	2200      	movs	r2, #0
 80018fe:	2170      	movs	r1, #112	@ 0x70
 8001900:	4819      	ldr	r0, [pc, #100]	@ (8001968 <MX_GPIO_Init+0xd4>)
 8001902:	f001 f9b3 	bl	8002c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8001906:	2302      	movs	r3, #2
 8001908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	4619      	mov	r1, r3
 8001918:	4813      	ldr	r0, [pc, #76]	@ (8001968 <MX_GPIO_Init+0xd4>)
 800191a:	f001 f825 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_GPIO_Pin */
  GPIO_InitStruct.Pin = TOF_GPIO_Pin;
 800191e:	2380      	movs	r3, #128	@ 0x80
 8001920:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001922:	2301      	movs	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_GPIO_GPIO_Port, &GPIO_InitStruct);
 800192e:	f107 030c 	add.w	r3, r7, #12
 8001932:	4619      	mov	r1, r3
 8001934:	480b      	ldr	r0, [pc, #44]	@ (8001964 <MX_GPIO_Init+0xd0>)
 8001936:	f001 f817 	bl	8002968 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800193a:	2370      	movs	r3, #112	@ 0x70
 800193c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193e:	2301      	movs	r3, #1
 8001940:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	4619      	mov	r1, r3
 8001950:	4805      	ldr	r0, [pc, #20]	@ (8001968 <MX_GPIO_Init+0xd4>)
 8001952:	f001 f809 	bl	8002968 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001956:	bf00      	nop
 8001958:	3720      	adds	r7, #32
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40021000 	.word	0x40021000
 8001964:	48000800 	.word	0x48000800
 8001968:	48000400 	.word	0x48000400

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_MspInit+0x44>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <HAL_MspInit+0x44>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	@ 0x60
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_MspInit+0x44>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_MspInit+0x44>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_MspInit+0x44>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_MspInit+0x44>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019ae:	f001 fb4b 	bl	8003048 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b2:	bf00      	nop
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b09e      	sub	sp, #120	@ 0x78
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80019cc:	2200      	movs	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	609a      	str	r2, [r3, #8]
 80019d4:	60da      	str	r2, [r3, #12]
 80019d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	2254      	movs	r2, #84	@ 0x54
 80019de:	2100      	movs	r1, #0
 80019e0:	4618      	mov	r0, r3
 80019e2:	f007 fbdd 	bl	80091a0 <memset>
  if(hi2c->Instance==I2C3)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1f      	ldr	r2, [pc, #124]	@ (8001a68 <HAL_I2C_MspInit+0xa8>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d137      	bne.n	8001a60 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80019f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80019f4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80019f6:	2300      	movs	r3, #0
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fa:	f107 0310 	add.w	r3, r7, #16
 80019fe:	4618      	mov	r0, r3
 8001a00:	f002 f860 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001a0a:	f7ff ffaf 	bl	800196c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_I2C_MspInit+0xac>)
 8001a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a12:	4a16      	ldr	r2, [pc, #88]	@ (8001a6c <HAL_I2C_MspInit+0xac>)
 8001a14:	f043 0304 	orr.w	r3, r3, #4
 8001a18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_I2C_MspInit+0xac>)
 8001a1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a1e:	f003 0304 	and.w	r3, r3, #4
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a26:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a40:	4619      	mov	r1, r3
 8001a42:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <HAL_I2C_MspInit+0xb0>)
 8001a44:	f000 ff90 	bl	8002968 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <HAL_I2C_MspInit+0xac>)
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_I2C_MspInit+0xac>)
 8001a4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a52:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <HAL_I2C_MspInit+0xac>)
 8001a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001a5c:	60bb      	str	r3, [r7, #8]
 8001a5e:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001a60:	bf00      	nop
 8001a62:	3778      	adds	r7, #120	@ 0x78
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40007800 	.word	0x40007800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000800 	.word	0x48000800

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <HAL_TIM_Base_MspInit+0xd4>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d10c      	bne.n	8001aa0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a86:	4b31      	ldr	r3, [pc, #196]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	4a30      	ldr	r2, [pc, #192]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a92:	4b2e      	ldr	r3, [pc, #184]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9a:	617b      	str	r3, [r7, #20]
 8001a9c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a9e:	e04e      	b.n	8001b3e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa8:	d10c      	bne.n	8001ac4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	4b28      	ldr	r3, [pc, #160]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab6:	4b25      	ldr	r3, [pc, #148]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	613b      	str	r3, [r7, #16]
 8001ac0:	693b      	ldr	r3, [r7, #16]
}
 8001ac2:	e03c      	b.n	8001b3e <HAL_TIM_Base_MspInit+0xca>
  else if(htim_base->Instance==TIM4)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a21      	ldr	r2, [pc, #132]	@ (8001b50 <HAL_TIM_Base_MspInit+0xdc>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d137      	bne.n	8001b3e <HAL_TIM_Base_MspInit+0xca>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ace:	4b1f      	ldr	r3, [pc, #124]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad2:	4a1e      	ldr	r2, [pc, #120]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ada:	4b1c      	ldr	r3, [pc, #112]	@ (8001b4c <HAL_TIM_Base_MspInit+0xd8>)
 8001adc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch1.Instance = DMA1_Channel1;
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001ae8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b58 <HAL_TIM_Base_MspInit+0xe4>)
 8001aea:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Request = DMA_REQUEST_TIM4_CH1;
 8001aec:	4b19      	ldr	r3, [pc, #100]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001aee:	2243      	movs	r2, #67	@ 0x43
 8001af0:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001af4:	2210      	movs	r2, #16
 8001af6:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af8:	4b16      	ldr	r3, [pc, #88]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b00:	2280      	movs	r2, #128	@ 0x80
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b04:	4b13      	ldr	r3, [pc, #76]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b0a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b0c:	4b11      	ldr	r3, [pc, #68]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b0e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b12:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b1c:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8001b20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001b22:	480c      	ldr	r0, [pc, #48]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b24:	f000 fca6 	bl	8002474 <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_TIM_Base_MspInit+0xbe>
      Error_Handler();
 8001b2e:	f7ff ff1d 	bl	800196c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b36:	625a      	str	r2, [r3, #36]	@ 0x24
 8001b38:	4a06      	ldr	r2, [pc, #24]	@ (8001b54 <HAL_TIM_Base_MspInit+0xe0>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40012c00 	.word	0x40012c00
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	40000800 	.word	0x40000800
 8001b54:	20000328 	.word	0x20000328
 8001b58:	40020008 	.word	0x40020008

08001b5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a3d      	ldr	r2, [pc, #244]	@ (8001c70 <HAL_TIM_MspPostInit+0x114>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d11c      	bne.n	8001bb8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	4a3c      	ldr	r2, [pc, #240]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001b84:	f043 0304 	orr.w	r3, r3, #4
 8001b88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8a:	4b3a      	ldr	r3, [pc, #232]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b8e:	f003 0304 	and.w	r3, r3, #4
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001b96:	2307      	movs	r3, #7
 8001b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001baa:	f107 0314 	add.w	r3, r7, #20
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4831      	ldr	r0, [pc, #196]	@ (8001c78 <HAL_TIM_MspPostInit+0x11c>)
 8001bb2:	f000 fed9 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001bb6:	e057      	b.n	8001c68 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM2)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bc0:	d12f      	bne.n	8001c22 <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bce:	4b29      	ldr	r3, [pc, #164]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bea:	2301      	movs	r3, #1
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bee:	f107 0314 	add.w	r3, r7, #20
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bf8:	f000 feb6 	bl	8002968 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8001c0e:	230a      	movs	r3, #10
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c1c:	f000 fea4 	bl	8002968 <HAL_GPIO_Init>
}
 8001c20:	e022      	b.n	8001c68 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM4)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a15      	ldr	r2, [pc, #84]	@ (8001c7c <HAL_TIM_MspPostInit+0x120>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d11d      	bne.n	8001c68 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2c:	4b11      	ldr	r3, [pc, #68]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c30:	4a10      	ldr	r2, [pc, #64]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c38:	4b0e      	ldr	r3, [pc, #56]	@ (8001c74 <HAL_TIM_MspPostInit+0x118>)
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001c44:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001c56:	230a      	movs	r3, #10
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0314 	add.w	r3, r7, #20
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c64:	f000 fe80 	bl	8002968 <HAL_GPIO_Init>
}
 8001c68:	bf00      	nop
 8001c6a:	3728      	adds	r7, #40	@ 0x28
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40012c00 	.word	0x40012c00
 8001c74:	40021000 	.word	0x40021000
 8001c78:	48000800 	.word	0x48000800
 8001c7c:	40000800 	.word	0x40000800

08001c80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b0a4      	sub	sp, #144	@ 0x90
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c88:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	605a      	str	r2, [r3, #4]
 8001c92:	609a      	str	r2, [r3, #8]
 8001c94:	60da      	str	r2, [r3, #12]
 8001c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c9c:	2254      	movs	r2, #84	@ 0x54
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f007 fa7d 	bl	80091a0 <memset>
  if(huart->Instance==UART4)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a86      	ldr	r2, [pc, #536]	@ (8001ec4 <HAL_UART_MspInit+0x244>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d13b      	bne.n	8001d28 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001cb0:	2308      	movs	r3, #8
 8001cb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 ff01 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cc8:	f7ff fe50 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001ccc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd0:	4a7d      	ldr	r2, [pc, #500]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001cd2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001cd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd8:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce4:	4b78      	ldr	r3, [pc, #480]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce8:	4a77      	ldr	r2, [pc, #476]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf0:	4b75      	ldr	r3, [pc, #468]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001cf2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf4:	f003 0304 	and.w	r3, r3, #4
 8001cf8:	623b      	str	r3, [r7, #32]
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8001cfc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001d00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001d14:	2305      	movs	r3, #5
 8001d16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	486a      	ldr	r0, [pc, #424]	@ (8001ecc <HAL_UART_MspInit+0x24c>)
 8001d22:	f000 fe21 	bl	8002968 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d26:	e0c8      	b.n	8001eba <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==USART1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a68      	ldr	r2, [pc, #416]	@ (8001ed0 <HAL_UART_MspInit+0x250>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d13a      	bne.n	8001da8 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d36:	2300      	movs	r3, #0
 8001d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f001 fec0 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001d4a:	f7ff fe0f 	bl	800196c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d52:	4a5d      	ldr	r2, [pc, #372]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d58:	6613      	str	r3, [r2, #96]	@ 0x60
 8001d5a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d62:	61fb      	str	r3, [r7, #28]
 8001d64:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	4b58      	ldr	r3, [pc, #352]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6a:	4a57      	ldr	r2, [pc, #348]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001d6c:	f043 0304 	orr.w	r3, r3, #4
 8001d70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d72:	4b55      	ldr	r3, [pc, #340]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	f003 0304 	and.w	r3, r3, #4
 8001d7a:	61bb      	str	r3, [r7, #24]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 8001d7e:	2310      	movs	r3, #16
 8001d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d82:	2312      	movs	r3, #18
 8001d84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d94:	2307      	movs	r3, #7
 8001d96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001d9a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	484a      	ldr	r0, [pc, #296]	@ (8001ecc <HAL_UART_MspInit+0x24c>)
 8001da2:	f000 fde1 	bl	8002968 <HAL_GPIO_Init>
}
 8001da6:	e088      	b.n	8001eba <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==USART2)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a49      	ldr	r2, [pc, #292]	@ (8001ed4 <HAL_UART_MspInit+0x254>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d13b      	bne.n	8001e2a <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001db2:	2302      	movs	r3, #2
 8001db4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fe80 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_UART_MspInit+0x14e>
      Error_Handler();
 8001dca:	f7ff fdcf 	bl	800196c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dd2:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001dda:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de6:	4b38      	ldr	r3, [pc, #224]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dea:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001df2:	4b35      	ldr	r3, [pc, #212]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e14:	2307      	movs	r3, #7
 8001e16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e24:	f000 fda0 	bl	8002968 <HAL_GPIO_Init>
}
 8001e28:	e047      	b.n	8001eba <HAL_UART_MspInit+0x23a>
  else if(huart->Instance==USART3)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed8 <HAL_UART_MspInit+0x258>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d142      	bne.n	8001eba <HAL_UART_MspInit+0x23a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001e34:	2304      	movs	r3, #4
 8001e36:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e40:	4618      	mov	r0, r3
 8001e42:	f001 fe3f 	bl	8003ac4 <HAL_RCCEx_PeriphCLKConfig>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d001      	beq.n	8001e50 <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8001e4c:	f7ff fd8e 	bl	800196c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e50:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001e52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e54:	4a1c      	ldr	r2, [pc, #112]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001e56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e5a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e68:	4b17      	ldr	r3, [pc, #92]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e6c:	4a16      	ldr	r2, [pc, #88]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001e6e:	f043 0302 	orr.w	r3, r3, #2
 8001e72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e74:	4b14      	ldr	r3, [pc, #80]	@ (8001ec8 <HAL_UART_MspInit+0x248>)
 8001e76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 8001e80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001e84:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e98:	2307      	movs	r3, #7
 8001e9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e9e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480d      	ldr	r0, [pc, #52]	@ (8001edc <HAL_UART_MspInit+0x25c>)
 8001ea6:	f000 fd5f 	bl	8002968 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2101      	movs	r1, #1
 8001eae:	2027      	movs	r0, #39	@ 0x27
 8001eb0:	f000 faab 	bl	800240a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001eb4:	2027      	movs	r0, #39	@ 0x27
 8001eb6:	f000 fac2 	bl	800243e <HAL_NVIC_EnableIRQ>
}
 8001eba:	bf00      	nop
 8001ebc:	3790      	adds	r7, #144	@ 0x90
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40004c00 	.word	0x40004c00
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	40004400 	.word	0x40004400
 8001ed8:	40004800 	.word	0x40004800
 8001edc:	48000400 	.word	0x48000400

08001ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <NMI_Handler+0x4>

08001ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001eec:	bf00      	nop
 8001eee:	e7fd      	b.n	8001eec <HardFault_Handler+0x4>

08001ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ef4:	bf00      	nop
 8001ef6:	e7fd      	b.n	8001ef4 <MemManage_Handler+0x4>

08001ef8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001efc:	bf00      	nop
 8001efe:	e7fd      	b.n	8001efc <BusFault_Handler+0x4>

08001f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f04:	bf00      	nop
 8001f06:	e7fd      	b.n	8001f04 <UsageFault_Handler+0x4>

08001f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f16:	b480      	push	{r7}
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f36:	f000 f96f 	bl	8002218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
	...

08001f40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <DMA1_Channel1_IRQHandler+0x10>)
 8001f46:	f000 fbfd 	bl	8002744 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000328 	.word	0x20000328

08001f54 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <USART3_IRQHandler+0x10>)
 8001f5a:	f003 fad1 	bl	8005500 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000544 	.word	0x20000544

08001f68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return 1;
 8001f6c:	2301      	movs	r3, #1
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <_kill>:

int _kill(int pid, int sig)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f82:	f007 f971 	bl	8009268 <__errno>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2216      	movs	r2, #22
 8001f8a:	601a      	str	r2, [r3, #0]
  return -1;
 8001f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_exit>:

void _exit (int status)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff ffe7 	bl	8001f78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001faa:	bf00      	nop
 8001fac:	e7fd      	b.n	8001faa <_exit+0x12>

08001fae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b086      	sub	sp, #24
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	60f8      	str	r0, [r7, #12]
 8001fb6:	60b9      	str	r1, [r7, #8]
 8001fb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fba:	2300      	movs	r3, #0
 8001fbc:	617b      	str	r3, [r7, #20]
 8001fbe:	e00a      	b.n	8001fd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fc0:	f7ff f84a 	bl	8001058 <__io_getchar>
 8001fc4:	4601      	mov	r1, r0
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	60ba      	str	r2, [r7, #8]
 8001fcc:	b2ca      	uxtb	r2, r1
 8001fce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	dbf0      	blt.n	8001fc0 <_read+0x12>
  }

  return len;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e009      	b.n	800200e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	60ba      	str	r2, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff f816 	bl	8001034 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	3301      	adds	r3, #1
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	429a      	cmp	r2, r3
 8002014:	dbf1      	blt.n	8001ffa <_write+0x12>
  }
  return len;
 8002016:	687b      	ldr	r3, [r7, #4]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <_close>:

int _close(int file)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002048:	605a      	str	r2, [r3, #4]
  return 0;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <_isatty>:

int _isatty(int file)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002060:	2301      	movs	r3, #1
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800206e:	b480      	push	{r7}
 8002070:	b085      	sub	sp, #20
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800207a:	2300      	movs	r3, #0
}
 800207c:	4618      	mov	r0, r3
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002090:	4a14      	ldr	r2, [pc, #80]	@ (80020e4 <_sbrk+0x5c>)
 8002092:	4b15      	ldr	r3, [pc, #84]	@ (80020e8 <_sbrk+0x60>)
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800209c:	4b13      	ldr	r3, [pc, #76]	@ (80020ec <_sbrk+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d102      	bne.n	80020aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020a4:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <_sbrk+0x64>)
 80020a6:	4a12      	ldr	r2, [pc, #72]	@ (80020f0 <_sbrk+0x68>)
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020aa:	4b10      	ldr	r3, [pc, #64]	@ (80020ec <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d207      	bcs.n	80020c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020b8:	f007 f8d6 	bl	8009268 <__errno>
 80020bc:	4603      	mov	r3, r0
 80020be:	220c      	movs	r2, #12
 80020c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c6:	e009      	b.n	80020dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <_sbrk+0x64>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4413      	add	r3, r2
 80020d6:	4a05      	ldr	r2, [pc, #20]	@ (80020ec <_sbrk+0x64>)
 80020d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020da:	68fb      	ldr	r3, [r7, #12]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20020000 	.word	0x20020000
 80020e8:	00000400 	.word	0x00000400
 80020ec:	200006ac 	.word	0x200006ac
 80020f0:	20000800 	.word	0x20000800

080020f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <SystemInit+0x28>)
 80020fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fe:	4a07      	ldr	r2, [pc, #28]	@ (800211c <SystemInit+0x28>)
 8002100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
  SCB->VTOR = FLASH_BASE | 0;
 8002108:	4b04      	ldr	r3, [pc, #16]	@ (800211c <SystemInit+0x28>)
 800210a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	e000ed00 	.word	0xe000ed00

08002120 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002120:	480d      	ldr	r0, [pc, #52]	@ (8002158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002122:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002124:	f7ff ffe6 	bl	80020f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002128:	480c      	ldr	r0, [pc, #48]	@ (800215c <LoopForever+0x6>)
  ldr r1, =_edata
 800212a:	490d      	ldr	r1, [pc, #52]	@ (8002160 <LoopForever+0xa>)
  ldr r2, =_sidata
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <LoopForever+0xe>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002130:	e002      	b.n	8002138 <LoopCopyDataInit>

08002132 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002132:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002134:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002136:	3304      	adds	r3, #4

08002138 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002138:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800213a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800213c:	d3f9      	bcc.n	8002132 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002140:	4c0a      	ldr	r4, [pc, #40]	@ (800216c <LoopForever+0x16>)
  movs r3, #0
 8002142:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002144:	e001      	b.n	800214a <LoopFillZerobss>

08002146 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002146:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002148:	3204      	adds	r2, #4

0800214a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800214a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800214c:	d3fb      	bcc.n	8002146 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800214e:	f007 f891 	bl	8009274 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002152:	f7fe ffd1 	bl	80010f8 <main>

08002156 <LoopForever>:

LoopForever:
    b LoopForever
 8002156:	e7fe      	b.n	8002156 <LoopForever>
  ldr   r0, =_estack
 8002158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002160:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002164:	0800c0b0 	.word	0x0800c0b0
  ldr r2, =_sbss
 8002168:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800216c:	20000800 	.word	0x20000800

08002170 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002170:	e7fe      	b.n	8002170 <ADC1_2_IRQHandler>

08002172 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217c:	2003      	movs	r0, #3
 800217e:	f000 f939 	bl	80023f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002182:	200f      	movs	r0, #15
 8002184:	f000 f80e 	bl	80021a4 <HAL_InitTick>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d002      	beq.n	8002194 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	71fb      	strb	r3, [r7, #7]
 8002192:	e001      	b.n	8002198 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002194:	f7ff fbf0 	bl	8001978 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002198:	79fb      	ldrb	r3, [r7, #7]

}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021ac:	2300      	movs	r3, #0
 80021ae:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80021b0:	4b16      	ldr	r3, [pc, #88]	@ (800220c <HAL_InitTick+0x68>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d022      	beq.n	80021fe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80021b8:	4b15      	ldr	r3, [pc, #84]	@ (8002210 <HAL_InitTick+0x6c>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	4b13      	ldr	r3, [pc, #76]	@ (800220c <HAL_InitTick+0x68>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80021c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80021c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 f944 	bl	800245a <HAL_SYSTICK_Config>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d10f      	bne.n	80021f8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	d809      	bhi.n	80021f2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021de:	2200      	movs	r2, #0
 80021e0:	6879      	ldr	r1, [r7, #4]
 80021e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021e6:	f000 f910 	bl	800240a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002214 <HAL_InitTick+0x70>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6013      	str	r3, [r2, #0]
 80021f0:	e007      	b.n	8002202 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	e004      	b.n	8002202 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
 80021fc:	e001      	b.n	8002202 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002202:	7bfb      	ldrb	r3, [r7, #15]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000008 	.word	0x20000008
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_IncTick+0x1c>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <HAL_IncTick+0x20>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4413      	add	r3, r2
 8002226:	4a03      	ldr	r2, [pc, #12]	@ (8002234 <HAL_IncTick+0x1c>)
 8002228:	6013      	str	r3, [r2, #0]
}
 800222a:	bf00      	nop
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	200006b0 	.word	0x200006b0
 8002238:	20000008 	.word	0x20000008

0800223c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return uwTick;
 8002240:	4b03      	ldr	r3, [pc, #12]	@ (8002250 <HAL_GetTick+0x14>)
 8002242:	681b      	ldr	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	200006b0 	.word	0x200006b0

08002254 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002254:	b480      	push	{r7}
 8002256:	b085      	sub	sp, #20
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002264:	4b0c      	ldr	r3, [pc, #48]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002270:	4013      	ands	r3, r2
 8002272:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800227c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002280:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002284:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002286:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <__NVIC_SetPriorityGrouping+0x44>)
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <__NVIC_GetPriorityGrouping+0x18>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	0a1b      	lsrs	r3, r3, #8
 80022a6:	f003 0307 	and.w	r3, r3, #7
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	db0b      	blt.n	80022e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022ca:	79fb      	ldrb	r3, [r7, #7]
 80022cc:	f003 021f 	and.w	r2, r3, #31
 80022d0:	4907      	ldr	r1, [pc, #28]	@ (80022f0 <__NVIC_EnableIRQ+0x38>)
 80022d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d6:	095b      	lsrs	r3, r3, #5
 80022d8:	2001      	movs	r0, #1
 80022da:	fa00 f202 	lsl.w	r2, r0, r2
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022e2:	bf00      	nop
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	6039      	str	r1, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002304:	2b00      	cmp	r3, #0
 8002306:	db0a      	blt.n	800231e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	b2da      	uxtb	r2, r3
 800230c:	490c      	ldr	r1, [pc, #48]	@ (8002340 <__NVIC_SetPriority+0x4c>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	0112      	lsls	r2, r2, #4
 8002314:	b2d2      	uxtb	r2, r2
 8002316:	440b      	add	r3, r1
 8002318:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800231c:	e00a      	b.n	8002334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	b2da      	uxtb	r2, r3
 8002322:	4908      	ldr	r1, [pc, #32]	@ (8002344 <__NVIC_SetPriority+0x50>)
 8002324:	79fb      	ldrb	r3, [r7, #7]
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	3b04      	subs	r3, #4
 800232c:	0112      	lsls	r2, r2, #4
 800232e:	b2d2      	uxtb	r2, r2
 8002330:	440b      	add	r3, r1
 8002332:	761a      	strb	r2, [r3, #24]
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr
 8002340:	e000e100 	.word	0xe000e100
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f1c3 0307 	rsb	r3, r3, #7
 8002362:	2b04      	cmp	r3, #4
 8002364:	bf28      	it	cs
 8002366:	2304      	movcs	r3, #4
 8002368:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3304      	adds	r3, #4
 800236e:	2b06      	cmp	r3, #6
 8002370:	d902      	bls.n	8002378 <NVIC_EncodePriority+0x30>
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	3b03      	subs	r3, #3
 8002376:	e000      	b.n	800237a <NVIC_EncodePriority+0x32>
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800237c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43da      	mvns	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	401a      	ands	r2, r3
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002390:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa01 f303 	lsl.w	r3, r1, r3
 800239a:	43d9      	mvns	r1, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a0:	4313      	orrs	r3, r2
         );
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3724      	adds	r7, #36	@ 0x24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
	...

080023b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c0:	d301      	bcc.n	80023c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c2:	2301      	movs	r3, #1
 80023c4:	e00f      	b.n	80023e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023c6:	4a0a      	ldr	r2, [pc, #40]	@ (80023f0 <SysTick_Config+0x40>)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ce:	210f      	movs	r1, #15
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023d4:	f7ff ff8e 	bl	80022f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d8:	4b05      	ldr	r3, [pc, #20]	@ (80023f0 <SysTick_Config+0x40>)
 80023da:	2200      	movs	r2, #0
 80023dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023de:	4b04      	ldr	r3, [pc, #16]	@ (80023f0 <SysTick_Config+0x40>)
 80023e0:	2207      	movs	r2, #7
 80023e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	e000e010 	.word	0xe000e010

080023f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7ff ff29 	bl	8002254 <__NVIC_SetPriorityGrouping>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b086      	sub	sp, #24
 800240e:	af00      	add	r7, sp, #0
 8002410:	4603      	mov	r3, r0
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002418:	f7ff ff40 	bl	800229c <__NVIC_GetPriorityGrouping>
 800241c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	68b9      	ldr	r1, [r7, #8]
 8002422:	6978      	ldr	r0, [r7, #20]
 8002424:	f7ff ff90 	bl	8002348 <NVIC_EncodePriority>
 8002428:	4602      	mov	r2, r0
 800242a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff5f 	bl	80022f4 <__NVIC_SetPriority>
}
 8002436:	bf00      	nop
 8002438:	3718      	adds	r7, #24
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	4603      	mov	r3, r0
 8002446:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	4618      	mov	r0, r3
 800244e:	f7ff ff33 	bl	80022b8 <__NVIC_EnableIRQ>
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f7ff ffa4 	bl	80023b0 <SysTick_Config>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e08d      	b.n	80025a2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	4b47      	ldr	r3, [pc, #284]	@ (80025ac <HAL_DMA_Init+0x138>)
 800248e:	429a      	cmp	r2, r3
 8002490:	d80f      	bhi.n	80024b2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	461a      	mov	r2, r3
 8002498:	4b45      	ldr	r3, [pc, #276]	@ (80025b0 <HAL_DMA_Init+0x13c>)
 800249a:	4413      	add	r3, r2
 800249c:	4a45      	ldr	r2, [pc, #276]	@ (80025b4 <HAL_DMA_Init+0x140>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	009a      	lsls	r2, r3, #2
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a42      	ldr	r2, [pc, #264]	@ (80025b8 <HAL_DMA_Init+0x144>)
 80024ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80024b0:	e00e      	b.n	80024d0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b40      	ldr	r3, [pc, #256]	@ (80025bc <HAL_DMA_Init+0x148>)
 80024ba:	4413      	add	r3, r2
 80024bc:	4a3d      	ldr	r2, [pc, #244]	@ (80025b4 <HAL_DMA_Init+0x140>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	009a      	lsls	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a3c      	ldr	r2, [pc, #240]	@ (80025c0 <HAL_DMA_Init+0x14c>)
 80024ce:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80024e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80024ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f9be 	bl	80028a4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002530:	d102      	bne.n	8002538 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002540:	b2d2      	uxtb	r2, r2
 8002542:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800254c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d010      	beq.n	8002578 <HAL_DMA_Init+0x104>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b04      	cmp	r3, #4
 800255c:	d80c      	bhi.n	8002578 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f9de 	bl	8002920 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002570:	687a      	ldr	r2, [r7, #4]
 8002572:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	e008      	b.n	800258a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2200      	movs	r2, #0
 8002588:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80025a0:	2300      	movs	r3, #0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40020407 	.word	0x40020407
 80025b0:	bffdfff8 	.word	0xbffdfff8
 80025b4:	cccccccd 	.word	0xcccccccd
 80025b8:	40020000 	.word	0x40020000
 80025bc:	bffdfbf8 	.word	0xbffdfbf8
 80025c0:	40020400 	.word	0x40020400

080025c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d005      	beq.n	80025e8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2204      	movs	r2, #4
 80025e0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
 80025e6:	e037      	b.n	8002658 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 020e 	bic.w	r2, r2, #14
 80025f6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002602:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002606:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f022 0201 	bic.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f202 	lsl.w	r2, r1, r2
 800262a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002634:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00c      	beq.n	8002658 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002648:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800264c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002656:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002668:	7bfb      	ldrb	r3, [r7, #15]
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d00d      	beq.n	80026aa <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2204      	movs	r2, #4
 8002692:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e047      	b.n	800273a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 020e 	bic.w	r2, r2, #14
 80026b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f022 0201 	bic.w	r2, r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f003 021f 	and.w	r2, r3, #31
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	2101      	movs	r1, #1
 80026e8:	fa01 f202 	lsl.w	r2, r1, r2
 80026ec:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80026f6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00c      	beq.n	800271a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800270a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800270e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002718:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
    }
  }
  return status;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002760:	f003 031f 	and.w	r3, r3, #31
 8002764:	2204      	movs	r2, #4
 8002766:	409a      	lsls	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	4013      	ands	r3, r2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d026      	beq.n	80027be <HAL_DMA_IRQHandler+0x7a>
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d021      	beq.n	80027be <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0320 	and.w	r3, r3, #32
 8002784:	2b00      	cmp	r3, #0
 8002786:	d107      	bne.n	8002798 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0204 	bic.w	r2, r2, #4
 8002796:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	f003 021f 	and.w	r2, r3, #31
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a4:	2104      	movs	r1, #4
 80027a6:	fa01 f202 	lsl.w	r2, r1, r2
 80027aa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d071      	beq.n	8002898 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80027bc:	e06c      	b.n	8002898 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f003 031f 	and.w	r3, r3, #31
 80027c6:	2202      	movs	r2, #2
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02e      	beq.n	8002830 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d029      	beq.n	8002830 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0320 	and.w	r3, r3, #32
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 020a 	bic.w	r2, r2, #10
 80027f8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2201      	movs	r2, #1
 80027fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002806:	f003 021f 	and.w	r2, r3, #31
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	2102      	movs	r1, #2
 8002810:	fa01 f202 	lsl.w	r2, r1, r2
 8002814:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	2b00      	cmp	r3, #0
 8002824:	d038      	beq.n	8002898 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800282e:	e033      	b.n	8002898 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	2208      	movs	r2, #8
 800283a:	409a      	lsls	r2, r3
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4013      	ands	r3, r2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d02a      	beq.n	800289a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d025      	beq.n	800289a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f022 020e 	bic.w	r2, r2, #14
 800285c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f003 021f 	and.w	r2, r3, #31
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	2101      	movs	r1, #1
 800286c:	fa01 f202 	lsl.w	r2, r1, r2
 8002870:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800288c:	2b00      	cmp	r3, #0
 800288e:	d004      	beq.n	800289a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002898:	bf00      	nop
 800289a:	bf00      	nop
}
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
	...

080028a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b087      	sub	sp, #28
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	461a      	mov	r2, r3
 80028b2:	4b16      	ldr	r3, [pc, #88]	@ (800290c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d802      	bhi.n	80028be <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80028b8:	4b15      	ldr	r3, [pc, #84]	@ (8002910 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80028ba:	617b      	str	r3, [r7, #20]
 80028bc:	e001      	b.n	80028c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80028be:	4b15      	ldr	r3, [pc, #84]	@ (8002914 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80028c0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	3b08      	subs	r3, #8
 80028ce:	4a12      	ldr	r2, [pc, #72]	@ (8002918 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80028d0:	fba2 2303 	umull	r2, r3, r2, r3
 80028d4:	091b      	lsrs	r3, r3, #4
 80028d6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	461a      	mov	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80028ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 031f 	and.w	r3, r3, #31
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80028fe:	bf00      	nop
 8002900:	371c      	adds	r7, #28
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40020407 	.word	0x40020407
 8002910:	40020800 	.word	0x40020800
 8002914:	40020820 	.word	0x40020820
 8002918:	cccccccd 	.word	0xcccccccd
 800291c:	40020880 	.word	0x40020880

08002920 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	461a      	mov	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002942:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	3b01      	subs	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	1000823f 	.word	0x1000823f
 8002964:	40020940 	.word	0x40020940

08002968 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002976:	e15a      	b.n	8002c2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	fa01 f303 	lsl.w	r3, r1, r3
 8002984:	4013      	ands	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	f000 814c 	beq.w	8002c28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	2b01      	cmp	r3, #1
 800299a:	d005      	beq.n	80029a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d130      	bne.n	8002a0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	005b      	lsls	r3, r3, #1
 80029b2:	2203      	movs	r2, #3
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	43db      	mvns	r3, r3
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	4013      	ands	r3, r2
 80029be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029de:	2201      	movs	r2, #1
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4013      	ands	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	091b      	lsrs	r3, r3, #4
 80029f4:	f003 0201 	and.w	r2, r3, #1
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	693a      	ldr	r2, [r7, #16]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d017      	beq.n	8002a46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	005b      	lsls	r3, r3, #1
 8002a20:	2203      	movs	r2, #3
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d123      	bne.n	8002a9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	08da      	lsrs	r2, r3, #3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	3208      	adds	r2, #8
 8002a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	220f      	movs	r2, #15
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	08da      	lsrs	r2, r3, #3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	3208      	adds	r2, #8
 8002a94:	6939      	ldr	r1, [r7, #16]
 8002a96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	693a      	ldr	r2, [r7, #16]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0203 	and.w	r2, r3, #3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80a6 	beq.w	8002c28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002adc:	4b5b      	ldr	r3, [pc, #364]	@ (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002ade:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ae0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002ae2:	f043 0301 	orr.w	r3, r3, #1
 8002ae6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ae8:	4b58      	ldr	r3, [pc, #352]	@ (8002c4c <HAL_GPIO_Init+0x2e4>)
 8002aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002af4:	4a56      	ldr	r2, [pc, #344]	@ (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	089b      	lsrs	r3, r3, #2
 8002afa:	3302      	adds	r3, #2
 8002afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0303 	and.w	r3, r3, #3
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	220f      	movs	r2, #15
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4013      	ands	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b1e:	d01f      	beq.n	8002b60 <HAL_GPIO_Init+0x1f8>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a4c      	ldr	r2, [pc, #304]	@ (8002c54 <HAL_GPIO_Init+0x2ec>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d019      	beq.n	8002b5c <HAL_GPIO_Init+0x1f4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a4b      	ldr	r2, [pc, #300]	@ (8002c58 <HAL_GPIO_Init+0x2f0>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d013      	beq.n	8002b58 <HAL_GPIO_Init+0x1f0>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a4a      	ldr	r2, [pc, #296]	@ (8002c5c <HAL_GPIO_Init+0x2f4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00d      	beq.n	8002b54 <HAL_GPIO_Init+0x1ec>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4a49      	ldr	r2, [pc, #292]	@ (8002c60 <HAL_GPIO_Init+0x2f8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d007      	beq.n	8002b50 <HAL_GPIO_Init+0x1e8>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a48      	ldr	r2, [pc, #288]	@ (8002c64 <HAL_GPIO_Init+0x2fc>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d101      	bne.n	8002b4c <HAL_GPIO_Init+0x1e4>
 8002b48:	2305      	movs	r3, #5
 8002b4a:	e00a      	b.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	e008      	b.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b50:	2304      	movs	r3, #4
 8002b52:	e006      	b.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b54:	2303      	movs	r3, #3
 8002b56:	e004      	b.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b58:	2302      	movs	r3, #2
 8002b5a:	e002      	b.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_GPIO_Init+0x1fa>
 8002b60:	2300      	movs	r3, #0
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	f002 0203 	and.w	r2, r2, #3
 8002b68:	0092      	lsls	r2, r2, #2
 8002b6a:	4093      	lsls	r3, r2
 8002b6c:	693a      	ldr	r2, [r7, #16]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b72:	4937      	ldr	r1, [pc, #220]	@ (8002c50 <HAL_GPIO_Init+0x2e8>)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	089b      	lsrs	r3, r3, #2
 8002b78:	3302      	adds	r3, #2
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b80:	4b39      	ldr	r3, [pc, #228]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ba4:	4a30      	ldr	r2, [pc, #192]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002baa:	4b2f      	ldr	r3, [pc, #188]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	693a      	ldr	r2, [r7, #16]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d003      	beq.n	8002bce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bce:	4a26      	ldr	r2, [pc, #152]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002bd4:	4b24      	ldr	r3, [pc, #144]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002bf0:	693a      	ldr	r2, [r7, #16]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c22:	4a11      	ldr	r2, [pc, #68]	@ (8002c68 <HAL_GPIO_Init+0x300>)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	fa22 f303 	lsr.w	r3, r2, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f47f ae9d 	bne.w	8002978 <HAL_GPIO_Init+0x10>
  }
}
 8002c3e:	bf00      	nop
 8002c40:	bf00      	nop
 8002c42:	371c      	adds	r7, #28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	40010000 	.word	0x40010000
 8002c54:	48000400 	.word	0x48000400
 8002c58:	48000800 	.word	0x48000800
 8002c5c:	48000c00 	.word	0x48000c00
 8002c60:	48001000 	.word	0x48001000
 8002c64:	48001400 	.word	0x48001400
 8002c68:	40010400 	.word	0x40010400

08002c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	460b      	mov	r3, r1
 8002c76:	807b      	strh	r3, [r7, #2]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c7c:	787b      	ldrb	r3, [r7, #1]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c82:	887a      	ldrh	r2, [r7, #2]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c88:	e002      	b.n	8002c90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c8a:	887a      	ldrh	r2, [r7, #2]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e08d      	b.n	8002dca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fe fe7c 	bl	80019c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2224      	movs	r2, #36	@ 0x24
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f022 0201 	bic.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002cec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d107      	bne.n	8002d16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d12:	609a      	str	r2, [r3, #8]
 8002d14:	e006      	b.n	8002d24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689a      	ldr	r2, [r3, #8]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d108      	bne.n	8002d3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	e007      	b.n	8002d4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6812      	ldr	r2, [r2, #0]
 8002d58:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d60:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	68da      	ldr	r2, [r3, #12]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d70:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	691a      	ldr	r2, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695b      	ldr	r3, [r3, #20]
 8002d7a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69d9      	ldr	r1, [r3, #28]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1a      	ldr	r2, [r3, #32]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d138      	bne.n	8002e5a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e032      	b.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2224      	movs	r2, #36	@ 0x24
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002e24:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6819      	ldr	r1, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 0201 	orr.w	r2, r2, #1
 8002e44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e56:	2300      	movs	r3, #0
 8002e58:	e000      	b.n	8002e5c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e5a:	2302      	movs	r3, #2
  }
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b20      	cmp	r3, #32
 8002e7c:	d139      	bne.n	8002ef2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e033      	b.n	8002ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	@ 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002eba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	021b      	lsls	r3, r3, #8
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2220      	movs	r2, #32
 8002ee2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e000      	b.n	8002ef4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ef2:	2302      	movs	r3, #2
  }
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr

08002f00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d141      	bne.n	8002f92 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f1a:	d131      	bne.n	8002f80 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f1c:	4b47      	ldr	r3, [pc, #284]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f22:	4a46      	ldr	r2, [pc, #280]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f28:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f2c:	4b43      	ldr	r3, [pc, #268]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f34:	4a41      	ldr	r2, [pc, #260]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002f3c:	4b40      	ldr	r3, [pc, #256]	@ (8003040 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2232      	movs	r2, #50	@ 0x32
 8002f42:	fb02 f303 	mul.w	r3, r2, r3
 8002f46:	4a3f      	ldr	r2, [pc, #252]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f48:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4c:	0c9b      	lsrs	r3, r3, #18
 8002f4e:	3301      	adds	r3, #1
 8002f50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f52:	e002      	b.n	8002f5a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	3b01      	subs	r3, #1
 8002f58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f5a:	4b38      	ldr	r3, [pc, #224]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f66:	d102      	bne.n	8002f6e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f2      	bne.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f6e:	4b33      	ldr	r3, [pc, #204]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f7a:	d158      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f7c:	2303      	movs	r3, #3
 8002f7e:	e057      	b.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f80:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f86:	4a2d      	ldr	r2, [pc, #180]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002f90:	e04d      	b.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f98:	d141      	bne.n	800301e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f9a:	4b28      	ldr	r3, [pc, #160]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fa6:	d131      	bne.n	800300c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fa8:	4b24      	ldr	r3, [pc, #144]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fae:	4a23      	ldr	r2, [pc, #140]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fb4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fb8:	4b20      	ldr	r3, [pc, #128]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003040 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2232      	movs	r2, #50	@ 0x32
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003044 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	0c9b      	lsrs	r3, r3, #18
 8002fda:	3301      	adds	r3, #1
 8002fdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fde:	e002      	b.n	8002fe6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fe6:	4b15      	ldr	r3, [pc, #84]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d102      	bne.n	8002ffa <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f2      	bne.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ffa:	4b10      	ldr	r3, [pc, #64]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003006:	d112      	bne.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e011      	b.n	8003030 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800300c:	4b0b      	ldr	r3, [pc, #44]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800300e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003018:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800301c:	e007      	b.n	800302e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800301e:	4b07      	ldr	r3, [pc, #28]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003026:	4a05      	ldr	r2, [pc, #20]	@ (800303c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800302c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	40007000 	.word	0x40007000
 8003040:	20000000 	.word	0x20000000
 8003044:	431bde83 	.word	0x431bde83

08003048 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800304c:	4b05      	ldr	r3, [pc, #20]	@ (8003064 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a04      	ldr	r2, [pc, #16]	@ (8003064 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003052:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003056:	6093      	str	r3, [r2, #8]
}
 8003058:	bf00      	nop
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40007000 	.word	0x40007000

08003068 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b088      	sub	sp, #32
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e2fe      	b.n	8003678 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d075      	beq.n	8003172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003086:	4b97      	ldr	r3, [pc, #604]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 030c 	and.w	r3, r3, #12
 800308e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003090:	4b94      	ldr	r3, [pc, #592]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b0c      	cmp	r3, #12
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x3e>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d002      	beq.n	80030ac <HAL_RCC_OscConfig+0x44>
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d10b      	bne.n	80030c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030ac:	4b8d      	ldr	r3, [pc, #564]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d05b      	beq.n	8003170 <HAL_RCC_OscConfig+0x108>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d157      	bne.n	8003170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e2d9      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030cc:	d106      	bne.n	80030dc <HAL_RCC_OscConfig+0x74>
 80030ce:	4b85      	ldr	r3, [pc, #532]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a84      	ldr	r2, [pc, #528]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x98>
 80030e6:	4b7f      	ldr	r3, [pc, #508]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7e      	ldr	r2, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b7c      	ldr	r3, [pc, #496]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a7b      	ldr	r2, [pc, #492]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xb0>
 8003100:	4b78      	ldr	r3, [pc, #480]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a77      	ldr	r2, [pc, #476]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b75      	ldr	r3, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a74      	ldr	r2, [pc, #464]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7ff f88c 	bl	800223c <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7ff f888 	bl	800223c <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	@ 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e29e      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800313a:	4b6a      	ldr	r3, [pc, #424]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xc0>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003148:	f7ff f878 	bl	800223c <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7ff f874 	bl	800223c <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	@ 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e28a      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003162:	4b60      	ldr	r3, [pc, #384]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0xe8>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d075      	beq.n	800326a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800317e:	4b59      	ldr	r3, [pc, #356]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003188:	4b56      	ldr	r3, [pc, #344]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	f003 0303 	and.w	r3, r3, #3
 8003190:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	2b0c      	cmp	r3, #12
 8003196:	d102      	bne.n	800319e <HAL_RCC_OscConfig+0x136>
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d002      	beq.n	80031a4 <HAL_RCC_OscConfig+0x13c>
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d11f      	bne.n	80031e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031a4:	4b4f      	ldr	r3, [pc, #316]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_RCC_OscConfig+0x154>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e25d      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b49      	ldr	r3, [pc, #292]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	4946      	ldr	r1, [pc, #280]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80031d0:	4b45      	ldr	r3, [pc, #276]	@ (80032e8 <HAL_RCC_OscConfig+0x280>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fe ffe5 	bl	80021a4 <HAL_InitTick>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d043      	beq.n	8003268 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e249      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d023      	beq.n	8003234 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031ec:	4b3d      	ldr	r3, [pc, #244]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3c      	ldr	r2, [pc, #240]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80031f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031f8:	f7ff f820 	bl	800223c <HAL_GetTick>
 80031fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031fe:	e008      	b.n	8003212 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003200:	f7ff f81c 	bl	800223c <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	2b02      	cmp	r3, #2
 800320c:	d901      	bls.n	8003212 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800320e:	2303      	movs	r3, #3
 8003210:	e232      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003212:	4b34      	ldr	r3, [pc, #208]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d0f0      	beq.n	8003200 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800321e:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	061b      	lsls	r3, r3, #24
 800322c:	492d      	ldr	r1, [pc, #180]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]
 8003232:	e01a      	b.n	800326a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a2a      	ldr	r2, [pc, #168]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800323a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800323e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003240:	f7fe fffc 	bl	800223c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7fe fff8 	bl	800223c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e20e      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800325a:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1e0>
 8003266:	e000      	b.n	800326a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003268:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d041      	beq.n	80032fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01c      	beq.n	80032b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327e:	4b19      	ldr	r3, [pc, #100]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003280:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003284:	4a17      	ldr	r2, [pc, #92]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328e:	f7fe ffd5 	bl	800223c <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003294:	e008      	b.n	80032a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003296:	f7fe ffd1 	bl	800223c <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d901      	bls.n	80032a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e1e7      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032a8:	4b0e      	ldr	r3, [pc, #56]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80032aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0ef      	beq.n	8003296 <HAL_RCC_OscConfig+0x22e>
 80032b6:	e020      	b.n	80032fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b0a      	ldr	r3, [pc, #40]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032be:	4a09      	ldr	r2, [pc, #36]	@ (80032e4 <HAL_RCC_OscConfig+0x27c>)
 80032c0:	f023 0301 	bic.w	r3, r3, #1
 80032c4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c8:	f7fe ffb8 	bl	800223c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ce:	e00d      	b.n	80032ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d0:	f7fe ffb4 	bl	800223c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d906      	bls.n	80032ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e1ca      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
 80032e2:	bf00      	nop
 80032e4:	40021000 	.word	0x40021000
 80032e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ec:	4b8c      	ldr	r3, [pc, #560]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1ea      	bne.n	80032d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 80a6 	beq.w	8003454 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003308:	2300      	movs	r3, #0
 800330a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800330c:	4b84      	ldr	r3, [pc, #528]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800330e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_RCC_OscConfig+0x2b4>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_RCC_OscConfig+0x2b6>
 800331c:	2300      	movs	r3, #0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00d      	beq.n	800333e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	4b7f      	ldr	r3, [pc, #508]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	4a7e      	ldr	r2, [pc, #504]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800332c:	6593      	str	r3, [r2, #88]	@ 0x58
 800332e:	4b7c      	ldr	r3, [pc, #496]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800333a:	2301      	movs	r3, #1
 800333c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800333e:	4b79      	ldr	r3, [pc, #484]	@ (8003524 <HAL_RCC_OscConfig+0x4bc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003346:	2b00      	cmp	r3, #0
 8003348:	d118      	bne.n	800337c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800334a:	4b76      	ldr	r3, [pc, #472]	@ (8003524 <HAL_RCC_OscConfig+0x4bc>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a75      	ldr	r2, [pc, #468]	@ (8003524 <HAL_RCC_OscConfig+0x4bc>)
 8003350:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003356:	f7fe ff71 	bl	800223c <HAL_GetTick>
 800335a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800335c:	e008      	b.n	8003370 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335e:	f7fe ff6d 	bl	800223c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b02      	cmp	r3, #2
 800336a:	d901      	bls.n	8003370 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800336c:	2303      	movs	r3, #3
 800336e:	e183      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003370:	4b6c      	ldr	r3, [pc, #432]	@ (8003524 <HAL_RCC_OscConfig+0x4bc>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0f0      	beq.n	800335e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d108      	bne.n	8003396 <HAL_RCC_OscConfig+0x32e>
 8003384:	4b66      	ldr	r3, [pc, #408]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800338a:	4a65      	ldr	r2, [pc, #404]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003394:	e024      	b.n	80033e0 <HAL_RCC_OscConfig+0x378>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b05      	cmp	r3, #5
 800339c:	d110      	bne.n	80033c0 <HAL_RCC_OscConfig+0x358>
 800339e:	4b60      	ldr	r3, [pc, #384]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033b4:	4a5a      	ldr	r2, [pc, #360]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033be:	e00f      	b.n	80033e0 <HAL_RCC_OscConfig+0x378>
 80033c0:	4b57      	ldr	r3, [pc, #348]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033c6:	4a56      	ldr	r2, [pc, #344]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f023 0301 	bic.w	r3, r3, #1
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80033d0:	4b53      	ldr	r3, [pc, #332]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033d6:	4a52      	ldr	r2, [pc, #328]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80033d8:	f023 0304 	bic.w	r3, r3, #4
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d016      	beq.n	8003416 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e8:	f7fe ff28 	bl	800223c <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ee:	e00a      	b.n	8003406 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f0:	f7fe ff24 	bl	800223c <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fe:	4293      	cmp	r3, r2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e138      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	4b46      	ldr	r3, [pc, #280]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ed      	beq.n	80033f0 <HAL_RCC_OscConfig+0x388>
 8003414:	e015      	b.n	8003442 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003416:	f7fe ff11 	bl	800223c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800341c:	e00a      	b.n	8003434 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800341e:	f7fe ff0d 	bl	800223c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f241 3288 	movw	r2, #5000	@ 0x1388
 800342c:	4293      	cmp	r3, r2
 800342e:	d901      	bls.n	8003434 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e121      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003434:	4b3a      	ldr	r3, [pc, #232]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003436:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1ed      	bne.n	800341e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003442:	7ffb      	ldrb	r3, [r7, #31]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d105      	bne.n	8003454 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003448:	4b35      	ldr	r3, [pc, #212]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800344a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344c:	4a34      	ldr	r2, [pc, #208]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800344e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003452:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d03c      	beq.n	80034da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	699b      	ldr	r3, [r3, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01c      	beq.n	80034a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003468:	4b2d      	ldr	r3, [pc, #180]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 800346a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800346e:	4a2c      	ldr	r2, [pc, #176]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003478:	f7fe fee0 	bl	800223c <HAL_GetTick>
 800347c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800347e:	e008      	b.n	8003492 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003480:	f7fe fedc 	bl	800223c <HAL_GetTick>
 8003484:	4602      	mov	r2, r0
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1ad3      	subs	r3, r2, r3
 800348a:	2b02      	cmp	r3, #2
 800348c:	d901      	bls.n	8003492 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800348e:	2303      	movs	r3, #3
 8003490:	e0f2      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003492:	4b23      	ldr	r3, [pc, #140]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003494:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d0ef      	beq.n	8003480 <HAL_RCC_OscConfig+0x418>
 80034a0:	e01b      	b.n	80034da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034a8:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034aa:	f023 0301 	bic.w	r3, r3, #1
 80034ae:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b2:	f7fe fec3 	bl	800223c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ba:	f7fe febf 	bl	800223c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0d5      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1ef      	bne.n	80034ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80c9 	beq.w	8003676 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 030c 	and.w	r3, r3, #12
 80034ec:	2b0c      	cmp	r3, #12
 80034ee:	f000 8083 	beq.w	80035f8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d15e      	bne.n	80035b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034fa:	4b09      	ldr	r3, [pc, #36]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a08      	ldr	r2, [pc, #32]	@ (8003520 <HAL_RCC_OscConfig+0x4b8>)
 8003500:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003504:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fe fe99 	bl	800223c <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350c:	e00c      	b.n	8003528 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350e:	f7fe fe95 	bl	800223c <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d905      	bls.n	8003528 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e0ab      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003528:	4b55      	ldr	r3, [pc, #340]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1ec      	bne.n	800350e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003534:	4b52      	ldr	r3, [pc, #328]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	4b52      	ldr	r3, [pc, #328]	@ (8003684 <HAL_RCC_OscConfig+0x61c>)
 800353a:	4013      	ands	r3, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6a11      	ldr	r1, [r2, #32]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003544:	3a01      	subs	r2, #1
 8003546:	0112      	lsls	r2, r2, #4
 8003548:	4311      	orrs	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800354e:	0212      	lsls	r2, r2, #8
 8003550:	4311      	orrs	r1, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003556:	0852      	lsrs	r2, r2, #1
 8003558:	3a01      	subs	r2, #1
 800355a:	0552      	lsls	r2, r2, #21
 800355c:	4311      	orrs	r1, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003562:	0852      	lsrs	r2, r2, #1
 8003564:	3a01      	subs	r2, #1
 8003566:	0652      	lsls	r2, r2, #25
 8003568:	4311      	orrs	r1, r2
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800356e:	06d2      	lsls	r2, r2, #27
 8003570:	430a      	orrs	r2, r1
 8003572:	4943      	ldr	r1, [pc, #268]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 8003574:	4313      	orrs	r3, r2
 8003576:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003578:	4b41      	ldr	r3, [pc, #260]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a40      	ldr	r2, [pc, #256]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 800357e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003582:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003584:	4b3e      	ldr	r3, [pc, #248]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	4a3d      	ldr	r2, [pc, #244]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 800358a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800358e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003590:	f7fe fe54 	bl	800223c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003596:	e008      	b.n	80035aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003598:	f7fe fe50 	bl	800223c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e066      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80035aa:	4b35      	ldr	r3, [pc, #212]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0f0      	beq.n	8003598 <HAL_RCC_OscConfig+0x530>
 80035b6:	e05e      	b.n	8003676 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b8:	4b31      	ldr	r3, [pc, #196]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a30      	ldr	r2, [pc, #192]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 80035be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c4:	f7fe fe3a 	bl	800223c <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035cc:	f7fe fe36 	bl	800223c <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e04c      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035de:	4b28      	ldr	r3, [pc, #160]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f0      	bne.n	80035cc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80035ea:	4b25      	ldr	r3, [pc, #148]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	4924      	ldr	r1, [pc, #144]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 80035f0:	4b25      	ldr	r3, [pc, #148]	@ (8003688 <HAL_RCC_OscConfig+0x620>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	60cb      	str	r3, [r1, #12]
 80035f6:	e03e      	b.n	8003676 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e039      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003604:	4b1e      	ldr	r3, [pc, #120]	@ (8003680 <HAL_RCC_OscConfig+0x618>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f003 0203 	and.w	r2, r3, #3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	429a      	cmp	r2, r3
 8003616:	d12c      	bne.n	8003672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003622:	3b01      	subs	r3, #1
 8003624:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d123      	bne.n	8003672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003634:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d11b      	bne.n	8003672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d113      	bne.n	8003672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003654:	085b      	lsrs	r3, r3, #1
 8003656:	3b01      	subs	r3, #1
 8003658:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800365a:	429a      	cmp	r2, r3
 800365c:	d109      	bne.n	8003672 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	3b01      	subs	r3, #1
 800366c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d001      	beq.n	8003676 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e000      	b.n	8003678 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3720      	adds	r7, #32
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40021000 	.word	0x40021000
 8003684:	019f800c 	.word	0x019f800c
 8003688:	feeefffc 	.word	0xfeeefffc

0800368c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003696:	2300      	movs	r3, #0
 8003698:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e11e      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036a4:	4b91      	ldr	r3, [pc, #580]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 030f 	and.w	r3, r3, #15
 80036ac:	683a      	ldr	r2, [r7, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d910      	bls.n	80036d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b2:	4b8e      	ldr	r3, [pc, #568]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f023 020f 	bic.w	r2, r3, #15
 80036ba:	498c      	ldr	r1, [pc, #560]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	4313      	orrs	r3, r2
 80036c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036c2:	4b8a      	ldr	r3, [pc, #552]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d001      	beq.n	80036d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e106      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0301 	and.w	r3, r3, #1
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d073      	beq.n	80037c8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	2b03      	cmp	r3, #3
 80036e6:	d129      	bne.n	800373c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e8:	4b81      	ldr	r3, [pc, #516]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0f4      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80036f8:	f000 f99e 	bl	8003a38 <RCC_GetSysClockFreqFromPLLSource>
 80036fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4a7c      	ldr	r2, [pc, #496]	@ (80038f4 <HAL_RCC_ClockConfig+0x268>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d93f      	bls.n	8003786 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003706:	4b7a      	ldr	r3, [pc, #488]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d033      	beq.n	8003786 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003722:	2b00      	cmp	r3, #0
 8003724:	d12f      	bne.n	8003786 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003726:	4b72      	ldr	r3, [pc, #456]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800372e:	4a70      	ldr	r2, [pc, #448]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003730:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003734:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	e024      	b.n	8003786 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d107      	bne.n	8003754 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003744:	4b6a      	ldr	r3, [pc, #424]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d109      	bne.n	8003764 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e0c6      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003754:	4b66      	ldr	r3, [pc, #408]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0be      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003764:	f000 f8ce 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8003768:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4a61      	ldr	r2, [pc, #388]	@ (80038f4 <HAL_RCC_ClockConfig+0x268>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d909      	bls.n	8003786 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003772:	4b5f      	ldr	r3, [pc, #380]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800377a:	4a5d      	ldr	r2, [pc, #372]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 800377c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003780:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003782:	2380      	movs	r3, #128	@ 0x80
 8003784:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003786:	4b5a      	ldr	r3, [pc, #360]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f023 0203 	bic.w	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	4957      	ldr	r1, [pc, #348]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003794:	4313      	orrs	r3, r2
 8003796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003798:	f7fe fd50 	bl	800223c <HAL_GetTick>
 800379c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379e:	e00a      	b.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a0:	f7fe fd4c 	bl	800223c <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e095      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b6:	4b4e      	ldr	r3, [pc, #312]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 020c 	and.w	r2, r3, #12
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d1eb      	bne.n	80037a0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d023      	beq.n	800381c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d005      	beq.n	80037ec <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e0:	4b43      	ldr	r3, [pc, #268]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	4a42      	ldr	r2, [pc, #264]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80037e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80037ea:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80037f8:	4b3d      	ldr	r3, [pc, #244]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003800:	4a3b      	ldr	r2, [pc, #236]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003802:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003806:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b39      	ldr	r3, [pc, #228]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	4936      	ldr	r1, [pc, #216]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
 800381a:	e008      	b.n	800382e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	2b80      	cmp	r3, #128	@ 0x80
 8003820:	d105      	bne.n	800382e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003822:	4b33      	ldr	r3, [pc, #204]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	4a32      	ldr	r2, [pc, #200]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800382c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800382e:	4b2f      	ldr	r3, [pc, #188]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d21d      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383c:	4b2b      	ldr	r3, [pc, #172]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 020f 	bic.w	r2, r3, #15
 8003844:	4929      	ldr	r1, [pc, #164]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	4313      	orrs	r3, r2
 800384a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800384c:	f7fe fcf6 	bl	800223c <HAL_GetTick>
 8003850:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	e00a      	b.n	800386a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003854:	f7fe fcf2 	bl	800223c <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003862:	4293      	cmp	r3, r2
 8003864:	d901      	bls.n	800386a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e03b      	b.n	80038e2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b20      	ldr	r3, [pc, #128]	@ (80038ec <HAL_RCC_ClockConfig+0x260>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d1ed      	bne.n	8003854 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0304 	and.w	r3, r3, #4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d008      	beq.n	8003896 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003884:	4b1a      	ldr	r3, [pc, #104]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	4917      	ldr	r1, [pc, #92]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 8003892:	4313      	orrs	r3, r2
 8003894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d009      	beq.n	80038b6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a2:	4b13      	ldr	r3, [pc, #76]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	691b      	ldr	r3, [r3, #16]
 80038ae:	00db      	lsls	r3, r3, #3
 80038b0:	490f      	ldr	r1, [pc, #60]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038b6:	f000 f825 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 80038ba:	4602      	mov	r2, r0
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <HAL_RCC_ClockConfig+0x264>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	091b      	lsrs	r3, r3, #4
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	490c      	ldr	r1, [pc, #48]	@ (80038f8 <HAL_RCC_ClockConfig+0x26c>)
 80038c8:	5ccb      	ldrb	r3, [r1, r3]
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <HAL_RCC_ClockConfig+0x270>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80038d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003900 <HAL_RCC_ClockConfig+0x274>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fc62 	bl	80021a4 <HAL_InitTick>
 80038e0:	4603      	mov	r3, r0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40022000 	.word	0x40022000
 80038f0:	40021000 	.word	0x40021000
 80038f4:	04c4b400 	.word	0x04c4b400
 80038f8:	0800bc30 	.word	0x0800bc30
 80038fc:	20000000 	.word	0x20000000
 8003900:	20000004 	.word	0x20000004

08003904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800390a:	4b2c      	ldr	r3, [pc, #176]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b04      	cmp	r3, #4
 8003914:	d102      	bne.n	800391c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003916:	4b2a      	ldr	r3, [pc, #168]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003918:	613b      	str	r3, [r7, #16]
 800391a:	e047      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800391c:	4b27      	ldr	r3, [pc, #156]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 030c 	and.w	r3, r3, #12
 8003924:	2b08      	cmp	r3, #8
 8003926:	d102      	bne.n	800392e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003928:	4b26      	ldr	r3, [pc, #152]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e03e      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800392e:	4b23      	ldr	r3, [pc, #140]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 030c 	and.w	r3, r3, #12
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d136      	bne.n	80039a8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800393a:	4b20      	ldr	r3, [pc, #128]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003944:	4b1d      	ldr	r3, [pc, #116]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3301      	adds	r3, #1
 8003950:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b03      	cmp	r3, #3
 8003956:	d10c      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003958:	4a1a      	ldr	r2, [pc, #104]	@ (80039c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	4a16      	ldr	r2, [pc, #88]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8003962:	68d2      	ldr	r2, [r2, #12]
 8003964:	0a12      	lsrs	r2, r2, #8
 8003966:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800396a:	fb02 f303 	mul.w	r3, r2, r3
 800396e:	617b      	str	r3, [r7, #20]
      break;
 8003970:	e00c      	b.n	800398c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003972:	4a13      	ldr	r2, [pc, #76]	@ (80039c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	fbb2 f3f3 	udiv	r3, r2, r3
 800397a:	4a10      	ldr	r2, [pc, #64]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800397c:	68d2      	ldr	r2, [r2, #12]
 800397e:	0a12      	lsrs	r2, r2, #8
 8003980:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003984:	fb02 f303 	mul.w	r3, r2, r3
 8003988:	617b      	str	r3, [r7, #20]
      break;
 800398a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800398c:	4b0b      	ldr	r3, [pc, #44]	@ (80039bc <HAL_RCC_GetSysClockFreq+0xb8>)
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	0e5b      	lsrs	r3, r3, #25
 8003992:	f003 0303 	and.w	r3, r3, #3
 8003996:	3301      	adds	r3, #1
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800399c:	697a      	ldr	r2, [r7, #20]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	e001      	b.n	80039ac <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80039ac:	693b      	ldr	r3, [r7, #16]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	371c      	adds	r7, #28
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40021000 	.word	0x40021000
 80039c0:	00f42400 	.word	0x00f42400
 80039c4:	007a1200 	.word	0x007a1200

080039c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039cc:	4b03      	ldr	r3, [pc, #12]	@ (80039dc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ce:	681b      	ldr	r3, [r3, #0]
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	20000000 	.word	0x20000000

080039e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80039e4:	f7ff fff0 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 80039e8:	4602      	mov	r2, r0
 80039ea:	4b06      	ldr	r3, [pc, #24]	@ (8003a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	0a1b      	lsrs	r3, r3, #8
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	4904      	ldr	r1, [pc, #16]	@ (8003a08 <HAL_RCC_GetPCLK1Freq+0x28>)
 80039f6:	5ccb      	ldrb	r3, [r1, r3]
 80039f8:	f003 031f 	and.w	r3, r3, #31
 80039fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40021000 	.word	0x40021000
 8003a08:	0800bc40 	.word	0x0800bc40

08003a0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a10:	f7ff ffda 	bl	80039c8 <HAL_RCC_GetHCLKFreq>
 8003a14:	4602      	mov	r2, r0
 8003a16:	4b06      	ldr	r3, [pc, #24]	@ (8003a30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	0adb      	lsrs	r3, r3, #11
 8003a1c:	f003 0307 	and.w	r3, r3, #7
 8003a20:	4904      	ldr	r1, [pc, #16]	@ (8003a34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a22:	5ccb      	ldrb	r3, [r1, r3]
 8003a24:	f003 031f 	and.w	r3, r3, #31
 8003a28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	40021000 	.word	0x40021000
 8003a34:	0800bc40 	.word	0x0800bc40

08003a38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a40:	68db      	ldr	r3, [r3, #12]
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	3301      	adds	r3, #1
 8003a54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	2b03      	cmp	r3, #3
 8003a5a:	d10c      	bne.n	8003a76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a5c:	4a17      	ldr	r2, [pc, #92]	@ (8003abc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a64:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a66:	68d2      	ldr	r2, [r2, #12]
 8003a68:	0a12      	lsrs	r2, r2, #8
 8003a6a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a6e:	fb02 f303 	mul.w	r3, r2, r3
 8003a72:	617b      	str	r3, [r7, #20]
    break;
 8003a74:	e00c      	b.n	8003a90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a76:	4a12      	ldr	r2, [pc, #72]	@ (8003ac0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a80:	68d2      	ldr	r2, [r2, #12]
 8003a82:	0a12      	lsrs	r2, r2, #8
 8003a84:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	617b      	str	r3, [r7, #20]
    break;
 8003a8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a90:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	0e5b      	lsrs	r3, r3, #25
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003aaa:	687b      	ldr	r3, [r7, #4]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	007a1200 	.word	0x007a1200
 8003ac0:	00f42400 	.word	0x00f42400

08003ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003acc:	2300      	movs	r3, #0
 8003ace:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 8098 	beq.w	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ae6:	4b43      	ldr	r3, [pc, #268]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10d      	bne.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003af2:	4b40      	ldr	r3, [pc, #256]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	4a3f      	ldr	r2, [pc, #252]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003af8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003afc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003afe:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b0e:	4b3a      	ldr	r3, [pc, #232]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a39      	ldr	r2, [pc, #228]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b1a:	f7fe fb8f 	bl	800223c <HAL_GetTick>
 8003b1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b20:	e009      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b22:	f7fe fb8b 	bl	800223c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d902      	bls.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	74fb      	strb	r3, [r7, #19]
        break;
 8003b34:	e005      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b36:	4b30      	ldr	r3, [pc, #192]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0ef      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003b42:	7cfb      	ldrb	r3, [r7, #19]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d159      	bne.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003b48:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d01e      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d019      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003b64:	4b23      	ldr	r3, [pc, #140]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b70:	4b20      	ldr	r3, [pc, #128]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b76:	4a1f      	ldr	r2, [pc, #124]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b80:	4b1c      	ldr	r3, [pc, #112]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b90:	4a18      	ldr	r2, [pc, #96]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d016      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba2:	f7fe fb4b 	bl	800223c <HAL_GetTick>
 8003ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ba8:	e00b      	b.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003baa:	f7fe fb47 	bl	800223c <HAL_GetTick>
 8003bae:	4602      	mov	r2, r0
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d902      	bls.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	74fb      	strb	r3, [r7, #19]
            break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0ec      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003bd0:	7cfb      	ldrb	r3, [r7, #19]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10b      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bd6:	4b07      	ldr	r3, [pc, #28]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003be4:	4903      	ldr	r1, [pc, #12]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003bec:	e008      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bee:	7cfb      	ldrb	r3, [r7, #19]
 8003bf0:	74bb      	strb	r3, [r7, #18]
 8003bf2:	e005      	b.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfc:	7cfb      	ldrb	r3, [r7, #19]
 8003bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c00:	7c7b      	ldrb	r3, [r7, #17]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d105      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c06:	4ba7      	ldr	r3, [pc, #668]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0a:	4aa6      	ldr	r2, [pc, #664]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c0c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00a      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c1e:	4ba1      	ldr	r3, [pc, #644]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c24:	f023 0203 	bic.w	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	499d      	ldr	r1, [pc, #628]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00a      	beq.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c40:	4b98      	ldr	r3, [pc, #608]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c46:	f023 020c 	bic.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	4995      	ldr	r1, [pc, #596]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0304 	and.w	r3, r3, #4
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c62:	4b90      	ldr	r3, [pc, #576]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c68:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	498c      	ldr	r1, [pc, #560]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c84:	4b87      	ldr	r3, [pc, #540]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	4984      	ldr	r1, [pc, #528]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0310 	and.w	r3, r3, #16
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00a      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ca6:	4b7f      	ldr	r3, [pc, #508]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	497b      	ldr	r1, [pc, #492]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0320 	and.w	r3, r3, #32
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003cc8:	4b76      	ldr	r3, [pc, #472]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	4973      	ldr	r1, [pc, #460]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00a      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003cea:	4b6e      	ldr	r3, [pc, #440]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cf0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	496a      	ldr	r1, [pc, #424]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d0c:	4b65      	ldr	r3, [pc, #404]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d12:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	4962      	ldr	r1, [pc, #392]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	4959      	ldr	r1, [pc, #356]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d50:	4b54      	ldr	r3, [pc, #336]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d52:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d5e:	4951      	ldr	r1, [pc, #324]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	4948      	ldr	r1, [pc, #288]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d015      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d94:	4b43      	ldr	r3, [pc, #268]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	4940      	ldr	r1, [pc, #256]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db2:	d105      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003dbe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d015      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dcc:	4b35      	ldr	r3, [pc, #212]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dda:	4932      	ldr	r1, [pc, #200]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003de6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dea:	d105      	bne.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	4a2c      	ldr	r2, [pc, #176]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003df6:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d015      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003e04:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e0a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e12:	4924      	ldr	r1, [pc, #144]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e22:	d105      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e24:	4b1f      	ldr	r3, [pc, #124]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	4a1e      	ldr	r2, [pc, #120]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d015      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e42:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e4a:	4916      	ldr	r1, [pc, #88]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e56:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e5a:	d105      	bne.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	4a10      	ldr	r2, [pc, #64]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d019      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e74:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	4908      	ldr	r1, [pc, #32]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e94:	4b03      	ldr	r3, [pc, #12]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a02      	ldr	r2, [pc, #8]	@ (8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003e9e:	60d3      	str	r3, [r2, #12]
 8003ea0:	e002      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d015      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003eb4:	4b29      	ldr	r3, [pc, #164]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	4926      	ldr	r1, [pc, #152]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ece:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ed2:	d105      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ed4:	4b21      	ldr	r3, [pc, #132]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a20      	ldr	r2, [pc, #128]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ede:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d015      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003eec:	4b1b      	ldr	r3, [pc, #108]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ef2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003efa:	4918      	ldr	r1, [pc, #96]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f0a:	d105      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003f0c:	4b13      	ldr	r3, [pc, #76]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	4a12      	ldr	r2, [pc, #72]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f16:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d015      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003f24:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f32:	490a      	ldr	r1, [pc, #40]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f34:	4313      	orrs	r3, r2
 8003f36:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003f42:	d105      	bne.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f44:	4b05      	ldr	r3, [pc, #20]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003f4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f4e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003f50:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000

08003f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e049      	b.n	8004006 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fd fd74 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3304      	adds	r3, #4
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	4610      	mov	r0, r2
 8003fa0:	f000 fac0 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e049      	b.n	80040b4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004026:	b2db      	uxtb	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	d106      	bne.n	800403a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f841 	bl	80040bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2202      	movs	r2, #2
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3304      	adds	r3, #4
 800404a:	4619      	mov	r1, r3
 800404c:	4610      	mov	r0, r2
 800404e:	f000 fa69 	bl	8004524 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2201      	movs	r2, #1
 800408e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3708      	adds	r7, #8
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80040c4:	bf00      	nop
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e0ff      	b.n	80042ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2b14      	cmp	r3, #20
 80040fa:	f200 80f0 	bhi.w	80042de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80040fe:	a201      	add	r2, pc, #4	@ (adr r2, 8004104 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004104:	08004159 	.word	0x08004159
 8004108:	080042df 	.word	0x080042df
 800410c:	080042df 	.word	0x080042df
 8004110:	080042df 	.word	0x080042df
 8004114:	08004199 	.word	0x08004199
 8004118:	080042df 	.word	0x080042df
 800411c:	080042df 	.word	0x080042df
 8004120:	080042df 	.word	0x080042df
 8004124:	080041db 	.word	0x080041db
 8004128:	080042df 	.word	0x080042df
 800412c:	080042df 	.word	0x080042df
 8004130:	080042df 	.word	0x080042df
 8004134:	0800421b 	.word	0x0800421b
 8004138:	080042df 	.word	0x080042df
 800413c:	080042df 	.word	0x080042df
 8004140:	080042df 	.word	0x080042df
 8004144:	0800425d 	.word	0x0800425d
 8004148:	080042df 	.word	0x080042df
 800414c:	080042df 	.word	0x080042df
 8004150:	080042df 	.word	0x080042df
 8004154:	0800429d 	.word	0x0800429d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68b9      	ldr	r1, [r7, #8]
 800415e:	4618      	mov	r0, r3
 8004160:	f000 fa94 	bl	800468c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0208 	orr.w	r2, r2, #8
 8004172:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699a      	ldr	r2, [r3, #24]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0204 	bic.w	r2, r2, #4
 8004182:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	619a      	str	r2, [r3, #24]
      break;
 8004196:	e0a5      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fb0e 	bl	80047c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	699a      	ldr	r2, [r3, #24]
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	699a      	ldr	r2, [r3, #24]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6999      	ldr	r1, [r3, #24]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	021a      	lsls	r2, r3, #8
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	619a      	str	r2, [r3, #24]
      break;
 80041d8:	e084      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f000 fb81 	bl	80048e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	69da      	ldr	r2, [r3, #28]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0208 	orr.w	r2, r2, #8
 80041f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	69da      	ldr	r2, [r3, #28]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f022 0204 	bic.w	r2, r2, #4
 8004204:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69d9      	ldr	r1, [r3, #28]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	430a      	orrs	r2, r1
 8004216:	61da      	str	r2, [r3, #28]
      break;
 8004218:	e064      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68b9      	ldr	r1, [r7, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f000 fbf3 	bl	8004a0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69da      	ldr	r2, [r3, #28]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004234:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	69da      	ldr	r2, [r3, #28]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004244:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	69d9      	ldr	r1, [r3, #28]
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	021a      	lsls	r2, r3, #8
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	61da      	str	r2, [r3, #28]
      break;
 800425a:	e043      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fc66 	bl	8004b34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0208 	orr.w	r2, r2, #8
 8004276:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0204 	bic.w	r2, r2, #4
 8004286:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800429a:	e023      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68b9      	ldr	r1, [r7, #8]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fcb0 	bl	8004c08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	021a      	lsls	r2, r3, #8
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	430a      	orrs	r2, r1
 80042da:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80042dc:	e002      	b.n	80042e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	75fb      	strb	r3, [r7, #23]
      break;
 80042e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop

080042f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004302:	2300      	movs	r3, #0
 8004304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800430c:	2b01      	cmp	r3, #1
 800430e:	d101      	bne.n	8004314 <HAL_TIM_ConfigClockSource+0x1c>
 8004310:	2302      	movs	r3, #2
 8004312:	e0f6      	b.n	8004502 <HAL_TIM_ConfigClockSource+0x20a>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8004332:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800433e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a6f      	ldr	r2, [pc, #444]	@ (800450c <HAL_TIM_ConfigClockSource+0x214>)
 800434e:	4293      	cmp	r3, r2
 8004350:	f000 80c1 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004354:	4a6d      	ldr	r2, [pc, #436]	@ (800450c <HAL_TIM_ConfigClockSource+0x214>)
 8004356:	4293      	cmp	r3, r2
 8004358:	f200 80c6 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800435c:	4a6c      	ldr	r2, [pc, #432]	@ (8004510 <HAL_TIM_ConfigClockSource+0x218>)
 800435e:	4293      	cmp	r3, r2
 8004360:	f000 80b9 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004364:	4a6a      	ldr	r2, [pc, #424]	@ (8004510 <HAL_TIM_ConfigClockSource+0x218>)
 8004366:	4293      	cmp	r3, r2
 8004368:	f200 80be 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800436c:	4a69      	ldr	r2, [pc, #420]	@ (8004514 <HAL_TIM_ConfigClockSource+0x21c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	f000 80b1 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004374:	4a67      	ldr	r2, [pc, #412]	@ (8004514 <HAL_TIM_ConfigClockSource+0x21c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f200 80b6 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800437c:	4a66      	ldr	r2, [pc, #408]	@ (8004518 <HAL_TIM_ConfigClockSource+0x220>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f000 80a9 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004384:	4a64      	ldr	r2, [pc, #400]	@ (8004518 <HAL_TIM_ConfigClockSource+0x220>)
 8004386:	4293      	cmp	r3, r2
 8004388:	f200 80ae 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800438c:	4a63      	ldr	r2, [pc, #396]	@ (800451c <HAL_TIM_ConfigClockSource+0x224>)
 800438e:	4293      	cmp	r3, r2
 8004390:	f000 80a1 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004394:	4a61      	ldr	r2, [pc, #388]	@ (800451c <HAL_TIM_ConfigClockSource+0x224>)
 8004396:	4293      	cmp	r3, r2
 8004398:	f200 80a6 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 800439c:	4a60      	ldr	r2, [pc, #384]	@ (8004520 <HAL_TIM_ConfigClockSource+0x228>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	f000 8099 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 80043a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004520 <HAL_TIM_ConfigClockSource+0x228>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	f200 809e 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043ac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043b0:	f000 8091 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 80043b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80043b8:	f200 8096 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043bc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c0:	f000 8089 	beq.w	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 80043c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c8:	f200 808e 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d0:	d03e      	beq.n	8004450 <HAL_TIM_ConfigClockSource+0x158>
 80043d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043d6:	f200 8087 	bhi.w	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043de:	f000 8086 	beq.w	80044ee <HAL_TIM_ConfigClockSource+0x1f6>
 80043e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043e6:	d87f      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043e8:	2b70      	cmp	r3, #112	@ 0x70
 80043ea:	d01a      	beq.n	8004422 <HAL_TIM_ConfigClockSource+0x12a>
 80043ec:	2b70      	cmp	r3, #112	@ 0x70
 80043ee:	d87b      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043f0:	2b60      	cmp	r3, #96	@ 0x60
 80043f2:	d050      	beq.n	8004496 <HAL_TIM_ConfigClockSource+0x19e>
 80043f4:	2b60      	cmp	r3, #96	@ 0x60
 80043f6:	d877      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 80043f8:	2b50      	cmp	r3, #80	@ 0x50
 80043fa:	d03c      	beq.n	8004476 <HAL_TIM_ConfigClockSource+0x17e>
 80043fc:	2b50      	cmp	r3, #80	@ 0x50
 80043fe:	d873      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004400:	2b40      	cmp	r3, #64	@ 0x40
 8004402:	d058      	beq.n	80044b6 <HAL_TIM_ConfigClockSource+0x1be>
 8004404:	2b40      	cmp	r3, #64	@ 0x40
 8004406:	d86f      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004408:	2b30      	cmp	r3, #48	@ 0x30
 800440a:	d064      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 800440c:	2b30      	cmp	r3, #48	@ 0x30
 800440e:	d86b      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004410:	2b20      	cmp	r3, #32
 8004412:	d060      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d867      	bhi.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
 8004418:	2b00      	cmp	r3, #0
 800441a:	d05c      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 800441c:	2b10      	cmp	r3, #16
 800441e:	d05a      	beq.n	80044d6 <HAL_TIM_ConfigClockSource+0x1de>
 8004420:	e062      	b.n	80044e8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004432:	f000 fcd1 	bl	8004dd8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004444:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	609a      	str	r2, [r3, #8]
      break;
 800444e:	e04f      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004460:	f000 fcba 	bl	8004dd8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	689a      	ldr	r2, [r3, #8]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004472:	609a      	str	r2, [r3, #8]
      break;
 8004474:	e03c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004482:	461a      	mov	r2, r3
 8004484:	f000 fc2c 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2150      	movs	r1, #80	@ 0x50
 800448e:	4618      	mov	r0, r3
 8004490:	f000 fc85 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 8004494:	e02c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044a2:	461a      	mov	r2, r3
 80044a4:	f000 fc4b 	bl	8004d3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2160      	movs	r1, #96	@ 0x60
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fc75 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 80044b4:	e01c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044c2:	461a      	mov	r2, r3
 80044c4:	f000 fc0c 	bl	8004ce0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2140      	movs	r1, #64	@ 0x40
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 fc65 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 80044d4:	e00c      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4619      	mov	r1, r3
 80044e0:	4610      	mov	r0, r2
 80044e2:	f000 fc5c 	bl	8004d9e <TIM_ITRx_SetConfig>
      break;
 80044e6:	e003      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	73fb      	strb	r3, [r7, #15]
      break;
 80044ec:	e000      	b.n	80044f0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80044ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004500:	7bfb      	ldrb	r3, [r7, #15]
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	00100070 	.word	0x00100070
 8004510:	00100060 	.word	0x00100060
 8004514:	00100050 	.word	0x00100050
 8004518:	00100040 	.word	0x00100040
 800451c:	00100030 	.word	0x00100030
 8004520:	00100020 	.word	0x00100020

08004524 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a4c      	ldr	r2, [pc, #304]	@ (8004668 <TIM_Base_SetConfig+0x144>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d017      	beq.n	800456c <TIM_Base_SetConfig+0x48>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004542:	d013      	beq.n	800456c <TIM_Base_SetConfig+0x48>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a49      	ldr	r2, [pc, #292]	@ (800466c <TIM_Base_SetConfig+0x148>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d00f      	beq.n	800456c <TIM_Base_SetConfig+0x48>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a48      	ldr	r2, [pc, #288]	@ (8004670 <TIM_Base_SetConfig+0x14c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d00b      	beq.n	800456c <TIM_Base_SetConfig+0x48>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a47      	ldr	r2, [pc, #284]	@ (8004674 <TIM_Base_SetConfig+0x150>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d007      	beq.n	800456c <TIM_Base_SetConfig+0x48>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a46      	ldr	r2, [pc, #280]	@ (8004678 <TIM_Base_SetConfig+0x154>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d003      	beq.n	800456c <TIM_Base_SetConfig+0x48>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4a45      	ldr	r2, [pc, #276]	@ (800467c <TIM_Base_SetConfig+0x158>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d108      	bne.n	800457e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004572:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4313      	orrs	r3, r2
 800457c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a39      	ldr	r2, [pc, #228]	@ (8004668 <TIM_Base_SetConfig+0x144>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d023      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800458c:	d01f      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a36      	ldr	r2, [pc, #216]	@ (800466c <TIM_Base_SetConfig+0x148>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d01b      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a35      	ldr	r2, [pc, #212]	@ (8004670 <TIM_Base_SetConfig+0x14c>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d017      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a34      	ldr	r2, [pc, #208]	@ (8004674 <TIM_Base_SetConfig+0x150>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d013      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	4a33      	ldr	r2, [pc, #204]	@ (8004678 <TIM_Base_SetConfig+0x154>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d00f      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	4a33      	ldr	r2, [pc, #204]	@ (8004680 <TIM_Base_SetConfig+0x15c>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d00b      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	4a32      	ldr	r2, [pc, #200]	@ (8004684 <TIM_Base_SetConfig+0x160>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d007      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a31      	ldr	r2, [pc, #196]	@ (8004688 <TIM_Base_SetConfig+0x164>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d003      	beq.n	80045ce <TIM_Base_SetConfig+0xaa>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	4a2c      	ldr	r2, [pc, #176]	@ (800467c <TIM_Base_SetConfig+0x158>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d108      	bne.n	80045e0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	4313      	orrs	r3, r2
 80045de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	681a      	ldr	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	4a18      	ldr	r2, [pc, #96]	@ (8004668 <TIM_Base_SetConfig+0x144>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d013      	beq.n	8004634 <TIM_Base_SetConfig+0x110>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <TIM_Base_SetConfig+0x154>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00f      	beq.n	8004634 <TIM_Base_SetConfig+0x110>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	4a1a      	ldr	r2, [pc, #104]	@ (8004680 <TIM_Base_SetConfig+0x15c>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00b      	beq.n	8004634 <TIM_Base_SetConfig+0x110>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	4a19      	ldr	r2, [pc, #100]	@ (8004684 <TIM_Base_SetConfig+0x160>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d007      	beq.n	8004634 <TIM_Base_SetConfig+0x110>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a18      	ldr	r2, [pc, #96]	@ (8004688 <TIM_Base_SetConfig+0x164>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d003      	beq.n	8004634 <TIM_Base_SetConfig+0x110>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	4a13      	ldr	r2, [pc, #76]	@ (800467c <TIM_Base_SetConfig+0x158>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d103      	bne.n	800463c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	691a      	ldr	r2, [r3, #16]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b01      	cmp	r3, #1
 800464c:	d105      	bne.n	800465a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f023 0201 	bic.w	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	611a      	str	r2, [r3, #16]
  }
}
 800465a:	bf00      	nop
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40012c00 	.word	0x40012c00
 800466c:	40000400 	.word	0x40000400
 8004670:	40000800 	.word	0x40000800
 8004674:	40000c00 	.word	0x40000c00
 8004678:	40013400 	.word	0x40013400
 800467c:	40015000 	.word	0x40015000
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800

0800468c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800468c:	b480      	push	{r7}
 800468e:	b087      	sub	sp, #28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a1b      	ldr	r3, [r3, #32]
 80046a0:	f023 0201 	bic.w	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0303 	bic.w	r3, r3, #3
 80046c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f023 0302 	bic.w	r3, r3, #2
 80046d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a30      	ldr	r2, [pc, #192]	@ (80047a8 <TIM_OC1_SetConfig+0x11c>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d013      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a2f      	ldr	r2, [pc, #188]	@ (80047ac <TIM_OC1_SetConfig+0x120>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a2e      	ldr	r2, [pc, #184]	@ (80047b0 <TIM_OC1_SetConfig+0x124>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a2d      	ldr	r2, [pc, #180]	@ (80047b4 <TIM_OC1_SetConfig+0x128>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a2c      	ldr	r2, [pc, #176]	@ (80047b8 <TIM_OC1_SetConfig+0x12c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_OC1_SetConfig+0x88>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2b      	ldr	r2, [pc, #172]	@ (80047bc <TIM_OC1_SetConfig+0x130>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d10c      	bne.n	800472e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0308 	bic.w	r3, r3, #8
 800471a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	f023 0304 	bic.w	r3, r3, #4
 800472c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a1d      	ldr	r2, [pc, #116]	@ (80047a8 <TIM_OC1_SetConfig+0x11c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d013      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a1c      	ldr	r2, [pc, #112]	@ (80047ac <TIM_OC1_SetConfig+0x120>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d00f      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a1b      	ldr	r2, [pc, #108]	@ (80047b0 <TIM_OC1_SetConfig+0x124>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d00b      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1a      	ldr	r2, [pc, #104]	@ (80047b4 <TIM_OC1_SetConfig+0x128>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d007      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a19      	ldr	r2, [pc, #100]	@ (80047b8 <TIM_OC1_SetConfig+0x12c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d003      	beq.n	800475e <TIM_OC1_SetConfig+0xd2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a18      	ldr	r2, [pc, #96]	@ (80047bc <TIM_OC1_SetConfig+0x130>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d111      	bne.n	8004782 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004764:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	693a      	ldr	r2, [r7, #16]
 8004774:	4313      	orrs	r3, r2
 8004776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	621a      	str	r2, [r3, #32]
}
 800479c:	bf00      	nop
 800479e:	371c      	adds	r7, #28
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr
 80047a8:	40012c00 	.word	0x40012c00
 80047ac:	40013400 	.word	0x40013400
 80047b0:	40014000 	.word	0x40014000
 80047b4:	40014400 	.word	0x40014400
 80047b8:	40014800 	.word	0x40014800
 80047bc:	40015000 	.word	0x40015000

080047c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a1b      	ldr	r3, [r3, #32]
 80047d4:	f023 0210 	bic.w	r2, r3, #16
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	021b      	lsls	r3, r3, #8
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	4313      	orrs	r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	f023 0320 	bic.w	r3, r3, #32
 800480e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	4a2c      	ldr	r2, [pc, #176]	@ (80048d0 <TIM_OC2_SetConfig+0x110>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d007      	beq.n	8004834 <TIM_OC2_SetConfig+0x74>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	4a2b      	ldr	r2, [pc, #172]	@ (80048d4 <TIM_OC2_SetConfig+0x114>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d003      	beq.n	8004834 <TIM_OC2_SetConfig+0x74>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a2a      	ldr	r2, [pc, #168]	@ (80048d8 <TIM_OC2_SetConfig+0x118>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d10d      	bne.n	8004850 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800483a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	697a      	ldr	r2, [r7, #20]
 8004844:	4313      	orrs	r3, r2
 8004846:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800484e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4a1f      	ldr	r2, [pc, #124]	@ (80048d0 <TIM_OC2_SetConfig+0x110>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d013      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	4a1e      	ldr	r2, [pc, #120]	@ (80048d4 <TIM_OC2_SetConfig+0x114>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00f      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a1e      	ldr	r2, [pc, #120]	@ (80048dc <TIM_OC2_SetConfig+0x11c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d00b      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a1d      	ldr	r2, [pc, #116]	@ (80048e0 <TIM_OC2_SetConfig+0x120>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d007      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <TIM_OC2_SetConfig+0x124>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d003      	beq.n	8004880 <TIM_OC2_SetConfig+0xc0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a17      	ldr	r2, [pc, #92]	@ (80048d8 <TIM_OC2_SetConfig+0x118>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d113      	bne.n	80048a8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004886:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800488e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	4313      	orrs	r3, r2
 800489a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	699b      	ldr	r3, [r3, #24]
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	693a      	ldr	r2, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	697a      	ldr	r2, [r7, #20]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40015000 	.word	0x40015000
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2b      	ldr	r2, [pc, #172]	@ (80049f4 <TIM_OC3_SetConfig+0x10c>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <TIM_OC3_SetConfig+0x72>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2a      	ldr	r2, [pc, #168]	@ (80049f8 <TIM_OC3_SetConfig+0x110>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <TIM_OC3_SetConfig+0x72>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a29      	ldr	r2, [pc, #164]	@ (80049fc <TIM_OC3_SetConfig+0x114>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d10d      	bne.n	8004976 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004960:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1e      	ldr	r2, [pc, #120]	@ (80049f4 <TIM_OC3_SetConfig+0x10c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d013      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1d      	ldr	r2, [pc, #116]	@ (80049f8 <TIM_OC3_SetConfig+0x110>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1d      	ldr	r2, [pc, #116]	@ (8004a00 <TIM_OC3_SetConfig+0x118>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1c      	ldr	r2, [pc, #112]	@ (8004a04 <TIM_OC3_SetConfig+0x11c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1b      	ldr	r2, [pc, #108]	@ (8004a08 <TIM_OC3_SetConfig+0x120>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_OC3_SetConfig+0xbe>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a16      	ldr	r2, [pc, #88]	@ (80049fc <TIM_OC3_SetConfig+0x114>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d113      	bne.n	80049ce <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40015000 	.word	0x40015000
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800

08004a0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a1b      	ldr	r3, [r3, #32]
 8004a1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	69db      	ldr	r3, [r3, #28]
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8004b1c <TIM_OC4_SetConfig+0x110>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d007      	beq.n	8004a80 <TIM_OC4_SetConfig+0x74>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a2b      	ldr	r2, [pc, #172]	@ (8004b20 <TIM_OC4_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC4_SetConfig+0x74>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a2a      	ldr	r2, [pc, #168]	@ (8004b24 <TIM_OC4_SetConfig+0x118>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d10d      	bne.n	8004a9c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004a86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	031b      	lsls	r3, r3, #12
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004b1c <TIM_OC4_SetConfig+0x110>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d013      	beq.n	8004acc <TIM_OC4_SetConfig+0xc0>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b20 <TIM_OC4_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00f      	beq.n	8004acc <TIM_OC4_SetConfig+0xc0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <TIM_OC4_SetConfig+0x11c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_OC4_SetConfig+0xc0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1d      	ldr	r2, [pc, #116]	@ (8004b2c <TIM_OC4_SetConfig+0x120>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC4_SetConfig+0xc0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1c      	ldr	r2, [pc, #112]	@ (8004b30 <TIM_OC4_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC4_SetConfig+0xc0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a17      	ldr	r2, [pc, #92]	@ (8004b24 <TIM_OC4_SetConfig+0x118>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d113      	bne.n	8004af4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ad2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004ada:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	019b      	lsls	r3, r3, #6
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	019b      	lsls	r3, r3, #6
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40015000 	.word	0x40015000
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40014400 	.word	0x40014400
 8004b30:	40014800 	.word	0x40014800

08004b34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a1b      	ldr	r3, [r3, #32]
 8004b42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	041b      	lsls	r3, r3, #16
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a19      	ldr	r2, [pc, #100]	@ (8004bf0 <TIM_OC5_SetConfig+0xbc>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d013      	beq.n	8004bb6 <TIM_OC5_SetConfig+0x82>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	4a18      	ldr	r2, [pc, #96]	@ (8004bf4 <TIM_OC5_SetConfig+0xc0>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d00f      	beq.n	8004bb6 <TIM_OC5_SetConfig+0x82>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <TIM_OC5_SetConfig+0xc4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00b      	beq.n	8004bb6 <TIM_OC5_SetConfig+0x82>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <TIM_OC5_SetConfig+0xc8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d007      	beq.n	8004bb6 <TIM_OC5_SetConfig+0x82>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC5_SetConfig+0xcc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d003      	beq.n	8004bb6 <TIM_OC5_SetConfig+0x82>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a14      	ldr	r2, [pc, #80]	@ (8004c04 <TIM_OC5_SetConfig+0xd0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d109      	bne.n	8004bca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	621a      	str	r2, [r3, #32]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	40013400 	.word	0x40013400
 8004bf8:	40014000 	.word	0x40014000
 8004bfc:	40014400 	.word	0x40014400
 8004c00:	40014800 	.word	0x40014800
 8004c04:	40015000 	.word	0x40015000

08004c08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a1b      	ldr	r3, [r3, #32]
 8004c1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	021b      	lsls	r3, r3, #8
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	051b      	lsls	r3, r3, #20
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cc8 <TIM_OC6_SetConfig+0xc0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d013      	beq.n	8004c8c <TIM_OC6_SetConfig+0x84>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a19      	ldr	r2, [pc, #100]	@ (8004ccc <TIM_OC6_SetConfig+0xc4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00f      	beq.n	8004c8c <TIM_OC6_SetConfig+0x84>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	@ (8004cd0 <TIM_OC6_SetConfig+0xc8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00b      	beq.n	8004c8c <TIM_OC6_SetConfig+0x84>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <TIM_OC6_SetConfig+0xcc>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d007      	beq.n	8004c8c <TIM_OC6_SetConfig+0x84>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a16      	ldr	r2, [pc, #88]	@ (8004cd8 <TIM_OC6_SetConfig+0xd0>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d003      	beq.n	8004c8c <TIM_OC6_SetConfig+0x84>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a15      	ldr	r2, [pc, #84]	@ (8004cdc <TIM_OC6_SetConfig+0xd4>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d109      	bne.n	8004ca0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	029b      	lsls	r3, r3, #10
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	621a      	str	r2, [r3, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	371c      	adds	r7, #28
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	40015000 	.word	0x40015000

08004ce0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6a1b      	ldr	r3, [r3, #32]
 8004cf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	f023 0201 	bic.w	r2, r3, #1
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	f023 030a 	bic.w	r3, r3, #10
 8004d1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b087      	sub	sp, #28
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	60f8      	str	r0, [r7, #12]
 8004d46:	60b9      	str	r1, [r7, #8]
 8004d48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a1b      	ldr	r3, [r3, #32]
 8004d54:	f023 0210 	bic.w	r2, r3, #16
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004d68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	031b      	lsls	r3, r3, #12
 8004d6e:	693a      	ldr	r2, [r7, #16]
 8004d70:	4313      	orrs	r3, r2
 8004d72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004d7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	4313      	orrs	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	621a      	str	r2, [r3, #32]
}
 8004d92:	bf00      	nop
 8004d94:	371c      	adds	r7, #28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
 8004da6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004db4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	f043 0307 	orr.w	r3, r3, #7
 8004dc4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	609a      	str	r2, [r3, #8]
}
 8004dcc:	bf00      	nop
 8004dce:	3714      	adds	r7, #20
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b087      	sub	sp, #28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
 8004de4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004df2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	021a      	lsls	r2, r3, #8
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	697a      	ldr	r2, [r7, #20]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	609a      	str	r2, [r3, #8]
}
 8004e0c:	bf00      	nop
 8004e0e:	371c      	adds	r7, #28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e074      	b.n	8004f1a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a34      	ldr	r2, [pc, #208]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a33      	ldr	r2, [pc, #204]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a31      	ldr	r2, [pc, #196]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d108      	bne.n	8004e80 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004e74:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004e86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a21      	ldr	r2, [pc, #132]	@ (8004f28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d022      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb0:	d01d      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	@ (8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d018      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f38 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d013      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a1c      	ldr	r2, [pc, #112]	@ (8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d00e      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a15      	ldr	r2, [pc, #84]	@ (8004f2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d009      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a18      	ldr	r2, [pc, #96]	@ (8004f40 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d004      	beq.n	8004eee <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	@ (8004f30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d10c      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ef4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40013400 	.word	0x40013400
 8004f30:	40015000 	.word	0x40015000
 8004f34:	40000400 	.word	0x40000400
 8004f38:	40000800 	.word	0x40000800
 8004f3c:	40000c00 	.word	0x40000c00
 8004f40:	40014000 	.word	0x40014000

08004f44 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d101      	bne.n	8004f60 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e078      	b.n	8005052 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	041b      	lsls	r3, r3, #16
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	69db      	ldr	r3, [r3, #28]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d009      	beq.n	8005006 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d004      	beq.n	8005006 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d11c      	bne.n	8005040 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005010:	051b      	lsls	r3, r3, #20
 8005012:	4313      	orrs	r3, r2
 8005014:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	4313      	orrs	r3, r2
 8005022:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800502e:	4313      	orrs	r3, r2
 8005030:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	4313      	orrs	r3, r2
 800503e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40012c00 	.word	0x40012c00
 8005064:	40013400 	.word	0x40013400
 8005068:	40015000 	.word	0x40015000

0800506c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d101      	bne.n	800507e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e042      	b.n	8005104 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005084:	2b00      	cmp	r3, #0
 8005086:	d106      	bne.n	8005096 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7fc fdf5 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	@ 0x24
 800509a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f001 f880 	bl	80061bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 fd81 	bl	8005bc4 <UART_SetConfig>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d101      	bne.n	80050cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	e01b      	b.n	8005104 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685a      	ldr	r2, [r3, #4]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	689a      	ldr	r2, [r3, #8]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f001 f8ff 	bl	8006300 <UART_CheckIdleState>
 8005102:	4603      	mov	r3, r0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e04a      	b.n	80051b4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fc fda5 	bl	8001c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2224      	movs	r2, #36	@ 0x24
 800513a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f001 f830 	bl	80061bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fd31 	bl	8005bc4 <UART_SetConfig>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e023      	b.n	80051b4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800517a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800518a:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f042 0208 	orr.w	r2, r2, #8
 800519a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f001 f8a7 	bl	8006300 <UART_CheckIdleState>
 80051b2:	4603      	mov	r3, r0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3708      	adds	r7, #8
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b08a      	sub	sp, #40	@ 0x28
 80051c0:	af02      	add	r7, sp, #8
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	603b      	str	r3, [r7, #0]
 80051c8:	4613      	mov	r3, r2
 80051ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051d2:	2b20      	cmp	r3, #32
 80051d4:	d17b      	bne.n	80052ce <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d002      	beq.n	80051e2 <HAL_UART_Transmit+0x26>
 80051dc:	88fb      	ldrh	r3, [r7, #6]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e074      	b.n	80052d0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2221      	movs	r2, #33	@ 0x21
 80051f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051f6:	f7fd f821 	bl	800223c <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	88fa      	ldrh	r2, [r7, #6]
 8005200:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	88fa      	ldrh	r2, [r7, #6]
 8005208:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005214:	d108      	bne.n	8005228 <HAL_UART_Transmit+0x6c>
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d104      	bne.n	8005228 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	e003      	b.n	8005230 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800522c:	2300      	movs	r3, #0
 800522e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005230:	e030      	b.n	8005294 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	9300      	str	r3, [sp, #0]
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2200      	movs	r2, #0
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f001 f909 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d005      	beq.n	8005254 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e03d      	b.n	80052d0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10b      	bne.n	8005272 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	881b      	ldrh	r3, [r3, #0]
 800525e:	461a      	mov	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005268:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	3302      	adds	r3, #2
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	e007      	b.n	8005282 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	3301      	adds	r3, #1
 8005280:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005288:	b29b      	uxth	r3, r3
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	d1c8      	bne.n	8005232 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	2200      	movs	r2, #0
 80052a8:	2140      	movs	r1, #64	@ 0x40
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f001 f8d2 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d005      	beq.n	80052c2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2220      	movs	r2, #32
 80052ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e006      	b.n	80052d0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	e000      	b.n	80052d0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052ce:	2302      	movs	r3, #2
  }
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3720      	adds	r7, #32
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08a      	sub	sp, #40	@ 0x28
 80052dc:	af02      	add	r7, sp, #8
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	603b      	str	r3, [r7, #0]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	f040 80b5 	bne.w	800545e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Receive+0x28>
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e0ad      	b.n	8005460 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2222      	movs	r2, #34	@ 0x22
 8005310:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fc ff8f 	bl	800223c <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005338:	d10e      	bne.n	8005358 <HAL_UART_Receive+0x80>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <HAL_UART_Receive+0x76>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005348:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800534c:	e02d      	b.n	80053aa <HAL_UART_Receive+0xd2>
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	22ff      	movs	r2, #255	@ 0xff
 8005352:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005356:	e028      	b.n	80053aa <HAL_UART_Receive+0xd2>
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10d      	bne.n	800537c <HAL_UART_Receive+0xa4>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	691b      	ldr	r3, [r3, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d104      	bne.n	8005372 <HAL_UART_Receive+0x9a>
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	22ff      	movs	r2, #255	@ 0xff
 800536c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005370:	e01b      	b.n	80053aa <HAL_UART_Receive+0xd2>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	227f      	movs	r2, #127	@ 0x7f
 8005376:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800537a:	e016      	b.n	80053aa <HAL_UART_Receive+0xd2>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005384:	d10d      	bne.n	80053a2 <HAL_UART_Receive+0xca>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <HAL_UART_Receive+0xc0>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	227f      	movs	r2, #127	@ 0x7f
 8005392:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005396:	e008      	b.n	80053aa <HAL_UART_Receive+0xd2>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	223f      	movs	r2, #63	@ 0x3f
 800539c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053a0:	e003      	b.n	80053aa <HAL_UART_Receive+0xd2>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80053b0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	d108      	bne.n	80053ce <HAL_UART_Receive+0xf6>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d104      	bne.n	80053ce <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e003      	b.n	80053d6 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80053d6:	e036      	b.n	8005446 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	9300      	str	r3, [sp, #0]
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2200      	movs	r2, #0
 80053e0:	2120      	movs	r1, #32
 80053e2:	68f8      	ldr	r0, [r7, #12]
 80053e4:	f001 f836 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2220      	movs	r2, #32
 80053f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e032      	b.n	8005460 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10c      	bne.n	800541a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005406:	b29a      	uxth	r2, r3
 8005408:	8a7b      	ldrh	r3, [r7, #18]
 800540a:	4013      	ands	r3, r2
 800540c:	b29a      	uxth	r2, r3
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	3302      	adds	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e00c      	b.n	8005434 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	b2da      	uxtb	r2, r3
 8005422:	8a7b      	ldrh	r3, [r7, #18]
 8005424:	b2db      	uxtb	r3, r3
 8005426:	4013      	ands	r3, r2
 8005428:	b2da      	uxtb	r2, r3
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800542e:	69fb      	ldr	r3, [r7, #28]
 8005430:	3301      	adds	r3, #1
 8005432:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800543a:	b29b      	uxth	r3, r3
 800543c:	3b01      	subs	r3, #1
 800543e:	b29a      	uxth	r2, r3
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800544c:	b29b      	uxth	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1c2      	bne.n	80053d8 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800545a:	2300      	movs	r3, #0
 800545c:	e000      	b.n	8005460 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800545e:	2302      	movs	r3, #2
  }
}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b08a      	sub	sp, #40	@ 0x28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	4613      	mov	r3, r2
 8005474:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800547c:	2b20      	cmp	r3, #32
 800547e:	d137      	bne.n	80054f0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_UART_Receive_IT+0x24>
 8005486:	88fb      	ldrh	r3, [r7, #6]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e030      	b.n	80054f2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <HAL_UART_Receive_IT+0x94>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d01f      	beq.n	80054e0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d018      	beq.n	80054e0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	e853 3f00 	ldrex	r3, [r3]
 80054ba:	613b      	str	r3, [r7, #16]
   return(result);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80054c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	461a      	mov	r2, r3
 80054ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054cc:	623b      	str	r3, [r7, #32]
 80054ce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d0:	69f9      	ldr	r1, [r7, #28]
 80054d2:	6a3a      	ldr	r2, [r7, #32]
 80054d4:	e841 2300 	strex	r3, r2, [r1]
 80054d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1e6      	bne.n	80054ae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054e0:	88fb      	ldrh	r3, [r7, #6]
 80054e2:	461a      	mov	r2, r3
 80054e4:	68b9      	ldr	r1, [r7, #8]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f001 f822 	bl	8006530 <UART_Start_Receive_IT>
 80054ec:	4603      	mov	r3, r0
 80054ee:	e000      	b.n	80054f2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80054f0:	2302      	movs	r3, #2
  }
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3728      	adds	r7, #40	@ 0x28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40008000 	.word	0x40008000

08005500 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b0ba      	sub	sp, #232	@ 0xe8
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005526:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800552a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800552e:	4013      	ands	r3, r2
 8005530:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005534:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11b      	bne.n	8005574 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800553c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005540:	f003 0320 	and.w	r3, r3, #32
 8005544:	2b00      	cmp	r3, #0
 8005546:	d015      	beq.n	8005574 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800554c:	f003 0320 	and.w	r3, r3, #32
 8005550:	2b00      	cmp	r3, #0
 8005552:	d105      	bne.n	8005560 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005554:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d009      	beq.n	8005574 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005564:	2b00      	cmp	r3, #0
 8005566:	f000 8300 	beq.w	8005b6a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
      }
      return;
 8005572:	e2fa      	b.n	8005b6a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8123 	beq.w	80057c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800557e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005582:	4b8d      	ldr	r3, [pc, #564]	@ (80057b8 <HAL_UART_IRQHandler+0x2b8>)
 8005584:	4013      	ands	r3, r2
 8005586:	2b00      	cmp	r3, #0
 8005588:	d106      	bne.n	8005598 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800558a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800558e:	4b8b      	ldr	r3, [pc, #556]	@ (80057bc <HAL_UART_IRQHandler+0x2bc>)
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8116 	beq.w	80057c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d011      	beq.n	80055c8 <HAL_UART_IRQHandler+0xc8>
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d00b      	beq.n	80055c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2201      	movs	r2, #1
 80055b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	f043 0201 	orr.w	r2, r3, #1
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d011      	beq.n	80055f8 <HAL_UART_IRQHandler+0xf8>
 80055d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055d8:	f003 0301 	and.w	r3, r3, #1
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2202      	movs	r2, #2
 80055e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ee:	f043 0204 	orr.w	r2, r3, #4
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d011      	beq.n	8005628 <HAL_UART_IRQHandler+0x128>
 8005604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005608:	f003 0301 	and.w	r3, r3, #1
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00b      	beq.n	8005628 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2204      	movs	r2, #4
 8005616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800561e:	f043 0202 	orr.w	r2, r3, #2
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b00      	cmp	r3, #0
 8005632:	d017      	beq.n	8005664 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005640:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005644:	4b5c      	ldr	r3, [pc, #368]	@ (80057b8 <HAL_UART_IRQHandler+0x2b8>)
 8005646:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2208      	movs	r2, #8
 8005652:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800565a:	f043 0208 	orr.w	r2, r3, #8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d012      	beq.n	8005696 <HAL_UART_IRQHandler+0x196>
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00c      	beq.n	8005696 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005684:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8266 	beq.w	8005b6e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80056a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f003 0320 	and.w	r3, r3, #32
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d013      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80056ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056b2:	f003 0320 	and.w	r3, r3, #32
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d105      	bne.n	80056c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d007      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056dc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056ea:	2b40      	cmp	r3, #64	@ 0x40
 80056ec:	d005      	beq.n	80056fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056f2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d054      	beq.n	80057a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f001 f83a 	bl	8006774 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800570a:	2b40      	cmp	r3, #64	@ 0x40
 800570c:	d146      	bne.n	800579c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	3308      	adds	r3, #8
 8005714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005724:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005728:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800572c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3308      	adds	r3, #8
 8005736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800573a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800573e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800574a:	e841 2300 	strex	r3, r2, [r1]
 800574e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d1d9      	bne.n	800570e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800576a:	4a15      	ldr	r2, [pc, #84]	@ (80057c0 <HAL_UART_IRQHandler+0x2c0>)
 800576c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005774:	4618      	mov	r0, r3
 8005776:	f7fc ff7e 	bl	8002676 <HAL_DMA_Abort_IT>
 800577a:	4603      	mov	r3, r0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d019      	beq.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800578e:	4610      	mov	r0, r2
 8005790:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005792:	e00f      	b.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f9ff 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800579a:	e00b      	b.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f9fb 	bl	8005b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a2:	e007      	b.n	80057b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 f9f7 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80057b2:	e1dc      	b.n	8005b6e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b4:	bf00      	nop
    return;
 80057b6:	e1da      	b.n	8005b6e <HAL_UART_IRQHandler+0x66e>
 80057b8:	10000001 	.word	0x10000001
 80057bc:	04000120 	.word	0x04000120
 80057c0:	08006841 	.word	0x08006841

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	f040 8170 	bne.w	8005aae <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 8169 	beq.w	8005aae <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057e0:	f003 0310 	and.w	r3, r3, #16
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	f000 8162 	beq.w	8005aae <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2210      	movs	r2, #16
 80057f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057fc:	2b40      	cmp	r3, #64	@ 0x40
 80057fe:	f040 80d8 	bne.w	80059b2 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80af 	beq.w	8005978 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005820:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005824:	429a      	cmp	r2, r3
 8005826:	f080 80a7 	bcs.w	8005978 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005830:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0320 	and.w	r3, r3, #32
 8005842:	2b00      	cmp	r3, #0
 8005844:	f040 8087 	bne.w	8005956 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800585c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005864:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8005872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005876:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800587e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800588a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800588e:	2b00      	cmp	r3, #0
 8005890:	d1da      	bne.n	8005848 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3308      	adds	r3, #8
 8005898:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800589c:	e853 3f00 	ldrex	r3, [r3]
 80058a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058a4:	f023 0301 	bic.w	r3, r3, #1
 80058a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3308      	adds	r3, #8
 80058b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058c2:	e841 2300 	strex	r3, r2, [r1]
 80058c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1e1      	bne.n	8005892 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	3308      	adds	r3, #8
 80058d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80058d8:	e853 3f00 	ldrex	r3, [r3]
 80058dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80058de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80058e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	3308      	adds	r3, #8
 80058ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80058f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80058f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80058f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005900:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e3      	bne.n	80058ce <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800591a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005922:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005924:	f023 0310 	bic.w	r3, r3, #16
 8005928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	461a      	mov	r2, r3
 8005932:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005936:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005938:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800593c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800593e:	e841 2300 	strex	r3, r2, [r1]
 8005942:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1e4      	bne.n	8005914 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005950:	4618      	mov	r0, r3
 8005952:	f7fc fe37 	bl	80025c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005968:	b29b      	uxth	r3, r3
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	b29b      	uxth	r3, r3
 800596e:	4619      	mov	r1, r3
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 f91b 	bl	8005bac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005976:	e0fc      	b.n	8005b72 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800597e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005982:	429a      	cmp	r2, r3
 8005984:	f040 80f5 	bne.w	8005b72 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0320 	and.w	r3, r3, #32
 8005996:	2b20      	cmp	r3, #32
 8005998:	f040 80eb 	bne.w	8005b72 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8fe 	bl	8005bac <HAL_UARTEx_RxEventCallback>
      return;
 80059b0:	e0df      	b.n	8005b72 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	f000 80d1 	beq.w	8005b76 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80059d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 80cc 	beq.w	8005b76 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	e853 3f00 	ldrex	r3, [r3]
 80059ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80059ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	461a      	mov	r2, r3
 80059fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a08:	e841 2300 	strex	r3, r2, [r1]
 8005a0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d1e4      	bne.n	80059de <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3308      	adds	r3, #8
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	623b      	str	r3, [r7, #32]
   return(result);
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a2a:	f023 0301 	bic.w	r3, r3, #1
 8005a2e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a3c:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e1      	bne.n	8005a14 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	461a      	mov	r2, r3
 8005a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005a86:	61fb      	str	r3, [r7, #28]
 8005a88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8a:	69b9      	ldr	r1, [r7, #24]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	e841 2300 	strex	r3, r2, [r1]
 8005a92:	617b      	str	r3, [r7, #20]
   return(result);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d1e4      	bne.n	8005a64 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2202      	movs	r2, #2
 8005a9e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005aa0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f880 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aac:	e063      	b.n	8005b76 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x5d8>
 8005aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005abe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005ace:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fc13 	bl	80072fc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ad6:	e051      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005adc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d014      	beq.n	8005b0e <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d105      	bne.n	8005afc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005af4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d008      	beq.n	8005b0e <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d03a      	beq.n	8005b7a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	4798      	blx	r3
    }
    return;
 8005b0c:	e035      	b.n	8005b7a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d009      	beq.n	8005b2e <HAL_UART_IRQHandler+0x62e>
 8005b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 fe9c 	bl	8006864 <UART_EndTransmit_IT>
    return;
 8005b2c:	e026      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <HAL_UART_IRQHandler+0x64e>
 8005b3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b3e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fbec 	bl	8007324 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b4c:	e016      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d010      	beq.n	8005b7c <HAL_UART_IRQHandler+0x67c>
 8005b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	da0c      	bge.n	8005b7c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f001 fbd4 	bl	8007310 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b68:	e008      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
      return;
 8005b6a:	bf00      	nop
 8005b6c:	e006      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
    return;
 8005b6e:	bf00      	nop
 8005b70:	e004      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
      return;
 8005b72:	bf00      	nop
 8005b74:	e002      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
      return;
 8005b76:	bf00      	nop
 8005b78:	e000      	b.n	8005b7c <HAL_UART_IRQHandler+0x67c>
    return;
 8005b7a:	bf00      	nop
  }
}
 8005b7c:	37e8      	adds	r7, #232	@ 0xe8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop

08005b84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b08c      	sub	sp, #48	@ 0x30
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	431a      	orrs	r2, r3
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	431a      	orrs	r2, r3
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	4baa      	ldr	r3, [pc, #680]	@ (8005e9c <UART_SetConfig+0x2d8>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bfc:	430b      	orrs	r3, r1
 8005bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	68da      	ldr	r2, [r3, #12]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	430a      	orrs	r2, r1
 8005c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	699b      	ldr	r3, [r3, #24]
 8005c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a9f      	ldr	r2, [pc, #636]	@ (8005ea0 <UART_SetConfig+0x2dc>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d004      	beq.n	8005c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005c3a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	6812      	ldr	r2, [r2, #0]
 8005c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c44:	430b      	orrs	r3, r1
 8005c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c4e:	f023 010f 	bic.w	r1, r3, #15
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a90      	ldr	r2, [pc, #576]	@ (8005ea4 <UART_SetConfig+0x2e0>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d125      	bne.n	8005cb4 <UART_SetConfig+0xf0>
 8005c68:	4b8f      	ldr	r3, [pc, #572]	@ (8005ea8 <UART_SetConfig+0x2e4>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c6e:	f003 0303 	and.w	r3, r3, #3
 8005c72:	2b03      	cmp	r3, #3
 8005c74:	d81a      	bhi.n	8005cac <UART_SetConfig+0xe8>
 8005c76:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <UART_SetConfig+0xb8>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005c9d 	.word	0x08005c9d
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c92:	e116      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005c94:	2302      	movs	r3, #2
 8005c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005c9a:	e112      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005c9c:	2304      	movs	r3, #4
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005ca2:	e10e      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005ca4:	2308      	movs	r3, #8
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005caa:	e10a      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005cac:	2310      	movs	r3, #16
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005cb2:	e106      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a7c      	ldr	r2, [pc, #496]	@ (8005eac <UART_SetConfig+0x2e8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d138      	bne.n	8005d30 <UART_SetConfig+0x16c>
 8005cbe:	4b7a      	ldr	r3, [pc, #488]	@ (8005ea8 <UART_SetConfig+0x2e4>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cc4:	f003 030c 	and.w	r3, r3, #12
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	d82d      	bhi.n	8005d28 <UART_SetConfig+0x164>
 8005ccc:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd4 <UART_SetConfig+0x110>)
 8005cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd2:	bf00      	nop
 8005cd4:	08005d09 	.word	0x08005d09
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	08005d29 	.word	0x08005d29
 8005ce0:	08005d29 	.word	0x08005d29
 8005ce4:	08005d19 	.word	0x08005d19
 8005ce8:	08005d29 	.word	0x08005d29
 8005cec:	08005d29 	.word	0x08005d29
 8005cf0:	08005d29 	.word	0x08005d29
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d29 	.word	0x08005d29
 8005cfc:	08005d29 	.word	0x08005d29
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d0e:	e0d8      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d16:	e0d4      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d1e:	e0d0      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d26:	e0cc      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d2e:	e0c8      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a5e      	ldr	r2, [pc, #376]	@ (8005eb0 <UART_SetConfig+0x2ec>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d125      	bne.n	8005d86 <UART_SetConfig+0x1c2>
 8005d3a:	4b5b      	ldr	r3, [pc, #364]	@ (8005ea8 <UART_SetConfig+0x2e4>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005d44:	2b30      	cmp	r3, #48	@ 0x30
 8005d46:	d016      	beq.n	8005d76 <UART_SetConfig+0x1b2>
 8005d48:	2b30      	cmp	r3, #48	@ 0x30
 8005d4a:	d818      	bhi.n	8005d7e <UART_SetConfig+0x1ba>
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d00a      	beq.n	8005d66 <UART_SetConfig+0x1a2>
 8005d50:	2b20      	cmp	r3, #32
 8005d52:	d814      	bhi.n	8005d7e <UART_SetConfig+0x1ba>
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d002      	beq.n	8005d5e <UART_SetConfig+0x19a>
 8005d58:	2b10      	cmp	r3, #16
 8005d5a:	d008      	beq.n	8005d6e <UART_SetConfig+0x1aa>
 8005d5c:	e00f      	b.n	8005d7e <UART_SetConfig+0x1ba>
 8005d5e:	2300      	movs	r3, #0
 8005d60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d64:	e0ad      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d66:	2302      	movs	r3, #2
 8005d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d6c:	e0a9      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d6e:	2304      	movs	r3, #4
 8005d70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d74:	e0a5      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d76:	2308      	movs	r3, #8
 8005d78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d7c:	e0a1      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d7e:	2310      	movs	r3, #16
 8005d80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005d84:	e09d      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a4a      	ldr	r2, [pc, #296]	@ (8005eb4 <UART_SetConfig+0x2f0>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d125      	bne.n	8005ddc <UART_SetConfig+0x218>
 8005d90:	4b45      	ldr	r3, [pc, #276]	@ (8005ea8 <UART_SetConfig+0x2e4>)
 8005d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d96:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d9c:	d016      	beq.n	8005dcc <UART_SetConfig+0x208>
 8005d9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005da0:	d818      	bhi.n	8005dd4 <UART_SetConfig+0x210>
 8005da2:	2b80      	cmp	r3, #128	@ 0x80
 8005da4:	d00a      	beq.n	8005dbc <UART_SetConfig+0x1f8>
 8005da6:	2b80      	cmp	r3, #128	@ 0x80
 8005da8:	d814      	bhi.n	8005dd4 <UART_SetConfig+0x210>
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <UART_SetConfig+0x1f0>
 8005dae:	2b40      	cmp	r3, #64	@ 0x40
 8005db0:	d008      	beq.n	8005dc4 <UART_SetConfig+0x200>
 8005db2:	e00f      	b.n	8005dd4 <UART_SetConfig+0x210>
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dba:	e082      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dc2:	e07e      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005dc4:	2304      	movs	r3, #4
 8005dc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dca:	e07a      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005dcc:	2308      	movs	r3, #8
 8005dce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dd2:	e076      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005dd4:	2310      	movs	r3, #16
 8005dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005dda:	e072      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a35      	ldr	r2, [pc, #212]	@ (8005eb8 <UART_SetConfig+0x2f4>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d12a      	bne.n	8005e3c <UART_SetConfig+0x278>
 8005de6:	4b30      	ldr	r3, [pc, #192]	@ (8005ea8 <UART_SetConfig+0x2e4>)
 8005de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df4:	d01a      	beq.n	8005e2c <UART_SetConfig+0x268>
 8005df6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dfa:	d81b      	bhi.n	8005e34 <UART_SetConfig+0x270>
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e00:	d00c      	beq.n	8005e1c <UART_SetConfig+0x258>
 8005e02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e06:	d815      	bhi.n	8005e34 <UART_SetConfig+0x270>
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <UART_SetConfig+0x250>
 8005e0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e10:	d008      	beq.n	8005e24 <UART_SetConfig+0x260>
 8005e12:	e00f      	b.n	8005e34 <UART_SetConfig+0x270>
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e1a:	e052      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e1c:	2302      	movs	r3, #2
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e22:	e04e      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e24:	2304      	movs	r3, #4
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e2a:	e04a      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e32:	e046      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e34:	2310      	movs	r3, #16
 8005e36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e3a:	e042      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a17      	ldr	r2, [pc, #92]	@ (8005ea0 <UART_SetConfig+0x2dc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d13a      	bne.n	8005ebc <UART_SetConfig+0x2f8>
 8005e46:	4b18      	ldr	r3, [pc, #96]	@ (8005ea8 <UART_SetConfig+0x2e4>)
 8005e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e4c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005e50:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e54:	d01a      	beq.n	8005e8c <UART_SetConfig+0x2c8>
 8005e56:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005e5a:	d81b      	bhi.n	8005e94 <UART_SetConfig+0x2d0>
 8005e5c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e60:	d00c      	beq.n	8005e7c <UART_SetConfig+0x2b8>
 8005e62:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e66:	d815      	bhi.n	8005e94 <UART_SetConfig+0x2d0>
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d003      	beq.n	8005e74 <UART_SetConfig+0x2b0>
 8005e6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e70:	d008      	beq.n	8005e84 <UART_SetConfig+0x2c0>
 8005e72:	e00f      	b.n	8005e94 <UART_SetConfig+0x2d0>
 8005e74:	2300      	movs	r3, #0
 8005e76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e7a:	e022      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e7c:	2302      	movs	r3, #2
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e82:	e01e      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e84:	2304      	movs	r3, #4
 8005e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e8a:	e01a      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e92:	e016      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e94:	2310      	movs	r3, #16
 8005e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005e9a:	e012      	b.n	8005ec2 <UART_SetConfig+0x2fe>
 8005e9c:	cfff69f3 	.word	0xcfff69f3
 8005ea0:	40008000 	.word	0x40008000
 8005ea4:	40013800 	.word	0x40013800
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40004400 	.word	0x40004400
 8005eb0:	40004800 	.word	0x40004800
 8005eb4:	40004c00 	.word	0x40004c00
 8005eb8:	40005000 	.word	0x40005000
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4aae      	ldr	r2, [pc, #696]	@ (8006180 <UART_SetConfig+0x5bc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	f040 8097 	bne.w	8005ffc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ece:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005ed2:	2b08      	cmp	r3, #8
 8005ed4:	d823      	bhi.n	8005f1e <UART_SetConfig+0x35a>
 8005ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <UART_SetConfig+0x318>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f01 	.word	0x08005f01
 8005ee0:	08005f1f 	.word	0x08005f1f
 8005ee4:	08005f09 	.word	0x08005f09
 8005ee8:	08005f1f 	.word	0x08005f1f
 8005eec:	08005f0f 	.word	0x08005f0f
 8005ef0:	08005f1f 	.word	0x08005f1f
 8005ef4:	08005f1f 	.word	0x08005f1f
 8005ef8:	08005f1f 	.word	0x08005f1f
 8005efc:	08005f17 	.word	0x08005f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f00:	f7fd fd6e 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 8005f04:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f06:	e010      	b.n	8005f2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f08:	4b9e      	ldr	r3, [pc, #632]	@ (8006184 <UART_SetConfig+0x5c0>)
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f0c:	e00d      	b.n	8005f2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f0e:	f7fd fcf9 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8005f12:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005f14:	e009      	b.n	8005f2a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f1a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005f1c:	e005      	b.n	8005f2a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005f28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 8130 	beq.w	8006192 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	4a94      	ldr	r2, [pc, #592]	@ (8006188 <UART_SetConfig+0x5c4>)
 8005f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	4413      	add	r3, r2
 8005f50:	69ba      	ldr	r2, [r7, #24]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d305      	bcc.n	8005f62 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d903      	bls.n	8005f6a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005f68:	e113      	b.n	8006192 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	60bb      	str	r3, [r7, #8]
 8005f70:	60fa      	str	r2, [r7, #12]
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f76:	4a84      	ldr	r2, [pc, #528]	@ (8006188 <UART_SetConfig+0x5c4>)
 8005f78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	2200      	movs	r2, #0
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f8c:	f7fa fea4 	bl	8000cd8 <__aeabi_uldivmod>
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	4610      	mov	r0, r2
 8005f96:	4619      	mov	r1, r3
 8005f98:	f04f 0200 	mov.w	r2, #0
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	020b      	lsls	r3, r1, #8
 8005fa2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005fa6:	0202      	lsls	r2, r0, #8
 8005fa8:	6979      	ldr	r1, [r7, #20]
 8005faa:	6849      	ldr	r1, [r1, #4]
 8005fac:	0849      	lsrs	r1, r1, #1
 8005fae:	2000      	movs	r0, #0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	eb12 0804 	adds.w	r8, r2, r4
 8005fb8:	eb43 0905 	adc.w	r9, r3, r5
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	469a      	mov	sl, r3
 8005fc4:	4693      	mov	fp, r2
 8005fc6:	4652      	mov	r2, sl
 8005fc8:	465b      	mov	r3, fp
 8005fca:	4640      	mov	r0, r8
 8005fcc:	4649      	mov	r1, r9
 8005fce:	f7fa fe83 	bl	8000cd8 <__aeabi_uldivmod>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005fe0:	d308      	bcc.n	8005ff4 <UART_SetConfig+0x430>
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fe8:	d204      	bcs.n	8005ff4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	6a3a      	ldr	r2, [r7, #32]
 8005ff0:	60da      	str	r2, [r3, #12]
 8005ff2:	e0ce      	b.n	8006192 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005ffa:	e0ca      	b.n	8006192 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006004:	d166      	bne.n	80060d4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006006:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800600a:	2b08      	cmp	r3, #8
 800600c:	d827      	bhi.n	800605e <UART_SetConfig+0x49a>
 800600e:	a201      	add	r2, pc, #4	@ (adr r2, 8006014 <UART_SetConfig+0x450>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006039 	.word	0x08006039
 8006018:	08006041 	.word	0x08006041
 800601c:	08006049 	.word	0x08006049
 8006020:	0800605f 	.word	0x0800605f
 8006024:	0800604f 	.word	0x0800604f
 8006028:	0800605f 	.word	0x0800605f
 800602c:	0800605f 	.word	0x0800605f
 8006030:	0800605f 	.word	0x0800605f
 8006034:	08006057 	.word	0x08006057
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006038:	f7fd fcd2 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 800603c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800603e:	e014      	b.n	800606a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006040:	f7fd fce4 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8006044:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006046:	e010      	b.n	800606a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006048:	4b4e      	ldr	r3, [pc, #312]	@ (8006184 <UART_SetConfig+0x5c0>)
 800604a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800604c:	e00d      	b.n	800606a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800604e:	f7fd fc59 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8006052:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006054:	e009      	b.n	800606a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006056:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800605a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800605c:	e005      	b.n	800606a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006068:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800606a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 8090 	beq.w	8006192 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006076:	4a44      	ldr	r2, [pc, #272]	@ (8006188 <UART_SetConfig+0x5c4>)
 8006078:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800607c:	461a      	mov	r2, r3
 800607e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006080:	fbb3 f3f2 	udiv	r3, r3, r2
 8006084:	005a      	lsls	r2, r3, #1
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	085b      	lsrs	r3, r3, #1
 800608c:	441a      	add	r2, r3
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	fbb2 f3f3 	udiv	r3, r2, r3
 8006096:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	2b0f      	cmp	r3, #15
 800609c:	d916      	bls.n	80060cc <UART_SetConfig+0x508>
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060a4:	d212      	bcs.n	80060cc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	b29b      	uxth	r3, r3
 80060aa:	f023 030f 	bic.w	r3, r3, #15
 80060ae:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	085b      	lsrs	r3, r3, #1
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	8bfb      	ldrh	r3, [r7, #30]
 80060be:	4313      	orrs	r3, r2
 80060c0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	8bfa      	ldrh	r2, [r7, #30]
 80060c8:	60da      	str	r2, [r3, #12]
 80060ca:	e062      	b.n	8006192 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80060d2:	e05e      	b.n	8006192 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060d4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80060d8:	2b08      	cmp	r3, #8
 80060da:	d828      	bhi.n	800612e <UART_SetConfig+0x56a>
 80060dc:	a201      	add	r2, pc, #4	@ (adr r2, 80060e4 <UART_SetConfig+0x520>)
 80060de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e2:	bf00      	nop
 80060e4:	08006109 	.word	0x08006109
 80060e8:	08006111 	.word	0x08006111
 80060ec:	08006119 	.word	0x08006119
 80060f0:	0800612f 	.word	0x0800612f
 80060f4:	0800611f 	.word	0x0800611f
 80060f8:	0800612f 	.word	0x0800612f
 80060fc:	0800612f 	.word	0x0800612f
 8006100:	0800612f 	.word	0x0800612f
 8006104:	08006127 	.word	0x08006127
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006108:	f7fd fc6a 	bl	80039e0 <HAL_RCC_GetPCLK1Freq>
 800610c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800610e:	e014      	b.n	800613a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006110:	f7fd fc7c 	bl	8003a0c <HAL_RCC_GetPCLK2Freq>
 8006114:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006116:	e010      	b.n	800613a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006118:	4b1a      	ldr	r3, [pc, #104]	@ (8006184 <UART_SetConfig+0x5c0>)
 800611a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800611c:	e00d      	b.n	800613a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800611e:	f7fd fbf1 	bl	8003904 <HAL_RCC_GetSysClockFreq>
 8006122:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006124:	e009      	b.n	800613a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006126:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800612c:	e005      	b.n	800613a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006138:	bf00      	nop
    }

    if (pclk != 0U)
 800613a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	d028      	beq.n	8006192 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	4a10      	ldr	r2, [pc, #64]	@ (8006188 <UART_SetConfig+0x5c4>)
 8006146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614a:	461a      	mov	r2, r3
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	085b      	lsrs	r3, r3, #1
 8006158:	441a      	add	r2, r3
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006162:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	2b0f      	cmp	r3, #15
 8006168:	d910      	bls.n	800618c <UART_SetConfig+0x5c8>
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006170:	d20c      	bcs.n	800618c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	b29a      	uxth	r2, r3
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	60da      	str	r2, [r3, #12]
 800617c:	e009      	b.n	8006192 <UART_SetConfig+0x5ce>
 800617e:	bf00      	nop
 8006180:	40008000 	.word	0x40008000
 8006184:	00f42400 	.word	0x00f42400
 8006188:	0800bc48 	.word	0x0800bc48
      }
      else
      {
        ret = HAL_ERROR;
 800618c:	2301      	movs	r3, #1
 800618e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2201      	movs	r2, #1
 8006196:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	2201      	movs	r2, #1
 800619e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2200      	movs	r2, #0
 80061a6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	2200      	movs	r2, #0
 80061ac:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061ae:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3730      	adds	r7, #48	@ 0x30
 80061b6:	46bd      	mov	sp, r7
 80061b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080061bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c8:	f003 0308 	and.w	r3, r3, #8
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00a      	beq.n	8006208 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	430a      	orrs	r2, r1
 8006206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d00a      	beq.n	800622a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	430a      	orrs	r2, r1
 8006228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00a      	beq.n	800624c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006250:	f003 0310 	and.w	r3, r3, #16
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00a      	beq.n	800626e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006272:	f003 0320 	and.w	r3, r3, #32
 8006276:	2b00      	cmp	r3, #0
 8006278:	d00a      	beq.n	8006290 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006298:	2b00      	cmp	r3, #0
 800629a:	d01a      	beq.n	80062d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ba:	d10a      	bne.n	80062d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00a      	beq.n	80062f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	430a      	orrs	r2, r1
 80062f2:	605a      	str	r2, [r3, #4]
  }
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b098      	sub	sp, #96	@ 0x60
 8006304:	af02      	add	r7, sp, #8
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006310:	f7fb ff94 	bl	800223c <HAL_GetTick>
 8006314:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 0308 	and.w	r3, r3, #8
 8006320:	2b08      	cmp	r3, #8
 8006322:	d12f      	bne.n	8006384 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006324:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006328:	9300      	str	r3, [sp, #0]
 800632a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800632c:	2200      	movs	r2, #0
 800632e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f88e 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d022      	beq.n	8006384 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800634c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800634e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006352:	653b      	str	r3, [r7, #80]	@ 0x50
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800635c:	647b      	str	r3, [r7, #68]	@ 0x44
 800635e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006362:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800636a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e6      	bne.n	800633e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e063      	b.n	800644c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0304 	and.w	r3, r3, #4
 800638e:	2b04      	cmp	r3, #4
 8006390:	d149      	bne.n	8006426 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006392:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006396:	9300      	str	r3, [sp, #0]
 8006398:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800639a:	2200      	movs	r2, #0
 800639c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 f857 	bl	8006454 <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d03c      	beq.n	8006426 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b4:	e853 3f00 	ldrex	r3, [r3]
 80063b8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ba:	6a3b      	ldr	r3, [r7, #32]
 80063bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80063cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d2:	e841 2300 	strex	r3, r2, [r1]
 80063d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1e6      	bne.n	80063ac <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	3308      	adds	r3, #8
 80063e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f023 0301 	bic.w	r3, r3, #1
 80063f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	3308      	adds	r3, #8
 80063fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80063fe:	61fa      	str	r2, [r7, #28]
 8006400:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006402:	69b9      	ldr	r1, [r7, #24]
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	e841 2300 	strex	r3, r2, [r1]
 800640a:	617b      	str	r3, [r7, #20]
   return(result);
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d1e5      	bne.n	80063de <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e012      	b.n	800644c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2220      	movs	r2, #32
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3758      	adds	r7, #88	@ 0x58
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	603b      	str	r3, [r7, #0]
 8006460:	4613      	mov	r3, r2
 8006462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006464:	e04f      	b.n	8006506 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646c:	d04b      	beq.n	8006506 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800646e:	f7fb fee5 	bl	800223c <HAL_GetTick>
 8006472:	4602      	mov	r2, r0
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	1ad3      	subs	r3, r2, r3
 8006478:	69ba      	ldr	r2, [r7, #24]
 800647a:	429a      	cmp	r2, r3
 800647c:	d302      	bcc.n	8006484 <UART_WaitOnFlagUntilTimeout+0x30>
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d101      	bne.n	8006488 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006484:	2303      	movs	r3, #3
 8006486:	e04e      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0304 	and.w	r3, r3, #4
 8006492:	2b00      	cmp	r3, #0
 8006494:	d037      	beq.n	8006506 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b80      	cmp	r3, #128	@ 0x80
 800649a:	d034      	beq.n	8006506 <UART_WaitOnFlagUntilTimeout+0xb2>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b40      	cmp	r3, #64	@ 0x40
 80064a0:	d031      	beq.n	8006506 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69db      	ldr	r3, [r3, #28]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b08      	cmp	r3, #8
 80064ae:	d110      	bne.n	80064d2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2208      	movs	r2, #8
 80064b6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 f95b 	bl	8006774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2208      	movs	r2, #8
 80064c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80064ce:	2301      	movs	r3, #1
 80064d0:	e029      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064e0:	d111      	bne.n	8006506 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f000 f941 	bl	8006774 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2220      	movs	r2, #32
 80064f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2200      	movs	r2, #0
 80064fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e00f      	b.n	8006526 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	4013      	ands	r3, r2
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	429a      	cmp	r2, r3
 8006514:	bf0c      	ite	eq
 8006516:	2301      	moveq	r3, #1
 8006518:	2300      	movne	r3, #0
 800651a:	b2db      	uxtb	r3, r3
 800651c:	461a      	mov	r2, r3
 800651e:	79fb      	ldrb	r3, [r7, #7]
 8006520:	429a      	cmp	r2, r3
 8006522:	d0a0      	beq.n	8006466 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006524:	2300      	movs	r3, #0
}
 8006526:	4618      	mov	r0, r3
 8006528:	3710      	adds	r7, #16
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006530:	b480      	push	{r7}
 8006532:	b0a3      	sub	sp, #140	@ 0x8c
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	88fa      	ldrh	r2, [r7, #6]
 8006548:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	88fa      	ldrh	r2, [r7, #6]
 8006550:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2200      	movs	r2, #0
 8006558:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006562:	d10e      	bne.n	8006582 <UART_Start_Receive_IT+0x52>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d105      	bne.n	8006578 <UART_Start_Receive_IT+0x48>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006572:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006576:	e02d      	b.n	80065d4 <UART_Start_Receive_IT+0xa4>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	22ff      	movs	r2, #255	@ 0xff
 800657c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006580:	e028      	b.n	80065d4 <UART_Start_Receive_IT+0xa4>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10d      	bne.n	80065a6 <UART_Start_Receive_IT+0x76>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d104      	bne.n	800659c <UART_Start_Receive_IT+0x6c>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	22ff      	movs	r2, #255	@ 0xff
 8006596:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800659a:	e01b      	b.n	80065d4 <UART_Start_Receive_IT+0xa4>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	227f      	movs	r2, #127	@ 0x7f
 80065a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065a4:	e016      	b.n	80065d4 <UART_Start_Receive_IT+0xa4>
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ae:	d10d      	bne.n	80065cc <UART_Start_Receive_IT+0x9c>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	691b      	ldr	r3, [r3, #16]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d104      	bne.n	80065c2 <UART_Start_Receive_IT+0x92>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	227f      	movs	r2, #127	@ 0x7f
 80065bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065c0:	e008      	b.n	80065d4 <UART_Start_Receive_IT+0xa4>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	223f      	movs	r2, #63	@ 0x3f
 80065c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065ca:	e003      	b.n	80065d4 <UART_Start_Receive_IT+0xa4>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2222      	movs	r2, #34	@ 0x22
 80065e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80065f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065f6:	f043 0301 	orr.w	r3, r3, #1
 80065fa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	3308      	adds	r3, #8
 8006604:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006608:	673a      	str	r2, [r7, #112]	@ 0x70
 800660a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800660e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006616:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e3      	bne.n	80065e4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006624:	d14f      	bne.n	80066c6 <UART_Start_Receive_IT+0x196>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800662c:	88fa      	ldrh	r2, [r7, #6]
 800662e:	429a      	cmp	r2, r3
 8006630:	d349      	bcc.n	80066c6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800663a:	d107      	bne.n	800664c <UART_Start_Receive_IT+0x11c>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	4a47      	ldr	r2, [pc, #284]	@ (8006764 <UART_Start_Receive_IT+0x234>)
 8006648:	675a      	str	r2, [r3, #116]	@ 0x74
 800664a:	e002      	b.n	8006652 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4a46      	ldr	r2, [pc, #280]	@ (8006768 <UART_Start_Receive_IT+0x238>)
 8006650:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d01a      	beq.n	8006690 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800666a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800666e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	461a      	mov	r2, r3
 8006678:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800667c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800667e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006680:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006682:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006684:	e841 2300 	strex	r3, r2, [r1]
 8006688:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800668a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1e4      	bne.n	800665a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3308      	adds	r3, #8
 8006696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800669a:	e853 3f00 	ldrex	r3, [r3]
 800669e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3308      	adds	r3, #8
 80066ae:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80066b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80066b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066b8:	e841 2300 	strex	r3, r2, [r1]
 80066bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80066be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d1e5      	bne.n	8006690 <UART_Start_Receive_IT+0x160>
 80066c4:	e046      	b.n	8006754 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	d107      	bne.n	80066e0 <UART_Start_Receive_IT+0x1b0>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a24      	ldr	r2, [pc, #144]	@ (800676c <UART_Start_Receive_IT+0x23c>)
 80066dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80066de:	e002      	b.n	80066e6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a23      	ldr	r2, [pc, #140]	@ (8006770 <UART_Start_Receive_IT+0x240>)
 80066e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d019      	beq.n	8006722 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fe:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006702:	677b      	str	r3, [r7, #116]	@ 0x74
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	461a      	mov	r2, r3
 800670a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800670c:	637b      	str	r3, [r7, #52]	@ 0x34
 800670e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006712:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800671a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e6      	bne.n	80066ee <UART_Start_Receive_IT+0x1be>
 8006720:	e018      	b.n	8006754 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	e853 3f00 	ldrex	r3, [r3]
 800672e:	613b      	str	r3, [r7, #16]
   return(result);
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	f043 0320 	orr.w	r3, r3, #32
 8006736:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	461a      	mov	r2, r3
 800673e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006740:	623b      	str	r3, [r7, #32]
 8006742:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006744:	69f9      	ldr	r1, [r7, #28]
 8006746:	6a3a      	ldr	r2, [r7, #32]
 8006748:	e841 2300 	strex	r3, r2, [r1]
 800674c:	61bb      	str	r3, [r7, #24]
   return(result);
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d1e6      	bne.n	8006722 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	378c      	adds	r7, #140	@ 0x8c
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	08006f91 	.word	0x08006f91
 8006768:	08006c2d 	.word	0x08006c2d
 800676c:	08006a75 	.word	0x08006a75
 8006770:	080068bd 	.word	0x080068bd

08006774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006774:	b480      	push	{r7}
 8006776:	b095      	sub	sp, #84	@ 0x54
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800678a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800678c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679a:	643b      	str	r3, [r7, #64]	@ 0x40
 800679c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067a0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e6      	bne.n	800677c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6a3b      	ldr	r3, [r7, #32]
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e3      	bne.n	80067ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d118      	bne.n	8006820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	647b      	str	r3, [r7, #68]	@ 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006834:	bf00      	nop
 8006836:	3754      	adds	r7, #84	@ 0x54
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	2200      	movs	r2, #0
 8006852:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f7ff f99e 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800685c:	bf00      	nop
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b088      	sub	sp, #32
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	60bb      	str	r3, [r7, #8]
   return(result);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006880:	61fb      	str	r3, [r7, #28]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	461a      	mov	r2, r3
 8006888:	69fb      	ldr	r3, [r7, #28]
 800688a:	61bb      	str	r3, [r7, #24]
 800688c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	e841 2300 	strex	r3, r2, [r1]
 8006896:	613b      	str	r3, [r7, #16]
   return(result);
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1e6      	bne.n	800686c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2220      	movs	r2, #32
 80068a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f7ff f969 	bl	8005b84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b2:	bf00      	nop
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
	...

080068bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b09c      	sub	sp, #112	@ 0x70
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80068ca:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80068d4:	2b22      	cmp	r3, #34	@ 0x22
 80068d6:	f040 80be 	bne.w	8006a56 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068e4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80068e8:	b2d9      	uxtb	r1, r3
 80068ea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068f4:	400a      	ands	r2, r1
 80068f6:	b2d2      	uxtb	r2, r2
 80068f8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800690a:	b29b      	uxth	r3, r3
 800690c:	3b01      	subs	r3, #1
 800690e:	b29a      	uxth	r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800691c:	b29b      	uxth	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	f040 80a1 	bne.w	8006a66 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006938:	66bb      	str	r3, [r7, #104]	@ 0x68
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006942:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006944:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006948:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006950:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	667b      	str	r3, [r7, #100]	@ 0x64
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006976:	647a      	str	r2, [r7, #68]	@ 0x44
 8006978:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800697c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006984:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a33      	ldr	r2, [pc, #204]	@ (8006a70 <UART_RxISR_8BIT+0x1b4>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d01f      	beq.n	80069e8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d018      	beq.n	80069e8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	623b      	str	r3, [r7, #32]
   return(result);
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80069d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e6      	bne.n	80069b6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d12e      	bne.n	8006a4e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	e853 3f00 	ldrex	r3, [r3]
 8006a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f023 0310 	bic.w	r3, r3, #16
 8006a0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a14:	61fb      	str	r3, [r7, #28]
 8006a16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a18:	69b9      	ldr	r1, [r7, #24]
 8006a1a:	69fa      	ldr	r2, [r7, #28]
 8006a1c:	e841 2300 	strex	r3, r2, [r1]
 8006a20:	617b      	str	r3, [r7, #20]
   return(result);
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d1e6      	bne.n	80069f6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	69db      	ldr	r3, [r3, #28]
 8006a2e:	f003 0310 	and.w	r3, r3, #16
 8006a32:	2b10      	cmp	r3, #16
 8006a34:	d103      	bne.n	8006a3e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2210      	movs	r2, #16
 8006a3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7ff f8b0 	bl	8005bac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a4c:	e00b      	b.n	8006a66 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f7fa fb20 	bl	8001094 <HAL_UART_RxCpltCallback>
}
 8006a54:	e007      	b.n	8006a66 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	699a      	ldr	r2, [r3, #24]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f042 0208 	orr.w	r2, r2, #8
 8006a64:	619a      	str	r2, [r3, #24]
}
 8006a66:	bf00      	nop
 8006a68:	3770      	adds	r7, #112	@ 0x70
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40008000 	.word	0x40008000

08006a74 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b09c      	sub	sp, #112	@ 0x70
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006a82:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006a8c:	2b22      	cmp	r3, #34	@ 0x22
 8006a8e:	f040 80be 	bne.w	8006c0e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a98:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006aa2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006aa6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006aaa:	4013      	ands	r3, r2
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ab0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab6:	1c9a      	adds	r2, r3, #2
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	f040 80a1 	bne.w	8006c1e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006ae4:	e853 3f00 	ldrex	r3, [r3]
 8006ae8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006afa:	657b      	str	r3, [r7, #84]	@ 0x54
 8006afc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b00:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b02:	e841 2300 	strex	r3, r2, [r1]
 8006b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d1e6      	bne.n	8006adc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3308      	adds	r3, #8
 8006b14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b20:	f023 0301 	bic.w	r3, r3, #1
 8006b24:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e5      	bne.n	8006b0e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a33      	ldr	r2, [pc, #204]	@ (8006c28 <UART_RxISR_16BIT+0x1b4>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d01f      	beq.n	8006ba0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d018      	beq.n	8006ba0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	e853 3f00 	ldrex	r3, [r3]
 8006b7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b7c:	69fb      	ldr	r3, [r7, #28]
 8006b7e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006b82:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	461a      	mov	r2, r3
 8006b8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b8e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b94:	e841 2300 	strex	r3, r2, [r1]
 8006b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1e6      	bne.n	8006b6e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d12e      	bne.n	8006c06 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	e853 3f00 	ldrex	r3, [r3]
 8006bba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	f023 0310 	bic.w	r3, r3, #16
 8006bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bcc:	61bb      	str	r3, [r7, #24]
 8006bce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd0:	6979      	ldr	r1, [r7, #20]
 8006bd2:	69ba      	ldr	r2, [r7, #24]
 8006bd4:	e841 2300 	strex	r3, r2, [r1]
 8006bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e6      	bne.n	8006bae <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f003 0310 	and.w	r3, r3, #16
 8006bea:	2b10      	cmp	r3, #16
 8006bec:	d103      	bne.n	8006bf6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	2210      	movs	r2, #16
 8006bf4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f7fe ffd4 	bl	8005bac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c04:	e00b      	b.n	8006c1e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7fa fa44 	bl	8001094 <HAL_UART_RxCpltCallback>
}
 8006c0c:	e007      	b.n	8006c1e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f042 0208 	orr.w	r2, r2, #8
 8006c1c:	619a      	str	r2, [r3, #24]
}
 8006c1e:	bf00      	nop
 8006c20:	3770      	adds	r7, #112	@ 0x70
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	40008000 	.word	0x40008000

08006c2c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b0ac      	sub	sp, #176	@ 0xb0
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006c3a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	689b      	ldr	r3, [r3, #8]
 8006c58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c62:	2b22      	cmp	r3, #34	@ 0x22
 8006c64:	f040 8183 	bne.w	8006f6e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c6e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c72:	e126      	b.n	8006ec2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c7e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006c82:	b2d9      	uxtb	r1, r3
 8006c84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c8e:	400a      	ands	r2, r1
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ca4:	b29b      	uxth	r3, r3
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	69db      	ldr	r3, [r3, #28]
 8006cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cbe:	f003 0307 	and.w	r3, r3, #7
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d053      	beq.n	8006d6e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cc6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cca:	f003 0301 	and.w	r3, r3, #1
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d011      	beq.n	8006cf6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006cd2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006cd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d00b      	beq.n	8006cf6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006cec:	f043 0201 	orr.w	r2, r3, #1
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cfa:	f003 0302 	and.w	r3, r3, #2
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d011      	beq.n	8006d26 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d06:	f003 0301 	and.w	r3, r3, #1
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2202      	movs	r2, #2
 8006d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1c:	f043 0204 	orr.w	r2, r3, #4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2a:	f003 0304 	and.w	r3, r3, #4
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d011      	beq.n	8006d56 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2204      	movs	r2, #4
 8006d44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4c:	f043 0202 	orr.w	r2, r3, #2
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d006      	beq.n	8006d6e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f7fe ff19 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 80a3 	bne.w	8006ec2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006da0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006da2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006da4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006da6:	e841 2300 	strex	r3, r2, [r1]
 8006daa:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006dac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d1e4      	bne.n	8006d7c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3308      	adds	r3, #8
 8006db8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dbc:	e853 3f00 	ldrex	r3, [r3]
 8006dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006dc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006dc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006dc8:	f023 0301 	bic.w	r3, r3, #1
 8006dcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006dda:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006ddc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dde:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006de0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006de2:	e841 2300 	strex	r3, r2, [r1]
 8006de6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006de8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d1e1      	bne.n	8006db2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a60      	ldr	r2, [pc, #384]	@ (8006f88 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d021      	beq.n	8006e50 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d01a      	beq.n	8006e50 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e22:	e853 3f00 	ldrex	r3, [r3]
 8006e26:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e3e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e42:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e4      	bne.n	8006e1a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d130      	bne.n	8006eba <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e66:	e853 3f00 	ldrex	r3, [r3]
 8006e6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e6e:	f023 0310 	bic.w	r3, r3, #16
 8006e72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006e80:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e82:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e86:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e4      	bne.n	8006e5e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d103      	bne.n	8006eaa <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fe fe7a 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006eb8:	e00e      	b.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fa f8ea 	bl	8001094 <HAL_UART_RxCpltCallback>
        break;
 8006ec0:	e00a      	b.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ec2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d006      	beq.n	8006ed8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8006eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ece:	f003 0320 	and.w	r3, r3, #32
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f47f aece 	bne.w	8006c74 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ede:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ee2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d049      	beq.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0x352>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006ef0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d242      	bcs.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6a3b      	ldr	r3, [r7, #32]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3308      	adds	r3, #8
 8006f18:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006f1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f24:	e841 2300 	strex	r3, r2, [r1]
 8006f28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d1e3      	bne.n	8006ef8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a16      	ldr	r2, [pc, #88]	@ (8006f8c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006f34:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	e853 3f00 	ldrex	r3, [r3]
 8006f42:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	f043 0320 	orr.w	r3, r3, #32
 8006f4a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f58:	61bb      	str	r3, [r7, #24]
 8006f5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f5c:	6979      	ldr	r1, [r7, #20]
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	e841 2300 	strex	r3, r2, [r1]
 8006f64:	613b      	str	r3, [r7, #16]
   return(result);
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d1e4      	bne.n	8006f36 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f6c:	e007      	b.n	8006f7e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	699a      	ldr	r2, [r3, #24]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f042 0208 	orr.w	r2, r2, #8
 8006f7c:	619a      	str	r2, [r3, #24]
}
 8006f7e:	bf00      	nop
 8006f80:	37b0      	adds	r7, #176	@ 0xb0
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40008000 	.word	0x40008000
 8006f8c:	080068bd 	.word	0x080068bd

08006f90 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b0ae      	sub	sp, #184	@ 0xb8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f9e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	69db      	ldr	r3, [r3, #28]
 8006fa8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fc6:	2b22      	cmp	r3, #34	@ 0x22
 8006fc8:	f040 8187 	bne.w	80072da <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006fd2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fd6:	e12a      	b.n	800722e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fde:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fe6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006fea:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8006fee:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006ffa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007000:	1c9a      	adds	r2, r3, #2
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800700c:	b29b      	uxth	r3, r3
 800700e:	3b01      	subs	r3, #1
 8007010:	b29a      	uxth	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007022:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007026:	f003 0307 	and.w	r3, r3, #7
 800702a:	2b00      	cmp	r3, #0
 800702c:	d053      	beq.n	80070d6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800702e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007032:	f003 0301 	and.w	r3, r3, #1
 8007036:	2b00      	cmp	r3, #0
 8007038:	d011      	beq.n	800705e <UART_RxISR_16BIT_FIFOEN+0xce>
 800703a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800703e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2201      	movs	r2, #1
 800704c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007054:	f043 0201 	orr.w	r2, r3, #1
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800705e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007062:	f003 0302 	and.w	r3, r3, #2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d011      	beq.n	800708e <UART_RxISR_16BIT_FIFOEN+0xfe>
 800706a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2202      	movs	r2, #2
 800707c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007084:	f043 0204 	orr.w	r2, r3, #4
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d011      	beq.n	80070be <UART_RxISR_16BIT_FIFOEN+0x12e>
 800709a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2204      	movs	r2, #4
 80070ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b4:	f043 0202 	orr.w	r2, r3, #2
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fe fd65 	bl	8005b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070dc:	b29b      	uxth	r3, r3
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f040 80a5 	bne.w	800722e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	461a      	mov	r2, r3
 8007102:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007106:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800710a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800710e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007118:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e2      	bne.n	80070e4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3308      	adds	r3, #8
 8007124:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007126:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007128:	e853 3f00 	ldrex	r3, [r3]
 800712c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800712e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007130:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007146:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007148:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800714c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800714e:	e841 2300 	strex	r3, r2, [r1]
 8007152:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007154:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007156:	2b00      	cmp	r3, #0
 8007158:	d1e1      	bne.n	800711e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2220      	movs	r2, #32
 800715e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2200      	movs	r2, #0
 800716c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a60      	ldr	r2, [pc, #384]	@ (80072f4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d021      	beq.n	80071bc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d01a      	beq.n	80071bc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007194:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800719a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071aa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e4      	bne.n	8007186 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d130      	bne.n	8007226 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	f023 0310 	bic.w	r3, r3, #16
 80071de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80071ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ee:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e4      	bne.n	80071ca <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	f003 0310 	and.w	r3, r3, #16
 800720a:	2b10      	cmp	r3, #16
 800720c:	d103      	bne.n	8007216 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2210      	movs	r2, #16
 8007214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f7fe fcc4 	bl	8005bac <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007224:	e00e      	b.n	8007244 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7f9 ff34 	bl	8001094 <HAL_UART_RxCpltCallback>
        break;
 800722c:	e00a      	b.n	8007244 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800722e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007232:	2b00      	cmp	r3, #0
 8007234:	d006      	beq.n	8007244 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8007236:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	f47f aeca 	bne.w	8006fd8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800724a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800724e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007252:	2b00      	cmp	r3, #0
 8007254:	d049      	beq.n	80072ea <UART_RxISR_16BIT_FIFOEN+0x35a>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800725c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007260:	429a      	cmp	r2, r3
 8007262:	d242      	bcs.n	80072ea <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3308      	adds	r3, #8
 800726a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	e853 3f00 	ldrex	r3, [r3]
 8007272:	623b      	str	r3, [r7, #32]
   return(result);
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800727a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	3308      	adds	r3, #8
 8007284:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007288:	633a      	str	r2, [r7, #48]	@ 0x30
 800728a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800728e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007290:	e841 2300 	strex	r3, r2, [r1]
 8007294:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007298:	2b00      	cmp	r3, #0
 800729a:	d1e3      	bne.n	8007264 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4a16      	ldr	r2, [pc, #88]	@ (80072f8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80072a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	e853 3f00 	ldrex	r3, [r3]
 80072ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f043 0320 	orr.w	r3, r3, #32
 80072b6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	461a      	mov	r2, r3
 80072c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072c4:	61fb      	str	r3, [r7, #28]
 80072c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	69fa      	ldr	r2, [r7, #28]
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	617b      	str	r3, [r7, #20]
   return(result);
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e4      	bne.n	80072a2 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072d8:	e007      	b.n	80072ea <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	699a      	ldr	r2, [r3, #24]
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f042 0208 	orr.w	r2, r2, #8
 80072e8:	619a      	str	r2, [r3, #24]
}
 80072ea:	bf00      	nop
 80072ec:	37b8      	adds	r7, #184	@ 0xb8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	40008000 	.word	0x40008000
 80072f8:	08006a75 	.word	0x08006a75

080072fc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b085      	sub	sp, #20
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_UARTEx_DisableFifoMode+0x16>
 800734a:	2302      	movs	r3, #2
 800734c:	e027      	b.n	800739e <HAL_UARTEx_DisableFifoMode+0x66>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2224      	movs	r2, #36	@ 0x24
 800735a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800737c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073aa:	b580      	push	{r7, lr}
 80073ac:	b084      	sub	sp, #16
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
 80073b2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d101      	bne.n	80073c2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073be:	2302      	movs	r3, #2
 80073c0:	e02d      	b.n	800741e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2224      	movs	r2, #36	@ 0x24
 80073ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f022 0201 	bic.w	r2, r2, #1
 80073e8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	683a      	ldr	r2, [r7, #0]
 80073fa:	430a      	orrs	r2, r1
 80073fc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 f850 	bl	80074a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2220      	movs	r2, #32
 8007410:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3710      	adds	r7, #16
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b084      	sub	sp, #16
 800742a:	af00      	add	r7, sp, #0
 800742c:	6078      	str	r0, [r7, #4]
 800742e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007436:	2b01      	cmp	r3, #1
 8007438:	d101      	bne.n	800743e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800743a:	2302      	movs	r3, #2
 800743c:	e02d      	b.n	800749a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2224      	movs	r2, #36	@ 0x24
 800744a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f022 0201 	bic.w	r2, r2, #1
 8007464:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	683a      	ldr	r2, [r7, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f812 	bl	80074a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2220      	movs	r2, #32
 800748c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
	...

080074a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d108      	bne.n	80074c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074c4:	e031      	b.n	800752a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074c6:	2308      	movs	r3, #8
 80074c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074ca:	2308      	movs	r3, #8
 80074cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	0e5b      	lsrs	r3, r3, #25
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	0f5b      	lsrs	r3, r3, #29
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f003 0307 	and.w	r3, r3, #7
 80074ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80074ee:	7bbb      	ldrb	r3, [r7, #14]
 80074f0:	7b3a      	ldrb	r2, [r7, #12]
 80074f2:	4911      	ldr	r1, [pc, #68]	@ (8007538 <UARTEx_SetNbDataToProcess+0x94>)
 80074f4:	5c8a      	ldrb	r2, [r1, r2]
 80074f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80074fa:	7b3a      	ldrb	r2, [r7, #12]
 80074fc:	490f      	ldr	r1, [pc, #60]	@ (800753c <UARTEx_SetNbDataToProcess+0x98>)
 80074fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007500:	fb93 f3f2 	sdiv	r3, r3, r2
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800750c:	7bfb      	ldrb	r3, [r7, #15]
 800750e:	7b7a      	ldrb	r2, [r7, #13]
 8007510:	4909      	ldr	r1, [pc, #36]	@ (8007538 <UARTEx_SetNbDataToProcess+0x94>)
 8007512:	5c8a      	ldrb	r2, [r1, r2]
 8007514:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007518:	7b7a      	ldrb	r2, [r7, #13]
 800751a:	4908      	ldr	r1, [pc, #32]	@ (800753c <UARTEx_SetNbDataToProcess+0x98>)
 800751c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800751e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007522:	b29a      	uxth	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800752a:	bf00      	nop
 800752c:	3714      	adds	r7, #20
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
 8007536:	bf00      	nop
 8007538:	0800bc60 	.word	0x0800bc60
 800753c:	0800bc68 	.word	0x0800bc68

08007540 <sulp>:
 8007540:	b570      	push	{r4, r5, r6, lr}
 8007542:	4604      	mov	r4, r0
 8007544:	460d      	mov	r5, r1
 8007546:	ec45 4b10 	vmov	d0, r4, r5
 800754a:	4616      	mov	r6, r2
 800754c:	f003 fce4 	bl	800af18 <__ulp>
 8007550:	ec51 0b10 	vmov	r0, r1, d0
 8007554:	b17e      	cbz	r6, 8007576 <sulp+0x36>
 8007556:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800755a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800755e:	2b00      	cmp	r3, #0
 8007560:	dd09      	ble.n	8007576 <sulp+0x36>
 8007562:	051b      	lsls	r3, r3, #20
 8007564:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007568:	2400      	movs	r4, #0
 800756a:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800756e:	4622      	mov	r2, r4
 8007570:	462b      	mov	r3, r5
 8007572:	f7f9 f869 	bl	8000648 <__aeabi_dmul>
 8007576:	ec41 0b10 	vmov	d0, r0, r1
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	0000      	movs	r0, r0
	...

08007580 <_strtod_l>:
 8007580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007584:	b09f      	sub	sp, #124	@ 0x7c
 8007586:	460c      	mov	r4, r1
 8007588:	9217      	str	r2, [sp, #92]	@ 0x5c
 800758a:	2200      	movs	r2, #0
 800758c:	921a      	str	r2, [sp, #104]	@ 0x68
 800758e:	9005      	str	r0, [sp, #20]
 8007590:	f04f 0a00 	mov.w	sl, #0
 8007594:	f04f 0b00 	mov.w	fp, #0
 8007598:	460a      	mov	r2, r1
 800759a:	9219      	str	r2, [sp, #100]	@ 0x64
 800759c:	7811      	ldrb	r1, [r2, #0]
 800759e:	292b      	cmp	r1, #43	@ 0x2b
 80075a0:	d04a      	beq.n	8007638 <_strtod_l+0xb8>
 80075a2:	d838      	bhi.n	8007616 <_strtod_l+0x96>
 80075a4:	290d      	cmp	r1, #13
 80075a6:	d832      	bhi.n	800760e <_strtod_l+0x8e>
 80075a8:	2908      	cmp	r1, #8
 80075aa:	d832      	bhi.n	8007612 <_strtod_l+0x92>
 80075ac:	2900      	cmp	r1, #0
 80075ae:	d03b      	beq.n	8007628 <_strtod_l+0xa8>
 80075b0:	2200      	movs	r2, #0
 80075b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80075b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80075b6:	782a      	ldrb	r2, [r5, #0]
 80075b8:	2a30      	cmp	r2, #48	@ 0x30
 80075ba:	f040 80b3 	bne.w	8007724 <_strtod_l+0x1a4>
 80075be:	786a      	ldrb	r2, [r5, #1]
 80075c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075c4:	2a58      	cmp	r2, #88	@ 0x58
 80075c6:	d16e      	bne.n	80076a6 <_strtod_l+0x126>
 80075c8:	9302      	str	r3, [sp, #8]
 80075ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075cc:	9301      	str	r3, [sp, #4]
 80075ce:	ab1a      	add	r3, sp, #104	@ 0x68
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	4a8e      	ldr	r2, [pc, #568]	@ (800780c <_strtod_l+0x28c>)
 80075d4:	9805      	ldr	r0, [sp, #20]
 80075d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075d8:	a919      	add	r1, sp, #100	@ 0x64
 80075da:	f002 fd8f 	bl	800a0fc <__gethex>
 80075de:	f010 060f 	ands.w	r6, r0, #15
 80075e2:	4604      	mov	r4, r0
 80075e4:	d005      	beq.n	80075f2 <_strtod_l+0x72>
 80075e6:	2e06      	cmp	r6, #6
 80075e8:	d128      	bne.n	800763c <_strtod_l+0xbc>
 80075ea:	3501      	adds	r5, #1
 80075ec:	2300      	movs	r3, #0
 80075ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80075f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80075f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f040 858e 	bne.w	8008116 <_strtod_l+0xb96>
 80075fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075fc:	b1cb      	cbz	r3, 8007632 <_strtod_l+0xb2>
 80075fe:	4652      	mov	r2, sl
 8007600:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007604:	ec43 2b10 	vmov	d0, r2, r3
 8007608:	b01f      	add	sp, #124	@ 0x7c
 800760a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800760e:	2920      	cmp	r1, #32
 8007610:	d1ce      	bne.n	80075b0 <_strtod_l+0x30>
 8007612:	3201      	adds	r2, #1
 8007614:	e7c1      	b.n	800759a <_strtod_l+0x1a>
 8007616:	292d      	cmp	r1, #45	@ 0x2d
 8007618:	d1ca      	bne.n	80075b0 <_strtod_l+0x30>
 800761a:	2101      	movs	r1, #1
 800761c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800761e:	1c51      	adds	r1, r2, #1
 8007620:	9119      	str	r1, [sp, #100]	@ 0x64
 8007622:	7852      	ldrb	r2, [r2, #1]
 8007624:	2a00      	cmp	r2, #0
 8007626:	d1c5      	bne.n	80075b4 <_strtod_l+0x34>
 8007628:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800762a:	9419      	str	r4, [sp, #100]	@ 0x64
 800762c:	2b00      	cmp	r3, #0
 800762e:	f040 8570 	bne.w	8008112 <_strtod_l+0xb92>
 8007632:	4652      	mov	r2, sl
 8007634:	465b      	mov	r3, fp
 8007636:	e7e5      	b.n	8007604 <_strtod_l+0x84>
 8007638:	2100      	movs	r1, #0
 800763a:	e7ef      	b.n	800761c <_strtod_l+0x9c>
 800763c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800763e:	b13a      	cbz	r2, 8007650 <_strtod_l+0xd0>
 8007640:	2135      	movs	r1, #53	@ 0x35
 8007642:	a81c      	add	r0, sp, #112	@ 0x70
 8007644:	f003 fd62 	bl	800b10c <__copybits>
 8007648:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800764a:	9805      	ldr	r0, [sp, #20]
 800764c:	f003 f930 	bl	800a8b0 <_Bfree>
 8007650:	3e01      	subs	r6, #1
 8007652:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007654:	2e04      	cmp	r6, #4
 8007656:	d806      	bhi.n	8007666 <_strtod_l+0xe6>
 8007658:	e8df f006 	tbb	[pc, r6]
 800765c:	201d0314 	.word	0x201d0314
 8007660:	14          	.byte	0x14
 8007661:	00          	.byte	0x00
 8007662:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007666:	05e1      	lsls	r1, r4, #23
 8007668:	bf48      	it	mi
 800766a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800766e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007672:	0d1b      	lsrs	r3, r3, #20
 8007674:	051b      	lsls	r3, r3, #20
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1bb      	bne.n	80075f2 <_strtod_l+0x72>
 800767a:	f001 fdf5 	bl	8009268 <__errno>
 800767e:	2322      	movs	r3, #34	@ 0x22
 8007680:	6003      	str	r3, [r0, #0]
 8007682:	e7b6      	b.n	80075f2 <_strtod_l+0x72>
 8007684:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007688:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800768c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007690:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007694:	e7e7      	b.n	8007666 <_strtod_l+0xe6>
 8007696:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007814 <_strtod_l+0x294>
 800769a:	e7e4      	b.n	8007666 <_strtod_l+0xe6>
 800769c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80076a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80076a4:	e7df      	b.n	8007666 <_strtod_l+0xe6>
 80076a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a8:	1c5a      	adds	r2, r3, #1
 80076aa:	9219      	str	r2, [sp, #100]	@ 0x64
 80076ac:	785b      	ldrb	r3, [r3, #1]
 80076ae:	2b30      	cmp	r3, #48	@ 0x30
 80076b0:	d0f9      	beq.n	80076a6 <_strtod_l+0x126>
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d09d      	beq.n	80075f2 <_strtod_l+0x72>
 80076b6:	2301      	movs	r3, #1
 80076b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80076ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80076be:	2300      	movs	r3, #0
 80076c0:	9308      	str	r3, [sp, #32]
 80076c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80076c4:	461f      	mov	r7, r3
 80076c6:	220a      	movs	r2, #10
 80076c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076ca:	7805      	ldrb	r5, [r0, #0]
 80076cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80076d0:	b2d9      	uxtb	r1, r3
 80076d2:	2909      	cmp	r1, #9
 80076d4:	d928      	bls.n	8007728 <_strtod_l+0x1a8>
 80076d6:	494e      	ldr	r1, [pc, #312]	@ (8007810 <_strtod_l+0x290>)
 80076d8:	2201      	movs	r2, #1
 80076da:	f001 fd69 	bl	80091b0 <strncmp>
 80076de:	2800      	cmp	r0, #0
 80076e0:	d032      	beq.n	8007748 <_strtod_l+0x1c8>
 80076e2:	2000      	movs	r0, #0
 80076e4:	462a      	mov	r2, r5
 80076e6:	4681      	mov	r9, r0
 80076e8:	463d      	mov	r5, r7
 80076ea:	4603      	mov	r3, r0
 80076ec:	2a65      	cmp	r2, #101	@ 0x65
 80076ee:	d001      	beq.n	80076f4 <_strtod_l+0x174>
 80076f0:	2a45      	cmp	r2, #69	@ 0x45
 80076f2:	d114      	bne.n	800771e <_strtod_l+0x19e>
 80076f4:	b91d      	cbnz	r5, 80076fe <_strtod_l+0x17e>
 80076f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f8:	4302      	orrs	r2, r0
 80076fa:	d095      	beq.n	8007628 <_strtod_l+0xa8>
 80076fc:	2500      	movs	r5, #0
 80076fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007700:	1c62      	adds	r2, r4, #1
 8007702:	9219      	str	r2, [sp, #100]	@ 0x64
 8007704:	7862      	ldrb	r2, [r4, #1]
 8007706:	2a2b      	cmp	r2, #43	@ 0x2b
 8007708:	d077      	beq.n	80077fa <_strtod_l+0x27a>
 800770a:	2a2d      	cmp	r2, #45	@ 0x2d
 800770c:	d07b      	beq.n	8007806 <_strtod_l+0x286>
 800770e:	f04f 0c00 	mov.w	ip, #0
 8007712:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007716:	2909      	cmp	r1, #9
 8007718:	f240 8082 	bls.w	8007820 <_strtod_l+0x2a0>
 800771c:	9419      	str	r4, [sp, #100]	@ 0x64
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	e0a2      	b.n	800786a <_strtod_l+0x2ea>
 8007724:	2300      	movs	r3, #0
 8007726:	e7c7      	b.n	80076b8 <_strtod_l+0x138>
 8007728:	2f08      	cmp	r7, #8
 800772a:	bfd5      	itete	le
 800772c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800772e:	9908      	ldrgt	r1, [sp, #32]
 8007730:	fb02 3301 	mlale	r3, r2, r1, r3
 8007734:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007738:	f100 0001 	add.w	r0, r0, #1
 800773c:	bfd4      	ite	le
 800773e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007740:	9308      	strgt	r3, [sp, #32]
 8007742:	3701      	adds	r7, #1
 8007744:	9019      	str	r0, [sp, #100]	@ 0x64
 8007746:	e7bf      	b.n	80076c8 <_strtod_l+0x148>
 8007748:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	9219      	str	r2, [sp, #100]	@ 0x64
 800774e:	785a      	ldrb	r2, [r3, #1]
 8007750:	b37f      	cbz	r7, 80077b2 <_strtod_l+0x232>
 8007752:	4681      	mov	r9, r0
 8007754:	463d      	mov	r5, r7
 8007756:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800775a:	2b09      	cmp	r3, #9
 800775c:	d912      	bls.n	8007784 <_strtod_l+0x204>
 800775e:	2301      	movs	r3, #1
 8007760:	e7c4      	b.n	80076ec <_strtod_l+0x16c>
 8007762:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	9219      	str	r2, [sp, #100]	@ 0x64
 8007768:	785a      	ldrb	r2, [r3, #1]
 800776a:	3001      	adds	r0, #1
 800776c:	2a30      	cmp	r2, #48	@ 0x30
 800776e:	d0f8      	beq.n	8007762 <_strtod_l+0x1e2>
 8007770:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007774:	2b08      	cmp	r3, #8
 8007776:	f200 84d3 	bhi.w	8008120 <_strtod_l+0xba0>
 800777a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800777c:	930c      	str	r3, [sp, #48]	@ 0x30
 800777e:	4681      	mov	r9, r0
 8007780:	2000      	movs	r0, #0
 8007782:	4605      	mov	r5, r0
 8007784:	3a30      	subs	r2, #48	@ 0x30
 8007786:	f100 0301 	add.w	r3, r0, #1
 800778a:	d02a      	beq.n	80077e2 <_strtod_l+0x262>
 800778c:	4499      	add	r9, r3
 800778e:	eb00 0c05 	add.w	ip, r0, r5
 8007792:	462b      	mov	r3, r5
 8007794:	210a      	movs	r1, #10
 8007796:	4563      	cmp	r3, ip
 8007798:	d10d      	bne.n	80077b6 <_strtod_l+0x236>
 800779a:	1c69      	adds	r1, r5, #1
 800779c:	4401      	add	r1, r0
 800779e:	4428      	add	r0, r5
 80077a0:	2808      	cmp	r0, #8
 80077a2:	dc16      	bgt.n	80077d2 <_strtod_l+0x252>
 80077a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077a6:	230a      	movs	r3, #10
 80077a8:	fb03 2300 	mla	r3, r3, r0, r2
 80077ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ae:	2300      	movs	r3, #0
 80077b0:	e018      	b.n	80077e4 <_strtod_l+0x264>
 80077b2:	4638      	mov	r0, r7
 80077b4:	e7da      	b.n	800776c <_strtod_l+0x1ec>
 80077b6:	2b08      	cmp	r3, #8
 80077b8:	f103 0301 	add.w	r3, r3, #1
 80077bc:	dc03      	bgt.n	80077c6 <_strtod_l+0x246>
 80077be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80077c0:	434e      	muls	r6, r1
 80077c2:	960a      	str	r6, [sp, #40]	@ 0x28
 80077c4:	e7e7      	b.n	8007796 <_strtod_l+0x216>
 80077c6:	2b10      	cmp	r3, #16
 80077c8:	bfde      	ittt	le
 80077ca:	9e08      	ldrle	r6, [sp, #32]
 80077cc:	434e      	mulle	r6, r1
 80077ce:	9608      	strle	r6, [sp, #32]
 80077d0:	e7e1      	b.n	8007796 <_strtod_l+0x216>
 80077d2:	280f      	cmp	r0, #15
 80077d4:	dceb      	bgt.n	80077ae <_strtod_l+0x22e>
 80077d6:	9808      	ldr	r0, [sp, #32]
 80077d8:	230a      	movs	r3, #10
 80077da:	fb03 2300 	mla	r3, r3, r0, r2
 80077de:	9308      	str	r3, [sp, #32]
 80077e0:	e7e5      	b.n	80077ae <_strtod_l+0x22e>
 80077e2:	4629      	mov	r1, r5
 80077e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077e6:	1c50      	adds	r0, r2, #1
 80077e8:	9019      	str	r0, [sp, #100]	@ 0x64
 80077ea:	7852      	ldrb	r2, [r2, #1]
 80077ec:	4618      	mov	r0, r3
 80077ee:	460d      	mov	r5, r1
 80077f0:	e7b1      	b.n	8007756 <_strtod_l+0x1d6>
 80077f2:	f04f 0900 	mov.w	r9, #0
 80077f6:	2301      	movs	r3, #1
 80077f8:	e77d      	b.n	80076f6 <_strtod_l+0x176>
 80077fa:	f04f 0c00 	mov.w	ip, #0
 80077fe:	1ca2      	adds	r2, r4, #2
 8007800:	9219      	str	r2, [sp, #100]	@ 0x64
 8007802:	78a2      	ldrb	r2, [r4, #2]
 8007804:	e785      	b.n	8007712 <_strtod_l+0x192>
 8007806:	f04f 0c01 	mov.w	ip, #1
 800780a:	e7f8      	b.n	80077fe <_strtod_l+0x27e>
 800780c:	0800bc88 	.word	0x0800bc88
 8007810:	0800bc70 	.word	0x0800bc70
 8007814:	7ff00000 	.word	0x7ff00000
 8007818:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800781a:	1c51      	adds	r1, r2, #1
 800781c:	9119      	str	r1, [sp, #100]	@ 0x64
 800781e:	7852      	ldrb	r2, [r2, #1]
 8007820:	2a30      	cmp	r2, #48	@ 0x30
 8007822:	d0f9      	beq.n	8007818 <_strtod_l+0x298>
 8007824:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007828:	2908      	cmp	r1, #8
 800782a:	f63f af78 	bhi.w	800771e <_strtod_l+0x19e>
 800782e:	3a30      	subs	r2, #48	@ 0x30
 8007830:	920e      	str	r2, [sp, #56]	@ 0x38
 8007832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007834:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007836:	f04f 080a 	mov.w	r8, #10
 800783a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800783c:	1c56      	adds	r6, r2, #1
 800783e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007840:	7852      	ldrb	r2, [r2, #1]
 8007842:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007846:	f1be 0f09 	cmp.w	lr, #9
 800784a:	d939      	bls.n	80078c0 <_strtod_l+0x340>
 800784c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800784e:	1a76      	subs	r6, r6, r1
 8007850:	2e08      	cmp	r6, #8
 8007852:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007856:	dc03      	bgt.n	8007860 <_strtod_l+0x2e0>
 8007858:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800785a:	4588      	cmp	r8, r1
 800785c:	bfa8      	it	ge
 800785e:	4688      	movge	r8, r1
 8007860:	f1bc 0f00 	cmp.w	ip, #0
 8007864:	d001      	beq.n	800786a <_strtod_l+0x2ea>
 8007866:	f1c8 0800 	rsb	r8, r8, #0
 800786a:	2d00      	cmp	r5, #0
 800786c:	d14e      	bne.n	800790c <_strtod_l+0x38c>
 800786e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007870:	4308      	orrs	r0, r1
 8007872:	f47f aebe 	bne.w	80075f2 <_strtod_l+0x72>
 8007876:	2b00      	cmp	r3, #0
 8007878:	f47f aed6 	bne.w	8007628 <_strtod_l+0xa8>
 800787c:	2a69      	cmp	r2, #105	@ 0x69
 800787e:	d028      	beq.n	80078d2 <_strtod_l+0x352>
 8007880:	dc25      	bgt.n	80078ce <_strtod_l+0x34e>
 8007882:	2a49      	cmp	r2, #73	@ 0x49
 8007884:	d025      	beq.n	80078d2 <_strtod_l+0x352>
 8007886:	2a4e      	cmp	r2, #78	@ 0x4e
 8007888:	f47f aece 	bne.w	8007628 <_strtod_l+0xa8>
 800788c:	499b      	ldr	r1, [pc, #620]	@ (8007afc <_strtod_l+0x57c>)
 800788e:	a819      	add	r0, sp, #100	@ 0x64
 8007890:	f002 fe56 	bl	800a540 <__match>
 8007894:	2800      	cmp	r0, #0
 8007896:	f43f aec7 	beq.w	8007628 <_strtod_l+0xa8>
 800789a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800789c:	781b      	ldrb	r3, [r3, #0]
 800789e:	2b28      	cmp	r3, #40	@ 0x28
 80078a0:	d12e      	bne.n	8007900 <_strtod_l+0x380>
 80078a2:	4997      	ldr	r1, [pc, #604]	@ (8007b00 <_strtod_l+0x580>)
 80078a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80078a6:	a819      	add	r0, sp, #100	@ 0x64
 80078a8:	f002 fe5e 	bl	800a568 <__hexnan>
 80078ac:	2805      	cmp	r0, #5
 80078ae:	d127      	bne.n	8007900 <_strtod_l+0x380>
 80078b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80078b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80078ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80078be:	e698      	b.n	80075f2 <_strtod_l+0x72>
 80078c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078c2:	fb08 2101 	mla	r1, r8, r1, r2
 80078c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078ca:	920e      	str	r2, [sp, #56]	@ 0x38
 80078cc:	e7b5      	b.n	800783a <_strtod_l+0x2ba>
 80078ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80078d0:	e7da      	b.n	8007888 <_strtod_l+0x308>
 80078d2:	498c      	ldr	r1, [pc, #560]	@ (8007b04 <_strtod_l+0x584>)
 80078d4:	a819      	add	r0, sp, #100	@ 0x64
 80078d6:	f002 fe33 	bl	800a540 <__match>
 80078da:	2800      	cmp	r0, #0
 80078dc:	f43f aea4 	beq.w	8007628 <_strtod_l+0xa8>
 80078e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078e2:	4989      	ldr	r1, [pc, #548]	@ (8007b08 <_strtod_l+0x588>)
 80078e4:	3b01      	subs	r3, #1
 80078e6:	a819      	add	r0, sp, #100	@ 0x64
 80078e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80078ea:	f002 fe29 	bl	800a540 <__match>
 80078ee:	b910      	cbnz	r0, 80078f6 <_strtod_l+0x376>
 80078f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078f2:	3301      	adds	r3, #1
 80078f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80078f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007b18 <_strtod_l+0x598>
 80078fa:	f04f 0a00 	mov.w	sl, #0
 80078fe:	e678      	b.n	80075f2 <_strtod_l+0x72>
 8007900:	4882      	ldr	r0, [pc, #520]	@ (8007b0c <_strtod_l+0x58c>)
 8007902:	f001 fced 	bl	80092e0 <nan>
 8007906:	ec5b ab10 	vmov	sl, fp, d0
 800790a:	e672      	b.n	80075f2 <_strtod_l+0x72>
 800790c:	eba8 0309 	sub.w	r3, r8, r9
 8007910:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007912:	9309      	str	r3, [sp, #36]	@ 0x24
 8007914:	2f00      	cmp	r7, #0
 8007916:	bf08      	it	eq
 8007918:	462f      	moveq	r7, r5
 800791a:	2d10      	cmp	r5, #16
 800791c:	462c      	mov	r4, r5
 800791e:	bfa8      	it	ge
 8007920:	2410      	movge	r4, #16
 8007922:	f7f8 fe17 	bl	8000554 <__aeabi_ui2d>
 8007926:	2d09      	cmp	r5, #9
 8007928:	4682      	mov	sl, r0
 800792a:	468b      	mov	fp, r1
 800792c:	dc13      	bgt.n	8007956 <_strtod_l+0x3d6>
 800792e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007930:	2b00      	cmp	r3, #0
 8007932:	f43f ae5e 	beq.w	80075f2 <_strtod_l+0x72>
 8007936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007938:	dd78      	ble.n	8007a2c <_strtod_l+0x4ac>
 800793a:	2b16      	cmp	r3, #22
 800793c:	dc5f      	bgt.n	80079fe <_strtod_l+0x47e>
 800793e:	4974      	ldr	r1, [pc, #464]	@ (8007b10 <_strtod_l+0x590>)
 8007940:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007948:	4652      	mov	r2, sl
 800794a:	465b      	mov	r3, fp
 800794c:	f7f8 fe7c 	bl	8000648 <__aeabi_dmul>
 8007950:	4682      	mov	sl, r0
 8007952:	468b      	mov	fp, r1
 8007954:	e64d      	b.n	80075f2 <_strtod_l+0x72>
 8007956:	4b6e      	ldr	r3, [pc, #440]	@ (8007b10 <_strtod_l+0x590>)
 8007958:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800795c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007960:	f7f8 fe72 	bl	8000648 <__aeabi_dmul>
 8007964:	4682      	mov	sl, r0
 8007966:	9808      	ldr	r0, [sp, #32]
 8007968:	468b      	mov	fp, r1
 800796a:	f7f8 fdf3 	bl	8000554 <__aeabi_ui2d>
 800796e:	4602      	mov	r2, r0
 8007970:	460b      	mov	r3, r1
 8007972:	4650      	mov	r0, sl
 8007974:	4659      	mov	r1, fp
 8007976:	f7f8 fcb1 	bl	80002dc <__adddf3>
 800797a:	2d0f      	cmp	r5, #15
 800797c:	4682      	mov	sl, r0
 800797e:	468b      	mov	fp, r1
 8007980:	ddd5      	ble.n	800792e <_strtod_l+0x3ae>
 8007982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007984:	1b2c      	subs	r4, r5, r4
 8007986:	441c      	add	r4, r3
 8007988:	2c00      	cmp	r4, #0
 800798a:	f340 8096 	ble.w	8007aba <_strtod_l+0x53a>
 800798e:	f014 030f 	ands.w	r3, r4, #15
 8007992:	d00a      	beq.n	80079aa <_strtod_l+0x42a>
 8007994:	495e      	ldr	r1, [pc, #376]	@ (8007b10 <_strtod_l+0x590>)
 8007996:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800799a:	4652      	mov	r2, sl
 800799c:	465b      	mov	r3, fp
 800799e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079a2:	f7f8 fe51 	bl	8000648 <__aeabi_dmul>
 80079a6:	4682      	mov	sl, r0
 80079a8:	468b      	mov	fp, r1
 80079aa:	f034 040f 	bics.w	r4, r4, #15
 80079ae:	d073      	beq.n	8007a98 <_strtod_l+0x518>
 80079b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80079b4:	dd48      	ble.n	8007a48 <_strtod_l+0x4c8>
 80079b6:	2400      	movs	r4, #0
 80079b8:	46a0      	mov	r8, r4
 80079ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80079bc:	46a1      	mov	r9, r4
 80079be:	9a05      	ldr	r2, [sp, #20]
 80079c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007b18 <_strtod_l+0x598>
 80079c4:	2322      	movs	r3, #34	@ 0x22
 80079c6:	6013      	str	r3, [r2, #0]
 80079c8:	f04f 0a00 	mov.w	sl, #0
 80079cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f43f ae0f 	beq.w	80075f2 <_strtod_l+0x72>
 80079d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079d6:	9805      	ldr	r0, [sp, #20]
 80079d8:	f002 ff6a 	bl	800a8b0 <_Bfree>
 80079dc:	9805      	ldr	r0, [sp, #20]
 80079de:	4649      	mov	r1, r9
 80079e0:	f002 ff66 	bl	800a8b0 <_Bfree>
 80079e4:	9805      	ldr	r0, [sp, #20]
 80079e6:	4641      	mov	r1, r8
 80079e8:	f002 ff62 	bl	800a8b0 <_Bfree>
 80079ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80079ee:	9805      	ldr	r0, [sp, #20]
 80079f0:	f002 ff5e 	bl	800a8b0 <_Bfree>
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	4621      	mov	r1, r4
 80079f8:	f002 ff5a 	bl	800a8b0 <_Bfree>
 80079fc:	e5f9      	b.n	80075f2 <_strtod_l+0x72>
 80079fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a04:	4293      	cmp	r3, r2
 8007a06:	dbbc      	blt.n	8007982 <_strtod_l+0x402>
 8007a08:	4c41      	ldr	r4, [pc, #260]	@ (8007b10 <_strtod_l+0x590>)
 8007a0a:	f1c5 050f 	rsb	r5, r5, #15
 8007a0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a12:	4652      	mov	r2, sl
 8007a14:	465b      	mov	r3, fp
 8007a16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a1a:	f7f8 fe15 	bl	8000648 <__aeabi_dmul>
 8007a1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a20:	1b5d      	subs	r5, r3, r5
 8007a22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a2a:	e78f      	b.n	800794c <_strtod_l+0x3cc>
 8007a2c:	3316      	adds	r3, #22
 8007a2e:	dba8      	blt.n	8007982 <_strtod_l+0x402>
 8007a30:	4b37      	ldr	r3, [pc, #220]	@ (8007b10 <_strtod_l+0x590>)
 8007a32:	eba9 0808 	sub.w	r8, r9, r8
 8007a36:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a3a:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a3e:	4650      	mov	r0, sl
 8007a40:	4659      	mov	r1, fp
 8007a42:	f7f8 ff2b 	bl	800089c <__aeabi_ddiv>
 8007a46:	e783      	b.n	8007950 <_strtod_l+0x3d0>
 8007a48:	4b32      	ldr	r3, [pc, #200]	@ (8007b14 <_strtod_l+0x594>)
 8007a4a:	9308      	str	r3, [sp, #32]
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	1124      	asrs	r4, r4, #4
 8007a50:	4650      	mov	r0, sl
 8007a52:	4659      	mov	r1, fp
 8007a54:	461e      	mov	r6, r3
 8007a56:	2c01      	cmp	r4, #1
 8007a58:	dc21      	bgt.n	8007a9e <_strtod_l+0x51e>
 8007a5a:	b10b      	cbz	r3, 8007a60 <_strtod_l+0x4e0>
 8007a5c:	4682      	mov	sl, r0
 8007a5e:	468b      	mov	fp, r1
 8007a60:	492c      	ldr	r1, [pc, #176]	@ (8007b14 <_strtod_l+0x594>)
 8007a62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a6a:	4652      	mov	r2, sl
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a72:	f7f8 fde9 	bl	8000648 <__aeabi_dmul>
 8007a76:	4b28      	ldr	r3, [pc, #160]	@ (8007b18 <_strtod_l+0x598>)
 8007a78:	460a      	mov	r2, r1
 8007a7a:	400b      	ands	r3, r1
 8007a7c:	4927      	ldr	r1, [pc, #156]	@ (8007b1c <_strtod_l+0x59c>)
 8007a7e:	428b      	cmp	r3, r1
 8007a80:	4682      	mov	sl, r0
 8007a82:	d898      	bhi.n	80079b6 <_strtod_l+0x436>
 8007a84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	bf86      	itte	hi
 8007a8c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007b20 <_strtod_l+0x5a0>
 8007a90:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007a94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007a98:	2300      	movs	r3, #0
 8007a9a:	9308      	str	r3, [sp, #32]
 8007a9c:	e07a      	b.n	8007b94 <_strtod_l+0x614>
 8007a9e:	07e2      	lsls	r2, r4, #31
 8007aa0:	d505      	bpl.n	8007aae <_strtod_l+0x52e>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa8:	f7f8 fdce 	bl	8000648 <__aeabi_dmul>
 8007aac:	2301      	movs	r3, #1
 8007aae:	9a08      	ldr	r2, [sp, #32]
 8007ab0:	3208      	adds	r2, #8
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	1064      	asrs	r4, r4, #1
 8007ab6:	9208      	str	r2, [sp, #32]
 8007ab8:	e7cd      	b.n	8007a56 <_strtod_l+0x4d6>
 8007aba:	d0ed      	beq.n	8007a98 <_strtod_l+0x518>
 8007abc:	4264      	negs	r4, r4
 8007abe:	f014 020f 	ands.w	r2, r4, #15
 8007ac2:	d00a      	beq.n	8007ada <_strtod_l+0x55a>
 8007ac4:	4b12      	ldr	r3, [pc, #72]	@ (8007b10 <_strtod_l+0x590>)
 8007ac6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aca:	4650      	mov	r0, sl
 8007acc:	4659      	mov	r1, fp
 8007ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad2:	f7f8 fee3 	bl	800089c <__aeabi_ddiv>
 8007ad6:	4682      	mov	sl, r0
 8007ad8:	468b      	mov	fp, r1
 8007ada:	1124      	asrs	r4, r4, #4
 8007adc:	d0dc      	beq.n	8007a98 <_strtod_l+0x518>
 8007ade:	2c1f      	cmp	r4, #31
 8007ae0:	dd20      	ble.n	8007b24 <_strtod_l+0x5a4>
 8007ae2:	2400      	movs	r4, #0
 8007ae4:	46a0      	mov	r8, r4
 8007ae6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007ae8:	46a1      	mov	r9, r4
 8007aea:	9a05      	ldr	r2, [sp, #20]
 8007aec:	2322      	movs	r3, #34	@ 0x22
 8007aee:	f04f 0a00 	mov.w	sl, #0
 8007af2:	f04f 0b00 	mov.w	fp, #0
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	e768      	b.n	80079cc <_strtod_l+0x44c>
 8007afa:	bf00      	nop
 8007afc:	0800bcd5 	.word	0x0800bcd5
 8007b00:	0800bc74 	.word	0x0800bc74
 8007b04:	0800bccd 	.word	0x0800bccd
 8007b08:	0800bd0c 	.word	0x0800bd0c
 8007b0c:	0800c09d 	.word	0x0800c09d
 8007b10:	0800be88 	.word	0x0800be88
 8007b14:	0800be60 	.word	0x0800be60
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	7ca00000 	.word	0x7ca00000
 8007b20:	7fefffff 	.word	0x7fefffff
 8007b24:	f014 0310 	ands.w	r3, r4, #16
 8007b28:	bf18      	it	ne
 8007b2a:	236a      	movne	r3, #106	@ 0x6a
 8007b2c:	4ea9      	ldr	r6, [pc, #676]	@ (8007dd4 <_strtod_l+0x854>)
 8007b2e:	9308      	str	r3, [sp, #32]
 8007b30:	4650      	mov	r0, sl
 8007b32:	4659      	mov	r1, fp
 8007b34:	2300      	movs	r3, #0
 8007b36:	07e2      	lsls	r2, r4, #31
 8007b38:	d504      	bpl.n	8007b44 <_strtod_l+0x5c4>
 8007b3a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b3e:	f7f8 fd83 	bl	8000648 <__aeabi_dmul>
 8007b42:	2301      	movs	r3, #1
 8007b44:	1064      	asrs	r4, r4, #1
 8007b46:	f106 0608 	add.w	r6, r6, #8
 8007b4a:	d1f4      	bne.n	8007b36 <_strtod_l+0x5b6>
 8007b4c:	b10b      	cbz	r3, 8007b52 <_strtod_l+0x5d2>
 8007b4e:	4682      	mov	sl, r0
 8007b50:	468b      	mov	fp, r1
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	b1b3      	cbz	r3, 8007b84 <_strtod_l+0x604>
 8007b56:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b5a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	4659      	mov	r1, fp
 8007b62:	dd0f      	ble.n	8007b84 <_strtod_l+0x604>
 8007b64:	2b1f      	cmp	r3, #31
 8007b66:	dd55      	ble.n	8007c14 <_strtod_l+0x694>
 8007b68:	2b34      	cmp	r3, #52	@ 0x34
 8007b6a:	bfde      	ittt	le
 8007b6c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007b70:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b74:	4093      	lslle	r3, r2
 8007b76:	f04f 0a00 	mov.w	sl, #0
 8007b7a:	bfcc      	ite	gt
 8007b7c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b80:	ea03 0b01 	andle.w	fp, r3, r1
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	4650      	mov	r0, sl
 8007b8a:	4659      	mov	r1, fp
 8007b8c:	f7f8 ffc4 	bl	8000b18 <__aeabi_dcmpeq>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	d1a6      	bne.n	8007ae2 <_strtod_l+0x562>
 8007b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007b9a:	9805      	ldr	r0, [sp, #20]
 8007b9c:	462b      	mov	r3, r5
 8007b9e:	463a      	mov	r2, r7
 8007ba0:	f002 feee 	bl	800a980 <__s2b>
 8007ba4:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	f43f af05 	beq.w	80079b6 <_strtod_l+0x436>
 8007bac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bae:	2a00      	cmp	r2, #0
 8007bb0:	eba9 0308 	sub.w	r3, r9, r8
 8007bb4:	bfa8      	it	ge
 8007bb6:	2300      	movge	r3, #0
 8007bb8:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bba:	2400      	movs	r4, #0
 8007bbc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007bc0:	9316      	str	r3, [sp, #88]	@ 0x58
 8007bc2:	46a0      	mov	r8, r4
 8007bc4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bc6:	9805      	ldr	r0, [sp, #20]
 8007bc8:	6859      	ldr	r1, [r3, #4]
 8007bca:	f002 fe31 	bl	800a830 <_Balloc>
 8007bce:	4681      	mov	r9, r0
 8007bd0:	2800      	cmp	r0, #0
 8007bd2:	f43f aef4 	beq.w	80079be <_strtod_l+0x43e>
 8007bd6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bd8:	691a      	ldr	r2, [r3, #16]
 8007bda:	3202      	adds	r2, #2
 8007bdc:	f103 010c 	add.w	r1, r3, #12
 8007be0:	0092      	lsls	r2, r2, #2
 8007be2:	300c      	adds	r0, #12
 8007be4:	f001 fb6d 	bl	80092c2 <memcpy>
 8007be8:	ec4b ab10 	vmov	d0, sl, fp
 8007bec:	9805      	ldr	r0, [sp, #20]
 8007bee:	aa1c      	add	r2, sp, #112	@ 0x70
 8007bf0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007bf2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007bf6:	f003 f9ff 	bl	800aff8 <__d2b>
 8007bfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	f43f aede 	beq.w	80079be <_strtod_l+0x43e>
 8007c02:	9805      	ldr	r0, [sp, #20]
 8007c04:	2101      	movs	r1, #1
 8007c06:	f002 ff51 	bl	800aaac <__i2b>
 8007c0a:	4680      	mov	r8, r0
 8007c0c:	b948      	cbnz	r0, 8007c22 <_strtod_l+0x6a2>
 8007c0e:	f04f 0800 	mov.w	r8, #0
 8007c12:	e6d4      	b.n	80079be <_strtod_l+0x43e>
 8007c14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	ea03 0a0a 	and.w	sl, r3, sl
 8007c20:	e7b0      	b.n	8007b84 <_strtod_l+0x604>
 8007c22:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c24:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c26:	2d00      	cmp	r5, #0
 8007c28:	bfab      	itete	ge
 8007c2a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c2c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c2e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c30:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c32:	bfac      	ite	ge
 8007c34:	18ef      	addge	r7, r5, r3
 8007c36:	1b5e      	sublt	r6, r3, r5
 8007c38:	9b08      	ldr	r3, [sp, #32]
 8007c3a:	1aed      	subs	r5, r5, r3
 8007c3c:	4415      	add	r5, r2
 8007c3e:	4b66      	ldr	r3, [pc, #408]	@ (8007dd8 <_strtod_l+0x858>)
 8007c40:	3d01      	subs	r5, #1
 8007c42:	429d      	cmp	r5, r3
 8007c44:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c48:	da50      	bge.n	8007cec <_strtod_l+0x76c>
 8007c4a:	1b5b      	subs	r3, r3, r5
 8007c4c:	2b1f      	cmp	r3, #31
 8007c4e:	eba2 0203 	sub.w	r2, r2, r3
 8007c52:	f04f 0101 	mov.w	r1, #1
 8007c56:	dc3d      	bgt.n	8007cd4 <_strtod_l+0x754>
 8007c58:	fa01 f303 	lsl.w	r3, r1, r3
 8007c5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c5e:	2300      	movs	r3, #0
 8007c60:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c62:	18bd      	adds	r5, r7, r2
 8007c64:	9b08      	ldr	r3, [sp, #32]
 8007c66:	42af      	cmp	r7, r5
 8007c68:	4416      	add	r6, r2
 8007c6a:	441e      	add	r6, r3
 8007c6c:	463b      	mov	r3, r7
 8007c6e:	bfa8      	it	ge
 8007c70:	462b      	movge	r3, r5
 8007c72:	42b3      	cmp	r3, r6
 8007c74:	bfa8      	it	ge
 8007c76:	4633      	movge	r3, r6
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	bfc2      	ittt	gt
 8007c7c:	1aed      	subgt	r5, r5, r3
 8007c7e:	1af6      	subgt	r6, r6, r3
 8007c80:	1aff      	subgt	r7, r7, r3
 8007c82:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	dd16      	ble.n	8007cb6 <_strtod_l+0x736>
 8007c88:	4641      	mov	r1, r8
 8007c8a:	9805      	ldr	r0, [sp, #20]
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f002 ffcd 	bl	800ac2c <__pow5mult>
 8007c92:	4680      	mov	r8, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d0ba      	beq.n	8007c0e <_strtod_l+0x68e>
 8007c98:	4601      	mov	r1, r0
 8007c9a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007c9c:	9805      	ldr	r0, [sp, #20]
 8007c9e:	f002 ff1b 	bl	800aad8 <__multiply>
 8007ca2:	900e      	str	r0, [sp, #56]	@ 0x38
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	f43f ae8a 	beq.w	80079be <_strtod_l+0x43e>
 8007caa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cac:	9805      	ldr	r0, [sp, #20]
 8007cae:	f002 fdff 	bl	800a8b0 <_Bfree>
 8007cb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cb4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cb6:	2d00      	cmp	r5, #0
 8007cb8:	dc1d      	bgt.n	8007cf6 <_strtod_l+0x776>
 8007cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	dd23      	ble.n	8007d08 <_strtod_l+0x788>
 8007cc0:	4649      	mov	r1, r9
 8007cc2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007cc4:	9805      	ldr	r0, [sp, #20]
 8007cc6:	f002 ffb1 	bl	800ac2c <__pow5mult>
 8007cca:	4681      	mov	r9, r0
 8007ccc:	b9e0      	cbnz	r0, 8007d08 <_strtod_l+0x788>
 8007cce:	f04f 0900 	mov.w	r9, #0
 8007cd2:	e674      	b.n	80079be <_strtod_l+0x43e>
 8007cd4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007cd8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007cdc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007ce0:	35e2      	adds	r5, #226	@ 0xe2
 8007ce2:	fa01 f305 	lsl.w	r3, r1, r5
 8007ce6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ce8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007cea:	e7ba      	b.n	8007c62 <_strtod_l+0x6e2>
 8007cec:	2300      	movs	r3, #0
 8007cee:	9310      	str	r3, [sp, #64]	@ 0x40
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007cf4:	e7b5      	b.n	8007c62 <_strtod_l+0x6e2>
 8007cf6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cf8:	9805      	ldr	r0, [sp, #20]
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	f002 fff0 	bl	800ace0 <__lshift>
 8007d00:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1d9      	bne.n	8007cba <_strtod_l+0x73a>
 8007d06:	e65a      	b.n	80079be <_strtod_l+0x43e>
 8007d08:	2e00      	cmp	r6, #0
 8007d0a:	dd07      	ble.n	8007d1c <_strtod_l+0x79c>
 8007d0c:	4649      	mov	r1, r9
 8007d0e:	9805      	ldr	r0, [sp, #20]
 8007d10:	4632      	mov	r2, r6
 8007d12:	f002 ffe5 	bl	800ace0 <__lshift>
 8007d16:	4681      	mov	r9, r0
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	d0d8      	beq.n	8007cce <_strtod_l+0x74e>
 8007d1c:	2f00      	cmp	r7, #0
 8007d1e:	dd08      	ble.n	8007d32 <_strtod_l+0x7b2>
 8007d20:	4641      	mov	r1, r8
 8007d22:	9805      	ldr	r0, [sp, #20]
 8007d24:	463a      	mov	r2, r7
 8007d26:	f002 ffdb 	bl	800ace0 <__lshift>
 8007d2a:	4680      	mov	r8, r0
 8007d2c:	2800      	cmp	r0, #0
 8007d2e:	f43f ae46 	beq.w	80079be <_strtod_l+0x43e>
 8007d32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d34:	9805      	ldr	r0, [sp, #20]
 8007d36:	464a      	mov	r2, r9
 8007d38:	f003 f85a 	bl	800adf0 <__mdiff>
 8007d3c:	4604      	mov	r4, r0
 8007d3e:	2800      	cmp	r0, #0
 8007d40:	f43f ae3d 	beq.w	80079be <_strtod_l+0x43e>
 8007d44:	68c3      	ldr	r3, [r0, #12]
 8007d46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60c3      	str	r3, [r0, #12]
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	f003 f833 	bl	800adb8 <__mcmp>
 8007d52:	2800      	cmp	r0, #0
 8007d54:	da46      	bge.n	8007de4 <_strtod_l+0x864>
 8007d56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d58:	ea53 030a 	orrs.w	r3, r3, sl
 8007d5c:	d16c      	bne.n	8007e38 <_strtod_l+0x8b8>
 8007d5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d168      	bne.n	8007e38 <_strtod_l+0x8b8>
 8007d66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d6a:	0d1b      	lsrs	r3, r3, #20
 8007d6c:	051b      	lsls	r3, r3, #20
 8007d6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d72:	d961      	bls.n	8007e38 <_strtod_l+0x8b8>
 8007d74:	6963      	ldr	r3, [r4, #20]
 8007d76:	b913      	cbnz	r3, 8007d7e <_strtod_l+0x7fe>
 8007d78:	6923      	ldr	r3, [r4, #16]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	dd5c      	ble.n	8007e38 <_strtod_l+0x8b8>
 8007d7e:	4621      	mov	r1, r4
 8007d80:	2201      	movs	r2, #1
 8007d82:	9805      	ldr	r0, [sp, #20]
 8007d84:	f002 ffac 	bl	800ace0 <__lshift>
 8007d88:	4641      	mov	r1, r8
 8007d8a:	4604      	mov	r4, r0
 8007d8c:	f003 f814 	bl	800adb8 <__mcmp>
 8007d90:	2800      	cmp	r0, #0
 8007d92:	dd51      	ble.n	8007e38 <_strtod_l+0x8b8>
 8007d94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d98:	9a08      	ldr	r2, [sp, #32]
 8007d9a:	0d1b      	lsrs	r3, r3, #20
 8007d9c:	051b      	lsls	r3, r3, #20
 8007d9e:	2a00      	cmp	r2, #0
 8007da0:	d06b      	beq.n	8007e7a <_strtod_l+0x8fa>
 8007da2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007da6:	d868      	bhi.n	8007e7a <_strtod_l+0x8fa>
 8007da8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007dac:	f67f ae9d 	bls.w	8007aea <_strtod_l+0x56a>
 8007db0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ddc <_strtod_l+0x85c>)
 8007db2:	4650      	mov	r0, sl
 8007db4:	4659      	mov	r1, fp
 8007db6:	2200      	movs	r2, #0
 8007db8:	f7f8 fc46 	bl	8000648 <__aeabi_dmul>
 8007dbc:	4b08      	ldr	r3, [pc, #32]	@ (8007de0 <_strtod_l+0x860>)
 8007dbe:	400b      	ands	r3, r1
 8007dc0:	4682      	mov	sl, r0
 8007dc2:	468b      	mov	fp, r1
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f47f ae05 	bne.w	80079d4 <_strtod_l+0x454>
 8007dca:	9a05      	ldr	r2, [sp, #20]
 8007dcc:	2322      	movs	r3, #34	@ 0x22
 8007dce:	6013      	str	r3, [r2, #0]
 8007dd0:	e600      	b.n	80079d4 <_strtod_l+0x454>
 8007dd2:	bf00      	nop
 8007dd4:	0800bca0 	.word	0x0800bca0
 8007dd8:	fffffc02 	.word	0xfffffc02
 8007ddc:	39500000 	.word	0x39500000
 8007de0:	7ff00000 	.word	0x7ff00000
 8007de4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007de8:	d165      	bne.n	8007eb6 <_strtod_l+0x936>
 8007dea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007df0:	b35a      	cbz	r2, 8007e4a <_strtod_l+0x8ca>
 8007df2:	4a9f      	ldr	r2, [pc, #636]	@ (8008070 <_strtod_l+0xaf0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d12b      	bne.n	8007e50 <_strtod_l+0x8d0>
 8007df8:	9b08      	ldr	r3, [sp, #32]
 8007dfa:	4651      	mov	r1, sl
 8007dfc:	b303      	cbz	r3, 8007e40 <_strtod_l+0x8c0>
 8007dfe:	4b9d      	ldr	r3, [pc, #628]	@ (8008074 <_strtod_l+0xaf4>)
 8007e00:	465a      	mov	r2, fp
 8007e02:	4013      	ands	r3, r2
 8007e04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007e0c:	d81b      	bhi.n	8007e46 <_strtod_l+0x8c6>
 8007e0e:	0d1b      	lsrs	r3, r3, #20
 8007e10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e14:	fa02 f303 	lsl.w	r3, r2, r3
 8007e18:	4299      	cmp	r1, r3
 8007e1a:	d119      	bne.n	8007e50 <_strtod_l+0x8d0>
 8007e1c:	4b96      	ldr	r3, [pc, #600]	@ (8008078 <_strtod_l+0xaf8>)
 8007e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d102      	bne.n	8007e2a <_strtod_l+0x8aa>
 8007e24:	3101      	adds	r1, #1
 8007e26:	f43f adca 	beq.w	80079be <_strtod_l+0x43e>
 8007e2a:	4b92      	ldr	r3, [pc, #584]	@ (8008074 <_strtod_l+0xaf4>)
 8007e2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e2e:	401a      	ands	r2, r3
 8007e30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e34:	f04f 0a00 	mov.w	sl, #0
 8007e38:	9b08      	ldr	r3, [sp, #32]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1b8      	bne.n	8007db0 <_strtod_l+0x830>
 8007e3e:	e5c9      	b.n	80079d4 <_strtod_l+0x454>
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007e44:	e7e8      	b.n	8007e18 <_strtod_l+0x898>
 8007e46:	4613      	mov	r3, r2
 8007e48:	e7e6      	b.n	8007e18 <_strtod_l+0x898>
 8007e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8007e4e:	d0a1      	beq.n	8007d94 <_strtod_l+0x814>
 8007e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e52:	b1db      	cbz	r3, 8007e8c <_strtod_l+0x90c>
 8007e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e56:	4213      	tst	r3, r2
 8007e58:	d0ee      	beq.n	8007e38 <_strtod_l+0x8b8>
 8007e5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e5c:	9a08      	ldr	r2, [sp, #32]
 8007e5e:	4650      	mov	r0, sl
 8007e60:	4659      	mov	r1, fp
 8007e62:	b1bb      	cbz	r3, 8007e94 <_strtod_l+0x914>
 8007e64:	f7ff fb6c 	bl	8007540 <sulp>
 8007e68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e6c:	ec53 2b10 	vmov	r2, r3, d0
 8007e70:	f7f8 fa34 	bl	80002dc <__adddf3>
 8007e74:	4682      	mov	sl, r0
 8007e76:	468b      	mov	fp, r1
 8007e78:	e7de      	b.n	8007e38 <_strtod_l+0x8b8>
 8007e7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007e8a:	e7d5      	b.n	8007e38 <_strtod_l+0x8b8>
 8007e8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007e8e:	ea13 0f0a 	tst.w	r3, sl
 8007e92:	e7e1      	b.n	8007e58 <_strtod_l+0x8d8>
 8007e94:	f7ff fb54 	bl	8007540 <sulp>
 8007e98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e9c:	ec53 2b10 	vmov	r2, r3, d0
 8007ea0:	f7f8 fa1a 	bl	80002d8 <__aeabi_dsub>
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	4682      	mov	sl, r0
 8007eaa:	468b      	mov	fp, r1
 8007eac:	f7f8 fe34 	bl	8000b18 <__aeabi_dcmpeq>
 8007eb0:	2800      	cmp	r0, #0
 8007eb2:	d0c1      	beq.n	8007e38 <_strtod_l+0x8b8>
 8007eb4:	e619      	b.n	8007aea <_strtod_l+0x56a>
 8007eb6:	4641      	mov	r1, r8
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f003 f8f5 	bl	800b0a8 <__ratio>
 8007ebe:	ec57 6b10 	vmov	r6, r7, d0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ec8:	4630      	mov	r0, r6
 8007eca:	4639      	mov	r1, r7
 8007ecc:	f7f8 fe38 	bl	8000b40 <__aeabi_dcmple>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	d06f      	beq.n	8007fb4 <_strtod_l+0xa34>
 8007ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d17a      	bne.n	8007fd0 <_strtod_l+0xa50>
 8007eda:	f1ba 0f00 	cmp.w	sl, #0
 8007ede:	d158      	bne.n	8007f92 <_strtod_l+0xa12>
 8007ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ee2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d15a      	bne.n	8007fa0 <_strtod_l+0xa20>
 8007eea:	4b64      	ldr	r3, [pc, #400]	@ (800807c <_strtod_l+0xafc>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	4630      	mov	r0, r6
 8007ef0:	4639      	mov	r1, r7
 8007ef2:	f7f8 fe1b 	bl	8000b2c <__aeabi_dcmplt>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d159      	bne.n	8007fae <_strtod_l+0xa2e>
 8007efa:	4630      	mov	r0, r6
 8007efc:	4639      	mov	r1, r7
 8007efe:	4b60      	ldr	r3, [pc, #384]	@ (8008080 <_strtod_l+0xb00>)
 8007f00:	2200      	movs	r2, #0
 8007f02:	f7f8 fba1 	bl	8000648 <__aeabi_dmul>
 8007f06:	4606      	mov	r6, r0
 8007f08:	460f      	mov	r7, r1
 8007f0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f0e:	9606      	str	r6, [sp, #24]
 8007f10:	9307      	str	r3, [sp, #28]
 8007f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f16:	4d57      	ldr	r5, [pc, #348]	@ (8008074 <_strtod_l+0xaf4>)
 8007f18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f1e:	401d      	ands	r5, r3
 8007f20:	4b58      	ldr	r3, [pc, #352]	@ (8008084 <_strtod_l+0xb04>)
 8007f22:	429d      	cmp	r5, r3
 8007f24:	f040 80b2 	bne.w	800808c <_strtod_l+0xb0c>
 8007f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f2e:	ec4b ab10 	vmov	d0, sl, fp
 8007f32:	f002 fff1 	bl	800af18 <__ulp>
 8007f36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f3a:	ec51 0b10 	vmov	r0, r1, d0
 8007f3e:	f7f8 fb83 	bl	8000648 <__aeabi_dmul>
 8007f42:	4652      	mov	r2, sl
 8007f44:	465b      	mov	r3, fp
 8007f46:	f7f8 f9c9 	bl	80002dc <__adddf3>
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4949      	ldr	r1, [pc, #292]	@ (8008074 <_strtod_l+0xaf4>)
 8007f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8008088 <_strtod_l+0xb08>)
 8007f50:	4019      	ands	r1, r3
 8007f52:	4291      	cmp	r1, r2
 8007f54:	4682      	mov	sl, r0
 8007f56:	d942      	bls.n	8007fde <_strtod_l+0xa5e>
 8007f58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f5a:	4b47      	ldr	r3, [pc, #284]	@ (8008078 <_strtod_l+0xaf8>)
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d103      	bne.n	8007f68 <_strtod_l+0x9e8>
 8007f60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f62:	3301      	adds	r3, #1
 8007f64:	f43f ad2b 	beq.w	80079be <_strtod_l+0x43e>
 8007f68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008078 <_strtod_l+0xaf8>
 8007f6c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007f70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f72:	9805      	ldr	r0, [sp, #20]
 8007f74:	f002 fc9c 	bl	800a8b0 <_Bfree>
 8007f78:	9805      	ldr	r0, [sp, #20]
 8007f7a:	4649      	mov	r1, r9
 8007f7c:	f002 fc98 	bl	800a8b0 <_Bfree>
 8007f80:	9805      	ldr	r0, [sp, #20]
 8007f82:	4641      	mov	r1, r8
 8007f84:	f002 fc94 	bl	800a8b0 <_Bfree>
 8007f88:	9805      	ldr	r0, [sp, #20]
 8007f8a:	4621      	mov	r1, r4
 8007f8c:	f002 fc90 	bl	800a8b0 <_Bfree>
 8007f90:	e618      	b.n	8007bc4 <_strtod_l+0x644>
 8007f92:	f1ba 0f01 	cmp.w	sl, #1
 8007f96:	d103      	bne.n	8007fa0 <_strtod_l+0xa20>
 8007f98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f43f ada5 	beq.w	8007aea <_strtod_l+0x56a>
 8007fa0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008050 <_strtod_l+0xad0>
 8007fa4:	4f35      	ldr	r7, [pc, #212]	@ (800807c <_strtod_l+0xafc>)
 8007fa6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007faa:	2600      	movs	r6, #0
 8007fac:	e7b1      	b.n	8007f12 <_strtod_l+0x992>
 8007fae:	4f34      	ldr	r7, [pc, #208]	@ (8008080 <_strtod_l+0xb00>)
 8007fb0:	2600      	movs	r6, #0
 8007fb2:	e7aa      	b.n	8007f0a <_strtod_l+0x98a>
 8007fb4:	4b32      	ldr	r3, [pc, #200]	@ (8008080 <_strtod_l+0xb00>)
 8007fb6:	4630      	mov	r0, r6
 8007fb8:	4639      	mov	r1, r7
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f7f8 fb44 	bl	8000648 <__aeabi_dmul>
 8007fc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fc2:	4606      	mov	r6, r0
 8007fc4:	460f      	mov	r7, r1
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d09f      	beq.n	8007f0a <_strtod_l+0x98a>
 8007fca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fce:	e7a0      	b.n	8007f12 <_strtod_l+0x992>
 8007fd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008058 <_strtod_l+0xad8>
 8007fd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fd8:	ec57 6b17 	vmov	r6, r7, d7
 8007fdc:	e799      	b.n	8007f12 <_strtod_l+0x992>
 8007fde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007fe2:	9b08      	ldr	r3, [sp, #32]
 8007fe4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1c1      	bne.n	8007f70 <_strtod_l+0x9f0>
 8007fec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ff0:	0d1b      	lsrs	r3, r3, #20
 8007ff2:	051b      	lsls	r3, r3, #20
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	d1bb      	bne.n	8007f70 <_strtod_l+0x9f0>
 8007ff8:	4630      	mov	r0, r6
 8007ffa:	4639      	mov	r1, r7
 8007ffc:	f7f8 fe84 	bl	8000d08 <__aeabi_d2lz>
 8008000:	f7f8 faf4 	bl	80005ec <__aeabi_l2d>
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	4630      	mov	r0, r6
 800800a:	4639      	mov	r1, r7
 800800c:	f7f8 f964 	bl	80002d8 <__aeabi_dsub>
 8008010:	460b      	mov	r3, r1
 8008012:	4602      	mov	r2, r0
 8008014:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008018:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800801c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800801e:	ea46 060a 	orr.w	r6, r6, sl
 8008022:	431e      	orrs	r6, r3
 8008024:	d06f      	beq.n	8008106 <_strtod_l+0xb86>
 8008026:	a30e      	add	r3, pc, #56	@ (adr r3, 8008060 <_strtod_l+0xae0>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 fd7e 	bl	8000b2c <__aeabi_dcmplt>
 8008030:	2800      	cmp	r0, #0
 8008032:	f47f accf 	bne.w	80079d4 <_strtod_l+0x454>
 8008036:	a30c      	add	r3, pc, #48	@ (adr r3, 8008068 <_strtod_l+0xae8>)
 8008038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008040:	f7f8 fd92 	bl	8000b68 <__aeabi_dcmpgt>
 8008044:	2800      	cmp	r0, #0
 8008046:	d093      	beq.n	8007f70 <_strtod_l+0x9f0>
 8008048:	e4c4      	b.n	80079d4 <_strtod_l+0x454>
 800804a:	bf00      	nop
 800804c:	f3af 8000 	nop.w
 8008050:	00000000 	.word	0x00000000
 8008054:	bff00000 	.word	0xbff00000
 8008058:	00000000 	.word	0x00000000
 800805c:	3ff00000 	.word	0x3ff00000
 8008060:	94a03595 	.word	0x94a03595
 8008064:	3fdfffff 	.word	0x3fdfffff
 8008068:	35afe535 	.word	0x35afe535
 800806c:	3fe00000 	.word	0x3fe00000
 8008070:	000fffff 	.word	0x000fffff
 8008074:	7ff00000 	.word	0x7ff00000
 8008078:	7fefffff 	.word	0x7fefffff
 800807c:	3ff00000 	.word	0x3ff00000
 8008080:	3fe00000 	.word	0x3fe00000
 8008084:	7fe00000 	.word	0x7fe00000
 8008088:	7c9fffff 	.word	0x7c9fffff
 800808c:	9b08      	ldr	r3, [sp, #32]
 800808e:	b323      	cbz	r3, 80080da <_strtod_l+0xb5a>
 8008090:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008094:	d821      	bhi.n	80080da <_strtod_l+0xb5a>
 8008096:	a328      	add	r3, pc, #160	@ (adr r3, 8008138 <_strtod_l+0xbb8>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	4630      	mov	r0, r6
 800809e:	4639      	mov	r1, r7
 80080a0:	f7f8 fd4e 	bl	8000b40 <__aeabi_dcmple>
 80080a4:	b1a0      	cbz	r0, 80080d0 <_strtod_l+0xb50>
 80080a6:	4639      	mov	r1, r7
 80080a8:	4630      	mov	r0, r6
 80080aa:	f7f8 fda5 	bl	8000bf8 <__aeabi_d2uiz>
 80080ae:	2801      	cmp	r0, #1
 80080b0:	bf38      	it	cc
 80080b2:	2001      	movcc	r0, #1
 80080b4:	f7f8 fa4e 	bl	8000554 <__aeabi_ui2d>
 80080b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ba:	4606      	mov	r6, r0
 80080bc:	460f      	mov	r7, r1
 80080be:	b9fb      	cbnz	r3, 8008100 <_strtod_l+0xb80>
 80080c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080c4:	9014      	str	r0, [sp, #80]	@ 0x50
 80080c6:	9315      	str	r3, [sp, #84]	@ 0x54
 80080c8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80080cc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80080d0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080d2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80080d6:	1b5b      	subs	r3, r3, r5
 80080d8:	9311      	str	r3, [sp, #68]	@ 0x44
 80080da:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080de:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80080e2:	f002 ff19 	bl	800af18 <__ulp>
 80080e6:	4650      	mov	r0, sl
 80080e8:	ec53 2b10 	vmov	r2, r3, d0
 80080ec:	4659      	mov	r1, fp
 80080ee:	f7f8 faab 	bl	8000648 <__aeabi_dmul>
 80080f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80080f6:	f7f8 f8f1 	bl	80002dc <__adddf3>
 80080fa:	4682      	mov	sl, r0
 80080fc:	468b      	mov	fp, r1
 80080fe:	e770      	b.n	8007fe2 <_strtod_l+0xa62>
 8008100:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008104:	e7e0      	b.n	80080c8 <_strtod_l+0xb48>
 8008106:	a30e      	add	r3, pc, #56	@ (adr r3, 8008140 <_strtod_l+0xbc0>)
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f7f8 fd0e 	bl	8000b2c <__aeabi_dcmplt>
 8008110:	e798      	b.n	8008044 <_strtod_l+0xac4>
 8008112:	2300      	movs	r3, #0
 8008114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008116:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008118:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800811a:	6013      	str	r3, [r2, #0]
 800811c:	f7ff ba6d 	b.w	80075fa <_strtod_l+0x7a>
 8008120:	2a65      	cmp	r2, #101	@ 0x65
 8008122:	f43f ab66 	beq.w	80077f2 <_strtod_l+0x272>
 8008126:	2a45      	cmp	r2, #69	@ 0x45
 8008128:	f43f ab63 	beq.w	80077f2 <_strtod_l+0x272>
 800812c:	2301      	movs	r3, #1
 800812e:	f7ff bb9e 	b.w	800786e <_strtod_l+0x2ee>
 8008132:	bf00      	nop
 8008134:	f3af 8000 	nop.w
 8008138:	ffc00000 	.word	0xffc00000
 800813c:	41dfffff 	.word	0x41dfffff
 8008140:	94a03595 	.word	0x94a03595
 8008144:	3fcfffff 	.word	0x3fcfffff

08008148 <_strtod_r>:
 8008148:	4b01      	ldr	r3, [pc, #4]	@ (8008150 <_strtod_r+0x8>)
 800814a:	f7ff ba19 	b.w	8007580 <_strtod_l>
 800814e:	bf00      	nop
 8008150:	20000018 	.word	0x20000018

08008154 <__cvt>:
 8008154:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008158:	ec57 6b10 	vmov	r6, r7, d0
 800815c:	2f00      	cmp	r7, #0
 800815e:	460c      	mov	r4, r1
 8008160:	4619      	mov	r1, r3
 8008162:	463b      	mov	r3, r7
 8008164:	bfbb      	ittet	lt
 8008166:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800816a:	461f      	movlt	r7, r3
 800816c:	2300      	movge	r3, #0
 800816e:	232d      	movlt	r3, #45	@ 0x2d
 8008170:	700b      	strb	r3, [r1, #0]
 8008172:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008174:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008178:	4691      	mov	r9, r2
 800817a:	f023 0820 	bic.w	r8, r3, #32
 800817e:	bfbc      	itt	lt
 8008180:	4632      	movlt	r2, r6
 8008182:	4616      	movlt	r6, r2
 8008184:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008188:	d005      	beq.n	8008196 <__cvt+0x42>
 800818a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800818e:	d100      	bne.n	8008192 <__cvt+0x3e>
 8008190:	3401      	adds	r4, #1
 8008192:	2102      	movs	r1, #2
 8008194:	e000      	b.n	8008198 <__cvt+0x44>
 8008196:	2103      	movs	r1, #3
 8008198:	ab03      	add	r3, sp, #12
 800819a:	9301      	str	r3, [sp, #4]
 800819c:	ab02      	add	r3, sp, #8
 800819e:	9300      	str	r3, [sp, #0]
 80081a0:	ec47 6b10 	vmov	d0, r6, r7
 80081a4:	4653      	mov	r3, sl
 80081a6:	4622      	mov	r2, r4
 80081a8:	f001 f932 	bl	8009410 <_dtoa_r>
 80081ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80081b0:	4605      	mov	r5, r0
 80081b2:	d119      	bne.n	80081e8 <__cvt+0x94>
 80081b4:	f019 0f01 	tst.w	r9, #1
 80081b8:	d00e      	beq.n	80081d8 <__cvt+0x84>
 80081ba:	eb00 0904 	add.w	r9, r0, r4
 80081be:	2200      	movs	r2, #0
 80081c0:	2300      	movs	r3, #0
 80081c2:	4630      	mov	r0, r6
 80081c4:	4639      	mov	r1, r7
 80081c6:	f7f8 fca7 	bl	8000b18 <__aeabi_dcmpeq>
 80081ca:	b108      	cbz	r0, 80081d0 <__cvt+0x7c>
 80081cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80081d0:	2230      	movs	r2, #48	@ 0x30
 80081d2:	9b03      	ldr	r3, [sp, #12]
 80081d4:	454b      	cmp	r3, r9
 80081d6:	d31e      	bcc.n	8008216 <__cvt+0xc2>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80081dc:	1b5b      	subs	r3, r3, r5
 80081de:	4628      	mov	r0, r5
 80081e0:	6013      	str	r3, [r2, #0]
 80081e2:	b004      	add	sp, #16
 80081e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80081ec:	eb00 0904 	add.w	r9, r0, r4
 80081f0:	d1e5      	bne.n	80081be <__cvt+0x6a>
 80081f2:	7803      	ldrb	r3, [r0, #0]
 80081f4:	2b30      	cmp	r3, #48	@ 0x30
 80081f6:	d10a      	bne.n	800820e <__cvt+0xba>
 80081f8:	2200      	movs	r2, #0
 80081fa:	2300      	movs	r3, #0
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	f7f8 fc8a 	bl	8000b18 <__aeabi_dcmpeq>
 8008204:	b918      	cbnz	r0, 800820e <__cvt+0xba>
 8008206:	f1c4 0401 	rsb	r4, r4, #1
 800820a:	f8ca 4000 	str.w	r4, [sl]
 800820e:	f8da 3000 	ldr.w	r3, [sl]
 8008212:	4499      	add	r9, r3
 8008214:	e7d3      	b.n	80081be <__cvt+0x6a>
 8008216:	1c59      	adds	r1, r3, #1
 8008218:	9103      	str	r1, [sp, #12]
 800821a:	701a      	strb	r2, [r3, #0]
 800821c:	e7d9      	b.n	80081d2 <__cvt+0x7e>

0800821e <__exponent>:
 800821e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008220:	2900      	cmp	r1, #0
 8008222:	bfba      	itte	lt
 8008224:	4249      	neglt	r1, r1
 8008226:	232d      	movlt	r3, #45	@ 0x2d
 8008228:	232b      	movge	r3, #43	@ 0x2b
 800822a:	2909      	cmp	r1, #9
 800822c:	7002      	strb	r2, [r0, #0]
 800822e:	7043      	strb	r3, [r0, #1]
 8008230:	dd29      	ble.n	8008286 <__exponent+0x68>
 8008232:	f10d 0307 	add.w	r3, sp, #7
 8008236:	461d      	mov	r5, r3
 8008238:	270a      	movs	r7, #10
 800823a:	461a      	mov	r2, r3
 800823c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008240:	fb07 1416 	mls	r4, r7, r6, r1
 8008244:	3430      	adds	r4, #48	@ 0x30
 8008246:	f802 4c01 	strb.w	r4, [r2, #-1]
 800824a:	460c      	mov	r4, r1
 800824c:	2c63      	cmp	r4, #99	@ 0x63
 800824e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008252:	4631      	mov	r1, r6
 8008254:	dcf1      	bgt.n	800823a <__exponent+0x1c>
 8008256:	3130      	adds	r1, #48	@ 0x30
 8008258:	1e94      	subs	r4, r2, #2
 800825a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800825e:	1c41      	adds	r1, r0, #1
 8008260:	4623      	mov	r3, r4
 8008262:	42ab      	cmp	r3, r5
 8008264:	d30a      	bcc.n	800827c <__exponent+0x5e>
 8008266:	f10d 0309 	add.w	r3, sp, #9
 800826a:	1a9b      	subs	r3, r3, r2
 800826c:	42ac      	cmp	r4, r5
 800826e:	bf88      	it	hi
 8008270:	2300      	movhi	r3, #0
 8008272:	3302      	adds	r3, #2
 8008274:	4403      	add	r3, r0
 8008276:	1a18      	subs	r0, r3, r0
 8008278:	b003      	add	sp, #12
 800827a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800827c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008280:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008284:	e7ed      	b.n	8008262 <__exponent+0x44>
 8008286:	2330      	movs	r3, #48	@ 0x30
 8008288:	3130      	adds	r1, #48	@ 0x30
 800828a:	7083      	strb	r3, [r0, #2]
 800828c:	70c1      	strb	r1, [r0, #3]
 800828e:	1d03      	adds	r3, r0, #4
 8008290:	e7f1      	b.n	8008276 <__exponent+0x58>
	...

08008294 <_printf_float>:
 8008294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008298:	b08d      	sub	sp, #52	@ 0x34
 800829a:	460c      	mov	r4, r1
 800829c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80082a0:	4616      	mov	r6, r2
 80082a2:	461f      	mov	r7, r3
 80082a4:	4605      	mov	r5, r0
 80082a6:	f000 ff95 	bl	80091d4 <_localeconv_r>
 80082aa:	6803      	ldr	r3, [r0, #0]
 80082ac:	9304      	str	r3, [sp, #16]
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7f8 f806 	bl	80002c0 <strlen>
 80082b4:	2300      	movs	r3, #0
 80082b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80082b8:	f8d8 3000 	ldr.w	r3, [r8]
 80082bc:	9005      	str	r0, [sp, #20]
 80082be:	3307      	adds	r3, #7
 80082c0:	f023 0307 	bic.w	r3, r3, #7
 80082c4:	f103 0208 	add.w	r2, r3, #8
 80082c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80082cc:	f8d4 b000 	ldr.w	fp, [r4]
 80082d0:	f8c8 2000 	str.w	r2, [r8]
 80082d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80082d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80082dc:	9307      	str	r3, [sp, #28]
 80082de:	f8cd 8018 	str.w	r8, [sp, #24]
 80082e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80082e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082ea:	4b9c      	ldr	r3, [pc, #624]	@ (800855c <_printf_float+0x2c8>)
 80082ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082f0:	f7f8 fc44 	bl	8000b7c <__aeabi_dcmpun>
 80082f4:	bb70      	cbnz	r0, 8008354 <_printf_float+0xc0>
 80082f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082fa:	4b98      	ldr	r3, [pc, #608]	@ (800855c <_printf_float+0x2c8>)
 80082fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008300:	f7f8 fc1e 	bl	8000b40 <__aeabi_dcmple>
 8008304:	bb30      	cbnz	r0, 8008354 <_printf_float+0xc0>
 8008306:	2200      	movs	r2, #0
 8008308:	2300      	movs	r3, #0
 800830a:	4640      	mov	r0, r8
 800830c:	4649      	mov	r1, r9
 800830e:	f7f8 fc0d 	bl	8000b2c <__aeabi_dcmplt>
 8008312:	b110      	cbz	r0, 800831a <_printf_float+0x86>
 8008314:	232d      	movs	r3, #45	@ 0x2d
 8008316:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800831a:	4a91      	ldr	r2, [pc, #580]	@ (8008560 <_printf_float+0x2cc>)
 800831c:	4b91      	ldr	r3, [pc, #580]	@ (8008564 <_printf_float+0x2d0>)
 800831e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008322:	bf94      	ite	ls
 8008324:	4690      	movls	r8, r2
 8008326:	4698      	movhi	r8, r3
 8008328:	2303      	movs	r3, #3
 800832a:	6123      	str	r3, [r4, #16]
 800832c:	f02b 0304 	bic.w	r3, fp, #4
 8008330:	6023      	str	r3, [r4, #0]
 8008332:	f04f 0900 	mov.w	r9, #0
 8008336:	9700      	str	r7, [sp, #0]
 8008338:	4633      	mov	r3, r6
 800833a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800833c:	4621      	mov	r1, r4
 800833e:	4628      	mov	r0, r5
 8008340:	f000 f9d2 	bl	80086e8 <_printf_common>
 8008344:	3001      	adds	r0, #1
 8008346:	f040 808d 	bne.w	8008464 <_printf_float+0x1d0>
 800834a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800834e:	b00d      	add	sp, #52	@ 0x34
 8008350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008354:	4642      	mov	r2, r8
 8008356:	464b      	mov	r3, r9
 8008358:	4640      	mov	r0, r8
 800835a:	4649      	mov	r1, r9
 800835c:	f7f8 fc0e 	bl	8000b7c <__aeabi_dcmpun>
 8008360:	b140      	cbz	r0, 8008374 <_printf_float+0xe0>
 8008362:	464b      	mov	r3, r9
 8008364:	2b00      	cmp	r3, #0
 8008366:	bfbc      	itt	lt
 8008368:	232d      	movlt	r3, #45	@ 0x2d
 800836a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800836e:	4a7e      	ldr	r2, [pc, #504]	@ (8008568 <_printf_float+0x2d4>)
 8008370:	4b7e      	ldr	r3, [pc, #504]	@ (800856c <_printf_float+0x2d8>)
 8008372:	e7d4      	b.n	800831e <_printf_float+0x8a>
 8008374:	6863      	ldr	r3, [r4, #4]
 8008376:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800837a:	9206      	str	r2, [sp, #24]
 800837c:	1c5a      	adds	r2, r3, #1
 800837e:	d13b      	bne.n	80083f8 <_printf_float+0x164>
 8008380:	2306      	movs	r3, #6
 8008382:	6063      	str	r3, [r4, #4]
 8008384:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008388:	2300      	movs	r3, #0
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008390:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008394:	ab09      	add	r3, sp, #36	@ 0x24
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	6861      	ldr	r1, [r4, #4]
 800839a:	ec49 8b10 	vmov	d0, r8, r9
 800839e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7ff fed6 	bl	8008154 <__cvt>
 80083a8:	9b06      	ldr	r3, [sp, #24]
 80083aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80083ac:	2b47      	cmp	r3, #71	@ 0x47
 80083ae:	4680      	mov	r8, r0
 80083b0:	d129      	bne.n	8008406 <_printf_float+0x172>
 80083b2:	1cc8      	adds	r0, r1, #3
 80083b4:	db02      	blt.n	80083bc <_printf_float+0x128>
 80083b6:	6863      	ldr	r3, [r4, #4]
 80083b8:	4299      	cmp	r1, r3
 80083ba:	dd41      	ble.n	8008440 <_printf_float+0x1ac>
 80083bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80083c0:	fa5f fa8a 	uxtb.w	sl, sl
 80083c4:	3901      	subs	r1, #1
 80083c6:	4652      	mov	r2, sl
 80083c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80083cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80083ce:	f7ff ff26 	bl	800821e <__exponent>
 80083d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80083d4:	1813      	adds	r3, r2, r0
 80083d6:	2a01      	cmp	r2, #1
 80083d8:	4681      	mov	r9, r0
 80083da:	6123      	str	r3, [r4, #16]
 80083dc:	dc02      	bgt.n	80083e4 <_printf_float+0x150>
 80083de:	6822      	ldr	r2, [r4, #0]
 80083e0:	07d2      	lsls	r2, r2, #31
 80083e2:	d501      	bpl.n	80083e8 <_printf_float+0x154>
 80083e4:	3301      	adds	r3, #1
 80083e6:	6123      	str	r3, [r4, #16]
 80083e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d0a2      	beq.n	8008336 <_printf_float+0xa2>
 80083f0:	232d      	movs	r3, #45	@ 0x2d
 80083f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083f6:	e79e      	b.n	8008336 <_printf_float+0xa2>
 80083f8:	9a06      	ldr	r2, [sp, #24]
 80083fa:	2a47      	cmp	r2, #71	@ 0x47
 80083fc:	d1c2      	bne.n	8008384 <_printf_float+0xf0>
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1c0      	bne.n	8008384 <_printf_float+0xf0>
 8008402:	2301      	movs	r3, #1
 8008404:	e7bd      	b.n	8008382 <_printf_float+0xee>
 8008406:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800840a:	d9db      	bls.n	80083c4 <_printf_float+0x130>
 800840c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008410:	d118      	bne.n	8008444 <_printf_float+0x1b0>
 8008412:	2900      	cmp	r1, #0
 8008414:	6863      	ldr	r3, [r4, #4]
 8008416:	dd0b      	ble.n	8008430 <_printf_float+0x19c>
 8008418:	6121      	str	r1, [r4, #16]
 800841a:	b913      	cbnz	r3, 8008422 <_printf_float+0x18e>
 800841c:	6822      	ldr	r2, [r4, #0]
 800841e:	07d0      	lsls	r0, r2, #31
 8008420:	d502      	bpl.n	8008428 <_printf_float+0x194>
 8008422:	3301      	adds	r3, #1
 8008424:	440b      	add	r3, r1
 8008426:	6123      	str	r3, [r4, #16]
 8008428:	65a1      	str	r1, [r4, #88]	@ 0x58
 800842a:	f04f 0900 	mov.w	r9, #0
 800842e:	e7db      	b.n	80083e8 <_printf_float+0x154>
 8008430:	b913      	cbnz	r3, 8008438 <_printf_float+0x1a4>
 8008432:	6822      	ldr	r2, [r4, #0]
 8008434:	07d2      	lsls	r2, r2, #31
 8008436:	d501      	bpl.n	800843c <_printf_float+0x1a8>
 8008438:	3302      	adds	r3, #2
 800843a:	e7f4      	b.n	8008426 <_printf_float+0x192>
 800843c:	2301      	movs	r3, #1
 800843e:	e7f2      	b.n	8008426 <_printf_float+0x192>
 8008440:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008444:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008446:	4299      	cmp	r1, r3
 8008448:	db05      	blt.n	8008456 <_printf_float+0x1c2>
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	6121      	str	r1, [r4, #16]
 800844e:	07d8      	lsls	r0, r3, #31
 8008450:	d5ea      	bpl.n	8008428 <_printf_float+0x194>
 8008452:	1c4b      	adds	r3, r1, #1
 8008454:	e7e7      	b.n	8008426 <_printf_float+0x192>
 8008456:	2900      	cmp	r1, #0
 8008458:	bfd4      	ite	le
 800845a:	f1c1 0202 	rsble	r2, r1, #2
 800845e:	2201      	movgt	r2, #1
 8008460:	4413      	add	r3, r2
 8008462:	e7e0      	b.n	8008426 <_printf_float+0x192>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	055a      	lsls	r2, r3, #21
 8008468:	d407      	bmi.n	800847a <_printf_float+0x1e6>
 800846a:	6923      	ldr	r3, [r4, #16]
 800846c:	4642      	mov	r2, r8
 800846e:	4631      	mov	r1, r6
 8008470:	4628      	mov	r0, r5
 8008472:	47b8      	blx	r7
 8008474:	3001      	adds	r0, #1
 8008476:	d12b      	bne.n	80084d0 <_printf_float+0x23c>
 8008478:	e767      	b.n	800834a <_printf_float+0xb6>
 800847a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800847e:	f240 80dd 	bls.w	800863c <_printf_float+0x3a8>
 8008482:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008486:	2200      	movs	r2, #0
 8008488:	2300      	movs	r3, #0
 800848a:	f7f8 fb45 	bl	8000b18 <__aeabi_dcmpeq>
 800848e:	2800      	cmp	r0, #0
 8008490:	d033      	beq.n	80084fa <_printf_float+0x266>
 8008492:	4a37      	ldr	r2, [pc, #220]	@ (8008570 <_printf_float+0x2dc>)
 8008494:	2301      	movs	r3, #1
 8008496:	4631      	mov	r1, r6
 8008498:	4628      	mov	r0, r5
 800849a:	47b8      	blx	r7
 800849c:	3001      	adds	r0, #1
 800849e:	f43f af54 	beq.w	800834a <_printf_float+0xb6>
 80084a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80084a6:	4543      	cmp	r3, r8
 80084a8:	db02      	blt.n	80084b0 <_printf_float+0x21c>
 80084aa:	6823      	ldr	r3, [r4, #0]
 80084ac:	07d8      	lsls	r0, r3, #31
 80084ae:	d50f      	bpl.n	80084d0 <_printf_float+0x23c>
 80084b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f af45 	beq.w	800834a <_printf_float+0xb6>
 80084c0:	f04f 0900 	mov.w	r9, #0
 80084c4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80084c8:	f104 0a1a 	add.w	sl, r4, #26
 80084cc:	45c8      	cmp	r8, r9
 80084ce:	dc09      	bgt.n	80084e4 <_printf_float+0x250>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	079b      	lsls	r3, r3, #30
 80084d4:	f100 8103 	bmi.w	80086de <_printf_float+0x44a>
 80084d8:	68e0      	ldr	r0, [r4, #12]
 80084da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084dc:	4298      	cmp	r0, r3
 80084de:	bfb8      	it	lt
 80084e0:	4618      	movlt	r0, r3
 80084e2:	e734      	b.n	800834e <_printf_float+0xba>
 80084e4:	2301      	movs	r3, #1
 80084e6:	4652      	mov	r2, sl
 80084e8:	4631      	mov	r1, r6
 80084ea:	4628      	mov	r0, r5
 80084ec:	47b8      	blx	r7
 80084ee:	3001      	adds	r0, #1
 80084f0:	f43f af2b 	beq.w	800834a <_printf_float+0xb6>
 80084f4:	f109 0901 	add.w	r9, r9, #1
 80084f8:	e7e8      	b.n	80084cc <_printf_float+0x238>
 80084fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	dc39      	bgt.n	8008574 <_printf_float+0x2e0>
 8008500:	4a1b      	ldr	r2, [pc, #108]	@ (8008570 <_printf_float+0x2dc>)
 8008502:	2301      	movs	r3, #1
 8008504:	4631      	mov	r1, r6
 8008506:	4628      	mov	r0, r5
 8008508:	47b8      	blx	r7
 800850a:	3001      	adds	r0, #1
 800850c:	f43f af1d 	beq.w	800834a <_printf_float+0xb6>
 8008510:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008514:	ea59 0303 	orrs.w	r3, r9, r3
 8008518:	d102      	bne.n	8008520 <_printf_float+0x28c>
 800851a:	6823      	ldr	r3, [r4, #0]
 800851c:	07d9      	lsls	r1, r3, #31
 800851e:	d5d7      	bpl.n	80084d0 <_printf_float+0x23c>
 8008520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008524:	4631      	mov	r1, r6
 8008526:	4628      	mov	r0, r5
 8008528:	47b8      	blx	r7
 800852a:	3001      	adds	r0, #1
 800852c:	f43f af0d 	beq.w	800834a <_printf_float+0xb6>
 8008530:	f04f 0a00 	mov.w	sl, #0
 8008534:	f104 0b1a 	add.w	fp, r4, #26
 8008538:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800853a:	425b      	negs	r3, r3
 800853c:	4553      	cmp	r3, sl
 800853e:	dc01      	bgt.n	8008544 <_printf_float+0x2b0>
 8008540:	464b      	mov	r3, r9
 8008542:	e793      	b.n	800846c <_printf_float+0x1d8>
 8008544:	2301      	movs	r3, #1
 8008546:	465a      	mov	r2, fp
 8008548:	4631      	mov	r1, r6
 800854a:	4628      	mov	r0, r5
 800854c:	47b8      	blx	r7
 800854e:	3001      	adds	r0, #1
 8008550:	f43f aefb 	beq.w	800834a <_printf_float+0xb6>
 8008554:	f10a 0a01 	add.w	sl, sl, #1
 8008558:	e7ee      	b.n	8008538 <_printf_float+0x2a4>
 800855a:	bf00      	nop
 800855c:	7fefffff 	.word	0x7fefffff
 8008560:	0800bcc8 	.word	0x0800bcc8
 8008564:	0800bccc 	.word	0x0800bccc
 8008568:	0800bcd0 	.word	0x0800bcd0
 800856c:	0800bcd4 	.word	0x0800bcd4
 8008570:	0800bcd8 	.word	0x0800bcd8
 8008574:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008576:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800857a:	4553      	cmp	r3, sl
 800857c:	bfa8      	it	ge
 800857e:	4653      	movge	r3, sl
 8008580:	2b00      	cmp	r3, #0
 8008582:	4699      	mov	r9, r3
 8008584:	dc36      	bgt.n	80085f4 <_printf_float+0x360>
 8008586:	f04f 0b00 	mov.w	fp, #0
 800858a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800858e:	f104 021a 	add.w	r2, r4, #26
 8008592:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008594:	9306      	str	r3, [sp, #24]
 8008596:	eba3 0309 	sub.w	r3, r3, r9
 800859a:	455b      	cmp	r3, fp
 800859c:	dc31      	bgt.n	8008602 <_printf_float+0x36e>
 800859e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085a0:	459a      	cmp	sl, r3
 80085a2:	dc3a      	bgt.n	800861a <_printf_float+0x386>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	07da      	lsls	r2, r3, #31
 80085a8:	d437      	bmi.n	800861a <_printf_float+0x386>
 80085aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ac:	ebaa 0903 	sub.w	r9, sl, r3
 80085b0:	9b06      	ldr	r3, [sp, #24]
 80085b2:	ebaa 0303 	sub.w	r3, sl, r3
 80085b6:	4599      	cmp	r9, r3
 80085b8:	bfa8      	it	ge
 80085ba:	4699      	movge	r9, r3
 80085bc:	f1b9 0f00 	cmp.w	r9, #0
 80085c0:	dc33      	bgt.n	800862a <_printf_float+0x396>
 80085c2:	f04f 0800 	mov.w	r8, #0
 80085c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80085ca:	f104 0b1a 	add.w	fp, r4, #26
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	ebaa 0303 	sub.w	r3, sl, r3
 80085d4:	eba3 0309 	sub.w	r3, r3, r9
 80085d8:	4543      	cmp	r3, r8
 80085da:	f77f af79 	ble.w	80084d0 <_printf_float+0x23c>
 80085de:	2301      	movs	r3, #1
 80085e0:	465a      	mov	r2, fp
 80085e2:	4631      	mov	r1, r6
 80085e4:	4628      	mov	r0, r5
 80085e6:	47b8      	blx	r7
 80085e8:	3001      	adds	r0, #1
 80085ea:	f43f aeae 	beq.w	800834a <_printf_float+0xb6>
 80085ee:	f108 0801 	add.w	r8, r8, #1
 80085f2:	e7ec      	b.n	80085ce <_printf_float+0x33a>
 80085f4:	4642      	mov	r2, r8
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	d1c2      	bne.n	8008586 <_printf_float+0x2f2>
 8008600:	e6a3      	b.n	800834a <_printf_float+0xb6>
 8008602:	2301      	movs	r3, #1
 8008604:	4631      	mov	r1, r6
 8008606:	4628      	mov	r0, r5
 8008608:	9206      	str	r2, [sp, #24]
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f ae9c 	beq.w	800834a <_printf_float+0xb6>
 8008612:	9a06      	ldr	r2, [sp, #24]
 8008614:	f10b 0b01 	add.w	fp, fp, #1
 8008618:	e7bb      	b.n	8008592 <_printf_float+0x2fe>
 800861a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800861e:	4631      	mov	r1, r6
 8008620:	4628      	mov	r0, r5
 8008622:	47b8      	blx	r7
 8008624:	3001      	adds	r0, #1
 8008626:	d1c0      	bne.n	80085aa <_printf_float+0x316>
 8008628:	e68f      	b.n	800834a <_printf_float+0xb6>
 800862a:	9a06      	ldr	r2, [sp, #24]
 800862c:	464b      	mov	r3, r9
 800862e:	4442      	add	r2, r8
 8008630:	4631      	mov	r1, r6
 8008632:	4628      	mov	r0, r5
 8008634:	47b8      	blx	r7
 8008636:	3001      	adds	r0, #1
 8008638:	d1c3      	bne.n	80085c2 <_printf_float+0x32e>
 800863a:	e686      	b.n	800834a <_printf_float+0xb6>
 800863c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008640:	f1ba 0f01 	cmp.w	sl, #1
 8008644:	dc01      	bgt.n	800864a <_printf_float+0x3b6>
 8008646:	07db      	lsls	r3, r3, #31
 8008648:	d536      	bpl.n	80086b8 <_printf_float+0x424>
 800864a:	2301      	movs	r3, #1
 800864c:	4642      	mov	r2, r8
 800864e:	4631      	mov	r1, r6
 8008650:	4628      	mov	r0, r5
 8008652:	47b8      	blx	r7
 8008654:	3001      	adds	r0, #1
 8008656:	f43f ae78 	beq.w	800834a <_printf_float+0xb6>
 800865a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	f43f ae70 	beq.w	800834a <_printf_float+0xb6>
 800866a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800866e:	2200      	movs	r2, #0
 8008670:	2300      	movs	r3, #0
 8008672:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008676:	f7f8 fa4f 	bl	8000b18 <__aeabi_dcmpeq>
 800867a:	b9c0      	cbnz	r0, 80086ae <_printf_float+0x41a>
 800867c:	4653      	mov	r3, sl
 800867e:	f108 0201 	add.w	r2, r8, #1
 8008682:	4631      	mov	r1, r6
 8008684:	4628      	mov	r0, r5
 8008686:	47b8      	blx	r7
 8008688:	3001      	adds	r0, #1
 800868a:	d10c      	bne.n	80086a6 <_printf_float+0x412>
 800868c:	e65d      	b.n	800834a <_printf_float+0xb6>
 800868e:	2301      	movs	r3, #1
 8008690:	465a      	mov	r2, fp
 8008692:	4631      	mov	r1, r6
 8008694:	4628      	mov	r0, r5
 8008696:	47b8      	blx	r7
 8008698:	3001      	adds	r0, #1
 800869a:	f43f ae56 	beq.w	800834a <_printf_float+0xb6>
 800869e:	f108 0801 	add.w	r8, r8, #1
 80086a2:	45d0      	cmp	r8, sl
 80086a4:	dbf3      	blt.n	800868e <_printf_float+0x3fa>
 80086a6:	464b      	mov	r3, r9
 80086a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80086ac:	e6df      	b.n	800846e <_printf_float+0x1da>
 80086ae:	f04f 0800 	mov.w	r8, #0
 80086b2:	f104 0b1a 	add.w	fp, r4, #26
 80086b6:	e7f4      	b.n	80086a2 <_printf_float+0x40e>
 80086b8:	2301      	movs	r3, #1
 80086ba:	4642      	mov	r2, r8
 80086bc:	e7e1      	b.n	8008682 <_printf_float+0x3ee>
 80086be:	2301      	movs	r3, #1
 80086c0:	464a      	mov	r2, r9
 80086c2:	4631      	mov	r1, r6
 80086c4:	4628      	mov	r0, r5
 80086c6:	47b8      	blx	r7
 80086c8:	3001      	adds	r0, #1
 80086ca:	f43f ae3e 	beq.w	800834a <_printf_float+0xb6>
 80086ce:	f108 0801 	add.w	r8, r8, #1
 80086d2:	68e3      	ldr	r3, [r4, #12]
 80086d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086d6:	1a5b      	subs	r3, r3, r1
 80086d8:	4543      	cmp	r3, r8
 80086da:	dcf0      	bgt.n	80086be <_printf_float+0x42a>
 80086dc:	e6fc      	b.n	80084d8 <_printf_float+0x244>
 80086de:	f04f 0800 	mov.w	r8, #0
 80086e2:	f104 0919 	add.w	r9, r4, #25
 80086e6:	e7f4      	b.n	80086d2 <_printf_float+0x43e>

080086e8 <_printf_common>:
 80086e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086ec:	4616      	mov	r6, r2
 80086ee:	4698      	mov	r8, r3
 80086f0:	688a      	ldr	r2, [r1, #8]
 80086f2:	690b      	ldr	r3, [r1, #16]
 80086f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086f8:	4293      	cmp	r3, r2
 80086fa:	bfb8      	it	lt
 80086fc:	4613      	movlt	r3, r2
 80086fe:	6033      	str	r3, [r6, #0]
 8008700:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008704:	4607      	mov	r7, r0
 8008706:	460c      	mov	r4, r1
 8008708:	b10a      	cbz	r2, 800870e <_printf_common+0x26>
 800870a:	3301      	adds	r3, #1
 800870c:	6033      	str	r3, [r6, #0]
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	0699      	lsls	r1, r3, #26
 8008712:	bf42      	ittt	mi
 8008714:	6833      	ldrmi	r3, [r6, #0]
 8008716:	3302      	addmi	r3, #2
 8008718:	6033      	strmi	r3, [r6, #0]
 800871a:	6825      	ldr	r5, [r4, #0]
 800871c:	f015 0506 	ands.w	r5, r5, #6
 8008720:	d106      	bne.n	8008730 <_printf_common+0x48>
 8008722:	f104 0a19 	add.w	sl, r4, #25
 8008726:	68e3      	ldr	r3, [r4, #12]
 8008728:	6832      	ldr	r2, [r6, #0]
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	42ab      	cmp	r3, r5
 800872e:	dc26      	bgt.n	800877e <_printf_common+0x96>
 8008730:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008734:	6822      	ldr	r2, [r4, #0]
 8008736:	3b00      	subs	r3, #0
 8008738:	bf18      	it	ne
 800873a:	2301      	movne	r3, #1
 800873c:	0692      	lsls	r2, r2, #26
 800873e:	d42b      	bmi.n	8008798 <_printf_common+0xb0>
 8008740:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008744:	4641      	mov	r1, r8
 8008746:	4638      	mov	r0, r7
 8008748:	47c8      	blx	r9
 800874a:	3001      	adds	r0, #1
 800874c:	d01e      	beq.n	800878c <_printf_common+0xa4>
 800874e:	6823      	ldr	r3, [r4, #0]
 8008750:	6922      	ldr	r2, [r4, #16]
 8008752:	f003 0306 	and.w	r3, r3, #6
 8008756:	2b04      	cmp	r3, #4
 8008758:	bf02      	ittt	eq
 800875a:	68e5      	ldreq	r5, [r4, #12]
 800875c:	6833      	ldreq	r3, [r6, #0]
 800875e:	1aed      	subeq	r5, r5, r3
 8008760:	68a3      	ldr	r3, [r4, #8]
 8008762:	bf0c      	ite	eq
 8008764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008768:	2500      	movne	r5, #0
 800876a:	4293      	cmp	r3, r2
 800876c:	bfc4      	itt	gt
 800876e:	1a9b      	subgt	r3, r3, r2
 8008770:	18ed      	addgt	r5, r5, r3
 8008772:	2600      	movs	r6, #0
 8008774:	341a      	adds	r4, #26
 8008776:	42b5      	cmp	r5, r6
 8008778:	d11a      	bne.n	80087b0 <_printf_common+0xc8>
 800877a:	2000      	movs	r0, #0
 800877c:	e008      	b.n	8008790 <_printf_common+0xa8>
 800877e:	2301      	movs	r3, #1
 8008780:	4652      	mov	r2, sl
 8008782:	4641      	mov	r1, r8
 8008784:	4638      	mov	r0, r7
 8008786:	47c8      	blx	r9
 8008788:	3001      	adds	r0, #1
 800878a:	d103      	bne.n	8008794 <_printf_common+0xac>
 800878c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008794:	3501      	adds	r5, #1
 8008796:	e7c6      	b.n	8008726 <_printf_common+0x3e>
 8008798:	18e1      	adds	r1, r4, r3
 800879a:	1c5a      	adds	r2, r3, #1
 800879c:	2030      	movs	r0, #48	@ 0x30
 800879e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80087a2:	4422      	add	r2, r4
 80087a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80087a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80087ac:	3302      	adds	r3, #2
 80087ae:	e7c7      	b.n	8008740 <_printf_common+0x58>
 80087b0:	2301      	movs	r3, #1
 80087b2:	4622      	mov	r2, r4
 80087b4:	4641      	mov	r1, r8
 80087b6:	4638      	mov	r0, r7
 80087b8:	47c8      	blx	r9
 80087ba:	3001      	adds	r0, #1
 80087bc:	d0e6      	beq.n	800878c <_printf_common+0xa4>
 80087be:	3601      	adds	r6, #1
 80087c0:	e7d9      	b.n	8008776 <_printf_common+0x8e>
	...

080087c4 <_printf_i>:
 80087c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087c8:	7e0f      	ldrb	r7, [r1, #24]
 80087ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80087cc:	2f78      	cmp	r7, #120	@ 0x78
 80087ce:	4691      	mov	r9, r2
 80087d0:	4680      	mov	r8, r0
 80087d2:	460c      	mov	r4, r1
 80087d4:	469a      	mov	sl, r3
 80087d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80087da:	d807      	bhi.n	80087ec <_printf_i+0x28>
 80087dc:	2f62      	cmp	r7, #98	@ 0x62
 80087de:	d80a      	bhi.n	80087f6 <_printf_i+0x32>
 80087e0:	2f00      	cmp	r7, #0
 80087e2:	f000 80d2 	beq.w	800898a <_printf_i+0x1c6>
 80087e6:	2f58      	cmp	r7, #88	@ 0x58
 80087e8:	f000 80b9 	beq.w	800895e <_printf_i+0x19a>
 80087ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80087f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80087f4:	e03a      	b.n	800886c <_printf_i+0xa8>
 80087f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087fa:	2b15      	cmp	r3, #21
 80087fc:	d8f6      	bhi.n	80087ec <_printf_i+0x28>
 80087fe:	a101      	add	r1, pc, #4	@ (adr r1, 8008804 <_printf_i+0x40>)
 8008800:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008804:	0800885d 	.word	0x0800885d
 8008808:	08008871 	.word	0x08008871
 800880c:	080087ed 	.word	0x080087ed
 8008810:	080087ed 	.word	0x080087ed
 8008814:	080087ed 	.word	0x080087ed
 8008818:	080087ed 	.word	0x080087ed
 800881c:	08008871 	.word	0x08008871
 8008820:	080087ed 	.word	0x080087ed
 8008824:	080087ed 	.word	0x080087ed
 8008828:	080087ed 	.word	0x080087ed
 800882c:	080087ed 	.word	0x080087ed
 8008830:	08008971 	.word	0x08008971
 8008834:	0800889b 	.word	0x0800889b
 8008838:	0800892b 	.word	0x0800892b
 800883c:	080087ed 	.word	0x080087ed
 8008840:	080087ed 	.word	0x080087ed
 8008844:	08008993 	.word	0x08008993
 8008848:	080087ed 	.word	0x080087ed
 800884c:	0800889b 	.word	0x0800889b
 8008850:	080087ed 	.word	0x080087ed
 8008854:	080087ed 	.word	0x080087ed
 8008858:	08008933 	.word	0x08008933
 800885c:	6833      	ldr	r3, [r6, #0]
 800885e:	1d1a      	adds	r2, r3, #4
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	6032      	str	r2, [r6, #0]
 8008864:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008868:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800886c:	2301      	movs	r3, #1
 800886e:	e09d      	b.n	80089ac <_printf_i+0x1e8>
 8008870:	6833      	ldr	r3, [r6, #0]
 8008872:	6820      	ldr	r0, [r4, #0]
 8008874:	1d19      	adds	r1, r3, #4
 8008876:	6031      	str	r1, [r6, #0]
 8008878:	0606      	lsls	r6, r0, #24
 800887a:	d501      	bpl.n	8008880 <_printf_i+0xbc>
 800887c:	681d      	ldr	r5, [r3, #0]
 800887e:	e003      	b.n	8008888 <_printf_i+0xc4>
 8008880:	0645      	lsls	r5, r0, #25
 8008882:	d5fb      	bpl.n	800887c <_printf_i+0xb8>
 8008884:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008888:	2d00      	cmp	r5, #0
 800888a:	da03      	bge.n	8008894 <_printf_i+0xd0>
 800888c:	232d      	movs	r3, #45	@ 0x2d
 800888e:	426d      	negs	r5, r5
 8008890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008894:	4859      	ldr	r0, [pc, #356]	@ (80089fc <_printf_i+0x238>)
 8008896:	230a      	movs	r3, #10
 8008898:	e011      	b.n	80088be <_printf_i+0xfa>
 800889a:	6821      	ldr	r1, [r4, #0]
 800889c:	6833      	ldr	r3, [r6, #0]
 800889e:	0608      	lsls	r0, r1, #24
 80088a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80088a4:	d402      	bmi.n	80088ac <_printf_i+0xe8>
 80088a6:	0649      	lsls	r1, r1, #25
 80088a8:	bf48      	it	mi
 80088aa:	b2ad      	uxthmi	r5, r5
 80088ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80088ae:	4853      	ldr	r0, [pc, #332]	@ (80089fc <_printf_i+0x238>)
 80088b0:	6033      	str	r3, [r6, #0]
 80088b2:	bf14      	ite	ne
 80088b4:	230a      	movne	r3, #10
 80088b6:	2308      	moveq	r3, #8
 80088b8:	2100      	movs	r1, #0
 80088ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80088be:	6866      	ldr	r6, [r4, #4]
 80088c0:	60a6      	str	r6, [r4, #8]
 80088c2:	2e00      	cmp	r6, #0
 80088c4:	bfa2      	ittt	ge
 80088c6:	6821      	ldrge	r1, [r4, #0]
 80088c8:	f021 0104 	bicge.w	r1, r1, #4
 80088cc:	6021      	strge	r1, [r4, #0]
 80088ce:	b90d      	cbnz	r5, 80088d4 <_printf_i+0x110>
 80088d0:	2e00      	cmp	r6, #0
 80088d2:	d04b      	beq.n	800896c <_printf_i+0x1a8>
 80088d4:	4616      	mov	r6, r2
 80088d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80088da:	fb03 5711 	mls	r7, r3, r1, r5
 80088de:	5dc7      	ldrb	r7, [r0, r7]
 80088e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80088e4:	462f      	mov	r7, r5
 80088e6:	42bb      	cmp	r3, r7
 80088e8:	460d      	mov	r5, r1
 80088ea:	d9f4      	bls.n	80088d6 <_printf_i+0x112>
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d10b      	bne.n	8008908 <_printf_i+0x144>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	07df      	lsls	r7, r3, #31
 80088f4:	d508      	bpl.n	8008908 <_printf_i+0x144>
 80088f6:	6923      	ldr	r3, [r4, #16]
 80088f8:	6861      	ldr	r1, [r4, #4]
 80088fa:	4299      	cmp	r1, r3
 80088fc:	bfde      	ittt	le
 80088fe:	2330      	movle	r3, #48	@ 0x30
 8008900:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008904:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008908:	1b92      	subs	r2, r2, r6
 800890a:	6122      	str	r2, [r4, #16]
 800890c:	f8cd a000 	str.w	sl, [sp]
 8008910:	464b      	mov	r3, r9
 8008912:	aa03      	add	r2, sp, #12
 8008914:	4621      	mov	r1, r4
 8008916:	4640      	mov	r0, r8
 8008918:	f7ff fee6 	bl	80086e8 <_printf_common>
 800891c:	3001      	adds	r0, #1
 800891e:	d14a      	bne.n	80089b6 <_printf_i+0x1f2>
 8008920:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008924:	b004      	add	sp, #16
 8008926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800892a:	6823      	ldr	r3, [r4, #0]
 800892c:	f043 0320 	orr.w	r3, r3, #32
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	4833      	ldr	r0, [pc, #204]	@ (8008a00 <_printf_i+0x23c>)
 8008934:	2778      	movs	r7, #120	@ 0x78
 8008936:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	6831      	ldr	r1, [r6, #0]
 800893e:	061f      	lsls	r7, r3, #24
 8008940:	f851 5b04 	ldr.w	r5, [r1], #4
 8008944:	d402      	bmi.n	800894c <_printf_i+0x188>
 8008946:	065f      	lsls	r7, r3, #25
 8008948:	bf48      	it	mi
 800894a:	b2ad      	uxthmi	r5, r5
 800894c:	6031      	str	r1, [r6, #0]
 800894e:	07d9      	lsls	r1, r3, #31
 8008950:	bf44      	itt	mi
 8008952:	f043 0320 	orrmi.w	r3, r3, #32
 8008956:	6023      	strmi	r3, [r4, #0]
 8008958:	b11d      	cbz	r5, 8008962 <_printf_i+0x19e>
 800895a:	2310      	movs	r3, #16
 800895c:	e7ac      	b.n	80088b8 <_printf_i+0xf4>
 800895e:	4827      	ldr	r0, [pc, #156]	@ (80089fc <_printf_i+0x238>)
 8008960:	e7e9      	b.n	8008936 <_printf_i+0x172>
 8008962:	6823      	ldr	r3, [r4, #0]
 8008964:	f023 0320 	bic.w	r3, r3, #32
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	e7f6      	b.n	800895a <_printf_i+0x196>
 800896c:	4616      	mov	r6, r2
 800896e:	e7bd      	b.n	80088ec <_printf_i+0x128>
 8008970:	6833      	ldr	r3, [r6, #0]
 8008972:	6825      	ldr	r5, [r4, #0]
 8008974:	6961      	ldr	r1, [r4, #20]
 8008976:	1d18      	adds	r0, r3, #4
 8008978:	6030      	str	r0, [r6, #0]
 800897a:	062e      	lsls	r6, r5, #24
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	d501      	bpl.n	8008984 <_printf_i+0x1c0>
 8008980:	6019      	str	r1, [r3, #0]
 8008982:	e002      	b.n	800898a <_printf_i+0x1c6>
 8008984:	0668      	lsls	r0, r5, #25
 8008986:	d5fb      	bpl.n	8008980 <_printf_i+0x1bc>
 8008988:	8019      	strh	r1, [r3, #0]
 800898a:	2300      	movs	r3, #0
 800898c:	6123      	str	r3, [r4, #16]
 800898e:	4616      	mov	r6, r2
 8008990:	e7bc      	b.n	800890c <_printf_i+0x148>
 8008992:	6833      	ldr	r3, [r6, #0]
 8008994:	1d1a      	adds	r2, r3, #4
 8008996:	6032      	str	r2, [r6, #0]
 8008998:	681e      	ldr	r6, [r3, #0]
 800899a:	6862      	ldr	r2, [r4, #4]
 800899c:	2100      	movs	r1, #0
 800899e:	4630      	mov	r0, r6
 80089a0:	f7f7 fc3e 	bl	8000220 <memchr>
 80089a4:	b108      	cbz	r0, 80089aa <_printf_i+0x1e6>
 80089a6:	1b80      	subs	r0, r0, r6
 80089a8:	6060      	str	r0, [r4, #4]
 80089aa:	6863      	ldr	r3, [r4, #4]
 80089ac:	6123      	str	r3, [r4, #16]
 80089ae:	2300      	movs	r3, #0
 80089b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089b4:	e7aa      	b.n	800890c <_printf_i+0x148>
 80089b6:	6923      	ldr	r3, [r4, #16]
 80089b8:	4632      	mov	r2, r6
 80089ba:	4649      	mov	r1, r9
 80089bc:	4640      	mov	r0, r8
 80089be:	47d0      	blx	sl
 80089c0:	3001      	adds	r0, #1
 80089c2:	d0ad      	beq.n	8008920 <_printf_i+0x15c>
 80089c4:	6823      	ldr	r3, [r4, #0]
 80089c6:	079b      	lsls	r3, r3, #30
 80089c8:	d413      	bmi.n	80089f2 <_printf_i+0x22e>
 80089ca:	68e0      	ldr	r0, [r4, #12]
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	4298      	cmp	r0, r3
 80089d0:	bfb8      	it	lt
 80089d2:	4618      	movlt	r0, r3
 80089d4:	e7a6      	b.n	8008924 <_printf_i+0x160>
 80089d6:	2301      	movs	r3, #1
 80089d8:	4632      	mov	r2, r6
 80089da:	4649      	mov	r1, r9
 80089dc:	4640      	mov	r0, r8
 80089de:	47d0      	blx	sl
 80089e0:	3001      	adds	r0, #1
 80089e2:	d09d      	beq.n	8008920 <_printf_i+0x15c>
 80089e4:	3501      	adds	r5, #1
 80089e6:	68e3      	ldr	r3, [r4, #12]
 80089e8:	9903      	ldr	r1, [sp, #12]
 80089ea:	1a5b      	subs	r3, r3, r1
 80089ec:	42ab      	cmp	r3, r5
 80089ee:	dcf2      	bgt.n	80089d6 <_printf_i+0x212>
 80089f0:	e7eb      	b.n	80089ca <_printf_i+0x206>
 80089f2:	2500      	movs	r5, #0
 80089f4:	f104 0619 	add.w	r6, r4, #25
 80089f8:	e7f5      	b.n	80089e6 <_printf_i+0x222>
 80089fa:	bf00      	nop
 80089fc:	0800bcda 	.word	0x0800bcda
 8008a00:	0800bceb 	.word	0x0800bceb

08008a04 <_scanf_float>:
 8008a04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	b087      	sub	sp, #28
 8008a0a:	4617      	mov	r7, r2
 8008a0c:	9303      	str	r3, [sp, #12]
 8008a0e:	688b      	ldr	r3, [r1, #8]
 8008a10:	1e5a      	subs	r2, r3, #1
 8008a12:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008a16:	bf81      	itttt	hi
 8008a18:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008a1c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008a20:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008a24:	608b      	strhi	r3, [r1, #8]
 8008a26:	680b      	ldr	r3, [r1, #0]
 8008a28:	460a      	mov	r2, r1
 8008a2a:	f04f 0500 	mov.w	r5, #0
 8008a2e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008a32:	f842 3b1c 	str.w	r3, [r2], #28
 8008a36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008a3a:	4680      	mov	r8, r0
 8008a3c:	460c      	mov	r4, r1
 8008a3e:	bf98      	it	ls
 8008a40:	f04f 0b00 	movls.w	fp, #0
 8008a44:	9201      	str	r2, [sp, #4]
 8008a46:	4616      	mov	r6, r2
 8008a48:	46aa      	mov	sl, r5
 8008a4a:	46a9      	mov	r9, r5
 8008a4c:	9502      	str	r5, [sp, #8]
 8008a4e:	68a2      	ldr	r2, [r4, #8]
 8008a50:	b152      	cbz	r2, 8008a68 <_scanf_float+0x64>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	2b4e      	cmp	r3, #78	@ 0x4e
 8008a58:	d864      	bhi.n	8008b24 <_scanf_float+0x120>
 8008a5a:	2b40      	cmp	r3, #64	@ 0x40
 8008a5c:	d83c      	bhi.n	8008ad8 <_scanf_float+0xd4>
 8008a5e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008a62:	b2c8      	uxtb	r0, r1
 8008a64:	280e      	cmp	r0, #14
 8008a66:	d93a      	bls.n	8008ade <_scanf_float+0xda>
 8008a68:	f1b9 0f00 	cmp.w	r9, #0
 8008a6c:	d003      	beq.n	8008a76 <_scanf_float+0x72>
 8008a6e:	6823      	ldr	r3, [r4, #0]
 8008a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008a7a:	f1ba 0f01 	cmp.w	sl, #1
 8008a7e:	f200 8117 	bhi.w	8008cb0 <_scanf_float+0x2ac>
 8008a82:	9b01      	ldr	r3, [sp, #4]
 8008a84:	429e      	cmp	r6, r3
 8008a86:	f200 8108 	bhi.w	8008c9a <_scanf_float+0x296>
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	b007      	add	sp, #28
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008a96:	2a0d      	cmp	r2, #13
 8008a98:	d8e6      	bhi.n	8008a68 <_scanf_float+0x64>
 8008a9a:	a101      	add	r1, pc, #4	@ (adr r1, 8008aa0 <_scanf_float+0x9c>)
 8008a9c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008aa0:	08008be7 	.word	0x08008be7
 8008aa4:	08008a69 	.word	0x08008a69
 8008aa8:	08008a69 	.word	0x08008a69
 8008aac:	08008a69 	.word	0x08008a69
 8008ab0:	08008c47 	.word	0x08008c47
 8008ab4:	08008c1f 	.word	0x08008c1f
 8008ab8:	08008a69 	.word	0x08008a69
 8008abc:	08008a69 	.word	0x08008a69
 8008ac0:	08008bf5 	.word	0x08008bf5
 8008ac4:	08008a69 	.word	0x08008a69
 8008ac8:	08008a69 	.word	0x08008a69
 8008acc:	08008a69 	.word	0x08008a69
 8008ad0:	08008a69 	.word	0x08008a69
 8008ad4:	08008bad 	.word	0x08008bad
 8008ad8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008adc:	e7db      	b.n	8008a96 <_scanf_float+0x92>
 8008ade:	290e      	cmp	r1, #14
 8008ae0:	d8c2      	bhi.n	8008a68 <_scanf_float+0x64>
 8008ae2:	a001      	add	r0, pc, #4	@ (adr r0, 8008ae8 <_scanf_float+0xe4>)
 8008ae4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008ae8:	08008b9d 	.word	0x08008b9d
 8008aec:	08008a69 	.word	0x08008a69
 8008af0:	08008b9d 	.word	0x08008b9d
 8008af4:	08008c33 	.word	0x08008c33
 8008af8:	08008a69 	.word	0x08008a69
 8008afc:	08008b45 	.word	0x08008b45
 8008b00:	08008b83 	.word	0x08008b83
 8008b04:	08008b83 	.word	0x08008b83
 8008b08:	08008b83 	.word	0x08008b83
 8008b0c:	08008b83 	.word	0x08008b83
 8008b10:	08008b83 	.word	0x08008b83
 8008b14:	08008b83 	.word	0x08008b83
 8008b18:	08008b83 	.word	0x08008b83
 8008b1c:	08008b83 	.word	0x08008b83
 8008b20:	08008b83 	.word	0x08008b83
 8008b24:	2b6e      	cmp	r3, #110	@ 0x6e
 8008b26:	d809      	bhi.n	8008b3c <_scanf_float+0x138>
 8008b28:	2b60      	cmp	r3, #96	@ 0x60
 8008b2a:	d8b2      	bhi.n	8008a92 <_scanf_float+0x8e>
 8008b2c:	2b54      	cmp	r3, #84	@ 0x54
 8008b2e:	d07b      	beq.n	8008c28 <_scanf_float+0x224>
 8008b30:	2b59      	cmp	r3, #89	@ 0x59
 8008b32:	d199      	bne.n	8008a68 <_scanf_float+0x64>
 8008b34:	2d07      	cmp	r5, #7
 8008b36:	d197      	bne.n	8008a68 <_scanf_float+0x64>
 8008b38:	2508      	movs	r5, #8
 8008b3a:	e02c      	b.n	8008b96 <_scanf_float+0x192>
 8008b3c:	2b74      	cmp	r3, #116	@ 0x74
 8008b3e:	d073      	beq.n	8008c28 <_scanf_float+0x224>
 8008b40:	2b79      	cmp	r3, #121	@ 0x79
 8008b42:	e7f6      	b.n	8008b32 <_scanf_float+0x12e>
 8008b44:	6821      	ldr	r1, [r4, #0]
 8008b46:	05c8      	lsls	r0, r1, #23
 8008b48:	d51b      	bpl.n	8008b82 <_scanf_float+0x17e>
 8008b4a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008b4e:	6021      	str	r1, [r4, #0]
 8008b50:	f109 0901 	add.w	r9, r9, #1
 8008b54:	f1bb 0f00 	cmp.w	fp, #0
 8008b58:	d003      	beq.n	8008b62 <_scanf_float+0x15e>
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8008b60:	60a2      	str	r2, [r4, #8]
 8008b62:	68a3      	ldr	r3, [r4, #8]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	60a3      	str	r3, [r4, #8]
 8008b68:	6923      	ldr	r3, [r4, #16]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3b01      	subs	r3, #1
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	607b      	str	r3, [r7, #4]
 8008b76:	f340 8087 	ble.w	8008c88 <_scanf_float+0x284>
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	e765      	b.n	8008a4e <_scanf_float+0x4a>
 8008b82:	eb1a 0105 	adds.w	r1, sl, r5
 8008b86:	f47f af6f 	bne.w	8008a68 <_scanf_float+0x64>
 8008b8a:	6822      	ldr	r2, [r4, #0]
 8008b8c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008b90:	6022      	str	r2, [r4, #0]
 8008b92:	460d      	mov	r5, r1
 8008b94:	468a      	mov	sl, r1
 8008b96:	f806 3b01 	strb.w	r3, [r6], #1
 8008b9a:	e7e2      	b.n	8008b62 <_scanf_float+0x15e>
 8008b9c:	6822      	ldr	r2, [r4, #0]
 8008b9e:	0610      	lsls	r0, r2, #24
 8008ba0:	f57f af62 	bpl.w	8008a68 <_scanf_float+0x64>
 8008ba4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008ba8:	6022      	str	r2, [r4, #0]
 8008baa:	e7f4      	b.n	8008b96 <_scanf_float+0x192>
 8008bac:	f1ba 0f00 	cmp.w	sl, #0
 8008bb0:	d10e      	bne.n	8008bd0 <_scanf_float+0x1cc>
 8008bb2:	f1b9 0f00 	cmp.w	r9, #0
 8008bb6:	d10e      	bne.n	8008bd6 <_scanf_float+0x1d2>
 8008bb8:	6822      	ldr	r2, [r4, #0]
 8008bba:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008bbe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008bc2:	d108      	bne.n	8008bd6 <_scanf_float+0x1d2>
 8008bc4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008bc8:	6022      	str	r2, [r4, #0]
 8008bca:	f04f 0a01 	mov.w	sl, #1
 8008bce:	e7e2      	b.n	8008b96 <_scanf_float+0x192>
 8008bd0:	f1ba 0f02 	cmp.w	sl, #2
 8008bd4:	d055      	beq.n	8008c82 <_scanf_float+0x27e>
 8008bd6:	2d01      	cmp	r5, #1
 8008bd8:	d002      	beq.n	8008be0 <_scanf_float+0x1dc>
 8008bda:	2d04      	cmp	r5, #4
 8008bdc:	f47f af44 	bne.w	8008a68 <_scanf_float+0x64>
 8008be0:	3501      	adds	r5, #1
 8008be2:	b2ed      	uxtb	r5, r5
 8008be4:	e7d7      	b.n	8008b96 <_scanf_float+0x192>
 8008be6:	f1ba 0f01 	cmp.w	sl, #1
 8008bea:	f47f af3d 	bne.w	8008a68 <_scanf_float+0x64>
 8008bee:	f04f 0a02 	mov.w	sl, #2
 8008bf2:	e7d0      	b.n	8008b96 <_scanf_float+0x192>
 8008bf4:	b97d      	cbnz	r5, 8008c16 <_scanf_float+0x212>
 8008bf6:	f1b9 0f00 	cmp.w	r9, #0
 8008bfa:	f47f af38 	bne.w	8008a6e <_scanf_float+0x6a>
 8008bfe:	6822      	ldr	r2, [r4, #0]
 8008c00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008c04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008c08:	f040 8108 	bne.w	8008e1c <_scanf_float+0x418>
 8008c0c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c10:	6022      	str	r2, [r4, #0]
 8008c12:	2501      	movs	r5, #1
 8008c14:	e7bf      	b.n	8008b96 <_scanf_float+0x192>
 8008c16:	2d03      	cmp	r5, #3
 8008c18:	d0e2      	beq.n	8008be0 <_scanf_float+0x1dc>
 8008c1a:	2d05      	cmp	r5, #5
 8008c1c:	e7de      	b.n	8008bdc <_scanf_float+0x1d8>
 8008c1e:	2d02      	cmp	r5, #2
 8008c20:	f47f af22 	bne.w	8008a68 <_scanf_float+0x64>
 8008c24:	2503      	movs	r5, #3
 8008c26:	e7b6      	b.n	8008b96 <_scanf_float+0x192>
 8008c28:	2d06      	cmp	r5, #6
 8008c2a:	f47f af1d 	bne.w	8008a68 <_scanf_float+0x64>
 8008c2e:	2507      	movs	r5, #7
 8008c30:	e7b1      	b.n	8008b96 <_scanf_float+0x192>
 8008c32:	6822      	ldr	r2, [r4, #0]
 8008c34:	0591      	lsls	r1, r2, #22
 8008c36:	f57f af17 	bpl.w	8008a68 <_scanf_float+0x64>
 8008c3a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008c3e:	6022      	str	r2, [r4, #0]
 8008c40:	f8cd 9008 	str.w	r9, [sp, #8]
 8008c44:	e7a7      	b.n	8008b96 <_scanf_float+0x192>
 8008c46:	6822      	ldr	r2, [r4, #0]
 8008c48:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008c4c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008c50:	d006      	beq.n	8008c60 <_scanf_float+0x25c>
 8008c52:	0550      	lsls	r0, r2, #21
 8008c54:	f57f af08 	bpl.w	8008a68 <_scanf_float+0x64>
 8008c58:	f1b9 0f00 	cmp.w	r9, #0
 8008c5c:	f000 80de 	beq.w	8008e1c <_scanf_float+0x418>
 8008c60:	0591      	lsls	r1, r2, #22
 8008c62:	bf58      	it	pl
 8008c64:	9902      	ldrpl	r1, [sp, #8]
 8008c66:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008c6a:	bf58      	it	pl
 8008c6c:	eba9 0101 	subpl.w	r1, r9, r1
 8008c70:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008c74:	bf58      	it	pl
 8008c76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008c7a:	6022      	str	r2, [r4, #0]
 8008c7c:	f04f 0900 	mov.w	r9, #0
 8008c80:	e789      	b.n	8008b96 <_scanf_float+0x192>
 8008c82:	f04f 0a03 	mov.w	sl, #3
 8008c86:	e786      	b.n	8008b96 <_scanf_float+0x192>
 8008c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4798      	blx	r3
 8008c92:	2800      	cmp	r0, #0
 8008c94:	f43f aedb 	beq.w	8008a4e <_scanf_float+0x4a>
 8008c98:	e6e6      	b.n	8008a68 <_scanf_float+0x64>
 8008c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ca2:	463a      	mov	r2, r7
 8008ca4:	4640      	mov	r0, r8
 8008ca6:	4798      	blx	r3
 8008ca8:	6923      	ldr	r3, [r4, #16]
 8008caa:	3b01      	subs	r3, #1
 8008cac:	6123      	str	r3, [r4, #16]
 8008cae:	e6e8      	b.n	8008a82 <_scanf_float+0x7e>
 8008cb0:	1e6b      	subs	r3, r5, #1
 8008cb2:	2b06      	cmp	r3, #6
 8008cb4:	d824      	bhi.n	8008d00 <_scanf_float+0x2fc>
 8008cb6:	2d02      	cmp	r5, #2
 8008cb8:	d836      	bhi.n	8008d28 <_scanf_float+0x324>
 8008cba:	9b01      	ldr	r3, [sp, #4]
 8008cbc:	429e      	cmp	r6, r3
 8008cbe:	f67f aee4 	bls.w	8008a8a <_scanf_float+0x86>
 8008cc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cc6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008cca:	463a      	mov	r2, r7
 8008ccc:	4640      	mov	r0, r8
 8008cce:	4798      	blx	r3
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	3b01      	subs	r3, #1
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	e7f0      	b.n	8008cba <_scanf_float+0x2b6>
 8008cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008cdc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008ce0:	463a      	mov	r2, r7
 8008ce2:	4640      	mov	r0, r8
 8008ce4:	4798      	blx	r3
 8008ce6:	6923      	ldr	r3, [r4, #16]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	6123      	str	r3, [r4, #16]
 8008cec:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008cf0:	fa5f fa8a 	uxtb.w	sl, sl
 8008cf4:	f1ba 0f02 	cmp.w	sl, #2
 8008cf8:	d1ee      	bne.n	8008cd8 <_scanf_float+0x2d4>
 8008cfa:	3d03      	subs	r5, #3
 8008cfc:	b2ed      	uxtb	r5, r5
 8008cfe:	1b76      	subs	r6, r6, r5
 8008d00:	6823      	ldr	r3, [r4, #0]
 8008d02:	05da      	lsls	r2, r3, #23
 8008d04:	d530      	bpl.n	8008d68 <_scanf_float+0x364>
 8008d06:	055b      	lsls	r3, r3, #21
 8008d08:	d511      	bpl.n	8008d2e <_scanf_float+0x32a>
 8008d0a:	9b01      	ldr	r3, [sp, #4]
 8008d0c:	429e      	cmp	r6, r3
 8008d0e:	f67f aebc 	bls.w	8008a8a <_scanf_float+0x86>
 8008d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008d1a:	463a      	mov	r2, r7
 8008d1c:	4640      	mov	r0, r8
 8008d1e:	4798      	blx	r3
 8008d20:	6923      	ldr	r3, [r4, #16]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	e7f0      	b.n	8008d0a <_scanf_float+0x306>
 8008d28:	46aa      	mov	sl, r5
 8008d2a:	46b3      	mov	fp, r6
 8008d2c:	e7de      	b.n	8008cec <_scanf_float+0x2e8>
 8008d2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008d32:	6923      	ldr	r3, [r4, #16]
 8008d34:	2965      	cmp	r1, #101	@ 0x65
 8008d36:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008d3a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8008d3e:	6123      	str	r3, [r4, #16]
 8008d40:	d00c      	beq.n	8008d5c <_scanf_float+0x358>
 8008d42:	2945      	cmp	r1, #69	@ 0x45
 8008d44:	d00a      	beq.n	8008d5c <_scanf_float+0x358>
 8008d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d4a:	463a      	mov	r2, r7
 8008d4c:	4640      	mov	r0, r8
 8008d4e:	4798      	blx	r3
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008d56:	3b01      	subs	r3, #1
 8008d58:	1eb5      	subs	r5, r6, #2
 8008d5a:	6123      	str	r3, [r4, #16]
 8008d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008d60:	463a      	mov	r2, r7
 8008d62:	4640      	mov	r0, r8
 8008d64:	4798      	blx	r3
 8008d66:	462e      	mov	r6, r5
 8008d68:	6822      	ldr	r2, [r4, #0]
 8008d6a:	f012 0210 	ands.w	r2, r2, #16
 8008d6e:	d001      	beq.n	8008d74 <_scanf_float+0x370>
 8008d70:	2000      	movs	r0, #0
 8008d72:	e68b      	b.n	8008a8c <_scanf_float+0x88>
 8008d74:	7032      	strb	r2, [r6, #0]
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d80:	d11c      	bne.n	8008dbc <_scanf_float+0x3b8>
 8008d82:	9b02      	ldr	r3, [sp, #8]
 8008d84:	454b      	cmp	r3, r9
 8008d86:	eba3 0209 	sub.w	r2, r3, r9
 8008d8a:	d123      	bne.n	8008dd4 <_scanf_float+0x3d0>
 8008d8c:	9901      	ldr	r1, [sp, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	4640      	mov	r0, r8
 8008d92:	f7ff f9d9 	bl	8008148 <_strtod_r>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	6821      	ldr	r1, [r4, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f011 0f02 	tst.w	r1, #2
 8008da0:	ec57 6b10 	vmov	r6, r7, d0
 8008da4:	f103 0204 	add.w	r2, r3, #4
 8008da8:	d01f      	beq.n	8008dea <_scanf_float+0x3e6>
 8008daa:	9903      	ldr	r1, [sp, #12]
 8008dac:	600a      	str	r2, [r1, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	e9c3 6700 	strd	r6, r7, [r3]
 8008db4:	68e3      	ldr	r3, [r4, #12]
 8008db6:	3301      	adds	r3, #1
 8008db8:	60e3      	str	r3, [r4, #12]
 8008dba:	e7d9      	b.n	8008d70 <_scanf_float+0x36c>
 8008dbc:	9b04      	ldr	r3, [sp, #16]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0e4      	beq.n	8008d8c <_scanf_float+0x388>
 8008dc2:	9905      	ldr	r1, [sp, #20]
 8008dc4:	230a      	movs	r3, #10
 8008dc6:	3101      	adds	r1, #1
 8008dc8:	4640      	mov	r0, r8
 8008dca:	f002 fa5d 	bl	800b288 <_strtol_r>
 8008dce:	9b04      	ldr	r3, [sp, #16]
 8008dd0:	9e05      	ldr	r6, [sp, #20]
 8008dd2:	1ac2      	subs	r2, r0, r3
 8008dd4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008dd8:	429e      	cmp	r6, r3
 8008dda:	bf28      	it	cs
 8008ddc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008de0:	4910      	ldr	r1, [pc, #64]	@ (8008e24 <_scanf_float+0x420>)
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 f8e4 	bl	8008fb0 <siprintf>
 8008de8:	e7d0      	b.n	8008d8c <_scanf_float+0x388>
 8008dea:	f011 0f04 	tst.w	r1, #4
 8008dee:	9903      	ldr	r1, [sp, #12]
 8008df0:	600a      	str	r2, [r1, #0]
 8008df2:	d1dc      	bne.n	8008dae <_scanf_float+0x3aa>
 8008df4:	681d      	ldr	r5, [r3, #0]
 8008df6:	4632      	mov	r2, r6
 8008df8:	463b      	mov	r3, r7
 8008dfa:	4630      	mov	r0, r6
 8008dfc:	4639      	mov	r1, r7
 8008dfe:	f7f7 febd 	bl	8000b7c <__aeabi_dcmpun>
 8008e02:	b128      	cbz	r0, 8008e10 <_scanf_float+0x40c>
 8008e04:	4808      	ldr	r0, [pc, #32]	@ (8008e28 <_scanf_float+0x424>)
 8008e06:	f000 fa73 	bl	80092f0 <nanf>
 8008e0a:	ed85 0a00 	vstr	s0, [r5]
 8008e0e:	e7d1      	b.n	8008db4 <_scanf_float+0x3b0>
 8008e10:	4630      	mov	r0, r6
 8008e12:	4639      	mov	r1, r7
 8008e14:	f7f7 ff10 	bl	8000c38 <__aeabi_d2f>
 8008e18:	6028      	str	r0, [r5, #0]
 8008e1a:	e7cb      	b.n	8008db4 <_scanf_float+0x3b0>
 8008e1c:	f04f 0900 	mov.w	r9, #0
 8008e20:	e629      	b.n	8008a76 <_scanf_float+0x72>
 8008e22:	bf00      	nop
 8008e24:	0800bcfc 	.word	0x0800bcfc
 8008e28:	0800c09d 	.word	0x0800c09d

08008e2c <std>:
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	b510      	push	{r4, lr}
 8008e30:	4604      	mov	r4, r0
 8008e32:	e9c0 3300 	strd	r3, r3, [r0]
 8008e36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008e3a:	6083      	str	r3, [r0, #8]
 8008e3c:	8181      	strh	r1, [r0, #12]
 8008e3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008e40:	81c2      	strh	r2, [r0, #14]
 8008e42:	6183      	str	r3, [r0, #24]
 8008e44:	4619      	mov	r1, r3
 8008e46:	2208      	movs	r2, #8
 8008e48:	305c      	adds	r0, #92	@ 0x5c
 8008e4a:	f000 f9a9 	bl	80091a0 <memset>
 8008e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e84 <std+0x58>)
 8008e50:	6263      	str	r3, [r4, #36]	@ 0x24
 8008e52:	4b0d      	ldr	r3, [pc, #52]	@ (8008e88 <std+0x5c>)
 8008e54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008e56:	4b0d      	ldr	r3, [pc, #52]	@ (8008e8c <std+0x60>)
 8008e58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e90 <std+0x64>)
 8008e5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8008e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8008e94 <std+0x68>)
 8008e60:	6224      	str	r4, [r4, #32]
 8008e62:	429c      	cmp	r4, r3
 8008e64:	d006      	beq.n	8008e74 <std+0x48>
 8008e66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008e6a:	4294      	cmp	r4, r2
 8008e6c:	d002      	beq.n	8008e74 <std+0x48>
 8008e6e:	33d0      	adds	r3, #208	@ 0xd0
 8008e70:	429c      	cmp	r4, r3
 8008e72:	d105      	bne.n	8008e80 <std+0x54>
 8008e74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e7c:	f000 ba1e 	b.w	80092bc <__retarget_lock_init_recursive>
 8008e80:	bd10      	pop	{r4, pc}
 8008e82:	bf00      	nop
 8008e84:	08008ff1 	.word	0x08008ff1
 8008e88:	08009013 	.word	0x08009013
 8008e8c:	0800904b 	.word	0x0800904b
 8008e90:	0800906f 	.word	0x0800906f
 8008e94:	200006b4 	.word	0x200006b4

08008e98 <stdio_exit_handler>:
 8008e98:	4a02      	ldr	r2, [pc, #8]	@ (8008ea4 <stdio_exit_handler+0xc>)
 8008e9a:	4903      	ldr	r1, [pc, #12]	@ (8008ea8 <stdio_exit_handler+0x10>)
 8008e9c:	4803      	ldr	r0, [pc, #12]	@ (8008eac <stdio_exit_handler+0x14>)
 8008e9e:	f000 b869 	b.w	8008f74 <_fwalk_sglue>
 8008ea2:	bf00      	nop
 8008ea4:	2000000c 	.word	0x2000000c
 8008ea8:	0800b8e1 	.word	0x0800b8e1
 8008eac:	20000188 	.word	0x20000188

08008eb0 <cleanup_stdio>:
 8008eb0:	6841      	ldr	r1, [r0, #4]
 8008eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <cleanup_stdio+0x34>)
 8008eb4:	4299      	cmp	r1, r3
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	4604      	mov	r4, r0
 8008eba:	d001      	beq.n	8008ec0 <cleanup_stdio+0x10>
 8008ebc:	f002 fd10 	bl	800b8e0 <_fflush_r>
 8008ec0:	68a1      	ldr	r1, [r4, #8]
 8008ec2:	4b09      	ldr	r3, [pc, #36]	@ (8008ee8 <cleanup_stdio+0x38>)
 8008ec4:	4299      	cmp	r1, r3
 8008ec6:	d002      	beq.n	8008ece <cleanup_stdio+0x1e>
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f002 fd09 	bl	800b8e0 <_fflush_r>
 8008ece:	68e1      	ldr	r1, [r4, #12]
 8008ed0:	4b06      	ldr	r3, [pc, #24]	@ (8008eec <cleanup_stdio+0x3c>)
 8008ed2:	4299      	cmp	r1, r3
 8008ed4:	d004      	beq.n	8008ee0 <cleanup_stdio+0x30>
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008edc:	f002 bd00 	b.w	800b8e0 <_fflush_r>
 8008ee0:	bd10      	pop	{r4, pc}
 8008ee2:	bf00      	nop
 8008ee4:	200006b4 	.word	0x200006b4
 8008ee8:	2000071c 	.word	0x2000071c
 8008eec:	20000784 	.word	0x20000784

08008ef0 <global_stdio_init.part.0>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8008f20 <global_stdio_init.part.0+0x30>)
 8008ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8008f24 <global_stdio_init.part.0+0x34>)
 8008ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8008f28 <global_stdio_init.part.0+0x38>)
 8008ef8:	601a      	str	r2, [r3, #0]
 8008efa:	4620      	mov	r0, r4
 8008efc:	2200      	movs	r2, #0
 8008efe:	2104      	movs	r1, #4
 8008f00:	f7ff ff94 	bl	8008e2c <std>
 8008f04:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008f08:	2201      	movs	r2, #1
 8008f0a:	2109      	movs	r1, #9
 8008f0c:	f7ff ff8e 	bl	8008e2c <std>
 8008f10:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008f14:	2202      	movs	r2, #2
 8008f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f1a:	2112      	movs	r1, #18
 8008f1c:	f7ff bf86 	b.w	8008e2c <std>
 8008f20:	200007ec 	.word	0x200007ec
 8008f24:	200006b4 	.word	0x200006b4
 8008f28:	08008e99 	.word	0x08008e99

08008f2c <__sfp_lock_acquire>:
 8008f2c:	4801      	ldr	r0, [pc, #4]	@ (8008f34 <__sfp_lock_acquire+0x8>)
 8008f2e:	f000 b9c6 	b.w	80092be <__retarget_lock_acquire_recursive>
 8008f32:	bf00      	nop
 8008f34:	200007f5 	.word	0x200007f5

08008f38 <__sfp_lock_release>:
 8008f38:	4801      	ldr	r0, [pc, #4]	@ (8008f40 <__sfp_lock_release+0x8>)
 8008f3a:	f000 b9c1 	b.w	80092c0 <__retarget_lock_release_recursive>
 8008f3e:	bf00      	nop
 8008f40:	200007f5 	.word	0x200007f5

08008f44 <__sinit>:
 8008f44:	b510      	push	{r4, lr}
 8008f46:	4604      	mov	r4, r0
 8008f48:	f7ff fff0 	bl	8008f2c <__sfp_lock_acquire>
 8008f4c:	6a23      	ldr	r3, [r4, #32]
 8008f4e:	b11b      	cbz	r3, 8008f58 <__sinit+0x14>
 8008f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008f54:	f7ff bff0 	b.w	8008f38 <__sfp_lock_release>
 8008f58:	4b04      	ldr	r3, [pc, #16]	@ (8008f6c <__sinit+0x28>)
 8008f5a:	6223      	str	r3, [r4, #32]
 8008f5c:	4b04      	ldr	r3, [pc, #16]	@ (8008f70 <__sinit+0x2c>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1f5      	bne.n	8008f50 <__sinit+0xc>
 8008f64:	f7ff ffc4 	bl	8008ef0 <global_stdio_init.part.0>
 8008f68:	e7f2      	b.n	8008f50 <__sinit+0xc>
 8008f6a:	bf00      	nop
 8008f6c:	08008eb1 	.word	0x08008eb1
 8008f70:	200007ec 	.word	0x200007ec

08008f74 <_fwalk_sglue>:
 8008f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f78:	4607      	mov	r7, r0
 8008f7a:	4688      	mov	r8, r1
 8008f7c:	4614      	mov	r4, r2
 8008f7e:	2600      	movs	r6, #0
 8008f80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f84:	f1b9 0901 	subs.w	r9, r9, #1
 8008f88:	d505      	bpl.n	8008f96 <_fwalk_sglue+0x22>
 8008f8a:	6824      	ldr	r4, [r4, #0]
 8008f8c:	2c00      	cmp	r4, #0
 8008f8e:	d1f7      	bne.n	8008f80 <_fwalk_sglue+0xc>
 8008f90:	4630      	mov	r0, r6
 8008f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f96:	89ab      	ldrh	r3, [r5, #12]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d907      	bls.n	8008fac <_fwalk_sglue+0x38>
 8008f9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	d003      	beq.n	8008fac <_fwalk_sglue+0x38>
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4638      	mov	r0, r7
 8008fa8:	47c0      	blx	r8
 8008faa:	4306      	orrs	r6, r0
 8008fac:	3568      	adds	r5, #104	@ 0x68
 8008fae:	e7e9      	b.n	8008f84 <_fwalk_sglue+0x10>

08008fb0 <siprintf>:
 8008fb0:	b40e      	push	{r1, r2, r3}
 8008fb2:	b500      	push	{lr}
 8008fb4:	b09c      	sub	sp, #112	@ 0x70
 8008fb6:	ab1d      	add	r3, sp, #116	@ 0x74
 8008fb8:	9002      	str	r0, [sp, #8]
 8008fba:	9006      	str	r0, [sp, #24]
 8008fbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008fc0:	4809      	ldr	r0, [pc, #36]	@ (8008fe8 <siprintf+0x38>)
 8008fc2:	9107      	str	r1, [sp, #28]
 8008fc4:	9104      	str	r1, [sp, #16]
 8008fc6:	4909      	ldr	r1, [pc, #36]	@ (8008fec <siprintf+0x3c>)
 8008fc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fcc:	9105      	str	r1, [sp, #20]
 8008fce:	6800      	ldr	r0, [r0, #0]
 8008fd0:	9301      	str	r3, [sp, #4]
 8008fd2:	a902      	add	r1, sp, #8
 8008fd4:	f002 f9c2 	bl	800b35c <_svfiprintf_r>
 8008fd8:	9b02      	ldr	r3, [sp, #8]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	701a      	strb	r2, [r3, #0]
 8008fde:	b01c      	add	sp, #112	@ 0x70
 8008fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fe4:	b003      	add	sp, #12
 8008fe6:	4770      	bx	lr
 8008fe8:	20000184 	.word	0x20000184
 8008fec:	ffff0208 	.word	0xffff0208

08008ff0 <__sread>:
 8008ff0:	b510      	push	{r4, lr}
 8008ff2:	460c      	mov	r4, r1
 8008ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ff8:	f000 f912 	bl	8009220 <_read_r>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	bfab      	itete	ge
 8009000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009002:	89a3      	ldrhlt	r3, [r4, #12]
 8009004:	181b      	addge	r3, r3, r0
 8009006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800900a:	bfac      	ite	ge
 800900c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800900e:	81a3      	strhlt	r3, [r4, #12]
 8009010:	bd10      	pop	{r4, pc}

08009012 <__swrite>:
 8009012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009016:	461f      	mov	r7, r3
 8009018:	898b      	ldrh	r3, [r1, #12]
 800901a:	05db      	lsls	r3, r3, #23
 800901c:	4605      	mov	r5, r0
 800901e:	460c      	mov	r4, r1
 8009020:	4616      	mov	r6, r2
 8009022:	d505      	bpl.n	8009030 <__swrite+0x1e>
 8009024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009028:	2302      	movs	r3, #2
 800902a:	2200      	movs	r2, #0
 800902c:	f000 f8e6 	bl	80091fc <_lseek_r>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	4632      	mov	r2, r6
 800903e:	463b      	mov	r3, r7
 8009040:	4628      	mov	r0, r5
 8009042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009046:	f000 b8fd 	b.w	8009244 <_write_r>

0800904a <__sseek>:
 800904a:	b510      	push	{r4, lr}
 800904c:	460c      	mov	r4, r1
 800904e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009052:	f000 f8d3 	bl	80091fc <_lseek_r>
 8009056:	1c43      	adds	r3, r0, #1
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	bf15      	itete	ne
 800905c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800905e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009066:	81a3      	strheq	r3, [r4, #12]
 8009068:	bf18      	it	ne
 800906a:	81a3      	strhne	r3, [r4, #12]
 800906c:	bd10      	pop	{r4, pc}

0800906e <__sclose>:
 800906e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009072:	f000 b8b3 	b.w	80091dc <_close_r>

08009076 <__swbuf_r>:
 8009076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009078:	460e      	mov	r6, r1
 800907a:	4614      	mov	r4, r2
 800907c:	4605      	mov	r5, r0
 800907e:	b118      	cbz	r0, 8009088 <__swbuf_r+0x12>
 8009080:	6a03      	ldr	r3, [r0, #32]
 8009082:	b90b      	cbnz	r3, 8009088 <__swbuf_r+0x12>
 8009084:	f7ff ff5e 	bl	8008f44 <__sinit>
 8009088:	69a3      	ldr	r3, [r4, #24]
 800908a:	60a3      	str	r3, [r4, #8]
 800908c:	89a3      	ldrh	r3, [r4, #12]
 800908e:	071a      	lsls	r2, r3, #28
 8009090:	d501      	bpl.n	8009096 <__swbuf_r+0x20>
 8009092:	6923      	ldr	r3, [r4, #16]
 8009094:	b943      	cbnz	r3, 80090a8 <__swbuf_r+0x32>
 8009096:	4621      	mov	r1, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f000 f82b 	bl	80090f4 <__swsetup_r>
 800909e:	b118      	cbz	r0, 80090a8 <__swbuf_r+0x32>
 80090a0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80090a4:	4638      	mov	r0, r7
 80090a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	6922      	ldr	r2, [r4, #16]
 80090ac:	1a98      	subs	r0, r3, r2
 80090ae:	6963      	ldr	r3, [r4, #20]
 80090b0:	b2f6      	uxtb	r6, r6
 80090b2:	4283      	cmp	r3, r0
 80090b4:	4637      	mov	r7, r6
 80090b6:	dc05      	bgt.n	80090c4 <__swbuf_r+0x4e>
 80090b8:	4621      	mov	r1, r4
 80090ba:	4628      	mov	r0, r5
 80090bc:	f002 fc10 	bl	800b8e0 <_fflush_r>
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d1ed      	bne.n	80090a0 <__swbuf_r+0x2a>
 80090c4:	68a3      	ldr	r3, [r4, #8]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	60a3      	str	r3, [r4, #8]
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	6022      	str	r2, [r4, #0]
 80090d0:	701e      	strb	r6, [r3, #0]
 80090d2:	6962      	ldr	r2, [r4, #20]
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d004      	beq.n	80090e4 <__swbuf_r+0x6e>
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	07db      	lsls	r3, r3, #31
 80090de:	d5e1      	bpl.n	80090a4 <__swbuf_r+0x2e>
 80090e0:	2e0a      	cmp	r6, #10
 80090e2:	d1df      	bne.n	80090a4 <__swbuf_r+0x2e>
 80090e4:	4621      	mov	r1, r4
 80090e6:	4628      	mov	r0, r5
 80090e8:	f002 fbfa 	bl	800b8e0 <_fflush_r>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	d0d9      	beq.n	80090a4 <__swbuf_r+0x2e>
 80090f0:	e7d6      	b.n	80090a0 <__swbuf_r+0x2a>
	...

080090f4 <__swsetup_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4b29      	ldr	r3, [pc, #164]	@ (800919c <__swsetup_r+0xa8>)
 80090f8:	4605      	mov	r5, r0
 80090fa:	6818      	ldr	r0, [r3, #0]
 80090fc:	460c      	mov	r4, r1
 80090fe:	b118      	cbz	r0, 8009108 <__swsetup_r+0x14>
 8009100:	6a03      	ldr	r3, [r0, #32]
 8009102:	b90b      	cbnz	r3, 8009108 <__swsetup_r+0x14>
 8009104:	f7ff ff1e 	bl	8008f44 <__sinit>
 8009108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910c:	0719      	lsls	r1, r3, #28
 800910e:	d422      	bmi.n	8009156 <__swsetup_r+0x62>
 8009110:	06da      	lsls	r2, r3, #27
 8009112:	d407      	bmi.n	8009124 <__swsetup_r+0x30>
 8009114:	2209      	movs	r2, #9
 8009116:	602a      	str	r2, [r5, #0]
 8009118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800911c:	81a3      	strh	r3, [r4, #12]
 800911e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009122:	e033      	b.n	800918c <__swsetup_r+0x98>
 8009124:	0758      	lsls	r0, r3, #29
 8009126:	d512      	bpl.n	800914e <__swsetup_r+0x5a>
 8009128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800912a:	b141      	cbz	r1, 800913e <__swsetup_r+0x4a>
 800912c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009130:	4299      	cmp	r1, r3
 8009132:	d002      	beq.n	800913a <__swsetup_r+0x46>
 8009134:	4628      	mov	r0, r5
 8009136:	f000 ff2f 	bl	8009f98 <_free_r>
 800913a:	2300      	movs	r3, #0
 800913c:	6363      	str	r3, [r4, #52]	@ 0x34
 800913e:	89a3      	ldrh	r3, [r4, #12]
 8009140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009144:	81a3      	strh	r3, [r4, #12]
 8009146:	2300      	movs	r3, #0
 8009148:	6063      	str	r3, [r4, #4]
 800914a:	6923      	ldr	r3, [r4, #16]
 800914c:	6023      	str	r3, [r4, #0]
 800914e:	89a3      	ldrh	r3, [r4, #12]
 8009150:	f043 0308 	orr.w	r3, r3, #8
 8009154:	81a3      	strh	r3, [r4, #12]
 8009156:	6923      	ldr	r3, [r4, #16]
 8009158:	b94b      	cbnz	r3, 800916e <__swsetup_r+0x7a>
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009164:	d003      	beq.n	800916e <__swsetup_r+0x7a>
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f002 fc07 	bl	800b97c <__smakebuf_r>
 800916e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009172:	f013 0201 	ands.w	r2, r3, #1
 8009176:	d00a      	beq.n	800918e <__swsetup_r+0x9a>
 8009178:	2200      	movs	r2, #0
 800917a:	60a2      	str	r2, [r4, #8]
 800917c:	6962      	ldr	r2, [r4, #20]
 800917e:	4252      	negs	r2, r2
 8009180:	61a2      	str	r2, [r4, #24]
 8009182:	6922      	ldr	r2, [r4, #16]
 8009184:	b942      	cbnz	r2, 8009198 <__swsetup_r+0xa4>
 8009186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800918a:	d1c5      	bne.n	8009118 <__swsetup_r+0x24>
 800918c:	bd38      	pop	{r3, r4, r5, pc}
 800918e:	0799      	lsls	r1, r3, #30
 8009190:	bf58      	it	pl
 8009192:	6962      	ldrpl	r2, [r4, #20]
 8009194:	60a2      	str	r2, [r4, #8]
 8009196:	e7f4      	b.n	8009182 <__swsetup_r+0x8e>
 8009198:	2000      	movs	r0, #0
 800919a:	e7f7      	b.n	800918c <__swsetup_r+0x98>
 800919c:	20000184 	.word	0x20000184

080091a0 <memset>:
 80091a0:	4402      	add	r2, r0
 80091a2:	4603      	mov	r3, r0
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d100      	bne.n	80091aa <memset+0xa>
 80091a8:	4770      	bx	lr
 80091aa:	f803 1b01 	strb.w	r1, [r3], #1
 80091ae:	e7f9      	b.n	80091a4 <memset+0x4>

080091b0 <strncmp>:
 80091b0:	b510      	push	{r4, lr}
 80091b2:	b16a      	cbz	r2, 80091d0 <strncmp+0x20>
 80091b4:	3901      	subs	r1, #1
 80091b6:	1884      	adds	r4, r0, r2
 80091b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091bc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d103      	bne.n	80091cc <strncmp+0x1c>
 80091c4:	42a0      	cmp	r0, r4
 80091c6:	d001      	beq.n	80091cc <strncmp+0x1c>
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	d1f5      	bne.n	80091b8 <strncmp+0x8>
 80091cc:	1ad0      	subs	r0, r2, r3
 80091ce:	bd10      	pop	{r4, pc}
 80091d0:	4610      	mov	r0, r2
 80091d2:	e7fc      	b.n	80091ce <strncmp+0x1e>

080091d4 <_localeconv_r>:
 80091d4:	4800      	ldr	r0, [pc, #0]	@ (80091d8 <_localeconv_r+0x4>)
 80091d6:	4770      	bx	lr
 80091d8:	20000108 	.word	0x20000108

080091dc <_close_r>:
 80091dc:	b538      	push	{r3, r4, r5, lr}
 80091de:	4d06      	ldr	r5, [pc, #24]	@ (80091f8 <_close_r+0x1c>)
 80091e0:	2300      	movs	r3, #0
 80091e2:	4604      	mov	r4, r0
 80091e4:	4608      	mov	r0, r1
 80091e6:	602b      	str	r3, [r5, #0]
 80091e8:	f7f8 ff1a 	bl	8002020 <_close>
 80091ec:	1c43      	adds	r3, r0, #1
 80091ee:	d102      	bne.n	80091f6 <_close_r+0x1a>
 80091f0:	682b      	ldr	r3, [r5, #0]
 80091f2:	b103      	cbz	r3, 80091f6 <_close_r+0x1a>
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	200007f0 	.word	0x200007f0

080091fc <_lseek_r>:
 80091fc:	b538      	push	{r3, r4, r5, lr}
 80091fe:	4d07      	ldr	r5, [pc, #28]	@ (800921c <_lseek_r+0x20>)
 8009200:	4604      	mov	r4, r0
 8009202:	4608      	mov	r0, r1
 8009204:	4611      	mov	r1, r2
 8009206:	2200      	movs	r2, #0
 8009208:	602a      	str	r2, [r5, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	f7f8 ff2f 	bl	800206e <_lseek>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d102      	bne.n	800921a <_lseek_r+0x1e>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	b103      	cbz	r3, 800921a <_lseek_r+0x1e>
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	bd38      	pop	{r3, r4, r5, pc}
 800921c:	200007f0 	.word	0x200007f0

08009220 <_read_r>:
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4d07      	ldr	r5, [pc, #28]	@ (8009240 <_read_r+0x20>)
 8009224:	4604      	mov	r4, r0
 8009226:	4608      	mov	r0, r1
 8009228:	4611      	mov	r1, r2
 800922a:	2200      	movs	r2, #0
 800922c:	602a      	str	r2, [r5, #0]
 800922e:	461a      	mov	r2, r3
 8009230:	f7f8 febd 	bl	8001fae <_read>
 8009234:	1c43      	adds	r3, r0, #1
 8009236:	d102      	bne.n	800923e <_read_r+0x1e>
 8009238:	682b      	ldr	r3, [r5, #0]
 800923a:	b103      	cbz	r3, 800923e <_read_r+0x1e>
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	200007f0 	.word	0x200007f0

08009244 <_write_r>:
 8009244:	b538      	push	{r3, r4, r5, lr}
 8009246:	4d07      	ldr	r5, [pc, #28]	@ (8009264 <_write_r+0x20>)
 8009248:	4604      	mov	r4, r0
 800924a:	4608      	mov	r0, r1
 800924c:	4611      	mov	r1, r2
 800924e:	2200      	movs	r2, #0
 8009250:	602a      	str	r2, [r5, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f7f8 fec8 	bl	8001fe8 <_write>
 8009258:	1c43      	adds	r3, r0, #1
 800925a:	d102      	bne.n	8009262 <_write_r+0x1e>
 800925c:	682b      	ldr	r3, [r5, #0]
 800925e:	b103      	cbz	r3, 8009262 <_write_r+0x1e>
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	bd38      	pop	{r3, r4, r5, pc}
 8009264:	200007f0 	.word	0x200007f0

08009268 <__errno>:
 8009268:	4b01      	ldr	r3, [pc, #4]	@ (8009270 <__errno+0x8>)
 800926a:	6818      	ldr	r0, [r3, #0]
 800926c:	4770      	bx	lr
 800926e:	bf00      	nop
 8009270:	20000184 	.word	0x20000184

08009274 <__libc_init_array>:
 8009274:	b570      	push	{r4, r5, r6, lr}
 8009276:	4d0d      	ldr	r5, [pc, #52]	@ (80092ac <__libc_init_array+0x38>)
 8009278:	4c0d      	ldr	r4, [pc, #52]	@ (80092b0 <__libc_init_array+0x3c>)
 800927a:	1b64      	subs	r4, r4, r5
 800927c:	10a4      	asrs	r4, r4, #2
 800927e:	2600      	movs	r6, #0
 8009280:	42a6      	cmp	r6, r4
 8009282:	d109      	bne.n	8009298 <__libc_init_array+0x24>
 8009284:	4d0b      	ldr	r5, [pc, #44]	@ (80092b4 <__libc_init_array+0x40>)
 8009286:	4c0c      	ldr	r4, [pc, #48]	@ (80092b8 <__libc_init_array+0x44>)
 8009288:	f002 fcc6 	bl	800bc18 <_init>
 800928c:	1b64      	subs	r4, r4, r5
 800928e:	10a4      	asrs	r4, r4, #2
 8009290:	2600      	movs	r6, #0
 8009292:	42a6      	cmp	r6, r4
 8009294:	d105      	bne.n	80092a2 <__libc_init_array+0x2e>
 8009296:	bd70      	pop	{r4, r5, r6, pc}
 8009298:	f855 3b04 	ldr.w	r3, [r5], #4
 800929c:	4798      	blx	r3
 800929e:	3601      	adds	r6, #1
 80092a0:	e7ee      	b.n	8009280 <__libc_init_array+0xc>
 80092a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80092a6:	4798      	blx	r3
 80092a8:	3601      	adds	r6, #1
 80092aa:	e7f2      	b.n	8009292 <__libc_init_array+0x1e>
 80092ac:	0800c0a8 	.word	0x0800c0a8
 80092b0:	0800c0a8 	.word	0x0800c0a8
 80092b4:	0800c0a8 	.word	0x0800c0a8
 80092b8:	0800c0ac 	.word	0x0800c0ac

080092bc <__retarget_lock_init_recursive>:
 80092bc:	4770      	bx	lr

080092be <__retarget_lock_acquire_recursive>:
 80092be:	4770      	bx	lr

080092c0 <__retarget_lock_release_recursive>:
 80092c0:	4770      	bx	lr

080092c2 <memcpy>:
 80092c2:	440a      	add	r2, r1
 80092c4:	4291      	cmp	r1, r2
 80092c6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092ca:	d100      	bne.n	80092ce <memcpy+0xc>
 80092cc:	4770      	bx	lr
 80092ce:	b510      	push	{r4, lr}
 80092d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092d8:	4291      	cmp	r1, r2
 80092da:	d1f9      	bne.n	80092d0 <memcpy+0xe>
 80092dc:	bd10      	pop	{r4, pc}
	...

080092e0 <nan>:
 80092e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80092e8 <nan+0x8>
 80092e4:	4770      	bx	lr
 80092e6:	bf00      	nop
 80092e8:	00000000 	.word	0x00000000
 80092ec:	7ff80000 	.word	0x7ff80000

080092f0 <nanf>:
 80092f0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80092f8 <nanf+0x8>
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	7fc00000 	.word	0x7fc00000

080092fc <quorem>:
 80092fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009300:	6903      	ldr	r3, [r0, #16]
 8009302:	690c      	ldr	r4, [r1, #16]
 8009304:	42a3      	cmp	r3, r4
 8009306:	4607      	mov	r7, r0
 8009308:	db7e      	blt.n	8009408 <quorem+0x10c>
 800930a:	3c01      	subs	r4, #1
 800930c:	f101 0814 	add.w	r8, r1, #20
 8009310:	00a3      	lsls	r3, r4, #2
 8009312:	f100 0514 	add.w	r5, r0, #20
 8009316:	9300      	str	r3, [sp, #0]
 8009318:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009326:	3301      	adds	r3, #1
 8009328:	429a      	cmp	r2, r3
 800932a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800932e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009332:	d32e      	bcc.n	8009392 <quorem+0x96>
 8009334:	f04f 0a00 	mov.w	sl, #0
 8009338:	46c4      	mov	ip, r8
 800933a:	46ae      	mov	lr, r5
 800933c:	46d3      	mov	fp, sl
 800933e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009342:	b298      	uxth	r0, r3
 8009344:	fb06 a000 	mla	r0, r6, r0, sl
 8009348:	0c02      	lsrs	r2, r0, #16
 800934a:	0c1b      	lsrs	r3, r3, #16
 800934c:	fb06 2303 	mla	r3, r6, r3, r2
 8009350:	f8de 2000 	ldr.w	r2, [lr]
 8009354:	b280      	uxth	r0, r0
 8009356:	b292      	uxth	r2, r2
 8009358:	1a12      	subs	r2, r2, r0
 800935a:	445a      	add	r2, fp
 800935c:	f8de 0000 	ldr.w	r0, [lr]
 8009360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009364:	b29b      	uxth	r3, r3
 8009366:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800936a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800936e:	b292      	uxth	r2, r2
 8009370:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009374:	45e1      	cmp	r9, ip
 8009376:	f84e 2b04 	str.w	r2, [lr], #4
 800937a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800937e:	d2de      	bcs.n	800933e <quorem+0x42>
 8009380:	9b00      	ldr	r3, [sp, #0]
 8009382:	58eb      	ldr	r3, [r5, r3]
 8009384:	b92b      	cbnz	r3, 8009392 <quorem+0x96>
 8009386:	9b01      	ldr	r3, [sp, #4]
 8009388:	3b04      	subs	r3, #4
 800938a:	429d      	cmp	r5, r3
 800938c:	461a      	mov	r2, r3
 800938e:	d32f      	bcc.n	80093f0 <quorem+0xf4>
 8009390:	613c      	str	r4, [r7, #16]
 8009392:	4638      	mov	r0, r7
 8009394:	f001 fd10 	bl	800adb8 <__mcmp>
 8009398:	2800      	cmp	r0, #0
 800939a:	db25      	blt.n	80093e8 <quorem+0xec>
 800939c:	4629      	mov	r1, r5
 800939e:	2000      	movs	r0, #0
 80093a0:	f858 2b04 	ldr.w	r2, [r8], #4
 80093a4:	f8d1 c000 	ldr.w	ip, [r1]
 80093a8:	fa1f fe82 	uxth.w	lr, r2
 80093ac:	fa1f f38c 	uxth.w	r3, ip
 80093b0:	eba3 030e 	sub.w	r3, r3, lr
 80093b4:	4403      	add	r3, r0
 80093b6:	0c12      	lsrs	r2, r2, #16
 80093b8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80093bc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093c6:	45c1      	cmp	r9, r8
 80093c8:	f841 3b04 	str.w	r3, [r1], #4
 80093cc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80093d0:	d2e6      	bcs.n	80093a0 <quorem+0xa4>
 80093d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80093d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80093da:	b922      	cbnz	r2, 80093e6 <quorem+0xea>
 80093dc:	3b04      	subs	r3, #4
 80093de:	429d      	cmp	r5, r3
 80093e0:	461a      	mov	r2, r3
 80093e2:	d30b      	bcc.n	80093fc <quorem+0x100>
 80093e4:	613c      	str	r4, [r7, #16]
 80093e6:	3601      	adds	r6, #1
 80093e8:	4630      	mov	r0, r6
 80093ea:	b003      	add	sp, #12
 80093ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f0:	6812      	ldr	r2, [r2, #0]
 80093f2:	3b04      	subs	r3, #4
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	d1cb      	bne.n	8009390 <quorem+0x94>
 80093f8:	3c01      	subs	r4, #1
 80093fa:	e7c6      	b.n	800938a <quorem+0x8e>
 80093fc:	6812      	ldr	r2, [r2, #0]
 80093fe:	3b04      	subs	r3, #4
 8009400:	2a00      	cmp	r2, #0
 8009402:	d1ef      	bne.n	80093e4 <quorem+0xe8>
 8009404:	3c01      	subs	r4, #1
 8009406:	e7ea      	b.n	80093de <quorem+0xe2>
 8009408:	2000      	movs	r0, #0
 800940a:	e7ee      	b.n	80093ea <quorem+0xee>
 800940c:	0000      	movs	r0, r0
	...

08009410 <_dtoa_r>:
 8009410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009414:	69c7      	ldr	r7, [r0, #28]
 8009416:	b099      	sub	sp, #100	@ 0x64
 8009418:	ed8d 0b02 	vstr	d0, [sp, #8]
 800941c:	ec55 4b10 	vmov	r4, r5, d0
 8009420:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009422:	9109      	str	r1, [sp, #36]	@ 0x24
 8009424:	4683      	mov	fp, r0
 8009426:	920e      	str	r2, [sp, #56]	@ 0x38
 8009428:	9313      	str	r3, [sp, #76]	@ 0x4c
 800942a:	b97f      	cbnz	r7, 800944c <_dtoa_r+0x3c>
 800942c:	2010      	movs	r0, #16
 800942e:	f001 f937 	bl	800a6a0 <malloc>
 8009432:	4602      	mov	r2, r0
 8009434:	f8cb 001c 	str.w	r0, [fp, #28]
 8009438:	b920      	cbnz	r0, 8009444 <_dtoa_r+0x34>
 800943a:	4ba7      	ldr	r3, [pc, #668]	@ (80096d8 <_dtoa_r+0x2c8>)
 800943c:	21ef      	movs	r1, #239	@ 0xef
 800943e:	48a7      	ldr	r0, [pc, #668]	@ (80096dc <_dtoa_r+0x2cc>)
 8009440:	f002 fb24 	bl	800ba8c <__assert_func>
 8009444:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009448:	6007      	str	r7, [r0, #0]
 800944a:	60c7      	str	r7, [r0, #12]
 800944c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009450:	6819      	ldr	r1, [r3, #0]
 8009452:	b159      	cbz	r1, 800946c <_dtoa_r+0x5c>
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	604a      	str	r2, [r1, #4]
 8009458:	2301      	movs	r3, #1
 800945a:	4093      	lsls	r3, r2
 800945c:	608b      	str	r3, [r1, #8]
 800945e:	4658      	mov	r0, fp
 8009460:	f001 fa26 	bl	800a8b0 <_Bfree>
 8009464:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009468:	2200      	movs	r2, #0
 800946a:	601a      	str	r2, [r3, #0]
 800946c:	1e2b      	subs	r3, r5, #0
 800946e:	bfb9      	ittee	lt
 8009470:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009474:	9303      	strlt	r3, [sp, #12]
 8009476:	2300      	movge	r3, #0
 8009478:	6033      	strge	r3, [r6, #0]
 800947a:	9f03      	ldr	r7, [sp, #12]
 800947c:	4b98      	ldr	r3, [pc, #608]	@ (80096e0 <_dtoa_r+0x2d0>)
 800947e:	bfbc      	itt	lt
 8009480:	2201      	movlt	r2, #1
 8009482:	6032      	strlt	r2, [r6, #0]
 8009484:	43bb      	bics	r3, r7
 8009486:	d112      	bne.n	80094ae <_dtoa_r+0x9e>
 8009488:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800948a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009494:	4323      	orrs	r3, r4
 8009496:	f000 854d 	beq.w	8009f34 <_dtoa_r+0xb24>
 800949a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800949c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80096f4 <_dtoa_r+0x2e4>
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	f000 854f 	beq.w	8009f44 <_dtoa_r+0xb34>
 80094a6:	f10a 0303 	add.w	r3, sl, #3
 80094aa:	f000 bd49 	b.w	8009f40 <_dtoa_r+0xb30>
 80094ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094b2:	2200      	movs	r2, #0
 80094b4:	ec51 0b17 	vmov	r0, r1, d7
 80094b8:	2300      	movs	r3, #0
 80094ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80094be:	f7f7 fb2b 	bl	8000b18 <__aeabi_dcmpeq>
 80094c2:	4680      	mov	r8, r0
 80094c4:	b158      	cbz	r0, 80094de <_dtoa_r+0xce>
 80094c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80094c8:	2301      	movs	r3, #1
 80094ca:	6013      	str	r3, [r2, #0]
 80094cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094ce:	b113      	cbz	r3, 80094d6 <_dtoa_r+0xc6>
 80094d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094d2:	4b84      	ldr	r3, [pc, #528]	@ (80096e4 <_dtoa_r+0x2d4>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80096f8 <_dtoa_r+0x2e8>
 80094da:	f000 bd33 	b.w	8009f44 <_dtoa_r+0xb34>
 80094de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80094e2:	aa16      	add	r2, sp, #88	@ 0x58
 80094e4:	a917      	add	r1, sp, #92	@ 0x5c
 80094e6:	4658      	mov	r0, fp
 80094e8:	f001 fd86 	bl	800aff8 <__d2b>
 80094ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80094f0:	4681      	mov	r9, r0
 80094f2:	2e00      	cmp	r6, #0
 80094f4:	d077      	beq.n	80095e6 <_dtoa_r+0x1d6>
 80094f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80094f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80094fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009500:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009504:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009508:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800950c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009510:	4619      	mov	r1, r3
 8009512:	2200      	movs	r2, #0
 8009514:	4b74      	ldr	r3, [pc, #464]	@ (80096e8 <_dtoa_r+0x2d8>)
 8009516:	f7f6 fedf 	bl	80002d8 <__aeabi_dsub>
 800951a:	a369      	add	r3, pc, #420	@ (adr r3, 80096c0 <_dtoa_r+0x2b0>)
 800951c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009520:	f7f7 f892 	bl	8000648 <__aeabi_dmul>
 8009524:	a368      	add	r3, pc, #416	@ (adr r3, 80096c8 <_dtoa_r+0x2b8>)
 8009526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800952a:	f7f6 fed7 	bl	80002dc <__adddf3>
 800952e:	4604      	mov	r4, r0
 8009530:	4630      	mov	r0, r6
 8009532:	460d      	mov	r5, r1
 8009534:	f7f7 f81e 	bl	8000574 <__aeabi_i2d>
 8009538:	a365      	add	r3, pc, #404	@ (adr r3, 80096d0 <_dtoa_r+0x2c0>)
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	f7f7 f883 	bl	8000648 <__aeabi_dmul>
 8009542:	4602      	mov	r2, r0
 8009544:	460b      	mov	r3, r1
 8009546:	4620      	mov	r0, r4
 8009548:	4629      	mov	r1, r5
 800954a:	f7f6 fec7 	bl	80002dc <__adddf3>
 800954e:	4604      	mov	r4, r0
 8009550:	460d      	mov	r5, r1
 8009552:	f7f7 fb29 	bl	8000ba8 <__aeabi_d2iz>
 8009556:	2200      	movs	r2, #0
 8009558:	4607      	mov	r7, r0
 800955a:	2300      	movs	r3, #0
 800955c:	4620      	mov	r0, r4
 800955e:	4629      	mov	r1, r5
 8009560:	f7f7 fae4 	bl	8000b2c <__aeabi_dcmplt>
 8009564:	b140      	cbz	r0, 8009578 <_dtoa_r+0x168>
 8009566:	4638      	mov	r0, r7
 8009568:	f7f7 f804 	bl	8000574 <__aeabi_i2d>
 800956c:	4622      	mov	r2, r4
 800956e:	462b      	mov	r3, r5
 8009570:	f7f7 fad2 	bl	8000b18 <__aeabi_dcmpeq>
 8009574:	b900      	cbnz	r0, 8009578 <_dtoa_r+0x168>
 8009576:	3f01      	subs	r7, #1
 8009578:	2f16      	cmp	r7, #22
 800957a:	d851      	bhi.n	8009620 <_dtoa_r+0x210>
 800957c:	4b5b      	ldr	r3, [pc, #364]	@ (80096ec <_dtoa_r+0x2dc>)
 800957e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800958a:	f7f7 facf 	bl	8000b2c <__aeabi_dcmplt>
 800958e:	2800      	cmp	r0, #0
 8009590:	d048      	beq.n	8009624 <_dtoa_r+0x214>
 8009592:	3f01      	subs	r7, #1
 8009594:	2300      	movs	r3, #0
 8009596:	9312      	str	r3, [sp, #72]	@ 0x48
 8009598:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800959a:	1b9b      	subs	r3, r3, r6
 800959c:	1e5a      	subs	r2, r3, #1
 800959e:	bf44      	itt	mi
 80095a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80095a4:	2300      	movmi	r3, #0
 80095a6:	9208      	str	r2, [sp, #32]
 80095a8:	bf54      	ite	pl
 80095aa:	f04f 0800 	movpl.w	r8, #0
 80095ae:	9308      	strmi	r3, [sp, #32]
 80095b0:	2f00      	cmp	r7, #0
 80095b2:	db39      	blt.n	8009628 <_dtoa_r+0x218>
 80095b4:	9b08      	ldr	r3, [sp, #32]
 80095b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80095b8:	443b      	add	r3, r7
 80095ba:	9308      	str	r3, [sp, #32]
 80095bc:	2300      	movs	r3, #0
 80095be:	930a      	str	r3, [sp, #40]	@ 0x28
 80095c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095c2:	2b09      	cmp	r3, #9
 80095c4:	d864      	bhi.n	8009690 <_dtoa_r+0x280>
 80095c6:	2b05      	cmp	r3, #5
 80095c8:	bfc4      	itt	gt
 80095ca:	3b04      	subgt	r3, #4
 80095cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80095ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d0:	f1a3 0302 	sub.w	r3, r3, #2
 80095d4:	bfcc      	ite	gt
 80095d6:	2400      	movgt	r4, #0
 80095d8:	2401      	movle	r4, #1
 80095da:	2b03      	cmp	r3, #3
 80095dc:	d863      	bhi.n	80096a6 <_dtoa_r+0x296>
 80095de:	e8df f003 	tbb	[pc, r3]
 80095e2:	372a      	.short	0x372a
 80095e4:	5535      	.short	0x5535
 80095e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80095ea:	441e      	add	r6, r3
 80095ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80095f0:	2b20      	cmp	r3, #32
 80095f2:	bfc1      	itttt	gt
 80095f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80095f8:	409f      	lslgt	r7, r3
 80095fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80095fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009602:	bfd6      	itet	le
 8009604:	f1c3 0320 	rsble	r3, r3, #32
 8009608:	ea47 0003 	orrgt.w	r0, r7, r3
 800960c:	fa04 f003 	lslle.w	r0, r4, r3
 8009610:	f7f6 ffa0 	bl	8000554 <__aeabi_ui2d>
 8009614:	2201      	movs	r2, #1
 8009616:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800961a:	3e01      	subs	r6, #1
 800961c:	9214      	str	r2, [sp, #80]	@ 0x50
 800961e:	e777      	b.n	8009510 <_dtoa_r+0x100>
 8009620:	2301      	movs	r3, #1
 8009622:	e7b8      	b.n	8009596 <_dtoa_r+0x186>
 8009624:	9012      	str	r0, [sp, #72]	@ 0x48
 8009626:	e7b7      	b.n	8009598 <_dtoa_r+0x188>
 8009628:	427b      	negs	r3, r7
 800962a:	930a      	str	r3, [sp, #40]	@ 0x28
 800962c:	2300      	movs	r3, #0
 800962e:	eba8 0807 	sub.w	r8, r8, r7
 8009632:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009634:	e7c4      	b.n	80095c0 <_dtoa_r+0x1b0>
 8009636:	2300      	movs	r3, #0
 8009638:	930b      	str	r3, [sp, #44]	@ 0x2c
 800963a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800963c:	2b00      	cmp	r3, #0
 800963e:	dc35      	bgt.n	80096ac <_dtoa_r+0x29c>
 8009640:	2301      	movs	r3, #1
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	9307      	str	r3, [sp, #28]
 8009646:	461a      	mov	r2, r3
 8009648:	920e      	str	r2, [sp, #56]	@ 0x38
 800964a:	e00b      	b.n	8009664 <_dtoa_r+0x254>
 800964c:	2301      	movs	r3, #1
 800964e:	e7f3      	b.n	8009638 <_dtoa_r+0x228>
 8009650:	2300      	movs	r3, #0
 8009652:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009654:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009656:	18fb      	adds	r3, r7, r3
 8009658:	9300      	str	r3, [sp, #0]
 800965a:	3301      	adds	r3, #1
 800965c:	2b01      	cmp	r3, #1
 800965e:	9307      	str	r3, [sp, #28]
 8009660:	bfb8      	it	lt
 8009662:	2301      	movlt	r3, #1
 8009664:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009668:	2100      	movs	r1, #0
 800966a:	2204      	movs	r2, #4
 800966c:	f102 0514 	add.w	r5, r2, #20
 8009670:	429d      	cmp	r5, r3
 8009672:	d91f      	bls.n	80096b4 <_dtoa_r+0x2a4>
 8009674:	6041      	str	r1, [r0, #4]
 8009676:	4658      	mov	r0, fp
 8009678:	f001 f8da 	bl	800a830 <_Balloc>
 800967c:	4682      	mov	sl, r0
 800967e:	2800      	cmp	r0, #0
 8009680:	d13c      	bne.n	80096fc <_dtoa_r+0x2ec>
 8009682:	4b1b      	ldr	r3, [pc, #108]	@ (80096f0 <_dtoa_r+0x2e0>)
 8009684:	4602      	mov	r2, r0
 8009686:	f240 11af 	movw	r1, #431	@ 0x1af
 800968a:	e6d8      	b.n	800943e <_dtoa_r+0x2e>
 800968c:	2301      	movs	r3, #1
 800968e:	e7e0      	b.n	8009652 <_dtoa_r+0x242>
 8009690:	2401      	movs	r4, #1
 8009692:	2300      	movs	r3, #0
 8009694:	9309      	str	r3, [sp, #36]	@ 0x24
 8009696:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009698:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	9307      	str	r3, [sp, #28]
 80096a0:	2200      	movs	r2, #0
 80096a2:	2312      	movs	r3, #18
 80096a4:	e7d0      	b.n	8009648 <_dtoa_r+0x238>
 80096a6:	2301      	movs	r3, #1
 80096a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80096aa:	e7f5      	b.n	8009698 <_dtoa_r+0x288>
 80096ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	9307      	str	r3, [sp, #28]
 80096b2:	e7d7      	b.n	8009664 <_dtoa_r+0x254>
 80096b4:	3101      	adds	r1, #1
 80096b6:	0052      	lsls	r2, r2, #1
 80096b8:	e7d8      	b.n	800966c <_dtoa_r+0x25c>
 80096ba:	bf00      	nop
 80096bc:	f3af 8000 	nop.w
 80096c0:	636f4361 	.word	0x636f4361
 80096c4:	3fd287a7 	.word	0x3fd287a7
 80096c8:	8b60c8b3 	.word	0x8b60c8b3
 80096cc:	3fc68a28 	.word	0x3fc68a28
 80096d0:	509f79fb 	.word	0x509f79fb
 80096d4:	3fd34413 	.word	0x3fd34413
 80096d8:	0800bd16 	.word	0x0800bd16
 80096dc:	0800bd2d 	.word	0x0800bd2d
 80096e0:	7ff00000 	.word	0x7ff00000
 80096e4:	0800bcd9 	.word	0x0800bcd9
 80096e8:	3ff80000 	.word	0x3ff80000
 80096ec:	0800be88 	.word	0x0800be88
 80096f0:	0800bd85 	.word	0x0800bd85
 80096f4:	0800bd12 	.word	0x0800bd12
 80096f8:	0800bcd8 	.word	0x0800bcd8
 80096fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009700:	6018      	str	r0, [r3, #0]
 8009702:	9b07      	ldr	r3, [sp, #28]
 8009704:	2b0e      	cmp	r3, #14
 8009706:	f200 80a4 	bhi.w	8009852 <_dtoa_r+0x442>
 800970a:	2c00      	cmp	r4, #0
 800970c:	f000 80a1 	beq.w	8009852 <_dtoa_r+0x442>
 8009710:	2f00      	cmp	r7, #0
 8009712:	dd33      	ble.n	800977c <_dtoa_r+0x36c>
 8009714:	4bad      	ldr	r3, [pc, #692]	@ (80099cc <_dtoa_r+0x5bc>)
 8009716:	f007 020f 	and.w	r2, r7, #15
 800971a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800971e:	ed93 7b00 	vldr	d7, [r3]
 8009722:	05f8      	lsls	r0, r7, #23
 8009724:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009728:	ea4f 1427 	mov.w	r4, r7, asr #4
 800972c:	d516      	bpl.n	800975c <_dtoa_r+0x34c>
 800972e:	4ba8      	ldr	r3, [pc, #672]	@ (80099d0 <_dtoa_r+0x5c0>)
 8009730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009734:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009738:	f7f7 f8b0 	bl	800089c <__aeabi_ddiv>
 800973c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009740:	f004 040f 	and.w	r4, r4, #15
 8009744:	2603      	movs	r6, #3
 8009746:	4da2      	ldr	r5, [pc, #648]	@ (80099d0 <_dtoa_r+0x5c0>)
 8009748:	b954      	cbnz	r4, 8009760 <_dtoa_r+0x350>
 800974a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800974e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009752:	f7f7 f8a3 	bl	800089c <__aeabi_ddiv>
 8009756:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800975a:	e028      	b.n	80097ae <_dtoa_r+0x39e>
 800975c:	2602      	movs	r6, #2
 800975e:	e7f2      	b.n	8009746 <_dtoa_r+0x336>
 8009760:	07e1      	lsls	r1, r4, #31
 8009762:	d508      	bpl.n	8009776 <_dtoa_r+0x366>
 8009764:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009768:	e9d5 2300 	ldrd	r2, r3, [r5]
 800976c:	f7f6 ff6c 	bl	8000648 <__aeabi_dmul>
 8009770:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009774:	3601      	adds	r6, #1
 8009776:	1064      	asrs	r4, r4, #1
 8009778:	3508      	adds	r5, #8
 800977a:	e7e5      	b.n	8009748 <_dtoa_r+0x338>
 800977c:	f000 80d2 	beq.w	8009924 <_dtoa_r+0x514>
 8009780:	427c      	negs	r4, r7
 8009782:	4b92      	ldr	r3, [pc, #584]	@ (80099cc <_dtoa_r+0x5bc>)
 8009784:	4d92      	ldr	r5, [pc, #584]	@ (80099d0 <_dtoa_r+0x5c0>)
 8009786:	f004 020f 	and.w	r2, r4, #15
 800978a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800978e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009796:	f7f6 ff57 	bl	8000648 <__aeabi_dmul>
 800979a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800979e:	1124      	asrs	r4, r4, #4
 80097a0:	2300      	movs	r3, #0
 80097a2:	2602      	movs	r6, #2
 80097a4:	2c00      	cmp	r4, #0
 80097a6:	f040 80b2 	bne.w	800990e <_dtoa_r+0x4fe>
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d1d3      	bne.n	8009756 <_dtoa_r+0x346>
 80097ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	f000 80b7 	beq.w	8009928 <_dtoa_r+0x518>
 80097ba:	4b86      	ldr	r3, [pc, #536]	@ (80099d4 <_dtoa_r+0x5c4>)
 80097bc:	2200      	movs	r2, #0
 80097be:	4620      	mov	r0, r4
 80097c0:	4629      	mov	r1, r5
 80097c2:	f7f7 f9b3 	bl	8000b2c <__aeabi_dcmplt>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f000 80ae 	beq.w	8009928 <_dtoa_r+0x518>
 80097cc:	9b07      	ldr	r3, [sp, #28]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	f000 80aa 	beq.w	8009928 <_dtoa_r+0x518>
 80097d4:	9b00      	ldr	r3, [sp, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	dd37      	ble.n	800984a <_dtoa_r+0x43a>
 80097da:	1e7b      	subs	r3, r7, #1
 80097dc:	9304      	str	r3, [sp, #16]
 80097de:	4620      	mov	r0, r4
 80097e0:	4b7d      	ldr	r3, [pc, #500]	@ (80099d8 <_dtoa_r+0x5c8>)
 80097e2:	2200      	movs	r2, #0
 80097e4:	4629      	mov	r1, r5
 80097e6:	f7f6 ff2f 	bl	8000648 <__aeabi_dmul>
 80097ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80097ee:	9c00      	ldr	r4, [sp, #0]
 80097f0:	3601      	adds	r6, #1
 80097f2:	4630      	mov	r0, r6
 80097f4:	f7f6 febe 	bl	8000574 <__aeabi_i2d>
 80097f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097fc:	f7f6 ff24 	bl	8000648 <__aeabi_dmul>
 8009800:	4b76      	ldr	r3, [pc, #472]	@ (80099dc <_dtoa_r+0x5cc>)
 8009802:	2200      	movs	r2, #0
 8009804:	f7f6 fd6a 	bl	80002dc <__adddf3>
 8009808:	4605      	mov	r5, r0
 800980a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800980e:	2c00      	cmp	r4, #0
 8009810:	f040 808d 	bne.w	800992e <_dtoa_r+0x51e>
 8009814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009818:	4b71      	ldr	r3, [pc, #452]	@ (80099e0 <_dtoa_r+0x5d0>)
 800981a:	2200      	movs	r2, #0
 800981c:	f7f6 fd5c 	bl	80002d8 <__aeabi_dsub>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009828:	462a      	mov	r2, r5
 800982a:	4633      	mov	r3, r6
 800982c:	f7f7 f99c 	bl	8000b68 <__aeabi_dcmpgt>
 8009830:	2800      	cmp	r0, #0
 8009832:	f040 828b 	bne.w	8009d4c <_dtoa_r+0x93c>
 8009836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800983a:	462a      	mov	r2, r5
 800983c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009840:	f7f7 f974 	bl	8000b2c <__aeabi_dcmplt>
 8009844:	2800      	cmp	r0, #0
 8009846:	f040 8128 	bne.w	8009a9a <_dtoa_r+0x68a>
 800984a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800984e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009852:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009854:	2b00      	cmp	r3, #0
 8009856:	f2c0 815a 	blt.w	8009b0e <_dtoa_r+0x6fe>
 800985a:	2f0e      	cmp	r7, #14
 800985c:	f300 8157 	bgt.w	8009b0e <_dtoa_r+0x6fe>
 8009860:	4b5a      	ldr	r3, [pc, #360]	@ (80099cc <_dtoa_r+0x5bc>)
 8009862:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009866:	ed93 7b00 	vldr	d7, [r3]
 800986a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800986c:	2b00      	cmp	r3, #0
 800986e:	ed8d 7b00 	vstr	d7, [sp]
 8009872:	da03      	bge.n	800987c <_dtoa_r+0x46c>
 8009874:	9b07      	ldr	r3, [sp, #28]
 8009876:	2b00      	cmp	r3, #0
 8009878:	f340 8101 	ble.w	8009a7e <_dtoa_r+0x66e>
 800987c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009880:	4656      	mov	r6, sl
 8009882:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009886:	4620      	mov	r0, r4
 8009888:	4629      	mov	r1, r5
 800988a:	f7f7 f807 	bl	800089c <__aeabi_ddiv>
 800988e:	f7f7 f98b 	bl	8000ba8 <__aeabi_d2iz>
 8009892:	4680      	mov	r8, r0
 8009894:	f7f6 fe6e 	bl	8000574 <__aeabi_i2d>
 8009898:	e9dd 2300 	ldrd	r2, r3, [sp]
 800989c:	f7f6 fed4 	bl	8000648 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4620      	mov	r0, r4
 80098a6:	4629      	mov	r1, r5
 80098a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80098ac:	f7f6 fd14 	bl	80002d8 <__aeabi_dsub>
 80098b0:	f806 4b01 	strb.w	r4, [r6], #1
 80098b4:	9d07      	ldr	r5, [sp, #28]
 80098b6:	eba6 040a 	sub.w	r4, r6, sl
 80098ba:	42a5      	cmp	r5, r4
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	f040 8117 	bne.w	8009af2 <_dtoa_r+0x6e2>
 80098c4:	f7f6 fd0a 	bl	80002dc <__adddf3>
 80098c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098cc:	4604      	mov	r4, r0
 80098ce:	460d      	mov	r5, r1
 80098d0:	f7f7 f94a 	bl	8000b68 <__aeabi_dcmpgt>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f040 80f9 	bne.w	8009acc <_dtoa_r+0x6bc>
 80098da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098de:	4620      	mov	r0, r4
 80098e0:	4629      	mov	r1, r5
 80098e2:	f7f7 f919 	bl	8000b18 <__aeabi_dcmpeq>
 80098e6:	b118      	cbz	r0, 80098f0 <_dtoa_r+0x4e0>
 80098e8:	f018 0f01 	tst.w	r8, #1
 80098ec:	f040 80ee 	bne.w	8009acc <_dtoa_r+0x6bc>
 80098f0:	4649      	mov	r1, r9
 80098f2:	4658      	mov	r0, fp
 80098f4:	f000 ffdc 	bl	800a8b0 <_Bfree>
 80098f8:	2300      	movs	r3, #0
 80098fa:	7033      	strb	r3, [r6, #0]
 80098fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098fe:	3701      	adds	r7, #1
 8009900:	601f      	str	r7, [r3, #0]
 8009902:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 831d 	beq.w	8009f44 <_dtoa_r+0xb34>
 800990a:	601e      	str	r6, [r3, #0]
 800990c:	e31a      	b.n	8009f44 <_dtoa_r+0xb34>
 800990e:	07e2      	lsls	r2, r4, #31
 8009910:	d505      	bpl.n	800991e <_dtoa_r+0x50e>
 8009912:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009916:	f7f6 fe97 	bl	8000648 <__aeabi_dmul>
 800991a:	3601      	adds	r6, #1
 800991c:	2301      	movs	r3, #1
 800991e:	1064      	asrs	r4, r4, #1
 8009920:	3508      	adds	r5, #8
 8009922:	e73f      	b.n	80097a4 <_dtoa_r+0x394>
 8009924:	2602      	movs	r6, #2
 8009926:	e742      	b.n	80097ae <_dtoa_r+0x39e>
 8009928:	9c07      	ldr	r4, [sp, #28]
 800992a:	9704      	str	r7, [sp, #16]
 800992c:	e761      	b.n	80097f2 <_dtoa_r+0x3e2>
 800992e:	4b27      	ldr	r3, [pc, #156]	@ (80099cc <_dtoa_r+0x5bc>)
 8009930:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009932:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009936:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800993a:	4454      	add	r4, sl
 800993c:	2900      	cmp	r1, #0
 800993e:	d053      	beq.n	80099e8 <_dtoa_r+0x5d8>
 8009940:	4928      	ldr	r1, [pc, #160]	@ (80099e4 <_dtoa_r+0x5d4>)
 8009942:	2000      	movs	r0, #0
 8009944:	f7f6 ffaa 	bl	800089c <__aeabi_ddiv>
 8009948:	4633      	mov	r3, r6
 800994a:	462a      	mov	r2, r5
 800994c:	f7f6 fcc4 	bl	80002d8 <__aeabi_dsub>
 8009950:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009954:	4656      	mov	r6, sl
 8009956:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800995a:	f7f7 f925 	bl	8000ba8 <__aeabi_d2iz>
 800995e:	4605      	mov	r5, r0
 8009960:	f7f6 fe08 	bl	8000574 <__aeabi_i2d>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800996c:	f7f6 fcb4 	bl	80002d8 <__aeabi_dsub>
 8009970:	3530      	adds	r5, #48	@ 0x30
 8009972:	4602      	mov	r2, r0
 8009974:	460b      	mov	r3, r1
 8009976:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800997a:	f806 5b01 	strb.w	r5, [r6], #1
 800997e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009982:	f7f7 f8d3 	bl	8000b2c <__aeabi_dcmplt>
 8009986:	2800      	cmp	r0, #0
 8009988:	d171      	bne.n	8009a6e <_dtoa_r+0x65e>
 800998a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800998e:	4911      	ldr	r1, [pc, #68]	@ (80099d4 <_dtoa_r+0x5c4>)
 8009990:	2000      	movs	r0, #0
 8009992:	f7f6 fca1 	bl	80002d8 <__aeabi_dsub>
 8009996:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800999a:	f7f7 f8c7 	bl	8000b2c <__aeabi_dcmplt>
 800999e:	2800      	cmp	r0, #0
 80099a0:	f040 8095 	bne.w	8009ace <_dtoa_r+0x6be>
 80099a4:	42a6      	cmp	r6, r4
 80099a6:	f43f af50 	beq.w	800984a <_dtoa_r+0x43a>
 80099aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80099ae:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <_dtoa_r+0x5c8>)
 80099b0:	2200      	movs	r2, #0
 80099b2:	f7f6 fe49 	bl	8000648 <__aeabi_dmul>
 80099b6:	4b08      	ldr	r3, [pc, #32]	@ (80099d8 <_dtoa_r+0x5c8>)
 80099b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099bc:	2200      	movs	r2, #0
 80099be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099c2:	f7f6 fe41 	bl	8000648 <__aeabi_dmul>
 80099c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099ca:	e7c4      	b.n	8009956 <_dtoa_r+0x546>
 80099cc:	0800be88 	.word	0x0800be88
 80099d0:	0800be60 	.word	0x0800be60
 80099d4:	3ff00000 	.word	0x3ff00000
 80099d8:	40240000 	.word	0x40240000
 80099dc:	401c0000 	.word	0x401c0000
 80099e0:	40140000 	.word	0x40140000
 80099e4:	3fe00000 	.word	0x3fe00000
 80099e8:	4631      	mov	r1, r6
 80099ea:	4628      	mov	r0, r5
 80099ec:	f7f6 fe2c 	bl	8000648 <__aeabi_dmul>
 80099f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80099f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80099f6:	4656      	mov	r6, sl
 80099f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fc:	f7f7 f8d4 	bl	8000ba8 <__aeabi_d2iz>
 8009a00:	4605      	mov	r5, r0
 8009a02:	f7f6 fdb7 	bl	8000574 <__aeabi_i2d>
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a0e:	f7f6 fc63 	bl	80002d8 <__aeabi_dsub>
 8009a12:	3530      	adds	r5, #48	@ 0x30
 8009a14:	f806 5b01 	strb.w	r5, [r6], #1
 8009a18:	4602      	mov	r2, r0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	42a6      	cmp	r6, r4
 8009a1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a22:	f04f 0200 	mov.w	r2, #0
 8009a26:	d124      	bne.n	8009a72 <_dtoa_r+0x662>
 8009a28:	4bac      	ldr	r3, [pc, #688]	@ (8009cdc <_dtoa_r+0x8cc>)
 8009a2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009a2e:	f7f6 fc55 	bl	80002dc <__adddf3>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a3a:	f7f7 f895 	bl	8000b68 <__aeabi_dcmpgt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	d145      	bne.n	8009ace <_dtoa_r+0x6be>
 8009a42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009a46:	49a5      	ldr	r1, [pc, #660]	@ (8009cdc <_dtoa_r+0x8cc>)
 8009a48:	2000      	movs	r0, #0
 8009a4a:	f7f6 fc45 	bl	80002d8 <__aeabi_dsub>
 8009a4e:	4602      	mov	r2, r0
 8009a50:	460b      	mov	r3, r1
 8009a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a56:	f7f7 f869 	bl	8000b2c <__aeabi_dcmplt>
 8009a5a:	2800      	cmp	r0, #0
 8009a5c:	f43f aef5 	beq.w	800984a <_dtoa_r+0x43a>
 8009a60:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009a62:	1e73      	subs	r3, r6, #1
 8009a64:	9315      	str	r3, [sp, #84]	@ 0x54
 8009a66:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009a6a:	2b30      	cmp	r3, #48	@ 0x30
 8009a6c:	d0f8      	beq.n	8009a60 <_dtoa_r+0x650>
 8009a6e:	9f04      	ldr	r7, [sp, #16]
 8009a70:	e73e      	b.n	80098f0 <_dtoa_r+0x4e0>
 8009a72:	4b9b      	ldr	r3, [pc, #620]	@ (8009ce0 <_dtoa_r+0x8d0>)
 8009a74:	f7f6 fde8 	bl	8000648 <__aeabi_dmul>
 8009a78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a7c:	e7bc      	b.n	80099f8 <_dtoa_r+0x5e8>
 8009a7e:	d10c      	bne.n	8009a9a <_dtoa_r+0x68a>
 8009a80:	4b98      	ldr	r3, [pc, #608]	@ (8009ce4 <_dtoa_r+0x8d4>)
 8009a82:	2200      	movs	r2, #0
 8009a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a88:	f7f6 fdde 	bl	8000648 <__aeabi_dmul>
 8009a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a90:	f7f7 f860 	bl	8000b54 <__aeabi_dcmpge>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f000 8157 	beq.w	8009d48 <_dtoa_r+0x938>
 8009a9a:	2400      	movs	r4, #0
 8009a9c:	4625      	mov	r5, r4
 8009a9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aa0:	43db      	mvns	r3, r3
 8009aa2:	9304      	str	r3, [sp, #16]
 8009aa4:	4656      	mov	r6, sl
 8009aa6:	2700      	movs	r7, #0
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4658      	mov	r0, fp
 8009aac:	f000 ff00 	bl	800a8b0 <_Bfree>
 8009ab0:	2d00      	cmp	r5, #0
 8009ab2:	d0dc      	beq.n	8009a6e <_dtoa_r+0x65e>
 8009ab4:	b12f      	cbz	r7, 8009ac2 <_dtoa_r+0x6b2>
 8009ab6:	42af      	cmp	r7, r5
 8009ab8:	d003      	beq.n	8009ac2 <_dtoa_r+0x6b2>
 8009aba:	4639      	mov	r1, r7
 8009abc:	4658      	mov	r0, fp
 8009abe:	f000 fef7 	bl	800a8b0 <_Bfree>
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4658      	mov	r0, fp
 8009ac6:	f000 fef3 	bl	800a8b0 <_Bfree>
 8009aca:	e7d0      	b.n	8009a6e <_dtoa_r+0x65e>
 8009acc:	9704      	str	r7, [sp, #16]
 8009ace:	4633      	mov	r3, r6
 8009ad0:	461e      	mov	r6, r3
 8009ad2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ad6:	2a39      	cmp	r2, #57	@ 0x39
 8009ad8:	d107      	bne.n	8009aea <_dtoa_r+0x6da>
 8009ada:	459a      	cmp	sl, r3
 8009adc:	d1f8      	bne.n	8009ad0 <_dtoa_r+0x6c0>
 8009ade:	9a04      	ldr	r2, [sp, #16]
 8009ae0:	3201      	adds	r2, #1
 8009ae2:	9204      	str	r2, [sp, #16]
 8009ae4:	2230      	movs	r2, #48	@ 0x30
 8009ae6:	f88a 2000 	strb.w	r2, [sl]
 8009aea:	781a      	ldrb	r2, [r3, #0]
 8009aec:	3201      	adds	r2, #1
 8009aee:	701a      	strb	r2, [r3, #0]
 8009af0:	e7bd      	b.n	8009a6e <_dtoa_r+0x65e>
 8009af2:	4b7b      	ldr	r3, [pc, #492]	@ (8009ce0 <_dtoa_r+0x8d0>)
 8009af4:	2200      	movs	r2, #0
 8009af6:	f7f6 fda7 	bl	8000648 <__aeabi_dmul>
 8009afa:	2200      	movs	r2, #0
 8009afc:	2300      	movs	r3, #0
 8009afe:	4604      	mov	r4, r0
 8009b00:	460d      	mov	r5, r1
 8009b02:	f7f7 f809 	bl	8000b18 <__aeabi_dcmpeq>
 8009b06:	2800      	cmp	r0, #0
 8009b08:	f43f aebb 	beq.w	8009882 <_dtoa_r+0x472>
 8009b0c:	e6f0      	b.n	80098f0 <_dtoa_r+0x4e0>
 8009b0e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	f000 80db 	beq.w	8009ccc <_dtoa_r+0x8bc>
 8009b16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009b18:	2a01      	cmp	r2, #1
 8009b1a:	f300 80bf 	bgt.w	8009c9c <_dtoa_r+0x88c>
 8009b1e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009b20:	2a00      	cmp	r2, #0
 8009b22:	f000 80b7 	beq.w	8009c94 <_dtoa_r+0x884>
 8009b26:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009b2a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009b2c:	4646      	mov	r6, r8
 8009b2e:	9a08      	ldr	r2, [sp, #32]
 8009b30:	2101      	movs	r1, #1
 8009b32:	441a      	add	r2, r3
 8009b34:	4658      	mov	r0, fp
 8009b36:	4498      	add	r8, r3
 8009b38:	9208      	str	r2, [sp, #32]
 8009b3a:	f000 ffb7 	bl	800aaac <__i2b>
 8009b3e:	4605      	mov	r5, r0
 8009b40:	b15e      	cbz	r6, 8009b5a <_dtoa_r+0x74a>
 8009b42:	9b08      	ldr	r3, [sp, #32]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	dd08      	ble.n	8009b5a <_dtoa_r+0x74a>
 8009b48:	42b3      	cmp	r3, r6
 8009b4a:	9a08      	ldr	r2, [sp, #32]
 8009b4c:	bfa8      	it	ge
 8009b4e:	4633      	movge	r3, r6
 8009b50:	eba8 0803 	sub.w	r8, r8, r3
 8009b54:	1af6      	subs	r6, r6, r3
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	9308      	str	r3, [sp, #32]
 8009b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5c:	b1f3      	cbz	r3, 8009b9c <_dtoa_r+0x78c>
 8009b5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80b7 	beq.w	8009cd4 <_dtoa_r+0x8c4>
 8009b66:	b18c      	cbz	r4, 8009b8c <_dtoa_r+0x77c>
 8009b68:	4629      	mov	r1, r5
 8009b6a:	4622      	mov	r2, r4
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	f001 f85d 	bl	800ac2c <__pow5mult>
 8009b72:	464a      	mov	r2, r9
 8009b74:	4601      	mov	r1, r0
 8009b76:	4605      	mov	r5, r0
 8009b78:	4658      	mov	r0, fp
 8009b7a:	f000 ffad 	bl	800aad8 <__multiply>
 8009b7e:	4649      	mov	r1, r9
 8009b80:	9004      	str	r0, [sp, #16]
 8009b82:	4658      	mov	r0, fp
 8009b84:	f000 fe94 	bl	800a8b0 <_Bfree>
 8009b88:	9b04      	ldr	r3, [sp, #16]
 8009b8a:	4699      	mov	r9, r3
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b8e:	1b1a      	subs	r2, r3, r4
 8009b90:	d004      	beq.n	8009b9c <_dtoa_r+0x78c>
 8009b92:	4649      	mov	r1, r9
 8009b94:	4658      	mov	r0, fp
 8009b96:	f001 f849 	bl	800ac2c <__pow5mult>
 8009b9a:	4681      	mov	r9, r0
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	4658      	mov	r0, fp
 8009ba0:	f000 ff84 	bl	800aaac <__i2b>
 8009ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ba6:	4604      	mov	r4, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 81cf 	beq.w	8009f4c <_dtoa_r+0xb3c>
 8009bae:	461a      	mov	r2, r3
 8009bb0:	4601      	mov	r1, r0
 8009bb2:	4658      	mov	r0, fp
 8009bb4:	f001 f83a 	bl	800ac2c <__pow5mult>
 8009bb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	4604      	mov	r4, r0
 8009bbe:	f300 8095 	bgt.w	8009cec <_dtoa_r+0x8dc>
 8009bc2:	9b02      	ldr	r3, [sp, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	f040 8087 	bne.w	8009cd8 <_dtoa_r+0x8c8>
 8009bca:	9b03      	ldr	r3, [sp, #12]
 8009bcc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f040 8089 	bne.w	8009ce8 <_dtoa_r+0x8d8>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009bdc:	0d1b      	lsrs	r3, r3, #20
 8009bde:	051b      	lsls	r3, r3, #20
 8009be0:	b12b      	cbz	r3, 8009bee <_dtoa_r+0x7de>
 8009be2:	9b08      	ldr	r3, [sp, #32]
 8009be4:	3301      	adds	r3, #1
 8009be6:	9308      	str	r3, [sp, #32]
 8009be8:	f108 0801 	add.w	r8, r8, #1
 8009bec:	2301      	movs	r3, #1
 8009bee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009bf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	f000 81b0 	beq.w	8009f58 <_dtoa_r+0xb48>
 8009bf8:	6923      	ldr	r3, [r4, #16]
 8009bfa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009bfe:	6918      	ldr	r0, [r3, #16]
 8009c00:	f000 ff08 	bl	800aa14 <__hi0bits>
 8009c04:	f1c0 0020 	rsb	r0, r0, #32
 8009c08:	9b08      	ldr	r3, [sp, #32]
 8009c0a:	4418      	add	r0, r3
 8009c0c:	f010 001f 	ands.w	r0, r0, #31
 8009c10:	d077      	beq.n	8009d02 <_dtoa_r+0x8f2>
 8009c12:	f1c0 0320 	rsb	r3, r0, #32
 8009c16:	2b04      	cmp	r3, #4
 8009c18:	dd6b      	ble.n	8009cf2 <_dtoa_r+0x8e2>
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	f1c0 001c 	rsb	r0, r0, #28
 8009c20:	4403      	add	r3, r0
 8009c22:	4480      	add	r8, r0
 8009c24:	4406      	add	r6, r0
 8009c26:	9308      	str	r3, [sp, #32]
 8009c28:	f1b8 0f00 	cmp.w	r8, #0
 8009c2c:	dd05      	ble.n	8009c3a <_dtoa_r+0x82a>
 8009c2e:	4649      	mov	r1, r9
 8009c30:	4642      	mov	r2, r8
 8009c32:	4658      	mov	r0, fp
 8009c34:	f001 f854 	bl	800ace0 <__lshift>
 8009c38:	4681      	mov	r9, r0
 8009c3a:	9b08      	ldr	r3, [sp, #32]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	dd05      	ble.n	8009c4c <_dtoa_r+0x83c>
 8009c40:	4621      	mov	r1, r4
 8009c42:	461a      	mov	r2, r3
 8009c44:	4658      	mov	r0, fp
 8009c46:	f001 f84b 	bl	800ace0 <__lshift>
 8009c4a:	4604      	mov	r4, r0
 8009c4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d059      	beq.n	8009d06 <_dtoa_r+0x8f6>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4648      	mov	r0, r9
 8009c56:	f001 f8af 	bl	800adb8 <__mcmp>
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	da53      	bge.n	8009d06 <_dtoa_r+0x8f6>
 8009c5e:	1e7b      	subs	r3, r7, #1
 8009c60:	9304      	str	r3, [sp, #16]
 8009c62:	4649      	mov	r1, r9
 8009c64:	2300      	movs	r3, #0
 8009c66:	220a      	movs	r2, #10
 8009c68:	4658      	mov	r0, fp
 8009c6a:	f000 fe43 	bl	800a8f4 <__multadd>
 8009c6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009c70:	4681      	mov	r9, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	f000 8172 	beq.w	8009f5c <_dtoa_r+0xb4c>
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4629      	mov	r1, r5
 8009c7c:	220a      	movs	r2, #10
 8009c7e:	4658      	mov	r0, fp
 8009c80:	f000 fe38 	bl	800a8f4 <__multadd>
 8009c84:	9b00      	ldr	r3, [sp, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	4605      	mov	r5, r0
 8009c8a:	dc67      	bgt.n	8009d5c <_dtoa_r+0x94c>
 8009c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c8e:	2b02      	cmp	r3, #2
 8009c90:	dc41      	bgt.n	8009d16 <_dtoa_r+0x906>
 8009c92:	e063      	b.n	8009d5c <_dtoa_r+0x94c>
 8009c94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009c96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009c9a:	e746      	b.n	8009b2a <_dtoa_r+0x71a>
 8009c9c:	9b07      	ldr	r3, [sp, #28]
 8009c9e:	1e5c      	subs	r4, r3, #1
 8009ca0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ca2:	42a3      	cmp	r3, r4
 8009ca4:	bfbf      	itttt	lt
 8009ca6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ca8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009caa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009cac:	1ae3      	sublt	r3, r4, r3
 8009cae:	bfb4      	ite	lt
 8009cb0:	18d2      	addlt	r2, r2, r3
 8009cb2:	1b1c      	subge	r4, r3, r4
 8009cb4:	9b07      	ldr	r3, [sp, #28]
 8009cb6:	bfbc      	itt	lt
 8009cb8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009cba:	2400      	movlt	r4, #0
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	bfb5      	itete	lt
 8009cc0:	eba8 0603 	sublt.w	r6, r8, r3
 8009cc4:	9b07      	ldrge	r3, [sp, #28]
 8009cc6:	2300      	movlt	r3, #0
 8009cc8:	4646      	movge	r6, r8
 8009cca:	e730      	b.n	8009b2e <_dtoa_r+0x71e>
 8009ccc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009cce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009cd0:	4646      	mov	r6, r8
 8009cd2:	e735      	b.n	8009b40 <_dtoa_r+0x730>
 8009cd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009cd6:	e75c      	b.n	8009b92 <_dtoa_r+0x782>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	e788      	b.n	8009bee <_dtoa_r+0x7de>
 8009cdc:	3fe00000 	.word	0x3fe00000
 8009ce0:	40240000 	.word	0x40240000
 8009ce4:	40140000 	.word	0x40140000
 8009ce8:	9b02      	ldr	r3, [sp, #8]
 8009cea:	e780      	b.n	8009bee <_dtoa_r+0x7de>
 8009cec:	2300      	movs	r3, #0
 8009cee:	930a      	str	r3, [sp, #40]	@ 0x28
 8009cf0:	e782      	b.n	8009bf8 <_dtoa_r+0x7e8>
 8009cf2:	d099      	beq.n	8009c28 <_dtoa_r+0x818>
 8009cf4:	9a08      	ldr	r2, [sp, #32]
 8009cf6:	331c      	adds	r3, #28
 8009cf8:	441a      	add	r2, r3
 8009cfa:	4498      	add	r8, r3
 8009cfc:	441e      	add	r6, r3
 8009cfe:	9208      	str	r2, [sp, #32]
 8009d00:	e792      	b.n	8009c28 <_dtoa_r+0x818>
 8009d02:	4603      	mov	r3, r0
 8009d04:	e7f6      	b.n	8009cf4 <_dtoa_r+0x8e4>
 8009d06:	9b07      	ldr	r3, [sp, #28]
 8009d08:	9704      	str	r7, [sp, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	dc20      	bgt.n	8009d50 <_dtoa_r+0x940>
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d12:	2b02      	cmp	r3, #2
 8009d14:	dd1e      	ble.n	8009d54 <_dtoa_r+0x944>
 8009d16:	9b00      	ldr	r3, [sp, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	f47f aec0 	bne.w	8009a9e <_dtoa_r+0x68e>
 8009d1e:	4621      	mov	r1, r4
 8009d20:	2205      	movs	r2, #5
 8009d22:	4658      	mov	r0, fp
 8009d24:	f000 fde6 	bl	800a8f4 <__multadd>
 8009d28:	4601      	mov	r1, r0
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	4648      	mov	r0, r9
 8009d2e:	f001 f843 	bl	800adb8 <__mcmp>
 8009d32:	2800      	cmp	r0, #0
 8009d34:	f77f aeb3 	ble.w	8009a9e <_dtoa_r+0x68e>
 8009d38:	4656      	mov	r6, sl
 8009d3a:	2331      	movs	r3, #49	@ 0x31
 8009d3c:	f806 3b01 	strb.w	r3, [r6], #1
 8009d40:	9b04      	ldr	r3, [sp, #16]
 8009d42:	3301      	adds	r3, #1
 8009d44:	9304      	str	r3, [sp, #16]
 8009d46:	e6ae      	b.n	8009aa6 <_dtoa_r+0x696>
 8009d48:	9c07      	ldr	r4, [sp, #28]
 8009d4a:	9704      	str	r7, [sp, #16]
 8009d4c:	4625      	mov	r5, r4
 8009d4e:	e7f3      	b.n	8009d38 <_dtoa_r+0x928>
 8009d50:	9b07      	ldr	r3, [sp, #28]
 8009d52:	9300      	str	r3, [sp, #0]
 8009d54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f000 8104 	beq.w	8009f64 <_dtoa_r+0xb54>
 8009d5c:	2e00      	cmp	r6, #0
 8009d5e:	dd05      	ble.n	8009d6c <_dtoa_r+0x95c>
 8009d60:	4629      	mov	r1, r5
 8009d62:	4632      	mov	r2, r6
 8009d64:	4658      	mov	r0, fp
 8009d66:	f000 ffbb 	bl	800ace0 <__lshift>
 8009d6a:	4605      	mov	r5, r0
 8009d6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d05a      	beq.n	8009e28 <_dtoa_r+0xa18>
 8009d72:	6869      	ldr	r1, [r5, #4]
 8009d74:	4658      	mov	r0, fp
 8009d76:	f000 fd5b 	bl	800a830 <_Balloc>
 8009d7a:	4606      	mov	r6, r0
 8009d7c:	b928      	cbnz	r0, 8009d8a <_dtoa_r+0x97a>
 8009d7e:	4b84      	ldr	r3, [pc, #528]	@ (8009f90 <_dtoa_r+0xb80>)
 8009d80:	4602      	mov	r2, r0
 8009d82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009d86:	f7ff bb5a 	b.w	800943e <_dtoa_r+0x2e>
 8009d8a:	692a      	ldr	r2, [r5, #16]
 8009d8c:	3202      	adds	r2, #2
 8009d8e:	0092      	lsls	r2, r2, #2
 8009d90:	f105 010c 	add.w	r1, r5, #12
 8009d94:	300c      	adds	r0, #12
 8009d96:	f7ff fa94 	bl	80092c2 <memcpy>
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	4631      	mov	r1, r6
 8009d9e:	4658      	mov	r0, fp
 8009da0:	f000 ff9e 	bl	800ace0 <__lshift>
 8009da4:	f10a 0301 	add.w	r3, sl, #1
 8009da8:	9307      	str	r3, [sp, #28]
 8009daa:	9b00      	ldr	r3, [sp, #0]
 8009dac:	4453      	add	r3, sl
 8009dae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009db0:	9b02      	ldr	r3, [sp, #8]
 8009db2:	f003 0301 	and.w	r3, r3, #1
 8009db6:	462f      	mov	r7, r5
 8009db8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dba:	4605      	mov	r5, r0
 8009dbc:	9b07      	ldr	r3, [sp, #28]
 8009dbe:	4621      	mov	r1, r4
 8009dc0:	3b01      	subs	r3, #1
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	9300      	str	r3, [sp, #0]
 8009dc6:	f7ff fa99 	bl	80092fc <quorem>
 8009dca:	4639      	mov	r1, r7
 8009dcc:	9002      	str	r0, [sp, #8]
 8009dce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009dd2:	4648      	mov	r0, r9
 8009dd4:	f000 fff0 	bl	800adb8 <__mcmp>
 8009dd8:	462a      	mov	r2, r5
 8009dda:	9008      	str	r0, [sp, #32]
 8009ddc:	4621      	mov	r1, r4
 8009dde:	4658      	mov	r0, fp
 8009de0:	f001 f806 	bl	800adf0 <__mdiff>
 8009de4:	68c2      	ldr	r2, [r0, #12]
 8009de6:	4606      	mov	r6, r0
 8009de8:	bb02      	cbnz	r2, 8009e2c <_dtoa_r+0xa1c>
 8009dea:	4601      	mov	r1, r0
 8009dec:	4648      	mov	r0, r9
 8009dee:	f000 ffe3 	bl	800adb8 <__mcmp>
 8009df2:	4602      	mov	r2, r0
 8009df4:	4631      	mov	r1, r6
 8009df6:	4658      	mov	r0, fp
 8009df8:	920e      	str	r2, [sp, #56]	@ 0x38
 8009dfa:	f000 fd59 	bl	800a8b0 <_Bfree>
 8009dfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e02:	9e07      	ldr	r6, [sp, #28]
 8009e04:	ea43 0102 	orr.w	r1, r3, r2
 8009e08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009e0a:	4319      	orrs	r1, r3
 8009e0c:	d110      	bne.n	8009e30 <_dtoa_r+0xa20>
 8009e0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e12:	d029      	beq.n	8009e68 <_dtoa_r+0xa58>
 8009e14:	9b08      	ldr	r3, [sp, #32]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	dd02      	ble.n	8009e20 <_dtoa_r+0xa10>
 8009e1a:	9b02      	ldr	r3, [sp, #8]
 8009e1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009e20:	9b00      	ldr	r3, [sp, #0]
 8009e22:	f883 8000 	strb.w	r8, [r3]
 8009e26:	e63f      	b.n	8009aa8 <_dtoa_r+0x698>
 8009e28:	4628      	mov	r0, r5
 8009e2a:	e7bb      	b.n	8009da4 <_dtoa_r+0x994>
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	e7e1      	b.n	8009df4 <_dtoa_r+0x9e4>
 8009e30:	9b08      	ldr	r3, [sp, #32]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	db04      	blt.n	8009e40 <_dtoa_r+0xa30>
 8009e36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009e38:	430b      	orrs	r3, r1
 8009e3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e3c:	430b      	orrs	r3, r1
 8009e3e:	d120      	bne.n	8009e82 <_dtoa_r+0xa72>
 8009e40:	2a00      	cmp	r2, #0
 8009e42:	dded      	ble.n	8009e20 <_dtoa_r+0xa10>
 8009e44:	4649      	mov	r1, r9
 8009e46:	2201      	movs	r2, #1
 8009e48:	4658      	mov	r0, fp
 8009e4a:	f000 ff49 	bl	800ace0 <__lshift>
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4681      	mov	r9, r0
 8009e52:	f000 ffb1 	bl	800adb8 <__mcmp>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	dc03      	bgt.n	8009e62 <_dtoa_r+0xa52>
 8009e5a:	d1e1      	bne.n	8009e20 <_dtoa_r+0xa10>
 8009e5c:	f018 0f01 	tst.w	r8, #1
 8009e60:	d0de      	beq.n	8009e20 <_dtoa_r+0xa10>
 8009e62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e66:	d1d8      	bne.n	8009e1a <_dtoa_r+0xa0a>
 8009e68:	9a00      	ldr	r2, [sp, #0]
 8009e6a:	2339      	movs	r3, #57	@ 0x39
 8009e6c:	7013      	strb	r3, [r2, #0]
 8009e6e:	4633      	mov	r3, r6
 8009e70:	461e      	mov	r6, r3
 8009e72:	3b01      	subs	r3, #1
 8009e74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009e78:	2a39      	cmp	r2, #57	@ 0x39
 8009e7a:	d052      	beq.n	8009f22 <_dtoa_r+0xb12>
 8009e7c:	3201      	adds	r2, #1
 8009e7e:	701a      	strb	r2, [r3, #0]
 8009e80:	e612      	b.n	8009aa8 <_dtoa_r+0x698>
 8009e82:	2a00      	cmp	r2, #0
 8009e84:	dd07      	ble.n	8009e96 <_dtoa_r+0xa86>
 8009e86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009e8a:	d0ed      	beq.n	8009e68 <_dtoa_r+0xa58>
 8009e8c:	9a00      	ldr	r2, [sp, #0]
 8009e8e:	f108 0301 	add.w	r3, r8, #1
 8009e92:	7013      	strb	r3, [r2, #0]
 8009e94:	e608      	b.n	8009aa8 <_dtoa_r+0x698>
 8009e96:	9b07      	ldr	r3, [sp, #28]
 8009e98:	9a07      	ldr	r2, [sp, #28]
 8009e9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d028      	beq.n	8009ef6 <_dtoa_r+0xae6>
 8009ea4:	4649      	mov	r1, r9
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	220a      	movs	r2, #10
 8009eaa:	4658      	mov	r0, fp
 8009eac:	f000 fd22 	bl	800a8f4 <__multadd>
 8009eb0:	42af      	cmp	r7, r5
 8009eb2:	4681      	mov	r9, r0
 8009eb4:	f04f 0300 	mov.w	r3, #0
 8009eb8:	f04f 020a 	mov.w	r2, #10
 8009ebc:	4639      	mov	r1, r7
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	d107      	bne.n	8009ed2 <_dtoa_r+0xac2>
 8009ec2:	f000 fd17 	bl	800a8f4 <__multadd>
 8009ec6:	4607      	mov	r7, r0
 8009ec8:	4605      	mov	r5, r0
 8009eca:	9b07      	ldr	r3, [sp, #28]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	9307      	str	r3, [sp, #28]
 8009ed0:	e774      	b.n	8009dbc <_dtoa_r+0x9ac>
 8009ed2:	f000 fd0f 	bl	800a8f4 <__multadd>
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	4607      	mov	r7, r0
 8009eda:	2300      	movs	r3, #0
 8009edc:	220a      	movs	r2, #10
 8009ede:	4658      	mov	r0, fp
 8009ee0:	f000 fd08 	bl	800a8f4 <__multadd>
 8009ee4:	4605      	mov	r5, r0
 8009ee6:	e7f0      	b.n	8009eca <_dtoa_r+0xaba>
 8009ee8:	9b00      	ldr	r3, [sp, #0]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfcc      	ite	gt
 8009eee:	461e      	movgt	r6, r3
 8009ef0:	2601      	movle	r6, #1
 8009ef2:	4456      	add	r6, sl
 8009ef4:	2700      	movs	r7, #0
 8009ef6:	4649      	mov	r1, r9
 8009ef8:	2201      	movs	r2, #1
 8009efa:	4658      	mov	r0, fp
 8009efc:	f000 fef0 	bl	800ace0 <__lshift>
 8009f00:	4621      	mov	r1, r4
 8009f02:	4681      	mov	r9, r0
 8009f04:	f000 ff58 	bl	800adb8 <__mcmp>
 8009f08:	2800      	cmp	r0, #0
 8009f0a:	dcb0      	bgt.n	8009e6e <_dtoa_r+0xa5e>
 8009f0c:	d102      	bne.n	8009f14 <_dtoa_r+0xb04>
 8009f0e:	f018 0f01 	tst.w	r8, #1
 8009f12:	d1ac      	bne.n	8009e6e <_dtoa_r+0xa5e>
 8009f14:	4633      	mov	r3, r6
 8009f16:	461e      	mov	r6, r3
 8009f18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f1c:	2a30      	cmp	r2, #48	@ 0x30
 8009f1e:	d0fa      	beq.n	8009f16 <_dtoa_r+0xb06>
 8009f20:	e5c2      	b.n	8009aa8 <_dtoa_r+0x698>
 8009f22:	459a      	cmp	sl, r3
 8009f24:	d1a4      	bne.n	8009e70 <_dtoa_r+0xa60>
 8009f26:	9b04      	ldr	r3, [sp, #16]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	9304      	str	r3, [sp, #16]
 8009f2c:	2331      	movs	r3, #49	@ 0x31
 8009f2e:	f88a 3000 	strb.w	r3, [sl]
 8009f32:	e5b9      	b.n	8009aa8 <_dtoa_r+0x698>
 8009f34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009f36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009f94 <_dtoa_r+0xb84>
 8009f3a:	b11b      	cbz	r3, 8009f44 <_dtoa_r+0xb34>
 8009f3c:	f10a 0308 	add.w	r3, sl, #8
 8009f40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009f42:	6013      	str	r3, [r2, #0]
 8009f44:	4650      	mov	r0, sl
 8009f46:	b019      	add	sp, #100	@ 0x64
 8009f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	f77f ae37 	ble.w	8009bc2 <_dtoa_r+0x7b2>
 8009f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f56:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f58:	2001      	movs	r0, #1
 8009f5a:	e655      	b.n	8009c08 <_dtoa_r+0x7f8>
 8009f5c:	9b00      	ldr	r3, [sp, #0]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f77f aed6 	ble.w	8009d10 <_dtoa_r+0x900>
 8009f64:	4656      	mov	r6, sl
 8009f66:	4621      	mov	r1, r4
 8009f68:	4648      	mov	r0, r9
 8009f6a:	f7ff f9c7 	bl	80092fc <quorem>
 8009f6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009f72:	f806 8b01 	strb.w	r8, [r6], #1
 8009f76:	9b00      	ldr	r3, [sp, #0]
 8009f78:	eba6 020a 	sub.w	r2, r6, sl
 8009f7c:	4293      	cmp	r3, r2
 8009f7e:	ddb3      	ble.n	8009ee8 <_dtoa_r+0xad8>
 8009f80:	4649      	mov	r1, r9
 8009f82:	2300      	movs	r3, #0
 8009f84:	220a      	movs	r2, #10
 8009f86:	4658      	mov	r0, fp
 8009f88:	f000 fcb4 	bl	800a8f4 <__multadd>
 8009f8c:	4681      	mov	r9, r0
 8009f8e:	e7ea      	b.n	8009f66 <_dtoa_r+0xb56>
 8009f90:	0800bd85 	.word	0x0800bd85
 8009f94:	0800bd09 	.word	0x0800bd09

08009f98 <_free_r>:
 8009f98:	b538      	push	{r3, r4, r5, lr}
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	2900      	cmp	r1, #0
 8009f9e:	d041      	beq.n	800a024 <_free_r+0x8c>
 8009fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa4:	1f0c      	subs	r4, r1, #4
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	bfb8      	it	lt
 8009faa:	18e4      	addlt	r4, r4, r3
 8009fac:	f000 fc34 	bl	800a818 <__malloc_lock>
 8009fb0:	4a1d      	ldr	r2, [pc, #116]	@ (800a028 <_free_r+0x90>)
 8009fb2:	6813      	ldr	r3, [r2, #0]
 8009fb4:	b933      	cbnz	r3, 8009fc4 <_free_r+0x2c>
 8009fb6:	6063      	str	r3, [r4, #4]
 8009fb8:	6014      	str	r4, [r2, #0]
 8009fba:	4628      	mov	r0, r5
 8009fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009fc0:	f000 bc30 	b.w	800a824 <__malloc_unlock>
 8009fc4:	42a3      	cmp	r3, r4
 8009fc6:	d908      	bls.n	8009fda <_free_r+0x42>
 8009fc8:	6820      	ldr	r0, [r4, #0]
 8009fca:	1821      	adds	r1, r4, r0
 8009fcc:	428b      	cmp	r3, r1
 8009fce:	bf01      	itttt	eq
 8009fd0:	6819      	ldreq	r1, [r3, #0]
 8009fd2:	685b      	ldreq	r3, [r3, #4]
 8009fd4:	1809      	addeq	r1, r1, r0
 8009fd6:	6021      	streq	r1, [r4, #0]
 8009fd8:	e7ed      	b.n	8009fb6 <_free_r+0x1e>
 8009fda:	461a      	mov	r2, r3
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	b10b      	cbz	r3, 8009fe4 <_free_r+0x4c>
 8009fe0:	42a3      	cmp	r3, r4
 8009fe2:	d9fa      	bls.n	8009fda <_free_r+0x42>
 8009fe4:	6811      	ldr	r1, [r2, #0]
 8009fe6:	1850      	adds	r0, r2, r1
 8009fe8:	42a0      	cmp	r0, r4
 8009fea:	d10b      	bne.n	800a004 <_free_r+0x6c>
 8009fec:	6820      	ldr	r0, [r4, #0]
 8009fee:	4401      	add	r1, r0
 8009ff0:	1850      	adds	r0, r2, r1
 8009ff2:	4283      	cmp	r3, r0
 8009ff4:	6011      	str	r1, [r2, #0]
 8009ff6:	d1e0      	bne.n	8009fba <_free_r+0x22>
 8009ff8:	6818      	ldr	r0, [r3, #0]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	6053      	str	r3, [r2, #4]
 8009ffe:	4408      	add	r0, r1
 800a000:	6010      	str	r0, [r2, #0]
 800a002:	e7da      	b.n	8009fba <_free_r+0x22>
 800a004:	d902      	bls.n	800a00c <_free_r+0x74>
 800a006:	230c      	movs	r3, #12
 800a008:	602b      	str	r3, [r5, #0]
 800a00a:	e7d6      	b.n	8009fba <_free_r+0x22>
 800a00c:	6820      	ldr	r0, [r4, #0]
 800a00e:	1821      	adds	r1, r4, r0
 800a010:	428b      	cmp	r3, r1
 800a012:	bf04      	itt	eq
 800a014:	6819      	ldreq	r1, [r3, #0]
 800a016:	685b      	ldreq	r3, [r3, #4]
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	bf04      	itt	eq
 800a01c:	1809      	addeq	r1, r1, r0
 800a01e:	6021      	streq	r1, [r4, #0]
 800a020:	6054      	str	r4, [r2, #4]
 800a022:	e7ca      	b.n	8009fba <_free_r+0x22>
 800a024:	bd38      	pop	{r3, r4, r5, pc}
 800a026:	bf00      	nop
 800a028:	200007fc 	.word	0x200007fc

0800a02c <rshift>:
 800a02c:	6903      	ldr	r3, [r0, #16]
 800a02e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a032:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a036:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a03a:	f100 0414 	add.w	r4, r0, #20
 800a03e:	dd45      	ble.n	800a0cc <rshift+0xa0>
 800a040:	f011 011f 	ands.w	r1, r1, #31
 800a044:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a048:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a04c:	d10c      	bne.n	800a068 <rshift+0x3c>
 800a04e:	f100 0710 	add.w	r7, r0, #16
 800a052:	4629      	mov	r1, r5
 800a054:	42b1      	cmp	r1, r6
 800a056:	d334      	bcc.n	800a0c2 <rshift+0x96>
 800a058:	1a9b      	subs	r3, r3, r2
 800a05a:	009b      	lsls	r3, r3, #2
 800a05c:	1eea      	subs	r2, r5, #3
 800a05e:	4296      	cmp	r6, r2
 800a060:	bf38      	it	cc
 800a062:	2300      	movcc	r3, #0
 800a064:	4423      	add	r3, r4
 800a066:	e015      	b.n	800a094 <rshift+0x68>
 800a068:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a06c:	f1c1 0820 	rsb	r8, r1, #32
 800a070:	40cf      	lsrs	r7, r1
 800a072:	f105 0e04 	add.w	lr, r5, #4
 800a076:	46a1      	mov	r9, r4
 800a078:	4576      	cmp	r6, lr
 800a07a:	46f4      	mov	ip, lr
 800a07c:	d815      	bhi.n	800a0aa <rshift+0x7e>
 800a07e:	1a9a      	subs	r2, r3, r2
 800a080:	0092      	lsls	r2, r2, #2
 800a082:	3a04      	subs	r2, #4
 800a084:	3501      	adds	r5, #1
 800a086:	42ae      	cmp	r6, r5
 800a088:	bf38      	it	cc
 800a08a:	2200      	movcc	r2, #0
 800a08c:	18a3      	adds	r3, r4, r2
 800a08e:	50a7      	str	r7, [r4, r2]
 800a090:	b107      	cbz	r7, 800a094 <rshift+0x68>
 800a092:	3304      	adds	r3, #4
 800a094:	1b1a      	subs	r2, r3, r4
 800a096:	42a3      	cmp	r3, r4
 800a098:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a09c:	bf08      	it	eq
 800a09e:	2300      	moveq	r3, #0
 800a0a0:	6102      	str	r2, [r0, #16]
 800a0a2:	bf08      	it	eq
 800a0a4:	6143      	streq	r3, [r0, #20]
 800a0a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a0aa:	f8dc c000 	ldr.w	ip, [ip]
 800a0ae:	fa0c fc08 	lsl.w	ip, ip, r8
 800a0b2:	ea4c 0707 	orr.w	r7, ip, r7
 800a0b6:	f849 7b04 	str.w	r7, [r9], #4
 800a0ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a0be:	40cf      	lsrs	r7, r1
 800a0c0:	e7da      	b.n	800a078 <rshift+0x4c>
 800a0c2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a0c6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a0ca:	e7c3      	b.n	800a054 <rshift+0x28>
 800a0cc:	4623      	mov	r3, r4
 800a0ce:	e7e1      	b.n	800a094 <rshift+0x68>

0800a0d0 <__hexdig_fun>:
 800a0d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a0d4:	2b09      	cmp	r3, #9
 800a0d6:	d802      	bhi.n	800a0de <__hexdig_fun+0xe>
 800a0d8:	3820      	subs	r0, #32
 800a0da:	b2c0      	uxtb	r0, r0
 800a0dc:	4770      	bx	lr
 800a0de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a0e2:	2b05      	cmp	r3, #5
 800a0e4:	d801      	bhi.n	800a0ea <__hexdig_fun+0x1a>
 800a0e6:	3847      	subs	r0, #71	@ 0x47
 800a0e8:	e7f7      	b.n	800a0da <__hexdig_fun+0xa>
 800a0ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a0ee:	2b05      	cmp	r3, #5
 800a0f0:	d801      	bhi.n	800a0f6 <__hexdig_fun+0x26>
 800a0f2:	3827      	subs	r0, #39	@ 0x27
 800a0f4:	e7f1      	b.n	800a0da <__hexdig_fun+0xa>
 800a0f6:	2000      	movs	r0, #0
 800a0f8:	4770      	bx	lr
	...

0800a0fc <__gethex>:
 800a0fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a100:	b085      	sub	sp, #20
 800a102:	468a      	mov	sl, r1
 800a104:	9302      	str	r3, [sp, #8]
 800a106:	680b      	ldr	r3, [r1, #0]
 800a108:	9001      	str	r0, [sp, #4]
 800a10a:	4690      	mov	r8, r2
 800a10c:	1c9c      	adds	r4, r3, #2
 800a10e:	46a1      	mov	r9, r4
 800a110:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a114:	2830      	cmp	r0, #48	@ 0x30
 800a116:	d0fa      	beq.n	800a10e <__gethex+0x12>
 800a118:	eba9 0303 	sub.w	r3, r9, r3
 800a11c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a120:	f7ff ffd6 	bl	800a0d0 <__hexdig_fun>
 800a124:	4605      	mov	r5, r0
 800a126:	2800      	cmp	r0, #0
 800a128:	d168      	bne.n	800a1fc <__gethex+0x100>
 800a12a:	49a0      	ldr	r1, [pc, #640]	@ (800a3ac <__gethex+0x2b0>)
 800a12c:	2201      	movs	r2, #1
 800a12e:	4648      	mov	r0, r9
 800a130:	f7ff f83e 	bl	80091b0 <strncmp>
 800a134:	4607      	mov	r7, r0
 800a136:	2800      	cmp	r0, #0
 800a138:	d167      	bne.n	800a20a <__gethex+0x10e>
 800a13a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a13e:	4626      	mov	r6, r4
 800a140:	f7ff ffc6 	bl	800a0d0 <__hexdig_fun>
 800a144:	2800      	cmp	r0, #0
 800a146:	d062      	beq.n	800a20e <__gethex+0x112>
 800a148:	4623      	mov	r3, r4
 800a14a:	7818      	ldrb	r0, [r3, #0]
 800a14c:	2830      	cmp	r0, #48	@ 0x30
 800a14e:	4699      	mov	r9, r3
 800a150:	f103 0301 	add.w	r3, r3, #1
 800a154:	d0f9      	beq.n	800a14a <__gethex+0x4e>
 800a156:	f7ff ffbb 	bl	800a0d0 <__hexdig_fun>
 800a15a:	fab0 f580 	clz	r5, r0
 800a15e:	096d      	lsrs	r5, r5, #5
 800a160:	f04f 0b01 	mov.w	fp, #1
 800a164:	464a      	mov	r2, r9
 800a166:	4616      	mov	r6, r2
 800a168:	3201      	adds	r2, #1
 800a16a:	7830      	ldrb	r0, [r6, #0]
 800a16c:	f7ff ffb0 	bl	800a0d0 <__hexdig_fun>
 800a170:	2800      	cmp	r0, #0
 800a172:	d1f8      	bne.n	800a166 <__gethex+0x6a>
 800a174:	498d      	ldr	r1, [pc, #564]	@ (800a3ac <__gethex+0x2b0>)
 800a176:	2201      	movs	r2, #1
 800a178:	4630      	mov	r0, r6
 800a17a:	f7ff f819 	bl	80091b0 <strncmp>
 800a17e:	2800      	cmp	r0, #0
 800a180:	d13f      	bne.n	800a202 <__gethex+0x106>
 800a182:	b944      	cbnz	r4, 800a196 <__gethex+0x9a>
 800a184:	1c74      	adds	r4, r6, #1
 800a186:	4622      	mov	r2, r4
 800a188:	4616      	mov	r6, r2
 800a18a:	3201      	adds	r2, #1
 800a18c:	7830      	ldrb	r0, [r6, #0]
 800a18e:	f7ff ff9f 	bl	800a0d0 <__hexdig_fun>
 800a192:	2800      	cmp	r0, #0
 800a194:	d1f8      	bne.n	800a188 <__gethex+0x8c>
 800a196:	1ba4      	subs	r4, r4, r6
 800a198:	00a7      	lsls	r7, r4, #2
 800a19a:	7833      	ldrb	r3, [r6, #0]
 800a19c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a1a0:	2b50      	cmp	r3, #80	@ 0x50
 800a1a2:	d13e      	bne.n	800a222 <__gethex+0x126>
 800a1a4:	7873      	ldrb	r3, [r6, #1]
 800a1a6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a1a8:	d033      	beq.n	800a212 <__gethex+0x116>
 800a1aa:	2b2d      	cmp	r3, #45	@ 0x2d
 800a1ac:	d034      	beq.n	800a218 <__gethex+0x11c>
 800a1ae:	1c71      	adds	r1, r6, #1
 800a1b0:	2400      	movs	r4, #0
 800a1b2:	7808      	ldrb	r0, [r1, #0]
 800a1b4:	f7ff ff8c 	bl	800a0d0 <__hexdig_fun>
 800a1b8:	1e43      	subs	r3, r0, #1
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b18      	cmp	r3, #24
 800a1be:	d830      	bhi.n	800a222 <__gethex+0x126>
 800a1c0:	f1a0 0210 	sub.w	r2, r0, #16
 800a1c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a1c8:	f7ff ff82 	bl	800a0d0 <__hexdig_fun>
 800a1cc:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800a1d0:	fa5f fc8c 	uxtb.w	ip, ip
 800a1d4:	f1bc 0f18 	cmp.w	ip, #24
 800a1d8:	f04f 030a 	mov.w	r3, #10
 800a1dc:	d91e      	bls.n	800a21c <__gethex+0x120>
 800a1de:	b104      	cbz	r4, 800a1e2 <__gethex+0xe6>
 800a1e0:	4252      	negs	r2, r2
 800a1e2:	4417      	add	r7, r2
 800a1e4:	f8ca 1000 	str.w	r1, [sl]
 800a1e8:	b1ed      	cbz	r5, 800a226 <__gethex+0x12a>
 800a1ea:	f1bb 0f00 	cmp.w	fp, #0
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2506      	moveq	r5, #6
 800a1f2:	2500      	movne	r5, #0
 800a1f4:	4628      	mov	r0, r5
 800a1f6:	b005      	add	sp, #20
 800a1f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1fc:	2500      	movs	r5, #0
 800a1fe:	462c      	mov	r4, r5
 800a200:	e7b0      	b.n	800a164 <__gethex+0x68>
 800a202:	2c00      	cmp	r4, #0
 800a204:	d1c7      	bne.n	800a196 <__gethex+0x9a>
 800a206:	4627      	mov	r7, r4
 800a208:	e7c7      	b.n	800a19a <__gethex+0x9e>
 800a20a:	464e      	mov	r6, r9
 800a20c:	462f      	mov	r7, r5
 800a20e:	2501      	movs	r5, #1
 800a210:	e7c3      	b.n	800a19a <__gethex+0x9e>
 800a212:	2400      	movs	r4, #0
 800a214:	1cb1      	adds	r1, r6, #2
 800a216:	e7cc      	b.n	800a1b2 <__gethex+0xb6>
 800a218:	2401      	movs	r4, #1
 800a21a:	e7fb      	b.n	800a214 <__gethex+0x118>
 800a21c:	fb03 0002 	mla	r0, r3, r2, r0
 800a220:	e7ce      	b.n	800a1c0 <__gethex+0xc4>
 800a222:	4631      	mov	r1, r6
 800a224:	e7de      	b.n	800a1e4 <__gethex+0xe8>
 800a226:	eba6 0309 	sub.w	r3, r6, r9
 800a22a:	3b01      	subs	r3, #1
 800a22c:	4629      	mov	r1, r5
 800a22e:	2b07      	cmp	r3, #7
 800a230:	dc0a      	bgt.n	800a248 <__gethex+0x14c>
 800a232:	9801      	ldr	r0, [sp, #4]
 800a234:	f000 fafc 	bl	800a830 <_Balloc>
 800a238:	4604      	mov	r4, r0
 800a23a:	b940      	cbnz	r0, 800a24e <__gethex+0x152>
 800a23c:	4b5c      	ldr	r3, [pc, #368]	@ (800a3b0 <__gethex+0x2b4>)
 800a23e:	4602      	mov	r2, r0
 800a240:	21e4      	movs	r1, #228	@ 0xe4
 800a242:	485c      	ldr	r0, [pc, #368]	@ (800a3b4 <__gethex+0x2b8>)
 800a244:	f001 fc22 	bl	800ba8c <__assert_func>
 800a248:	3101      	adds	r1, #1
 800a24a:	105b      	asrs	r3, r3, #1
 800a24c:	e7ef      	b.n	800a22e <__gethex+0x132>
 800a24e:	f100 0a14 	add.w	sl, r0, #20
 800a252:	2300      	movs	r3, #0
 800a254:	4655      	mov	r5, sl
 800a256:	469b      	mov	fp, r3
 800a258:	45b1      	cmp	r9, r6
 800a25a:	d337      	bcc.n	800a2cc <__gethex+0x1d0>
 800a25c:	f845 bb04 	str.w	fp, [r5], #4
 800a260:	eba5 050a 	sub.w	r5, r5, sl
 800a264:	10ad      	asrs	r5, r5, #2
 800a266:	6125      	str	r5, [r4, #16]
 800a268:	4658      	mov	r0, fp
 800a26a:	f000 fbd3 	bl	800aa14 <__hi0bits>
 800a26e:	016d      	lsls	r5, r5, #5
 800a270:	f8d8 6000 	ldr.w	r6, [r8]
 800a274:	1a2d      	subs	r5, r5, r0
 800a276:	42b5      	cmp	r5, r6
 800a278:	dd54      	ble.n	800a324 <__gethex+0x228>
 800a27a:	1bad      	subs	r5, r5, r6
 800a27c:	4629      	mov	r1, r5
 800a27e:	4620      	mov	r0, r4
 800a280:	f000 ff67 	bl	800b152 <__any_on>
 800a284:	4681      	mov	r9, r0
 800a286:	b178      	cbz	r0, 800a2a8 <__gethex+0x1ac>
 800a288:	1e6b      	subs	r3, r5, #1
 800a28a:	1159      	asrs	r1, r3, #5
 800a28c:	f003 021f 	and.w	r2, r3, #31
 800a290:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a294:	f04f 0901 	mov.w	r9, #1
 800a298:	fa09 f202 	lsl.w	r2, r9, r2
 800a29c:	420a      	tst	r2, r1
 800a29e:	d003      	beq.n	800a2a8 <__gethex+0x1ac>
 800a2a0:	454b      	cmp	r3, r9
 800a2a2:	dc36      	bgt.n	800a312 <__gethex+0x216>
 800a2a4:	f04f 0902 	mov.w	r9, #2
 800a2a8:	4629      	mov	r1, r5
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	f7ff febe 	bl	800a02c <rshift>
 800a2b0:	442f      	add	r7, r5
 800a2b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2b6:	42bb      	cmp	r3, r7
 800a2b8:	da42      	bge.n	800a340 <__gethex+0x244>
 800a2ba:	9801      	ldr	r0, [sp, #4]
 800a2bc:	4621      	mov	r1, r4
 800a2be:	f000 faf7 	bl	800a8b0 <_Bfree>
 800a2c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	25a3      	movs	r5, #163	@ 0xa3
 800a2ca:	e793      	b.n	800a1f4 <__gethex+0xf8>
 800a2cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a2d0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a2d2:	d012      	beq.n	800a2fa <__gethex+0x1fe>
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	d104      	bne.n	800a2e2 <__gethex+0x1e6>
 800a2d8:	f845 bb04 	str.w	fp, [r5], #4
 800a2dc:	f04f 0b00 	mov.w	fp, #0
 800a2e0:	465b      	mov	r3, fp
 800a2e2:	7830      	ldrb	r0, [r6, #0]
 800a2e4:	9303      	str	r3, [sp, #12]
 800a2e6:	f7ff fef3 	bl	800a0d0 <__hexdig_fun>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	f000 000f 	and.w	r0, r0, #15
 800a2f0:	4098      	lsls	r0, r3
 800a2f2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a2f6:	3304      	adds	r3, #4
 800a2f8:	e7ae      	b.n	800a258 <__gethex+0x15c>
 800a2fa:	45b1      	cmp	r9, r6
 800a2fc:	d8ea      	bhi.n	800a2d4 <__gethex+0x1d8>
 800a2fe:	492b      	ldr	r1, [pc, #172]	@ (800a3ac <__gethex+0x2b0>)
 800a300:	9303      	str	r3, [sp, #12]
 800a302:	2201      	movs	r2, #1
 800a304:	4630      	mov	r0, r6
 800a306:	f7fe ff53 	bl	80091b0 <strncmp>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	2800      	cmp	r0, #0
 800a30e:	d1e1      	bne.n	800a2d4 <__gethex+0x1d8>
 800a310:	e7a2      	b.n	800a258 <__gethex+0x15c>
 800a312:	1ea9      	subs	r1, r5, #2
 800a314:	4620      	mov	r0, r4
 800a316:	f000 ff1c 	bl	800b152 <__any_on>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	d0c2      	beq.n	800a2a4 <__gethex+0x1a8>
 800a31e:	f04f 0903 	mov.w	r9, #3
 800a322:	e7c1      	b.n	800a2a8 <__gethex+0x1ac>
 800a324:	da09      	bge.n	800a33a <__gethex+0x23e>
 800a326:	1b75      	subs	r5, r6, r5
 800a328:	4621      	mov	r1, r4
 800a32a:	9801      	ldr	r0, [sp, #4]
 800a32c:	462a      	mov	r2, r5
 800a32e:	f000 fcd7 	bl	800ace0 <__lshift>
 800a332:	1b7f      	subs	r7, r7, r5
 800a334:	4604      	mov	r4, r0
 800a336:	f100 0a14 	add.w	sl, r0, #20
 800a33a:	f04f 0900 	mov.w	r9, #0
 800a33e:	e7b8      	b.n	800a2b2 <__gethex+0x1b6>
 800a340:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a344:	42bd      	cmp	r5, r7
 800a346:	dd6f      	ble.n	800a428 <__gethex+0x32c>
 800a348:	1bed      	subs	r5, r5, r7
 800a34a:	42ae      	cmp	r6, r5
 800a34c:	dc34      	bgt.n	800a3b8 <__gethex+0x2bc>
 800a34e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a352:	2b02      	cmp	r3, #2
 800a354:	d022      	beq.n	800a39c <__gethex+0x2a0>
 800a356:	2b03      	cmp	r3, #3
 800a358:	d024      	beq.n	800a3a4 <__gethex+0x2a8>
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d115      	bne.n	800a38a <__gethex+0x28e>
 800a35e:	42ae      	cmp	r6, r5
 800a360:	d113      	bne.n	800a38a <__gethex+0x28e>
 800a362:	2e01      	cmp	r6, #1
 800a364:	d10b      	bne.n	800a37e <__gethex+0x282>
 800a366:	9a02      	ldr	r2, [sp, #8]
 800a368:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a36c:	6013      	str	r3, [r2, #0]
 800a36e:	2301      	movs	r3, #1
 800a370:	6123      	str	r3, [r4, #16]
 800a372:	f8ca 3000 	str.w	r3, [sl]
 800a376:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a378:	2562      	movs	r5, #98	@ 0x62
 800a37a:	601c      	str	r4, [r3, #0]
 800a37c:	e73a      	b.n	800a1f4 <__gethex+0xf8>
 800a37e:	1e71      	subs	r1, r6, #1
 800a380:	4620      	mov	r0, r4
 800a382:	f000 fee6 	bl	800b152 <__any_on>
 800a386:	2800      	cmp	r0, #0
 800a388:	d1ed      	bne.n	800a366 <__gethex+0x26a>
 800a38a:	9801      	ldr	r0, [sp, #4]
 800a38c:	4621      	mov	r1, r4
 800a38e:	f000 fa8f 	bl	800a8b0 <_Bfree>
 800a392:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a394:	2300      	movs	r3, #0
 800a396:	6013      	str	r3, [r2, #0]
 800a398:	2550      	movs	r5, #80	@ 0x50
 800a39a:	e72b      	b.n	800a1f4 <__gethex+0xf8>
 800a39c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d1f3      	bne.n	800a38a <__gethex+0x28e>
 800a3a2:	e7e0      	b.n	800a366 <__gethex+0x26a>
 800a3a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d1dd      	bne.n	800a366 <__gethex+0x26a>
 800a3aa:	e7ee      	b.n	800a38a <__gethex+0x28e>
 800a3ac:	0800bc70 	.word	0x0800bc70
 800a3b0:	0800bd85 	.word	0x0800bd85
 800a3b4:	0800bd96 	.word	0x0800bd96
 800a3b8:	1e6f      	subs	r7, r5, #1
 800a3ba:	f1b9 0f00 	cmp.w	r9, #0
 800a3be:	d130      	bne.n	800a422 <__gethex+0x326>
 800a3c0:	b127      	cbz	r7, 800a3cc <__gethex+0x2d0>
 800a3c2:	4639      	mov	r1, r7
 800a3c4:	4620      	mov	r0, r4
 800a3c6:	f000 fec4 	bl	800b152 <__any_on>
 800a3ca:	4681      	mov	r9, r0
 800a3cc:	117a      	asrs	r2, r7, #5
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a3d4:	f007 071f 	and.w	r7, r7, #31
 800a3d8:	40bb      	lsls	r3, r7
 800a3da:	4213      	tst	r3, r2
 800a3dc:	4629      	mov	r1, r5
 800a3de:	4620      	mov	r0, r4
 800a3e0:	bf18      	it	ne
 800a3e2:	f049 0902 	orrne.w	r9, r9, #2
 800a3e6:	f7ff fe21 	bl	800a02c <rshift>
 800a3ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a3ee:	1b76      	subs	r6, r6, r5
 800a3f0:	2502      	movs	r5, #2
 800a3f2:	f1b9 0f00 	cmp.w	r9, #0
 800a3f6:	d047      	beq.n	800a488 <__gethex+0x38c>
 800a3f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a3fc:	2b02      	cmp	r3, #2
 800a3fe:	d015      	beq.n	800a42c <__gethex+0x330>
 800a400:	2b03      	cmp	r3, #3
 800a402:	d017      	beq.n	800a434 <__gethex+0x338>
 800a404:	2b01      	cmp	r3, #1
 800a406:	d109      	bne.n	800a41c <__gethex+0x320>
 800a408:	f019 0f02 	tst.w	r9, #2
 800a40c:	d006      	beq.n	800a41c <__gethex+0x320>
 800a40e:	f8da 3000 	ldr.w	r3, [sl]
 800a412:	ea49 0903 	orr.w	r9, r9, r3
 800a416:	f019 0f01 	tst.w	r9, #1
 800a41a:	d10e      	bne.n	800a43a <__gethex+0x33e>
 800a41c:	f045 0510 	orr.w	r5, r5, #16
 800a420:	e032      	b.n	800a488 <__gethex+0x38c>
 800a422:	f04f 0901 	mov.w	r9, #1
 800a426:	e7d1      	b.n	800a3cc <__gethex+0x2d0>
 800a428:	2501      	movs	r5, #1
 800a42a:	e7e2      	b.n	800a3f2 <__gethex+0x2f6>
 800a42c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42e:	f1c3 0301 	rsb	r3, r3, #1
 800a432:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a434:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a436:	2b00      	cmp	r3, #0
 800a438:	d0f0      	beq.n	800a41c <__gethex+0x320>
 800a43a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a43e:	f104 0314 	add.w	r3, r4, #20
 800a442:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a446:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a44a:	f04f 0c00 	mov.w	ip, #0
 800a44e:	4618      	mov	r0, r3
 800a450:	f853 2b04 	ldr.w	r2, [r3], #4
 800a454:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800a458:	d01b      	beq.n	800a492 <__gethex+0x396>
 800a45a:	3201      	adds	r2, #1
 800a45c:	6002      	str	r2, [r0, #0]
 800a45e:	2d02      	cmp	r5, #2
 800a460:	f104 0314 	add.w	r3, r4, #20
 800a464:	d13c      	bne.n	800a4e0 <__gethex+0x3e4>
 800a466:	f8d8 2000 	ldr.w	r2, [r8]
 800a46a:	3a01      	subs	r2, #1
 800a46c:	42b2      	cmp	r2, r6
 800a46e:	d109      	bne.n	800a484 <__gethex+0x388>
 800a470:	1171      	asrs	r1, r6, #5
 800a472:	2201      	movs	r2, #1
 800a474:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a478:	f006 061f 	and.w	r6, r6, #31
 800a47c:	fa02 f606 	lsl.w	r6, r2, r6
 800a480:	421e      	tst	r6, r3
 800a482:	d13a      	bne.n	800a4fa <__gethex+0x3fe>
 800a484:	f045 0520 	orr.w	r5, r5, #32
 800a488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a48a:	601c      	str	r4, [r3, #0]
 800a48c:	9b02      	ldr	r3, [sp, #8]
 800a48e:	601f      	str	r7, [r3, #0]
 800a490:	e6b0      	b.n	800a1f4 <__gethex+0xf8>
 800a492:	4299      	cmp	r1, r3
 800a494:	f843 cc04 	str.w	ip, [r3, #-4]
 800a498:	d8d9      	bhi.n	800a44e <__gethex+0x352>
 800a49a:	68a3      	ldr	r3, [r4, #8]
 800a49c:	459b      	cmp	fp, r3
 800a49e:	db17      	blt.n	800a4d0 <__gethex+0x3d4>
 800a4a0:	6861      	ldr	r1, [r4, #4]
 800a4a2:	9801      	ldr	r0, [sp, #4]
 800a4a4:	3101      	adds	r1, #1
 800a4a6:	f000 f9c3 	bl	800a830 <_Balloc>
 800a4aa:	4681      	mov	r9, r0
 800a4ac:	b918      	cbnz	r0, 800a4b6 <__gethex+0x3ba>
 800a4ae:	4b1a      	ldr	r3, [pc, #104]	@ (800a518 <__gethex+0x41c>)
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	2184      	movs	r1, #132	@ 0x84
 800a4b4:	e6c5      	b.n	800a242 <__gethex+0x146>
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	f104 010c 	add.w	r1, r4, #12
 800a4be:	0092      	lsls	r2, r2, #2
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f7fe fefe 	bl	80092c2 <memcpy>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	9801      	ldr	r0, [sp, #4]
 800a4ca:	f000 f9f1 	bl	800a8b0 <_Bfree>
 800a4ce:	464c      	mov	r4, r9
 800a4d0:	6923      	ldr	r3, [r4, #16]
 800a4d2:	1c5a      	adds	r2, r3, #1
 800a4d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a4d8:	6122      	str	r2, [r4, #16]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	615a      	str	r2, [r3, #20]
 800a4de:	e7be      	b.n	800a45e <__gethex+0x362>
 800a4e0:	6922      	ldr	r2, [r4, #16]
 800a4e2:	455a      	cmp	r2, fp
 800a4e4:	dd0b      	ble.n	800a4fe <__gethex+0x402>
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f7ff fd9f 	bl	800a02c <rshift>
 800a4ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a4f2:	3701      	adds	r7, #1
 800a4f4:	42bb      	cmp	r3, r7
 800a4f6:	f6ff aee0 	blt.w	800a2ba <__gethex+0x1be>
 800a4fa:	2501      	movs	r5, #1
 800a4fc:	e7c2      	b.n	800a484 <__gethex+0x388>
 800a4fe:	f016 061f 	ands.w	r6, r6, #31
 800a502:	d0fa      	beq.n	800a4fa <__gethex+0x3fe>
 800a504:	4453      	add	r3, sl
 800a506:	f1c6 0620 	rsb	r6, r6, #32
 800a50a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a50e:	f000 fa81 	bl	800aa14 <__hi0bits>
 800a512:	42b0      	cmp	r0, r6
 800a514:	dbe7      	blt.n	800a4e6 <__gethex+0x3ea>
 800a516:	e7f0      	b.n	800a4fa <__gethex+0x3fe>
 800a518:	0800bd85 	.word	0x0800bd85

0800a51c <L_shift>:
 800a51c:	f1c2 0208 	rsb	r2, r2, #8
 800a520:	0092      	lsls	r2, r2, #2
 800a522:	b570      	push	{r4, r5, r6, lr}
 800a524:	f1c2 0620 	rsb	r6, r2, #32
 800a528:	6843      	ldr	r3, [r0, #4]
 800a52a:	6804      	ldr	r4, [r0, #0]
 800a52c:	fa03 f506 	lsl.w	r5, r3, r6
 800a530:	432c      	orrs	r4, r5
 800a532:	40d3      	lsrs	r3, r2
 800a534:	6004      	str	r4, [r0, #0]
 800a536:	f840 3f04 	str.w	r3, [r0, #4]!
 800a53a:	4288      	cmp	r0, r1
 800a53c:	d3f4      	bcc.n	800a528 <L_shift+0xc>
 800a53e:	bd70      	pop	{r4, r5, r6, pc}

0800a540 <__match>:
 800a540:	b530      	push	{r4, r5, lr}
 800a542:	6803      	ldr	r3, [r0, #0]
 800a544:	3301      	adds	r3, #1
 800a546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a54a:	b914      	cbnz	r4, 800a552 <__match+0x12>
 800a54c:	6003      	str	r3, [r0, #0]
 800a54e:	2001      	movs	r0, #1
 800a550:	bd30      	pop	{r4, r5, pc}
 800a552:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a556:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a55a:	2d19      	cmp	r5, #25
 800a55c:	bf98      	it	ls
 800a55e:	3220      	addls	r2, #32
 800a560:	42a2      	cmp	r2, r4
 800a562:	d0f0      	beq.n	800a546 <__match+0x6>
 800a564:	2000      	movs	r0, #0
 800a566:	e7f3      	b.n	800a550 <__match+0x10>

0800a568 <__hexnan>:
 800a568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a56c:	680b      	ldr	r3, [r1, #0]
 800a56e:	6801      	ldr	r1, [r0, #0]
 800a570:	115e      	asrs	r6, r3, #5
 800a572:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a576:	f013 031f 	ands.w	r3, r3, #31
 800a57a:	b087      	sub	sp, #28
 800a57c:	bf18      	it	ne
 800a57e:	3604      	addne	r6, #4
 800a580:	2500      	movs	r5, #0
 800a582:	1f37      	subs	r7, r6, #4
 800a584:	4682      	mov	sl, r0
 800a586:	4690      	mov	r8, r2
 800a588:	9301      	str	r3, [sp, #4]
 800a58a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a58e:	46b9      	mov	r9, r7
 800a590:	463c      	mov	r4, r7
 800a592:	9502      	str	r5, [sp, #8]
 800a594:	46ab      	mov	fp, r5
 800a596:	784a      	ldrb	r2, [r1, #1]
 800a598:	1c4b      	adds	r3, r1, #1
 800a59a:	9303      	str	r3, [sp, #12]
 800a59c:	b342      	cbz	r2, 800a5f0 <__hexnan+0x88>
 800a59e:	4610      	mov	r0, r2
 800a5a0:	9105      	str	r1, [sp, #20]
 800a5a2:	9204      	str	r2, [sp, #16]
 800a5a4:	f7ff fd94 	bl	800a0d0 <__hexdig_fun>
 800a5a8:	2800      	cmp	r0, #0
 800a5aa:	d151      	bne.n	800a650 <__hexnan+0xe8>
 800a5ac:	9a04      	ldr	r2, [sp, #16]
 800a5ae:	9905      	ldr	r1, [sp, #20]
 800a5b0:	2a20      	cmp	r2, #32
 800a5b2:	d818      	bhi.n	800a5e6 <__hexnan+0x7e>
 800a5b4:	9b02      	ldr	r3, [sp, #8]
 800a5b6:	459b      	cmp	fp, r3
 800a5b8:	dd13      	ble.n	800a5e2 <__hexnan+0x7a>
 800a5ba:	454c      	cmp	r4, r9
 800a5bc:	d206      	bcs.n	800a5cc <__hexnan+0x64>
 800a5be:	2d07      	cmp	r5, #7
 800a5c0:	dc04      	bgt.n	800a5cc <__hexnan+0x64>
 800a5c2:	462a      	mov	r2, r5
 800a5c4:	4649      	mov	r1, r9
 800a5c6:	4620      	mov	r0, r4
 800a5c8:	f7ff ffa8 	bl	800a51c <L_shift>
 800a5cc:	4544      	cmp	r4, r8
 800a5ce:	d952      	bls.n	800a676 <__hexnan+0x10e>
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	f1a4 0904 	sub.w	r9, r4, #4
 800a5d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5da:	f8cd b008 	str.w	fp, [sp, #8]
 800a5de:	464c      	mov	r4, r9
 800a5e0:	461d      	mov	r5, r3
 800a5e2:	9903      	ldr	r1, [sp, #12]
 800a5e4:	e7d7      	b.n	800a596 <__hexnan+0x2e>
 800a5e6:	2a29      	cmp	r2, #41	@ 0x29
 800a5e8:	d157      	bne.n	800a69a <__hexnan+0x132>
 800a5ea:	3102      	adds	r1, #2
 800a5ec:	f8ca 1000 	str.w	r1, [sl]
 800a5f0:	f1bb 0f00 	cmp.w	fp, #0
 800a5f4:	d051      	beq.n	800a69a <__hexnan+0x132>
 800a5f6:	454c      	cmp	r4, r9
 800a5f8:	d206      	bcs.n	800a608 <__hexnan+0xa0>
 800a5fa:	2d07      	cmp	r5, #7
 800a5fc:	dc04      	bgt.n	800a608 <__hexnan+0xa0>
 800a5fe:	462a      	mov	r2, r5
 800a600:	4649      	mov	r1, r9
 800a602:	4620      	mov	r0, r4
 800a604:	f7ff ff8a 	bl	800a51c <L_shift>
 800a608:	4544      	cmp	r4, r8
 800a60a:	d936      	bls.n	800a67a <__hexnan+0x112>
 800a60c:	f1a8 0204 	sub.w	r2, r8, #4
 800a610:	4623      	mov	r3, r4
 800a612:	f853 1b04 	ldr.w	r1, [r3], #4
 800a616:	f842 1f04 	str.w	r1, [r2, #4]!
 800a61a:	429f      	cmp	r7, r3
 800a61c:	d2f9      	bcs.n	800a612 <__hexnan+0xaa>
 800a61e:	1b3b      	subs	r3, r7, r4
 800a620:	f023 0303 	bic.w	r3, r3, #3
 800a624:	3304      	adds	r3, #4
 800a626:	3401      	adds	r4, #1
 800a628:	3e03      	subs	r6, #3
 800a62a:	42b4      	cmp	r4, r6
 800a62c:	bf88      	it	hi
 800a62e:	2304      	movhi	r3, #4
 800a630:	4443      	add	r3, r8
 800a632:	2200      	movs	r2, #0
 800a634:	f843 2b04 	str.w	r2, [r3], #4
 800a638:	429f      	cmp	r7, r3
 800a63a:	d2fb      	bcs.n	800a634 <__hexnan+0xcc>
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	b91b      	cbnz	r3, 800a648 <__hexnan+0xe0>
 800a640:	4547      	cmp	r7, r8
 800a642:	d128      	bne.n	800a696 <__hexnan+0x12e>
 800a644:	2301      	movs	r3, #1
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	2005      	movs	r0, #5
 800a64a:	b007      	add	sp, #28
 800a64c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a650:	3501      	adds	r5, #1
 800a652:	2d08      	cmp	r5, #8
 800a654:	f10b 0b01 	add.w	fp, fp, #1
 800a658:	dd06      	ble.n	800a668 <__hexnan+0x100>
 800a65a:	4544      	cmp	r4, r8
 800a65c:	d9c1      	bls.n	800a5e2 <__hexnan+0x7a>
 800a65e:	2300      	movs	r3, #0
 800a660:	f844 3c04 	str.w	r3, [r4, #-4]
 800a664:	2501      	movs	r5, #1
 800a666:	3c04      	subs	r4, #4
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	f000 000f 	and.w	r0, r0, #15
 800a66e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a672:	6020      	str	r0, [r4, #0]
 800a674:	e7b5      	b.n	800a5e2 <__hexnan+0x7a>
 800a676:	2508      	movs	r5, #8
 800a678:	e7b3      	b.n	800a5e2 <__hexnan+0x7a>
 800a67a:	9b01      	ldr	r3, [sp, #4]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d0dd      	beq.n	800a63c <__hexnan+0xd4>
 800a680:	f1c3 0320 	rsb	r3, r3, #32
 800a684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a688:	40da      	lsrs	r2, r3
 800a68a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a68e:	4013      	ands	r3, r2
 800a690:	f846 3c04 	str.w	r3, [r6, #-4]
 800a694:	e7d2      	b.n	800a63c <__hexnan+0xd4>
 800a696:	3f04      	subs	r7, #4
 800a698:	e7d0      	b.n	800a63c <__hexnan+0xd4>
 800a69a:	2004      	movs	r0, #4
 800a69c:	e7d5      	b.n	800a64a <__hexnan+0xe2>
	...

0800a6a0 <malloc>:
 800a6a0:	4b02      	ldr	r3, [pc, #8]	@ (800a6ac <malloc+0xc>)
 800a6a2:	4601      	mov	r1, r0
 800a6a4:	6818      	ldr	r0, [r3, #0]
 800a6a6:	f000 b825 	b.w	800a6f4 <_malloc_r>
 800a6aa:	bf00      	nop
 800a6ac:	20000184 	.word	0x20000184

0800a6b0 <sbrk_aligned>:
 800a6b0:	b570      	push	{r4, r5, r6, lr}
 800a6b2:	4e0f      	ldr	r6, [pc, #60]	@ (800a6f0 <sbrk_aligned+0x40>)
 800a6b4:	460c      	mov	r4, r1
 800a6b6:	6831      	ldr	r1, [r6, #0]
 800a6b8:	4605      	mov	r5, r0
 800a6ba:	b911      	cbnz	r1, 800a6c2 <sbrk_aligned+0x12>
 800a6bc:	f001 f9d6 	bl	800ba6c <_sbrk_r>
 800a6c0:	6030      	str	r0, [r6, #0]
 800a6c2:	4621      	mov	r1, r4
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f001 f9d1 	bl	800ba6c <_sbrk_r>
 800a6ca:	1c43      	adds	r3, r0, #1
 800a6cc:	d103      	bne.n	800a6d6 <sbrk_aligned+0x26>
 800a6ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a6d2:	4620      	mov	r0, r4
 800a6d4:	bd70      	pop	{r4, r5, r6, pc}
 800a6d6:	1cc4      	adds	r4, r0, #3
 800a6d8:	f024 0403 	bic.w	r4, r4, #3
 800a6dc:	42a0      	cmp	r0, r4
 800a6de:	d0f8      	beq.n	800a6d2 <sbrk_aligned+0x22>
 800a6e0:	1a21      	subs	r1, r4, r0
 800a6e2:	4628      	mov	r0, r5
 800a6e4:	f001 f9c2 	bl	800ba6c <_sbrk_r>
 800a6e8:	3001      	adds	r0, #1
 800a6ea:	d1f2      	bne.n	800a6d2 <sbrk_aligned+0x22>
 800a6ec:	e7ef      	b.n	800a6ce <sbrk_aligned+0x1e>
 800a6ee:	bf00      	nop
 800a6f0:	200007f8 	.word	0x200007f8

0800a6f4 <_malloc_r>:
 800a6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f8:	1ccd      	adds	r5, r1, #3
 800a6fa:	f025 0503 	bic.w	r5, r5, #3
 800a6fe:	3508      	adds	r5, #8
 800a700:	2d0c      	cmp	r5, #12
 800a702:	bf38      	it	cc
 800a704:	250c      	movcc	r5, #12
 800a706:	2d00      	cmp	r5, #0
 800a708:	4606      	mov	r6, r0
 800a70a:	db01      	blt.n	800a710 <_malloc_r+0x1c>
 800a70c:	42a9      	cmp	r1, r5
 800a70e:	d904      	bls.n	800a71a <_malloc_r+0x26>
 800a710:	230c      	movs	r3, #12
 800a712:	6033      	str	r3, [r6, #0]
 800a714:	2000      	movs	r0, #0
 800a716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a71a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7f0 <_malloc_r+0xfc>
 800a71e:	f000 f87b 	bl	800a818 <__malloc_lock>
 800a722:	f8d8 3000 	ldr.w	r3, [r8]
 800a726:	461c      	mov	r4, r3
 800a728:	bb44      	cbnz	r4, 800a77c <_malloc_r+0x88>
 800a72a:	4629      	mov	r1, r5
 800a72c:	4630      	mov	r0, r6
 800a72e:	f7ff ffbf 	bl	800a6b0 <sbrk_aligned>
 800a732:	1c43      	adds	r3, r0, #1
 800a734:	4604      	mov	r4, r0
 800a736:	d158      	bne.n	800a7ea <_malloc_r+0xf6>
 800a738:	f8d8 4000 	ldr.w	r4, [r8]
 800a73c:	4627      	mov	r7, r4
 800a73e:	2f00      	cmp	r7, #0
 800a740:	d143      	bne.n	800a7ca <_malloc_r+0xd6>
 800a742:	2c00      	cmp	r4, #0
 800a744:	d04b      	beq.n	800a7de <_malloc_r+0xea>
 800a746:	6823      	ldr	r3, [r4, #0]
 800a748:	4639      	mov	r1, r7
 800a74a:	4630      	mov	r0, r6
 800a74c:	eb04 0903 	add.w	r9, r4, r3
 800a750:	f001 f98c 	bl	800ba6c <_sbrk_r>
 800a754:	4581      	cmp	r9, r0
 800a756:	d142      	bne.n	800a7de <_malloc_r+0xea>
 800a758:	6821      	ldr	r1, [r4, #0]
 800a75a:	1a6d      	subs	r5, r5, r1
 800a75c:	4629      	mov	r1, r5
 800a75e:	4630      	mov	r0, r6
 800a760:	f7ff ffa6 	bl	800a6b0 <sbrk_aligned>
 800a764:	3001      	adds	r0, #1
 800a766:	d03a      	beq.n	800a7de <_malloc_r+0xea>
 800a768:	6823      	ldr	r3, [r4, #0]
 800a76a:	442b      	add	r3, r5
 800a76c:	6023      	str	r3, [r4, #0]
 800a76e:	f8d8 3000 	ldr.w	r3, [r8]
 800a772:	685a      	ldr	r2, [r3, #4]
 800a774:	bb62      	cbnz	r2, 800a7d0 <_malloc_r+0xdc>
 800a776:	f8c8 7000 	str.w	r7, [r8]
 800a77a:	e00f      	b.n	800a79c <_malloc_r+0xa8>
 800a77c:	6822      	ldr	r2, [r4, #0]
 800a77e:	1b52      	subs	r2, r2, r5
 800a780:	d420      	bmi.n	800a7c4 <_malloc_r+0xd0>
 800a782:	2a0b      	cmp	r2, #11
 800a784:	d917      	bls.n	800a7b6 <_malloc_r+0xc2>
 800a786:	1961      	adds	r1, r4, r5
 800a788:	42a3      	cmp	r3, r4
 800a78a:	6025      	str	r5, [r4, #0]
 800a78c:	bf18      	it	ne
 800a78e:	6059      	strne	r1, [r3, #4]
 800a790:	6863      	ldr	r3, [r4, #4]
 800a792:	bf08      	it	eq
 800a794:	f8c8 1000 	streq.w	r1, [r8]
 800a798:	5162      	str	r2, [r4, r5]
 800a79a:	604b      	str	r3, [r1, #4]
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 f841 	bl	800a824 <__malloc_unlock>
 800a7a2:	f104 000b 	add.w	r0, r4, #11
 800a7a6:	1d23      	adds	r3, r4, #4
 800a7a8:	f020 0007 	bic.w	r0, r0, #7
 800a7ac:	1ac2      	subs	r2, r0, r3
 800a7ae:	bf1c      	itt	ne
 800a7b0:	1a1b      	subne	r3, r3, r0
 800a7b2:	50a3      	strne	r3, [r4, r2]
 800a7b4:	e7af      	b.n	800a716 <_malloc_r+0x22>
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	42a3      	cmp	r3, r4
 800a7ba:	bf0c      	ite	eq
 800a7bc:	f8c8 2000 	streq.w	r2, [r8]
 800a7c0:	605a      	strne	r2, [r3, #4]
 800a7c2:	e7eb      	b.n	800a79c <_malloc_r+0xa8>
 800a7c4:	4623      	mov	r3, r4
 800a7c6:	6864      	ldr	r4, [r4, #4]
 800a7c8:	e7ae      	b.n	800a728 <_malloc_r+0x34>
 800a7ca:	463c      	mov	r4, r7
 800a7cc:	687f      	ldr	r7, [r7, #4]
 800a7ce:	e7b6      	b.n	800a73e <_malloc_r+0x4a>
 800a7d0:	461a      	mov	r2, r3
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	42a3      	cmp	r3, r4
 800a7d6:	d1fb      	bne.n	800a7d0 <_malloc_r+0xdc>
 800a7d8:	2300      	movs	r3, #0
 800a7da:	6053      	str	r3, [r2, #4]
 800a7dc:	e7de      	b.n	800a79c <_malloc_r+0xa8>
 800a7de:	230c      	movs	r3, #12
 800a7e0:	6033      	str	r3, [r6, #0]
 800a7e2:	4630      	mov	r0, r6
 800a7e4:	f000 f81e 	bl	800a824 <__malloc_unlock>
 800a7e8:	e794      	b.n	800a714 <_malloc_r+0x20>
 800a7ea:	6005      	str	r5, [r0, #0]
 800a7ec:	e7d6      	b.n	800a79c <_malloc_r+0xa8>
 800a7ee:	bf00      	nop
 800a7f0:	200007fc 	.word	0x200007fc

0800a7f4 <__ascii_mbtowc>:
 800a7f4:	b082      	sub	sp, #8
 800a7f6:	b901      	cbnz	r1, 800a7fa <__ascii_mbtowc+0x6>
 800a7f8:	a901      	add	r1, sp, #4
 800a7fa:	b142      	cbz	r2, 800a80e <__ascii_mbtowc+0x1a>
 800a7fc:	b14b      	cbz	r3, 800a812 <__ascii_mbtowc+0x1e>
 800a7fe:	7813      	ldrb	r3, [r2, #0]
 800a800:	600b      	str	r3, [r1, #0]
 800a802:	7812      	ldrb	r2, [r2, #0]
 800a804:	1e10      	subs	r0, r2, #0
 800a806:	bf18      	it	ne
 800a808:	2001      	movne	r0, #1
 800a80a:	b002      	add	sp, #8
 800a80c:	4770      	bx	lr
 800a80e:	4610      	mov	r0, r2
 800a810:	e7fb      	b.n	800a80a <__ascii_mbtowc+0x16>
 800a812:	f06f 0001 	mvn.w	r0, #1
 800a816:	e7f8      	b.n	800a80a <__ascii_mbtowc+0x16>

0800a818 <__malloc_lock>:
 800a818:	4801      	ldr	r0, [pc, #4]	@ (800a820 <__malloc_lock+0x8>)
 800a81a:	f7fe bd50 	b.w	80092be <__retarget_lock_acquire_recursive>
 800a81e:	bf00      	nop
 800a820:	200007f4 	.word	0x200007f4

0800a824 <__malloc_unlock>:
 800a824:	4801      	ldr	r0, [pc, #4]	@ (800a82c <__malloc_unlock+0x8>)
 800a826:	f7fe bd4b 	b.w	80092c0 <__retarget_lock_release_recursive>
 800a82a:	bf00      	nop
 800a82c:	200007f4 	.word	0x200007f4

0800a830 <_Balloc>:
 800a830:	b570      	push	{r4, r5, r6, lr}
 800a832:	69c6      	ldr	r6, [r0, #28]
 800a834:	4604      	mov	r4, r0
 800a836:	460d      	mov	r5, r1
 800a838:	b976      	cbnz	r6, 800a858 <_Balloc+0x28>
 800a83a:	2010      	movs	r0, #16
 800a83c:	f7ff ff30 	bl	800a6a0 <malloc>
 800a840:	4602      	mov	r2, r0
 800a842:	61e0      	str	r0, [r4, #28]
 800a844:	b920      	cbnz	r0, 800a850 <_Balloc+0x20>
 800a846:	4b18      	ldr	r3, [pc, #96]	@ (800a8a8 <_Balloc+0x78>)
 800a848:	4818      	ldr	r0, [pc, #96]	@ (800a8ac <_Balloc+0x7c>)
 800a84a:	216b      	movs	r1, #107	@ 0x6b
 800a84c:	f001 f91e 	bl	800ba8c <__assert_func>
 800a850:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a854:	6006      	str	r6, [r0, #0]
 800a856:	60c6      	str	r6, [r0, #12]
 800a858:	69e6      	ldr	r6, [r4, #28]
 800a85a:	68f3      	ldr	r3, [r6, #12]
 800a85c:	b183      	cbz	r3, 800a880 <_Balloc+0x50>
 800a85e:	69e3      	ldr	r3, [r4, #28]
 800a860:	68db      	ldr	r3, [r3, #12]
 800a862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a866:	b9b8      	cbnz	r0, 800a898 <_Balloc+0x68>
 800a868:	2101      	movs	r1, #1
 800a86a:	fa01 f605 	lsl.w	r6, r1, r5
 800a86e:	1d72      	adds	r2, r6, #5
 800a870:	0092      	lsls	r2, r2, #2
 800a872:	4620      	mov	r0, r4
 800a874:	f001 f928 	bl	800bac8 <_calloc_r>
 800a878:	b160      	cbz	r0, 800a894 <_Balloc+0x64>
 800a87a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a87e:	e00e      	b.n	800a89e <_Balloc+0x6e>
 800a880:	2221      	movs	r2, #33	@ 0x21
 800a882:	2104      	movs	r1, #4
 800a884:	4620      	mov	r0, r4
 800a886:	f001 f91f 	bl	800bac8 <_calloc_r>
 800a88a:	69e3      	ldr	r3, [r4, #28]
 800a88c:	60f0      	str	r0, [r6, #12]
 800a88e:	68db      	ldr	r3, [r3, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d1e4      	bne.n	800a85e <_Balloc+0x2e>
 800a894:	2000      	movs	r0, #0
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	6802      	ldr	r2, [r0, #0]
 800a89a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a89e:	2300      	movs	r3, #0
 800a8a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a8a4:	e7f7      	b.n	800a896 <_Balloc+0x66>
 800a8a6:	bf00      	nop
 800a8a8:	0800bd16 	.word	0x0800bd16
 800a8ac:	0800bdf6 	.word	0x0800bdf6

0800a8b0 <_Bfree>:
 800a8b0:	b570      	push	{r4, r5, r6, lr}
 800a8b2:	69c6      	ldr	r6, [r0, #28]
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	b976      	cbnz	r6, 800a8d8 <_Bfree+0x28>
 800a8ba:	2010      	movs	r0, #16
 800a8bc:	f7ff fef0 	bl	800a6a0 <malloc>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	61e8      	str	r0, [r5, #28]
 800a8c4:	b920      	cbnz	r0, 800a8d0 <_Bfree+0x20>
 800a8c6:	4b09      	ldr	r3, [pc, #36]	@ (800a8ec <_Bfree+0x3c>)
 800a8c8:	4809      	ldr	r0, [pc, #36]	@ (800a8f0 <_Bfree+0x40>)
 800a8ca:	218f      	movs	r1, #143	@ 0x8f
 800a8cc:	f001 f8de 	bl	800ba8c <__assert_func>
 800a8d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8d4:	6006      	str	r6, [r0, #0]
 800a8d6:	60c6      	str	r6, [r0, #12]
 800a8d8:	b13c      	cbz	r4, 800a8ea <_Bfree+0x3a>
 800a8da:	69eb      	ldr	r3, [r5, #28]
 800a8dc:	6862      	ldr	r2, [r4, #4]
 800a8de:	68db      	ldr	r3, [r3, #12]
 800a8e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8e4:	6021      	str	r1, [r4, #0]
 800a8e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8ea:	bd70      	pop	{r4, r5, r6, pc}
 800a8ec:	0800bd16 	.word	0x0800bd16
 800a8f0:	0800bdf6 	.word	0x0800bdf6

0800a8f4 <__multadd>:
 800a8f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f8:	690d      	ldr	r5, [r1, #16]
 800a8fa:	4607      	mov	r7, r0
 800a8fc:	460c      	mov	r4, r1
 800a8fe:	461e      	mov	r6, r3
 800a900:	f101 0c14 	add.w	ip, r1, #20
 800a904:	2000      	movs	r0, #0
 800a906:	f8dc 3000 	ldr.w	r3, [ip]
 800a90a:	b299      	uxth	r1, r3
 800a90c:	fb02 6101 	mla	r1, r2, r1, r6
 800a910:	0c1e      	lsrs	r6, r3, #16
 800a912:	0c0b      	lsrs	r3, r1, #16
 800a914:	fb02 3306 	mla	r3, r2, r6, r3
 800a918:	b289      	uxth	r1, r1
 800a91a:	3001      	adds	r0, #1
 800a91c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a920:	4285      	cmp	r5, r0
 800a922:	f84c 1b04 	str.w	r1, [ip], #4
 800a926:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a92a:	dcec      	bgt.n	800a906 <__multadd+0x12>
 800a92c:	b30e      	cbz	r6, 800a972 <__multadd+0x7e>
 800a92e:	68a3      	ldr	r3, [r4, #8]
 800a930:	42ab      	cmp	r3, r5
 800a932:	dc19      	bgt.n	800a968 <__multadd+0x74>
 800a934:	6861      	ldr	r1, [r4, #4]
 800a936:	4638      	mov	r0, r7
 800a938:	3101      	adds	r1, #1
 800a93a:	f7ff ff79 	bl	800a830 <_Balloc>
 800a93e:	4680      	mov	r8, r0
 800a940:	b928      	cbnz	r0, 800a94e <__multadd+0x5a>
 800a942:	4602      	mov	r2, r0
 800a944:	4b0c      	ldr	r3, [pc, #48]	@ (800a978 <__multadd+0x84>)
 800a946:	480d      	ldr	r0, [pc, #52]	@ (800a97c <__multadd+0x88>)
 800a948:	21ba      	movs	r1, #186	@ 0xba
 800a94a:	f001 f89f 	bl	800ba8c <__assert_func>
 800a94e:	6922      	ldr	r2, [r4, #16]
 800a950:	3202      	adds	r2, #2
 800a952:	f104 010c 	add.w	r1, r4, #12
 800a956:	0092      	lsls	r2, r2, #2
 800a958:	300c      	adds	r0, #12
 800a95a:	f7fe fcb2 	bl	80092c2 <memcpy>
 800a95e:	4621      	mov	r1, r4
 800a960:	4638      	mov	r0, r7
 800a962:	f7ff ffa5 	bl	800a8b0 <_Bfree>
 800a966:	4644      	mov	r4, r8
 800a968:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a96c:	3501      	adds	r5, #1
 800a96e:	615e      	str	r6, [r3, #20]
 800a970:	6125      	str	r5, [r4, #16]
 800a972:	4620      	mov	r0, r4
 800a974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a978:	0800bd85 	.word	0x0800bd85
 800a97c:	0800bdf6 	.word	0x0800bdf6

0800a980 <__s2b>:
 800a980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a984:	460c      	mov	r4, r1
 800a986:	4615      	mov	r5, r2
 800a988:	461f      	mov	r7, r3
 800a98a:	2209      	movs	r2, #9
 800a98c:	3308      	adds	r3, #8
 800a98e:	4606      	mov	r6, r0
 800a990:	fb93 f3f2 	sdiv	r3, r3, r2
 800a994:	2100      	movs	r1, #0
 800a996:	2201      	movs	r2, #1
 800a998:	429a      	cmp	r2, r3
 800a99a:	db09      	blt.n	800a9b0 <__s2b+0x30>
 800a99c:	4630      	mov	r0, r6
 800a99e:	f7ff ff47 	bl	800a830 <_Balloc>
 800a9a2:	b940      	cbnz	r0, 800a9b6 <__s2b+0x36>
 800a9a4:	4602      	mov	r2, r0
 800a9a6:	4b19      	ldr	r3, [pc, #100]	@ (800aa0c <__s2b+0x8c>)
 800a9a8:	4819      	ldr	r0, [pc, #100]	@ (800aa10 <__s2b+0x90>)
 800a9aa:	21d3      	movs	r1, #211	@ 0xd3
 800a9ac:	f001 f86e 	bl	800ba8c <__assert_func>
 800a9b0:	0052      	lsls	r2, r2, #1
 800a9b2:	3101      	adds	r1, #1
 800a9b4:	e7f0      	b.n	800a998 <__s2b+0x18>
 800a9b6:	9b08      	ldr	r3, [sp, #32]
 800a9b8:	6143      	str	r3, [r0, #20]
 800a9ba:	2d09      	cmp	r5, #9
 800a9bc:	f04f 0301 	mov.w	r3, #1
 800a9c0:	6103      	str	r3, [r0, #16]
 800a9c2:	dd16      	ble.n	800a9f2 <__s2b+0x72>
 800a9c4:	f104 0909 	add.w	r9, r4, #9
 800a9c8:	46c8      	mov	r8, r9
 800a9ca:	442c      	add	r4, r5
 800a9cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	3b30      	subs	r3, #48	@ 0x30
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7ff ff8c 	bl	800a8f4 <__multadd>
 800a9dc:	45a0      	cmp	r8, r4
 800a9de:	d1f5      	bne.n	800a9cc <__s2b+0x4c>
 800a9e0:	f1a5 0408 	sub.w	r4, r5, #8
 800a9e4:	444c      	add	r4, r9
 800a9e6:	1b2d      	subs	r5, r5, r4
 800a9e8:	1963      	adds	r3, r4, r5
 800a9ea:	42bb      	cmp	r3, r7
 800a9ec:	db04      	blt.n	800a9f8 <__s2b+0x78>
 800a9ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9f2:	340a      	adds	r4, #10
 800a9f4:	2509      	movs	r5, #9
 800a9f6:	e7f6      	b.n	800a9e6 <__s2b+0x66>
 800a9f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9fc:	4601      	mov	r1, r0
 800a9fe:	3b30      	subs	r3, #48	@ 0x30
 800aa00:	220a      	movs	r2, #10
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7ff ff76 	bl	800a8f4 <__multadd>
 800aa08:	e7ee      	b.n	800a9e8 <__s2b+0x68>
 800aa0a:	bf00      	nop
 800aa0c:	0800bd85 	.word	0x0800bd85
 800aa10:	0800bdf6 	.word	0x0800bdf6

0800aa14 <__hi0bits>:
 800aa14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800aa18:	4603      	mov	r3, r0
 800aa1a:	bf36      	itet	cc
 800aa1c:	0403      	lslcc	r3, r0, #16
 800aa1e:	2000      	movcs	r0, #0
 800aa20:	2010      	movcc	r0, #16
 800aa22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800aa26:	bf3c      	itt	cc
 800aa28:	021b      	lslcc	r3, r3, #8
 800aa2a:	3008      	addcc	r0, #8
 800aa2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa30:	bf3c      	itt	cc
 800aa32:	011b      	lslcc	r3, r3, #4
 800aa34:	3004      	addcc	r0, #4
 800aa36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa3a:	bf3c      	itt	cc
 800aa3c:	009b      	lslcc	r3, r3, #2
 800aa3e:	3002      	addcc	r0, #2
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	db05      	blt.n	800aa50 <__hi0bits+0x3c>
 800aa44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa48:	f100 0001 	add.w	r0, r0, #1
 800aa4c:	bf08      	it	eq
 800aa4e:	2020      	moveq	r0, #32
 800aa50:	4770      	bx	lr

0800aa52 <__lo0bits>:
 800aa52:	6803      	ldr	r3, [r0, #0]
 800aa54:	4602      	mov	r2, r0
 800aa56:	f013 0007 	ands.w	r0, r3, #7
 800aa5a:	d00b      	beq.n	800aa74 <__lo0bits+0x22>
 800aa5c:	07d9      	lsls	r1, r3, #31
 800aa5e:	d421      	bmi.n	800aaa4 <__lo0bits+0x52>
 800aa60:	0798      	lsls	r0, r3, #30
 800aa62:	bf49      	itett	mi
 800aa64:	085b      	lsrmi	r3, r3, #1
 800aa66:	089b      	lsrpl	r3, r3, #2
 800aa68:	2001      	movmi	r0, #1
 800aa6a:	6013      	strmi	r3, [r2, #0]
 800aa6c:	bf5c      	itt	pl
 800aa6e:	6013      	strpl	r3, [r2, #0]
 800aa70:	2002      	movpl	r0, #2
 800aa72:	4770      	bx	lr
 800aa74:	b299      	uxth	r1, r3
 800aa76:	b909      	cbnz	r1, 800aa7c <__lo0bits+0x2a>
 800aa78:	0c1b      	lsrs	r3, r3, #16
 800aa7a:	2010      	movs	r0, #16
 800aa7c:	b2d9      	uxtb	r1, r3
 800aa7e:	b909      	cbnz	r1, 800aa84 <__lo0bits+0x32>
 800aa80:	3008      	adds	r0, #8
 800aa82:	0a1b      	lsrs	r3, r3, #8
 800aa84:	0719      	lsls	r1, r3, #28
 800aa86:	bf04      	itt	eq
 800aa88:	091b      	lsreq	r3, r3, #4
 800aa8a:	3004      	addeq	r0, #4
 800aa8c:	0799      	lsls	r1, r3, #30
 800aa8e:	bf04      	itt	eq
 800aa90:	089b      	lsreq	r3, r3, #2
 800aa92:	3002      	addeq	r0, #2
 800aa94:	07d9      	lsls	r1, r3, #31
 800aa96:	d403      	bmi.n	800aaa0 <__lo0bits+0x4e>
 800aa98:	085b      	lsrs	r3, r3, #1
 800aa9a:	f100 0001 	add.w	r0, r0, #1
 800aa9e:	d003      	beq.n	800aaa8 <__lo0bits+0x56>
 800aaa0:	6013      	str	r3, [r2, #0]
 800aaa2:	4770      	bx	lr
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	4770      	bx	lr
 800aaa8:	2020      	movs	r0, #32
 800aaaa:	4770      	bx	lr

0800aaac <__i2b>:
 800aaac:	b510      	push	{r4, lr}
 800aaae:	460c      	mov	r4, r1
 800aab0:	2101      	movs	r1, #1
 800aab2:	f7ff febd 	bl	800a830 <_Balloc>
 800aab6:	4602      	mov	r2, r0
 800aab8:	b928      	cbnz	r0, 800aac6 <__i2b+0x1a>
 800aaba:	4b05      	ldr	r3, [pc, #20]	@ (800aad0 <__i2b+0x24>)
 800aabc:	4805      	ldr	r0, [pc, #20]	@ (800aad4 <__i2b+0x28>)
 800aabe:	f240 1145 	movw	r1, #325	@ 0x145
 800aac2:	f000 ffe3 	bl	800ba8c <__assert_func>
 800aac6:	2301      	movs	r3, #1
 800aac8:	6144      	str	r4, [r0, #20]
 800aaca:	6103      	str	r3, [r0, #16]
 800aacc:	bd10      	pop	{r4, pc}
 800aace:	bf00      	nop
 800aad0:	0800bd85 	.word	0x0800bd85
 800aad4:	0800bdf6 	.word	0x0800bdf6

0800aad8 <__multiply>:
 800aad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aadc:	4614      	mov	r4, r2
 800aade:	690a      	ldr	r2, [r1, #16]
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	429a      	cmp	r2, r3
 800aae4:	bfa8      	it	ge
 800aae6:	4623      	movge	r3, r4
 800aae8:	460f      	mov	r7, r1
 800aaea:	bfa4      	itt	ge
 800aaec:	460c      	movge	r4, r1
 800aaee:	461f      	movge	r7, r3
 800aaf0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aaf4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aaf8:	68a3      	ldr	r3, [r4, #8]
 800aafa:	6861      	ldr	r1, [r4, #4]
 800aafc:	eb0a 0609 	add.w	r6, sl, r9
 800ab00:	42b3      	cmp	r3, r6
 800ab02:	b085      	sub	sp, #20
 800ab04:	bfb8      	it	lt
 800ab06:	3101      	addlt	r1, #1
 800ab08:	f7ff fe92 	bl	800a830 <_Balloc>
 800ab0c:	b930      	cbnz	r0, 800ab1c <__multiply+0x44>
 800ab0e:	4602      	mov	r2, r0
 800ab10:	4b44      	ldr	r3, [pc, #272]	@ (800ac24 <__multiply+0x14c>)
 800ab12:	4845      	ldr	r0, [pc, #276]	@ (800ac28 <__multiply+0x150>)
 800ab14:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ab18:	f000 ffb8 	bl	800ba8c <__assert_func>
 800ab1c:	f100 0514 	add.w	r5, r0, #20
 800ab20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ab24:	462b      	mov	r3, r5
 800ab26:	2200      	movs	r2, #0
 800ab28:	4543      	cmp	r3, r8
 800ab2a:	d321      	bcc.n	800ab70 <__multiply+0x98>
 800ab2c:	f107 0114 	add.w	r1, r7, #20
 800ab30:	f104 0214 	add.w	r2, r4, #20
 800ab34:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab38:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab3c:	9302      	str	r3, [sp, #8]
 800ab3e:	1b13      	subs	r3, r2, r4
 800ab40:	3b15      	subs	r3, #21
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	3304      	adds	r3, #4
 800ab48:	f104 0715 	add.w	r7, r4, #21
 800ab4c:	42ba      	cmp	r2, r7
 800ab4e:	bf38      	it	cc
 800ab50:	2304      	movcc	r3, #4
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	9b02      	ldr	r3, [sp, #8]
 800ab56:	9103      	str	r1, [sp, #12]
 800ab58:	428b      	cmp	r3, r1
 800ab5a:	d80c      	bhi.n	800ab76 <__multiply+0x9e>
 800ab5c:	2e00      	cmp	r6, #0
 800ab5e:	dd03      	ble.n	800ab68 <__multiply+0x90>
 800ab60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d05b      	beq.n	800ac20 <__multiply+0x148>
 800ab68:	6106      	str	r6, [r0, #16]
 800ab6a:	b005      	add	sp, #20
 800ab6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab70:	f843 2b04 	str.w	r2, [r3], #4
 800ab74:	e7d8      	b.n	800ab28 <__multiply+0x50>
 800ab76:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab7a:	f1ba 0f00 	cmp.w	sl, #0
 800ab7e:	d024      	beq.n	800abca <__multiply+0xf2>
 800ab80:	f104 0e14 	add.w	lr, r4, #20
 800ab84:	46a9      	mov	r9, r5
 800ab86:	f04f 0c00 	mov.w	ip, #0
 800ab8a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab8e:	f8d9 3000 	ldr.w	r3, [r9]
 800ab92:	fa1f fb87 	uxth.w	fp, r7
 800ab96:	b29b      	uxth	r3, r3
 800ab98:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab9c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aba0:	f8d9 7000 	ldr.w	r7, [r9]
 800aba4:	4463      	add	r3, ip
 800aba6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abaa:	fb0a c70b 	mla	r7, sl, fp, ip
 800abae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800abb2:	b29b      	uxth	r3, r3
 800abb4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abb8:	4572      	cmp	r2, lr
 800abba:	f849 3b04 	str.w	r3, [r9], #4
 800abbe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800abc2:	d8e2      	bhi.n	800ab8a <__multiply+0xb2>
 800abc4:	9b01      	ldr	r3, [sp, #4]
 800abc6:	f845 c003 	str.w	ip, [r5, r3]
 800abca:	9b03      	ldr	r3, [sp, #12]
 800abcc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800abd0:	3104      	adds	r1, #4
 800abd2:	f1b9 0f00 	cmp.w	r9, #0
 800abd6:	d021      	beq.n	800ac1c <__multiply+0x144>
 800abd8:	682b      	ldr	r3, [r5, #0]
 800abda:	f104 0c14 	add.w	ip, r4, #20
 800abde:	46ae      	mov	lr, r5
 800abe0:	f04f 0a00 	mov.w	sl, #0
 800abe4:	f8bc b000 	ldrh.w	fp, [ip]
 800abe8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800abec:	fb09 770b 	mla	r7, r9, fp, r7
 800abf0:	4457      	add	r7, sl
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abf8:	f84e 3b04 	str.w	r3, [lr], #4
 800abfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ac00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac04:	f8be 3000 	ldrh.w	r3, [lr]
 800ac08:	fb09 330a 	mla	r3, r9, sl, r3
 800ac0c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ac10:	4562      	cmp	r2, ip
 800ac12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ac16:	d8e5      	bhi.n	800abe4 <__multiply+0x10c>
 800ac18:	9f01      	ldr	r7, [sp, #4]
 800ac1a:	51eb      	str	r3, [r5, r7]
 800ac1c:	3504      	adds	r5, #4
 800ac1e:	e799      	b.n	800ab54 <__multiply+0x7c>
 800ac20:	3e01      	subs	r6, #1
 800ac22:	e79b      	b.n	800ab5c <__multiply+0x84>
 800ac24:	0800bd85 	.word	0x0800bd85
 800ac28:	0800bdf6 	.word	0x0800bdf6

0800ac2c <__pow5mult>:
 800ac2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac30:	4615      	mov	r5, r2
 800ac32:	f012 0203 	ands.w	r2, r2, #3
 800ac36:	4607      	mov	r7, r0
 800ac38:	460e      	mov	r6, r1
 800ac3a:	d007      	beq.n	800ac4c <__pow5mult+0x20>
 800ac3c:	4c25      	ldr	r4, [pc, #148]	@ (800acd4 <__pow5mult+0xa8>)
 800ac3e:	3a01      	subs	r2, #1
 800ac40:	2300      	movs	r3, #0
 800ac42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac46:	f7ff fe55 	bl	800a8f4 <__multadd>
 800ac4a:	4606      	mov	r6, r0
 800ac4c:	10ad      	asrs	r5, r5, #2
 800ac4e:	d03d      	beq.n	800accc <__pow5mult+0xa0>
 800ac50:	69fc      	ldr	r4, [r7, #28]
 800ac52:	b97c      	cbnz	r4, 800ac74 <__pow5mult+0x48>
 800ac54:	2010      	movs	r0, #16
 800ac56:	f7ff fd23 	bl	800a6a0 <malloc>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	61f8      	str	r0, [r7, #28]
 800ac5e:	b928      	cbnz	r0, 800ac6c <__pow5mult+0x40>
 800ac60:	4b1d      	ldr	r3, [pc, #116]	@ (800acd8 <__pow5mult+0xac>)
 800ac62:	481e      	ldr	r0, [pc, #120]	@ (800acdc <__pow5mult+0xb0>)
 800ac64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac68:	f000 ff10 	bl	800ba8c <__assert_func>
 800ac6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac70:	6004      	str	r4, [r0, #0]
 800ac72:	60c4      	str	r4, [r0, #12]
 800ac74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac7c:	b94c      	cbnz	r4, 800ac92 <__pow5mult+0x66>
 800ac7e:	f240 2171 	movw	r1, #625	@ 0x271
 800ac82:	4638      	mov	r0, r7
 800ac84:	f7ff ff12 	bl	800aaac <__i2b>
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac8e:	4604      	mov	r4, r0
 800ac90:	6003      	str	r3, [r0, #0]
 800ac92:	f04f 0900 	mov.w	r9, #0
 800ac96:	07eb      	lsls	r3, r5, #31
 800ac98:	d50a      	bpl.n	800acb0 <__pow5mult+0x84>
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4622      	mov	r2, r4
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f7ff ff1a 	bl	800aad8 <__multiply>
 800aca4:	4631      	mov	r1, r6
 800aca6:	4680      	mov	r8, r0
 800aca8:	4638      	mov	r0, r7
 800acaa:	f7ff fe01 	bl	800a8b0 <_Bfree>
 800acae:	4646      	mov	r6, r8
 800acb0:	106d      	asrs	r5, r5, #1
 800acb2:	d00b      	beq.n	800accc <__pow5mult+0xa0>
 800acb4:	6820      	ldr	r0, [r4, #0]
 800acb6:	b938      	cbnz	r0, 800acc8 <__pow5mult+0x9c>
 800acb8:	4622      	mov	r2, r4
 800acba:	4621      	mov	r1, r4
 800acbc:	4638      	mov	r0, r7
 800acbe:	f7ff ff0b 	bl	800aad8 <__multiply>
 800acc2:	6020      	str	r0, [r4, #0]
 800acc4:	f8c0 9000 	str.w	r9, [r0]
 800acc8:	4604      	mov	r4, r0
 800acca:	e7e4      	b.n	800ac96 <__pow5mult+0x6a>
 800accc:	4630      	mov	r0, r6
 800acce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd2:	bf00      	nop
 800acd4:	0800be50 	.word	0x0800be50
 800acd8:	0800bd16 	.word	0x0800bd16
 800acdc:	0800bdf6 	.word	0x0800bdf6

0800ace0 <__lshift>:
 800ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace4:	460c      	mov	r4, r1
 800ace6:	6849      	ldr	r1, [r1, #4]
 800ace8:	6923      	ldr	r3, [r4, #16]
 800acea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acee:	68a3      	ldr	r3, [r4, #8]
 800acf0:	4607      	mov	r7, r0
 800acf2:	4691      	mov	r9, r2
 800acf4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800acf8:	f108 0601 	add.w	r6, r8, #1
 800acfc:	42b3      	cmp	r3, r6
 800acfe:	db0b      	blt.n	800ad18 <__lshift+0x38>
 800ad00:	4638      	mov	r0, r7
 800ad02:	f7ff fd95 	bl	800a830 <_Balloc>
 800ad06:	4605      	mov	r5, r0
 800ad08:	b948      	cbnz	r0, 800ad1e <__lshift+0x3e>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	4b28      	ldr	r3, [pc, #160]	@ (800adb0 <__lshift+0xd0>)
 800ad0e:	4829      	ldr	r0, [pc, #164]	@ (800adb4 <__lshift+0xd4>)
 800ad10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ad14:	f000 feba 	bl	800ba8c <__assert_func>
 800ad18:	3101      	adds	r1, #1
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	e7ee      	b.n	800acfc <__lshift+0x1c>
 800ad1e:	2300      	movs	r3, #0
 800ad20:	f100 0114 	add.w	r1, r0, #20
 800ad24:	f100 0210 	add.w	r2, r0, #16
 800ad28:	4618      	mov	r0, r3
 800ad2a:	4553      	cmp	r3, sl
 800ad2c:	db33      	blt.n	800ad96 <__lshift+0xb6>
 800ad2e:	6920      	ldr	r0, [r4, #16]
 800ad30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad34:	f104 0314 	add.w	r3, r4, #20
 800ad38:	f019 091f 	ands.w	r9, r9, #31
 800ad3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad44:	d02b      	beq.n	800ad9e <__lshift+0xbe>
 800ad46:	f1c9 0e20 	rsb	lr, r9, #32
 800ad4a:	468a      	mov	sl, r1
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	fa00 f009 	lsl.w	r0, r0, r9
 800ad54:	4310      	orrs	r0, r2
 800ad56:	f84a 0b04 	str.w	r0, [sl], #4
 800ad5a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad5e:	459c      	cmp	ip, r3
 800ad60:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad64:	d8f3      	bhi.n	800ad4e <__lshift+0x6e>
 800ad66:	ebac 0304 	sub.w	r3, ip, r4
 800ad6a:	3b15      	subs	r3, #21
 800ad6c:	f023 0303 	bic.w	r3, r3, #3
 800ad70:	3304      	adds	r3, #4
 800ad72:	f104 0015 	add.w	r0, r4, #21
 800ad76:	4584      	cmp	ip, r0
 800ad78:	bf38      	it	cc
 800ad7a:	2304      	movcc	r3, #4
 800ad7c:	50ca      	str	r2, [r1, r3]
 800ad7e:	b10a      	cbz	r2, 800ad84 <__lshift+0xa4>
 800ad80:	f108 0602 	add.w	r6, r8, #2
 800ad84:	3e01      	subs	r6, #1
 800ad86:	4638      	mov	r0, r7
 800ad88:	612e      	str	r6, [r5, #16]
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	f7ff fd90 	bl	800a8b0 <_Bfree>
 800ad90:	4628      	mov	r0, r5
 800ad92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad96:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad9a:	3301      	adds	r3, #1
 800ad9c:	e7c5      	b.n	800ad2a <__lshift+0x4a>
 800ad9e:	3904      	subs	r1, #4
 800ada0:	f853 2b04 	ldr.w	r2, [r3], #4
 800ada4:	f841 2f04 	str.w	r2, [r1, #4]!
 800ada8:	459c      	cmp	ip, r3
 800adaa:	d8f9      	bhi.n	800ada0 <__lshift+0xc0>
 800adac:	e7ea      	b.n	800ad84 <__lshift+0xa4>
 800adae:	bf00      	nop
 800adb0:	0800bd85 	.word	0x0800bd85
 800adb4:	0800bdf6 	.word	0x0800bdf6

0800adb8 <__mcmp>:
 800adb8:	690a      	ldr	r2, [r1, #16]
 800adba:	4603      	mov	r3, r0
 800adbc:	6900      	ldr	r0, [r0, #16]
 800adbe:	1a80      	subs	r0, r0, r2
 800adc0:	b530      	push	{r4, r5, lr}
 800adc2:	d10e      	bne.n	800ade2 <__mcmp+0x2a>
 800adc4:	3314      	adds	r3, #20
 800adc6:	3114      	adds	r1, #20
 800adc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800adcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800add0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800add4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800add8:	4295      	cmp	r5, r2
 800adda:	d003      	beq.n	800ade4 <__mcmp+0x2c>
 800addc:	d205      	bcs.n	800adea <__mcmp+0x32>
 800adde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ade2:	bd30      	pop	{r4, r5, pc}
 800ade4:	42a3      	cmp	r3, r4
 800ade6:	d3f3      	bcc.n	800add0 <__mcmp+0x18>
 800ade8:	e7fb      	b.n	800ade2 <__mcmp+0x2a>
 800adea:	2001      	movs	r0, #1
 800adec:	e7f9      	b.n	800ade2 <__mcmp+0x2a>
	...

0800adf0 <__mdiff>:
 800adf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	4689      	mov	r9, r1
 800adf6:	4606      	mov	r6, r0
 800adf8:	4611      	mov	r1, r2
 800adfa:	4648      	mov	r0, r9
 800adfc:	4614      	mov	r4, r2
 800adfe:	f7ff ffdb 	bl	800adb8 <__mcmp>
 800ae02:	1e05      	subs	r5, r0, #0
 800ae04:	d112      	bne.n	800ae2c <__mdiff+0x3c>
 800ae06:	4629      	mov	r1, r5
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7ff fd11 	bl	800a830 <_Balloc>
 800ae0e:	4602      	mov	r2, r0
 800ae10:	b928      	cbnz	r0, 800ae1e <__mdiff+0x2e>
 800ae12:	4b3f      	ldr	r3, [pc, #252]	@ (800af10 <__mdiff+0x120>)
 800ae14:	f240 2137 	movw	r1, #567	@ 0x237
 800ae18:	483e      	ldr	r0, [pc, #248]	@ (800af14 <__mdiff+0x124>)
 800ae1a:	f000 fe37 	bl	800ba8c <__assert_func>
 800ae1e:	2301      	movs	r3, #1
 800ae20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ae24:	4610      	mov	r0, r2
 800ae26:	b003      	add	sp, #12
 800ae28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2c:	bfbc      	itt	lt
 800ae2e:	464b      	movlt	r3, r9
 800ae30:	46a1      	movlt	r9, r4
 800ae32:	4630      	mov	r0, r6
 800ae34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae38:	bfba      	itte	lt
 800ae3a:	461c      	movlt	r4, r3
 800ae3c:	2501      	movlt	r5, #1
 800ae3e:	2500      	movge	r5, #0
 800ae40:	f7ff fcf6 	bl	800a830 <_Balloc>
 800ae44:	4602      	mov	r2, r0
 800ae46:	b918      	cbnz	r0, 800ae50 <__mdiff+0x60>
 800ae48:	4b31      	ldr	r3, [pc, #196]	@ (800af10 <__mdiff+0x120>)
 800ae4a:	f240 2145 	movw	r1, #581	@ 0x245
 800ae4e:	e7e3      	b.n	800ae18 <__mdiff+0x28>
 800ae50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae54:	6926      	ldr	r6, [r4, #16]
 800ae56:	60c5      	str	r5, [r0, #12]
 800ae58:	f109 0310 	add.w	r3, r9, #16
 800ae5c:	f109 0514 	add.w	r5, r9, #20
 800ae60:	f104 0e14 	add.w	lr, r4, #20
 800ae64:	f100 0b14 	add.w	fp, r0, #20
 800ae68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	46d9      	mov	r9, fp
 800ae74:	f04f 0c00 	mov.w	ip, #0
 800ae78:	9b01      	ldr	r3, [sp, #4]
 800ae7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ae7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ae82:	9301      	str	r3, [sp, #4]
 800ae84:	fa1f f38a 	uxth.w	r3, sl
 800ae88:	4619      	mov	r1, r3
 800ae8a:	b283      	uxth	r3, r0
 800ae8c:	1acb      	subs	r3, r1, r3
 800ae8e:	0c00      	lsrs	r0, r0, #16
 800ae90:	4463      	add	r3, ip
 800ae92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aea0:	4576      	cmp	r6, lr
 800aea2:	f849 3b04 	str.w	r3, [r9], #4
 800aea6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aeaa:	d8e5      	bhi.n	800ae78 <__mdiff+0x88>
 800aeac:	1b33      	subs	r3, r6, r4
 800aeae:	3b15      	subs	r3, #21
 800aeb0:	f023 0303 	bic.w	r3, r3, #3
 800aeb4:	3415      	adds	r4, #21
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	42a6      	cmp	r6, r4
 800aeba:	bf38      	it	cc
 800aebc:	2304      	movcc	r3, #4
 800aebe:	441d      	add	r5, r3
 800aec0:	445b      	add	r3, fp
 800aec2:	461e      	mov	r6, r3
 800aec4:	462c      	mov	r4, r5
 800aec6:	4544      	cmp	r4, r8
 800aec8:	d30e      	bcc.n	800aee8 <__mdiff+0xf8>
 800aeca:	f108 0103 	add.w	r1, r8, #3
 800aece:	1b49      	subs	r1, r1, r5
 800aed0:	f021 0103 	bic.w	r1, r1, #3
 800aed4:	3d03      	subs	r5, #3
 800aed6:	45a8      	cmp	r8, r5
 800aed8:	bf38      	it	cc
 800aeda:	2100      	movcc	r1, #0
 800aedc:	440b      	add	r3, r1
 800aede:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aee2:	b191      	cbz	r1, 800af0a <__mdiff+0x11a>
 800aee4:	6117      	str	r7, [r2, #16]
 800aee6:	e79d      	b.n	800ae24 <__mdiff+0x34>
 800aee8:	f854 1b04 	ldr.w	r1, [r4], #4
 800aeec:	46e6      	mov	lr, ip
 800aeee:	0c08      	lsrs	r0, r1, #16
 800aef0:	fa1c fc81 	uxtah	ip, ip, r1
 800aef4:	4471      	add	r1, lr
 800aef6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aefa:	b289      	uxth	r1, r1
 800aefc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800af00:	f846 1b04 	str.w	r1, [r6], #4
 800af04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800af08:	e7dd      	b.n	800aec6 <__mdiff+0xd6>
 800af0a:	3f01      	subs	r7, #1
 800af0c:	e7e7      	b.n	800aede <__mdiff+0xee>
 800af0e:	bf00      	nop
 800af10:	0800bd85 	.word	0x0800bd85
 800af14:	0800bdf6 	.word	0x0800bdf6

0800af18 <__ulp>:
 800af18:	b082      	sub	sp, #8
 800af1a:	ed8d 0b00 	vstr	d0, [sp]
 800af1e:	9a01      	ldr	r2, [sp, #4]
 800af20:	4b0f      	ldr	r3, [pc, #60]	@ (800af60 <__ulp+0x48>)
 800af22:	4013      	ands	r3, r2
 800af24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dc08      	bgt.n	800af3e <__ulp+0x26>
 800af2c:	425b      	negs	r3, r3
 800af2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800af32:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af36:	da04      	bge.n	800af42 <__ulp+0x2a>
 800af38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800af3c:	4113      	asrs	r3, r2
 800af3e:	2200      	movs	r2, #0
 800af40:	e008      	b.n	800af54 <__ulp+0x3c>
 800af42:	f1a2 0314 	sub.w	r3, r2, #20
 800af46:	2b1e      	cmp	r3, #30
 800af48:	bfda      	itte	le
 800af4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800af4e:	40da      	lsrle	r2, r3
 800af50:	2201      	movgt	r2, #1
 800af52:	2300      	movs	r3, #0
 800af54:	4619      	mov	r1, r3
 800af56:	4610      	mov	r0, r2
 800af58:	ec41 0b10 	vmov	d0, r0, r1
 800af5c:	b002      	add	sp, #8
 800af5e:	4770      	bx	lr
 800af60:	7ff00000 	.word	0x7ff00000

0800af64 <__b2d>:
 800af64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af68:	6906      	ldr	r6, [r0, #16]
 800af6a:	f100 0814 	add.w	r8, r0, #20
 800af6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800af72:	1f37      	subs	r7, r6, #4
 800af74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af78:	4610      	mov	r0, r2
 800af7a:	f7ff fd4b 	bl	800aa14 <__hi0bits>
 800af7e:	f1c0 0320 	rsb	r3, r0, #32
 800af82:	280a      	cmp	r0, #10
 800af84:	600b      	str	r3, [r1, #0]
 800af86:	491b      	ldr	r1, [pc, #108]	@ (800aff4 <__b2d+0x90>)
 800af88:	dc15      	bgt.n	800afb6 <__b2d+0x52>
 800af8a:	f1c0 0c0b 	rsb	ip, r0, #11
 800af8e:	fa22 f30c 	lsr.w	r3, r2, ip
 800af92:	45b8      	cmp	r8, r7
 800af94:	ea43 0501 	orr.w	r5, r3, r1
 800af98:	bf34      	ite	cc
 800af9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af9e:	2300      	movcs	r3, #0
 800afa0:	3015      	adds	r0, #21
 800afa2:	fa02 f000 	lsl.w	r0, r2, r0
 800afa6:	fa23 f30c 	lsr.w	r3, r3, ip
 800afaa:	4303      	orrs	r3, r0
 800afac:	461c      	mov	r4, r3
 800afae:	ec45 4b10 	vmov	d0, r4, r5
 800afb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afb6:	45b8      	cmp	r8, r7
 800afb8:	bf3a      	itte	cc
 800afba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800afbe:	f1a6 0708 	subcc.w	r7, r6, #8
 800afc2:	2300      	movcs	r3, #0
 800afc4:	380b      	subs	r0, #11
 800afc6:	d012      	beq.n	800afee <__b2d+0x8a>
 800afc8:	f1c0 0120 	rsb	r1, r0, #32
 800afcc:	fa23 f401 	lsr.w	r4, r3, r1
 800afd0:	4082      	lsls	r2, r0
 800afd2:	4322      	orrs	r2, r4
 800afd4:	4547      	cmp	r7, r8
 800afd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800afda:	bf8c      	ite	hi
 800afdc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800afe0:	2200      	movls	r2, #0
 800afe2:	4083      	lsls	r3, r0
 800afe4:	40ca      	lsrs	r2, r1
 800afe6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800afea:	4313      	orrs	r3, r2
 800afec:	e7de      	b.n	800afac <__b2d+0x48>
 800afee:	ea42 0501 	orr.w	r5, r2, r1
 800aff2:	e7db      	b.n	800afac <__b2d+0x48>
 800aff4:	3ff00000 	.word	0x3ff00000

0800aff8 <__d2b>:
 800aff8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800affc:	460f      	mov	r7, r1
 800affe:	2101      	movs	r1, #1
 800b000:	ec59 8b10 	vmov	r8, r9, d0
 800b004:	4616      	mov	r6, r2
 800b006:	f7ff fc13 	bl	800a830 <_Balloc>
 800b00a:	4604      	mov	r4, r0
 800b00c:	b930      	cbnz	r0, 800b01c <__d2b+0x24>
 800b00e:	4602      	mov	r2, r0
 800b010:	4b23      	ldr	r3, [pc, #140]	@ (800b0a0 <__d2b+0xa8>)
 800b012:	4824      	ldr	r0, [pc, #144]	@ (800b0a4 <__d2b+0xac>)
 800b014:	f240 310f 	movw	r1, #783	@ 0x30f
 800b018:	f000 fd38 	bl	800ba8c <__assert_func>
 800b01c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b024:	b10d      	cbz	r5, 800b02a <__d2b+0x32>
 800b026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b02a:	9301      	str	r3, [sp, #4]
 800b02c:	f1b8 0300 	subs.w	r3, r8, #0
 800b030:	d023      	beq.n	800b07a <__d2b+0x82>
 800b032:	4668      	mov	r0, sp
 800b034:	9300      	str	r3, [sp, #0]
 800b036:	f7ff fd0c 	bl	800aa52 <__lo0bits>
 800b03a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b03e:	b1d0      	cbz	r0, 800b076 <__d2b+0x7e>
 800b040:	f1c0 0320 	rsb	r3, r0, #32
 800b044:	fa02 f303 	lsl.w	r3, r2, r3
 800b048:	430b      	orrs	r3, r1
 800b04a:	40c2      	lsrs	r2, r0
 800b04c:	6163      	str	r3, [r4, #20]
 800b04e:	9201      	str	r2, [sp, #4]
 800b050:	9b01      	ldr	r3, [sp, #4]
 800b052:	61a3      	str	r3, [r4, #24]
 800b054:	2b00      	cmp	r3, #0
 800b056:	bf0c      	ite	eq
 800b058:	2201      	moveq	r2, #1
 800b05a:	2202      	movne	r2, #2
 800b05c:	6122      	str	r2, [r4, #16]
 800b05e:	b1a5      	cbz	r5, 800b08a <__d2b+0x92>
 800b060:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b064:	4405      	add	r5, r0
 800b066:	603d      	str	r5, [r7, #0]
 800b068:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b06c:	6030      	str	r0, [r6, #0]
 800b06e:	4620      	mov	r0, r4
 800b070:	b003      	add	sp, #12
 800b072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b076:	6161      	str	r1, [r4, #20]
 800b078:	e7ea      	b.n	800b050 <__d2b+0x58>
 800b07a:	a801      	add	r0, sp, #4
 800b07c:	f7ff fce9 	bl	800aa52 <__lo0bits>
 800b080:	9b01      	ldr	r3, [sp, #4]
 800b082:	6163      	str	r3, [r4, #20]
 800b084:	3020      	adds	r0, #32
 800b086:	2201      	movs	r2, #1
 800b088:	e7e8      	b.n	800b05c <__d2b+0x64>
 800b08a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b08e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b092:	6038      	str	r0, [r7, #0]
 800b094:	6918      	ldr	r0, [r3, #16]
 800b096:	f7ff fcbd 	bl	800aa14 <__hi0bits>
 800b09a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b09e:	e7e5      	b.n	800b06c <__d2b+0x74>
 800b0a0:	0800bd85 	.word	0x0800bd85
 800b0a4:	0800bdf6 	.word	0x0800bdf6

0800b0a8 <__ratio>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	b085      	sub	sp, #20
 800b0ae:	e9cd 1000 	strd	r1, r0, [sp]
 800b0b2:	a902      	add	r1, sp, #8
 800b0b4:	f7ff ff56 	bl	800af64 <__b2d>
 800b0b8:	9800      	ldr	r0, [sp, #0]
 800b0ba:	a903      	add	r1, sp, #12
 800b0bc:	ec55 4b10 	vmov	r4, r5, d0
 800b0c0:	f7ff ff50 	bl	800af64 <__b2d>
 800b0c4:	9b01      	ldr	r3, [sp, #4]
 800b0c6:	6919      	ldr	r1, [r3, #16]
 800b0c8:	9b00      	ldr	r3, [sp, #0]
 800b0ca:	691b      	ldr	r3, [r3, #16]
 800b0cc:	1ac9      	subs	r1, r1, r3
 800b0ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800b0d2:	1a9b      	subs	r3, r3, r2
 800b0d4:	ec5b ab10 	vmov	sl, fp, d0
 800b0d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfce      	itee	gt
 800b0e0:	462a      	movgt	r2, r5
 800b0e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0e6:	465a      	movle	r2, fp
 800b0e8:	462f      	mov	r7, r5
 800b0ea:	46d9      	mov	r9, fp
 800b0ec:	bfcc      	ite	gt
 800b0ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b0f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	4652      	mov	r2, sl
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	4639      	mov	r1, r7
 800b0fe:	f7f5 fbcd 	bl	800089c <__aeabi_ddiv>
 800b102:	ec41 0b10 	vmov	d0, r0, r1
 800b106:	b005      	add	sp, #20
 800b108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b10c <__copybits>:
 800b10c:	3901      	subs	r1, #1
 800b10e:	b570      	push	{r4, r5, r6, lr}
 800b110:	1149      	asrs	r1, r1, #5
 800b112:	6914      	ldr	r4, [r2, #16]
 800b114:	3101      	adds	r1, #1
 800b116:	f102 0314 	add.w	r3, r2, #20
 800b11a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b11e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b122:	1f05      	subs	r5, r0, #4
 800b124:	42a3      	cmp	r3, r4
 800b126:	d30c      	bcc.n	800b142 <__copybits+0x36>
 800b128:	1aa3      	subs	r3, r4, r2
 800b12a:	3b11      	subs	r3, #17
 800b12c:	f023 0303 	bic.w	r3, r3, #3
 800b130:	3211      	adds	r2, #17
 800b132:	42a2      	cmp	r2, r4
 800b134:	bf88      	it	hi
 800b136:	2300      	movhi	r3, #0
 800b138:	4418      	add	r0, r3
 800b13a:	2300      	movs	r3, #0
 800b13c:	4288      	cmp	r0, r1
 800b13e:	d305      	bcc.n	800b14c <__copybits+0x40>
 800b140:	bd70      	pop	{r4, r5, r6, pc}
 800b142:	f853 6b04 	ldr.w	r6, [r3], #4
 800b146:	f845 6f04 	str.w	r6, [r5, #4]!
 800b14a:	e7eb      	b.n	800b124 <__copybits+0x18>
 800b14c:	f840 3b04 	str.w	r3, [r0], #4
 800b150:	e7f4      	b.n	800b13c <__copybits+0x30>

0800b152 <__any_on>:
 800b152:	f100 0214 	add.w	r2, r0, #20
 800b156:	6900      	ldr	r0, [r0, #16]
 800b158:	114b      	asrs	r3, r1, #5
 800b15a:	4298      	cmp	r0, r3
 800b15c:	b510      	push	{r4, lr}
 800b15e:	db11      	blt.n	800b184 <__any_on+0x32>
 800b160:	dd0a      	ble.n	800b178 <__any_on+0x26>
 800b162:	f011 011f 	ands.w	r1, r1, #31
 800b166:	d007      	beq.n	800b178 <__any_on+0x26>
 800b168:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b16c:	fa24 f001 	lsr.w	r0, r4, r1
 800b170:	fa00 f101 	lsl.w	r1, r0, r1
 800b174:	428c      	cmp	r4, r1
 800b176:	d10b      	bne.n	800b190 <__any_on+0x3e>
 800b178:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d803      	bhi.n	800b188 <__any_on+0x36>
 800b180:	2000      	movs	r0, #0
 800b182:	bd10      	pop	{r4, pc}
 800b184:	4603      	mov	r3, r0
 800b186:	e7f7      	b.n	800b178 <__any_on+0x26>
 800b188:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b18c:	2900      	cmp	r1, #0
 800b18e:	d0f5      	beq.n	800b17c <__any_on+0x2a>
 800b190:	2001      	movs	r0, #1
 800b192:	e7f6      	b.n	800b182 <__any_on+0x30>

0800b194 <_strtol_l.constprop.0>:
 800b194:	2b24      	cmp	r3, #36	@ 0x24
 800b196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b19a:	4686      	mov	lr, r0
 800b19c:	4690      	mov	r8, r2
 800b19e:	d801      	bhi.n	800b1a4 <_strtol_l.constprop.0+0x10>
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d106      	bne.n	800b1b2 <_strtol_l.constprop.0+0x1e>
 800b1a4:	f7fe f860 	bl	8009268 <__errno>
 800b1a8:	2316      	movs	r3, #22
 800b1aa:	6003      	str	r3, [r0, #0]
 800b1ac:	2000      	movs	r0, #0
 800b1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1b2:	4834      	ldr	r0, [pc, #208]	@ (800b284 <_strtol_l.constprop.0+0xf0>)
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	462a      	mov	r2, r5
 800b1b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b1bc:	5d06      	ldrb	r6, [r0, r4]
 800b1be:	f016 0608 	ands.w	r6, r6, #8
 800b1c2:	d1f8      	bne.n	800b1b6 <_strtol_l.constprop.0+0x22>
 800b1c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800b1c6:	d12d      	bne.n	800b224 <_strtol_l.constprop.0+0x90>
 800b1c8:	782c      	ldrb	r4, [r5, #0]
 800b1ca:	2601      	movs	r6, #1
 800b1cc:	1c95      	adds	r5, r2, #2
 800b1ce:	f033 0210 	bics.w	r2, r3, #16
 800b1d2:	d109      	bne.n	800b1e8 <_strtol_l.constprop.0+0x54>
 800b1d4:	2c30      	cmp	r4, #48	@ 0x30
 800b1d6:	d12a      	bne.n	800b22e <_strtol_l.constprop.0+0x9a>
 800b1d8:	782a      	ldrb	r2, [r5, #0]
 800b1da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b1de:	2a58      	cmp	r2, #88	@ 0x58
 800b1e0:	d125      	bne.n	800b22e <_strtol_l.constprop.0+0x9a>
 800b1e2:	786c      	ldrb	r4, [r5, #1]
 800b1e4:	2310      	movs	r3, #16
 800b1e6:	3502      	adds	r5, #2
 800b1e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b1ec:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	fbbc f9f3 	udiv	r9, ip, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	fb03 ca19 	mls	sl, r3, r9, ip
 800b1fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b200:	2f09      	cmp	r7, #9
 800b202:	d81b      	bhi.n	800b23c <_strtol_l.constprop.0+0xa8>
 800b204:	463c      	mov	r4, r7
 800b206:	42a3      	cmp	r3, r4
 800b208:	dd27      	ble.n	800b25a <_strtol_l.constprop.0+0xc6>
 800b20a:	1c57      	adds	r7, r2, #1
 800b20c:	d007      	beq.n	800b21e <_strtol_l.constprop.0+0x8a>
 800b20e:	4581      	cmp	r9, r0
 800b210:	d320      	bcc.n	800b254 <_strtol_l.constprop.0+0xc0>
 800b212:	d101      	bne.n	800b218 <_strtol_l.constprop.0+0x84>
 800b214:	45a2      	cmp	sl, r4
 800b216:	db1d      	blt.n	800b254 <_strtol_l.constprop.0+0xc0>
 800b218:	fb00 4003 	mla	r0, r0, r3, r4
 800b21c:	2201      	movs	r2, #1
 800b21e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b222:	e7eb      	b.n	800b1fc <_strtol_l.constprop.0+0x68>
 800b224:	2c2b      	cmp	r4, #43	@ 0x2b
 800b226:	bf04      	itt	eq
 800b228:	782c      	ldrbeq	r4, [r5, #0]
 800b22a:	1c95      	addeq	r5, r2, #2
 800b22c:	e7cf      	b.n	800b1ce <_strtol_l.constprop.0+0x3a>
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1da      	bne.n	800b1e8 <_strtol_l.constprop.0+0x54>
 800b232:	2c30      	cmp	r4, #48	@ 0x30
 800b234:	bf0c      	ite	eq
 800b236:	2308      	moveq	r3, #8
 800b238:	230a      	movne	r3, #10
 800b23a:	e7d5      	b.n	800b1e8 <_strtol_l.constprop.0+0x54>
 800b23c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b240:	2f19      	cmp	r7, #25
 800b242:	d801      	bhi.n	800b248 <_strtol_l.constprop.0+0xb4>
 800b244:	3c37      	subs	r4, #55	@ 0x37
 800b246:	e7de      	b.n	800b206 <_strtol_l.constprop.0+0x72>
 800b248:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b24c:	2f19      	cmp	r7, #25
 800b24e:	d804      	bhi.n	800b25a <_strtol_l.constprop.0+0xc6>
 800b250:	3c57      	subs	r4, #87	@ 0x57
 800b252:	e7d8      	b.n	800b206 <_strtol_l.constprop.0+0x72>
 800b254:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b258:	e7e1      	b.n	800b21e <_strtol_l.constprop.0+0x8a>
 800b25a:	1c53      	adds	r3, r2, #1
 800b25c:	d108      	bne.n	800b270 <_strtol_l.constprop.0+0xdc>
 800b25e:	2322      	movs	r3, #34	@ 0x22
 800b260:	f8ce 3000 	str.w	r3, [lr]
 800b264:	4660      	mov	r0, ip
 800b266:	f1b8 0f00 	cmp.w	r8, #0
 800b26a:	d0a0      	beq.n	800b1ae <_strtol_l.constprop.0+0x1a>
 800b26c:	1e69      	subs	r1, r5, #1
 800b26e:	e006      	b.n	800b27e <_strtol_l.constprop.0+0xea>
 800b270:	b106      	cbz	r6, 800b274 <_strtol_l.constprop.0+0xe0>
 800b272:	4240      	negs	r0, r0
 800b274:	f1b8 0f00 	cmp.w	r8, #0
 800b278:	d099      	beq.n	800b1ae <_strtol_l.constprop.0+0x1a>
 800b27a:	2a00      	cmp	r2, #0
 800b27c:	d1f6      	bne.n	800b26c <_strtol_l.constprop.0+0xd8>
 800b27e:	f8c8 1000 	str.w	r1, [r8]
 800b282:	e794      	b.n	800b1ae <_strtol_l.constprop.0+0x1a>
 800b284:	0800bf51 	.word	0x0800bf51

0800b288 <_strtol_r>:
 800b288:	f7ff bf84 	b.w	800b194 <_strtol_l.constprop.0>

0800b28c <__ascii_wctomb>:
 800b28c:	4603      	mov	r3, r0
 800b28e:	4608      	mov	r0, r1
 800b290:	b141      	cbz	r1, 800b2a4 <__ascii_wctomb+0x18>
 800b292:	2aff      	cmp	r2, #255	@ 0xff
 800b294:	d904      	bls.n	800b2a0 <__ascii_wctomb+0x14>
 800b296:	228a      	movs	r2, #138	@ 0x8a
 800b298:	601a      	str	r2, [r3, #0]
 800b29a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b29e:	4770      	bx	lr
 800b2a0:	700a      	strb	r2, [r1, #0]
 800b2a2:	2001      	movs	r0, #1
 800b2a4:	4770      	bx	lr

0800b2a6 <__ssputs_r>:
 800b2a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2aa:	688e      	ldr	r6, [r1, #8]
 800b2ac:	461f      	mov	r7, r3
 800b2ae:	42be      	cmp	r6, r7
 800b2b0:	680b      	ldr	r3, [r1, #0]
 800b2b2:	4682      	mov	sl, r0
 800b2b4:	460c      	mov	r4, r1
 800b2b6:	4690      	mov	r8, r2
 800b2b8:	d82d      	bhi.n	800b316 <__ssputs_r+0x70>
 800b2ba:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b2be:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b2c2:	d026      	beq.n	800b312 <__ssputs_r+0x6c>
 800b2c4:	6965      	ldr	r5, [r4, #20]
 800b2c6:	6909      	ldr	r1, [r1, #16]
 800b2c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2cc:	eba3 0901 	sub.w	r9, r3, r1
 800b2d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2d4:	1c7b      	adds	r3, r7, #1
 800b2d6:	444b      	add	r3, r9
 800b2d8:	106d      	asrs	r5, r5, #1
 800b2da:	429d      	cmp	r5, r3
 800b2dc:	bf38      	it	cc
 800b2de:	461d      	movcc	r5, r3
 800b2e0:	0553      	lsls	r3, r2, #21
 800b2e2:	d527      	bpl.n	800b334 <__ssputs_r+0x8e>
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	f7ff fa05 	bl	800a6f4 <_malloc_r>
 800b2ea:	4606      	mov	r6, r0
 800b2ec:	b360      	cbz	r0, 800b348 <__ssputs_r+0xa2>
 800b2ee:	6921      	ldr	r1, [r4, #16]
 800b2f0:	464a      	mov	r2, r9
 800b2f2:	f7fd ffe6 	bl	80092c2 <memcpy>
 800b2f6:	89a3      	ldrh	r3, [r4, #12]
 800b2f8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b2fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b300:	81a3      	strh	r3, [r4, #12]
 800b302:	6126      	str	r6, [r4, #16]
 800b304:	6165      	str	r5, [r4, #20]
 800b306:	444e      	add	r6, r9
 800b308:	eba5 0509 	sub.w	r5, r5, r9
 800b30c:	6026      	str	r6, [r4, #0]
 800b30e:	60a5      	str	r5, [r4, #8]
 800b310:	463e      	mov	r6, r7
 800b312:	42be      	cmp	r6, r7
 800b314:	d900      	bls.n	800b318 <__ssputs_r+0x72>
 800b316:	463e      	mov	r6, r7
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	4632      	mov	r2, r6
 800b31c:	4641      	mov	r1, r8
 800b31e:	f000 fb69 	bl	800b9f4 <memmove>
 800b322:	68a3      	ldr	r3, [r4, #8]
 800b324:	1b9b      	subs	r3, r3, r6
 800b326:	60a3      	str	r3, [r4, #8]
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	4433      	add	r3, r6
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	2000      	movs	r0, #0
 800b330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b334:	462a      	mov	r2, r5
 800b336:	f000 fbdb 	bl	800baf0 <_realloc_r>
 800b33a:	4606      	mov	r6, r0
 800b33c:	2800      	cmp	r0, #0
 800b33e:	d1e0      	bne.n	800b302 <__ssputs_r+0x5c>
 800b340:	6921      	ldr	r1, [r4, #16]
 800b342:	4650      	mov	r0, sl
 800b344:	f7fe fe28 	bl	8009f98 <_free_r>
 800b348:	230c      	movs	r3, #12
 800b34a:	f8ca 3000 	str.w	r3, [sl]
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b354:	81a3      	strh	r3, [r4, #12]
 800b356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b35a:	e7e9      	b.n	800b330 <__ssputs_r+0x8a>

0800b35c <_svfiprintf_r>:
 800b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b360:	4698      	mov	r8, r3
 800b362:	898b      	ldrh	r3, [r1, #12]
 800b364:	061b      	lsls	r3, r3, #24
 800b366:	b09d      	sub	sp, #116	@ 0x74
 800b368:	4607      	mov	r7, r0
 800b36a:	460d      	mov	r5, r1
 800b36c:	4614      	mov	r4, r2
 800b36e:	d510      	bpl.n	800b392 <_svfiprintf_r+0x36>
 800b370:	690b      	ldr	r3, [r1, #16]
 800b372:	b973      	cbnz	r3, 800b392 <_svfiprintf_r+0x36>
 800b374:	2140      	movs	r1, #64	@ 0x40
 800b376:	f7ff f9bd 	bl	800a6f4 <_malloc_r>
 800b37a:	6028      	str	r0, [r5, #0]
 800b37c:	6128      	str	r0, [r5, #16]
 800b37e:	b930      	cbnz	r0, 800b38e <_svfiprintf_r+0x32>
 800b380:	230c      	movs	r3, #12
 800b382:	603b      	str	r3, [r7, #0]
 800b384:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b388:	b01d      	add	sp, #116	@ 0x74
 800b38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b38e:	2340      	movs	r3, #64	@ 0x40
 800b390:	616b      	str	r3, [r5, #20]
 800b392:	2300      	movs	r3, #0
 800b394:	9309      	str	r3, [sp, #36]	@ 0x24
 800b396:	2320      	movs	r3, #32
 800b398:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b39c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b3a0:	2330      	movs	r3, #48	@ 0x30
 800b3a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b540 <_svfiprintf_r+0x1e4>
 800b3a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b3aa:	f04f 0901 	mov.w	r9, #1
 800b3ae:	4623      	mov	r3, r4
 800b3b0:	469a      	mov	sl, r3
 800b3b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3b6:	b10a      	cbz	r2, 800b3bc <_svfiprintf_r+0x60>
 800b3b8:	2a25      	cmp	r2, #37	@ 0x25
 800b3ba:	d1f9      	bne.n	800b3b0 <_svfiprintf_r+0x54>
 800b3bc:	ebba 0b04 	subs.w	fp, sl, r4
 800b3c0:	d00b      	beq.n	800b3da <_svfiprintf_r+0x7e>
 800b3c2:	465b      	mov	r3, fp
 800b3c4:	4622      	mov	r2, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff ff6c 	bl	800b2a6 <__ssputs_r>
 800b3ce:	3001      	adds	r0, #1
 800b3d0:	f000 80a7 	beq.w	800b522 <_svfiprintf_r+0x1c6>
 800b3d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3d6:	445a      	add	r2, fp
 800b3d8:	9209      	str	r2, [sp, #36]	@ 0x24
 800b3da:	f89a 3000 	ldrb.w	r3, [sl]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	f000 809f 	beq.w	800b522 <_svfiprintf_r+0x1c6>
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b3ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3ee:	f10a 0a01 	add.w	sl, sl, #1
 800b3f2:	9304      	str	r3, [sp, #16]
 800b3f4:	9307      	str	r3, [sp, #28]
 800b3f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b3fa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b3fc:	4654      	mov	r4, sl
 800b3fe:	2205      	movs	r2, #5
 800b400:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b404:	484e      	ldr	r0, [pc, #312]	@ (800b540 <_svfiprintf_r+0x1e4>)
 800b406:	f7f4 ff0b 	bl	8000220 <memchr>
 800b40a:	9a04      	ldr	r2, [sp, #16]
 800b40c:	b9d8      	cbnz	r0, 800b446 <_svfiprintf_r+0xea>
 800b40e:	06d0      	lsls	r0, r2, #27
 800b410:	bf44      	itt	mi
 800b412:	2320      	movmi	r3, #32
 800b414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b418:	0711      	lsls	r1, r2, #28
 800b41a:	bf44      	itt	mi
 800b41c:	232b      	movmi	r3, #43	@ 0x2b
 800b41e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b422:	f89a 3000 	ldrb.w	r3, [sl]
 800b426:	2b2a      	cmp	r3, #42	@ 0x2a
 800b428:	d015      	beq.n	800b456 <_svfiprintf_r+0xfa>
 800b42a:	9a07      	ldr	r2, [sp, #28]
 800b42c:	4654      	mov	r4, sl
 800b42e:	2000      	movs	r0, #0
 800b430:	f04f 0c0a 	mov.w	ip, #10
 800b434:	4621      	mov	r1, r4
 800b436:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b43a:	3b30      	subs	r3, #48	@ 0x30
 800b43c:	2b09      	cmp	r3, #9
 800b43e:	d94b      	bls.n	800b4d8 <_svfiprintf_r+0x17c>
 800b440:	b1b0      	cbz	r0, 800b470 <_svfiprintf_r+0x114>
 800b442:	9207      	str	r2, [sp, #28]
 800b444:	e014      	b.n	800b470 <_svfiprintf_r+0x114>
 800b446:	eba0 0308 	sub.w	r3, r0, r8
 800b44a:	fa09 f303 	lsl.w	r3, r9, r3
 800b44e:	4313      	orrs	r3, r2
 800b450:	9304      	str	r3, [sp, #16]
 800b452:	46a2      	mov	sl, r4
 800b454:	e7d2      	b.n	800b3fc <_svfiprintf_r+0xa0>
 800b456:	9b03      	ldr	r3, [sp, #12]
 800b458:	1d19      	adds	r1, r3, #4
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	9103      	str	r1, [sp, #12]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	bfbb      	ittet	lt
 800b462:	425b      	neglt	r3, r3
 800b464:	f042 0202 	orrlt.w	r2, r2, #2
 800b468:	9307      	strge	r3, [sp, #28]
 800b46a:	9307      	strlt	r3, [sp, #28]
 800b46c:	bfb8      	it	lt
 800b46e:	9204      	strlt	r2, [sp, #16]
 800b470:	7823      	ldrb	r3, [r4, #0]
 800b472:	2b2e      	cmp	r3, #46	@ 0x2e
 800b474:	d10a      	bne.n	800b48c <_svfiprintf_r+0x130>
 800b476:	7863      	ldrb	r3, [r4, #1]
 800b478:	2b2a      	cmp	r3, #42	@ 0x2a
 800b47a:	d132      	bne.n	800b4e2 <_svfiprintf_r+0x186>
 800b47c:	9b03      	ldr	r3, [sp, #12]
 800b47e:	1d1a      	adds	r2, r3, #4
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	9203      	str	r2, [sp, #12]
 800b484:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b488:	3402      	adds	r4, #2
 800b48a:	9305      	str	r3, [sp, #20]
 800b48c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b550 <_svfiprintf_r+0x1f4>
 800b490:	7821      	ldrb	r1, [r4, #0]
 800b492:	2203      	movs	r2, #3
 800b494:	4650      	mov	r0, sl
 800b496:	f7f4 fec3 	bl	8000220 <memchr>
 800b49a:	b138      	cbz	r0, 800b4ac <_svfiprintf_r+0x150>
 800b49c:	9b04      	ldr	r3, [sp, #16]
 800b49e:	eba0 000a 	sub.w	r0, r0, sl
 800b4a2:	2240      	movs	r2, #64	@ 0x40
 800b4a4:	4082      	lsls	r2, r0
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	3401      	adds	r4, #1
 800b4aa:	9304      	str	r3, [sp, #16]
 800b4ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b0:	4824      	ldr	r0, [pc, #144]	@ (800b544 <_svfiprintf_r+0x1e8>)
 800b4b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b4b6:	2206      	movs	r2, #6
 800b4b8:	f7f4 feb2 	bl	8000220 <memchr>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d036      	beq.n	800b52e <_svfiprintf_r+0x1d2>
 800b4c0:	4b21      	ldr	r3, [pc, #132]	@ (800b548 <_svfiprintf_r+0x1ec>)
 800b4c2:	bb1b      	cbnz	r3, 800b50c <_svfiprintf_r+0x1b0>
 800b4c4:	9b03      	ldr	r3, [sp, #12]
 800b4c6:	3307      	adds	r3, #7
 800b4c8:	f023 0307 	bic.w	r3, r3, #7
 800b4cc:	3308      	adds	r3, #8
 800b4ce:	9303      	str	r3, [sp, #12]
 800b4d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d2:	4433      	add	r3, r6
 800b4d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b4d6:	e76a      	b.n	800b3ae <_svfiprintf_r+0x52>
 800b4d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4dc:	460c      	mov	r4, r1
 800b4de:	2001      	movs	r0, #1
 800b4e0:	e7a8      	b.n	800b434 <_svfiprintf_r+0xd8>
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	3401      	adds	r4, #1
 800b4e6:	9305      	str	r3, [sp, #20]
 800b4e8:	4619      	mov	r1, r3
 800b4ea:	f04f 0c0a 	mov.w	ip, #10
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4f4:	3a30      	subs	r2, #48	@ 0x30
 800b4f6:	2a09      	cmp	r2, #9
 800b4f8:	d903      	bls.n	800b502 <_svfiprintf_r+0x1a6>
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d0c6      	beq.n	800b48c <_svfiprintf_r+0x130>
 800b4fe:	9105      	str	r1, [sp, #20]
 800b500:	e7c4      	b.n	800b48c <_svfiprintf_r+0x130>
 800b502:	fb0c 2101 	mla	r1, ip, r1, r2
 800b506:	4604      	mov	r4, r0
 800b508:	2301      	movs	r3, #1
 800b50a:	e7f0      	b.n	800b4ee <_svfiprintf_r+0x192>
 800b50c:	ab03      	add	r3, sp, #12
 800b50e:	9300      	str	r3, [sp, #0]
 800b510:	462a      	mov	r2, r5
 800b512:	4b0e      	ldr	r3, [pc, #56]	@ (800b54c <_svfiprintf_r+0x1f0>)
 800b514:	a904      	add	r1, sp, #16
 800b516:	4638      	mov	r0, r7
 800b518:	f7fc febc 	bl	8008294 <_printf_float>
 800b51c:	1c42      	adds	r2, r0, #1
 800b51e:	4606      	mov	r6, r0
 800b520:	d1d6      	bne.n	800b4d0 <_svfiprintf_r+0x174>
 800b522:	89ab      	ldrh	r3, [r5, #12]
 800b524:	065b      	lsls	r3, r3, #25
 800b526:	f53f af2d 	bmi.w	800b384 <_svfiprintf_r+0x28>
 800b52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b52c:	e72c      	b.n	800b388 <_svfiprintf_r+0x2c>
 800b52e:	ab03      	add	r3, sp, #12
 800b530:	9300      	str	r3, [sp, #0]
 800b532:	462a      	mov	r2, r5
 800b534:	4b05      	ldr	r3, [pc, #20]	@ (800b54c <_svfiprintf_r+0x1f0>)
 800b536:	a904      	add	r1, sp, #16
 800b538:	4638      	mov	r0, r7
 800b53a:	f7fd f943 	bl	80087c4 <_printf_i>
 800b53e:	e7ed      	b.n	800b51c <_svfiprintf_r+0x1c0>
 800b540:	0800c051 	.word	0x0800c051
 800b544:	0800c05b 	.word	0x0800c05b
 800b548:	08008295 	.word	0x08008295
 800b54c:	0800b2a7 	.word	0x0800b2a7
 800b550:	0800c057 	.word	0x0800c057

0800b554 <__sfputc_r>:
 800b554:	6893      	ldr	r3, [r2, #8]
 800b556:	3b01      	subs	r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	b410      	push	{r4}
 800b55c:	6093      	str	r3, [r2, #8]
 800b55e:	da08      	bge.n	800b572 <__sfputc_r+0x1e>
 800b560:	6994      	ldr	r4, [r2, #24]
 800b562:	42a3      	cmp	r3, r4
 800b564:	db01      	blt.n	800b56a <__sfputc_r+0x16>
 800b566:	290a      	cmp	r1, #10
 800b568:	d103      	bne.n	800b572 <__sfputc_r+0x1e>
 800b56a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b56e:	f7fd bd82 	b.w	8009076 <__swbuf_r>
 800b572:	6813      	ldr	r3, [r2, #0]
 800b574:	1c58      	adds	r0, r3, #1
 800b576:	6010      	str	r0, [r2, #0]
 800b578:	7019      	strb	r1, [r3, #0]
 800b57a:	4608      	mov	r0, r1
 800b57c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b580:	4770      	bx	lr

0800b582 <__sfputs_r>:
 800b582:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b584:	4606      	mov	r6, r0
 800b586:	460f      	mov	r7, r1
 800b588:	4614      	mov	r4, r2
 800b58a:	18d5      	adds	r5, r2, r3
 800b58c:	42ac      	cmp	r4, r5
 800b58e:	d101      	bne.n	800b594 <__sfputs_r+0x12>
 800b590:	2000      	movs	r0, #0
 800b592:	e007      	b.n	800b5a4 <__sfputs_r+0x22>
 800b594:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b598:	463a      	mov	r2, r7
 800b59a:	4630      	mov	r0, r6
 800b59c:	f7ff ffda 	bl	800b554 <__sfputc_r>
 800b5a0:	1c43      	adds	r3, r0, #1
 800b5a2:	d1f3      	bne.n	800b58c <__sfputs_r+0xa>
 800b5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5a8 <_vfiprintf_r>:
 800b5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ac:	460d      	mov	r5, r1
 800b5ae:	b09d      	sub	sp, #116	@ 0x74
 800b5b0:	4614      	mov	r4, r2
 800b5b2:	4698      	mov	r8, r3
 800b5b4:	4606      	mov	r6, r0
 800b5b6:	b118      	cbz	r0, 800b5c0 <_vfiprintf_r+0x18>
 800b5b8:	6a03      	ldr	r3, [r0, #32]
 800b5ba:	b90b      	cbnz	r3, 800b5c0 <_vfiprintf_r+0x18>
 800b5bc:	f7fd fcc2 	bl	8008f44 <__sinit>
 800b5c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5c2:	07d9      	lsls	r1, r3, #31
 800b5c4:	d405      	bmi.n	800b5d2 <_vfiprintf_r+0x2a>
 800b5c6:	89ab      	ldrh	r3, [r5, #12]
 800b5c8:	059a      	lsls	r2, r3, #22
 800b5ca:	d402      	bmi.n	800b5d2 <_vfiprintf_r+0x2a>
 800b5cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5ce:	f7fd fe76 	bl	80092be <__retarget_lock_acquire_recursive>
 800b5d2:	89ab      	ldrh	r3, [r5, #12]
 800b5d4:	071b      	lsls	r3, r3, #28
 800b5d6:	d501      	bpl.n	800b5dc <_vfiprintf_r+0x34>
 800b5d8:	692b      	ldr	r3, [r5, #16]
 800b5da:	b99b      	cbnz	r3, 800b604 <_vfiprintf_r+0x5c>
 800b5dc:	4629      	mov	r1, r5
 800b5de:	4630      	mov	r0, r6
 800b5e0:	f7fd fd88 	bl	80090f4 <__swsetup_r>
 800b5e4:	b170      	cbz	r0, 800b604 <_vfiprintf_r+0x5c>
 800b5e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5e8:	07dc      	lsls	r4, r3, #31
 800b5ea:	d504      	bpl.n	800b5f6 <_vfiprintf_r+0x4e>
 800b5ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b5f0:	b01d      	add	sp, #116	@ 0x74
 800b5f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5f6:	89ab      	ldrh	r3, [r5, #12]
 800b5f8:	0598      	lsls	r0, r3, #22
 800b5fa:	d4f7      	bmi.n	800b5ec <_vfiprintf_r+0x44>
 800b5fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5fe:	f7fd fe5f 	bl	80092c0 <__retarget_lock_release_recursive>
 800b602:	e7f3      	b.n	800b5ec <_vfiprintf_r+0x44>
 800b604:	2300      	movs	r3, #0
 800b606:	9309      	str	r3, [sp, #36]	@ 0x24
 800b608:	2320      	movs	r3, #32
 800b60a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b60e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b612:	2330      	movs	r3, #48	@ 0x30
 800b614:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b7c4 <_vfiprintf_r+0x21c>
 800b618:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b61c:	f04f 0901 	mov.w	r9, #1
 800b620:	4623      	mov	r3, r4
 800b622:	469a      	mov	sl, r3
 800b624:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b628:	b10a      	cbz	r2, 800b62e <_vfiprintf_r+0x86>
 800b62a:	2a25      	cmp	r2, #37	@ 0x25
 800b62c:	d1f9      	bne.n	800b622 <_vfiprintf_r+0x7a>
 800b62e:	ebba 0b04 	subs.w	fp, sl, r4
 800b632:	d00b      	beq.n	800b64c <_vfiprintf_r+0xa4>
 800b634:	465b      	mov	r3, fp
 800b636:	4622      	mov	r2, r4
 800b638:	4629      	mov	r1, r5
 800b63a:	4630      	mov	r0, r6
 800b63c:	f7ff ffa1 	bl	800b582 <__sfputs_r>
 800b640:	3001      	adds	r0, #1
 800b642:	f000 80a7 	beq.w	800b794 <_vfiprintf_r+0x1ec>
 800b646:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b648:	445a      	add	r2, fp
 800b64a:	9209      	str	r2, [sp, #36]	@ 0x24
 800b64c:	f89a 3000 	ldrb.w	r3, [sl]
 800b650:	2b00      	cmp	r3, #0
 800b652:	f000 809f 	beq.w	800b794 <_vfiprintf_r+0x1ec>
 800b656:	2300      	movs	r3, #0
 800b658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b65c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b660:	f10a 0a01 	add.w	sl, sl, #1
 800b664:	9304      	str	r3, [sp, #16]
 800b666:	9307      	str	r3, [sp, #28]
 800b668:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b66c:	931a      	str	r3, [sp, #104]	@ 0x68
 800b66e:	4654      	mov	r4, sl
 800b670:	2205      	movs	r2, #5
 800b672:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b676:	4853      	ldr	r0, [pc, #332]	@ (800b7c4 <_vfiprintf_r+0x21c>)
 800b678:	f7f4 fdd2 	bl	8000220 <memchr>
 800b67c:	9a04      	ldr	r2, [sp, #16]
 800b67e:	b9d8      	cbnz	r0, 800b6b8 <_vfiprintf_r+0x110>
 800b680:	06d1      	lsls	r1, r2, #27
 800b682:	bf44      	itt	mi
 800b684:	2320      	movmi	r3, #32
 800b686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b68a:	0713      	lsls	r3, r2, #28
 800b68c:	bf44      	itt	mi
 800b68e:	232b      	movmi	r3, #43	@ 0x2b
 800b690:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b694:	f89a 3000 	ldrb.w	r3, [sl]
 800b698:	2b2a      	cmp	r3, #42	@ 0x2a
 800b69a:	d015      	beq.n	800b6c8 <_vfiprintf_r+0x120>
 800b69c:	9a07      	ldr	r2, [sp, #28]
 800b69e:	4654      	mov	r4, sl
 800b6a0:	2000      	movs	r0, #0
 800b6a2:	f04f 0c0a 	mov.w	ip, #10
 800b6a6:	4621      	mov	r1, r4
 800b6a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6ac:	3b30      	subs	r3, #48	@ 0x30
 800b6ae:	2b09      	cmp	r3, #9
 800b6b0:	d94b      	bls.n	800b74a <_vfiprintf_r+0x1a2>
 800b6b2:	b1b0      	cbz	r0, 800b6e2 <_vfiprintf_r+0x13a>
 800b6b4:	9207      	str	r2, [sp, #28]
 800b6b6:	e014      	b.n	800b6e2 <_vfiprintf_r+0x13a>
 800b6b8:	eba0 0308 	sub.w	r3, r0, r8
 800b6bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	9304      	str	r3, [sp, #16]
 800b6c4:	46a2      	mov	sl, r4
 800b6c6:	e7d2      	b.n	800b66e <_vfiprintf_r+0xc6>
 800b6c8:	9b03      	ldr	r3, [sp, #12]
 800b6ca:	1d19      	adds	r1, r3, #4
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	9103      	str	r1, [sp, #12]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	bfbb      	ittet	lt
 800b6d4:	425b      	neglt	r3, r3
 800b6d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b6da:	9307      	strge	r3, [sp, #28]
 800b6dc:	9307      	strlt	r3, [sp, #28]
 800b6de:	bfb8      	it	lt
 800b6e0:	9204      	strlt	r2, [sp, #16]
 800b6e2:	7823      	ldrb	r3, [r4, #0]
 800b6e4:	2b2e      	cmp	r3, #46	@ 0x2e
 800b6e6:	d10a      	bne.n	800b6fe <_vfiprintf_r+0x156>
 800b6e8:	7863      	ldrb	r3, [r4, #1]
 800b6ea:	2b2a      	cmp	r3, #42	@ 0x2a
 800b6ec:	d132      	bne.n	800b754 <_vfiprintf_r+0x1ac>
 800b6ee:	9b03      	ldr	r3, [sp, #12]
 800b6f0:	1d1a      	adds	r2, r3, #4
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	9203      	str	r2, [sp, #12]
 800b6f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6fa:	3402      	adds	r4, #2
 800b6fc:	9305      	str	r3, [sp, #20]
 800b6fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b7d4 <_vfiprintf_r+0x22c>
 800b702:	7821      	ldrb	r1, [r4, #0]
 800b704:	2203      	movs	r2, #3
 800b706:	4650      	mov	r0, sl
 800b708:	f7f4 fd8a 	bl	8000220 <memchr>
 800b70c:	b138      	cbz	r0, 800b71e <_vfiprintf_r+0x176>
 800b70e:	9b04      	ldr	r3, [sp, #16]
 800b710:	eba0 000a 	sub.w	r0, r0, sl
 800b714:	2240      	movs	r2, #64	@ 0x40
 800b716:	4082      	lsls	r2, r0
 800b718:	4313      	orrs	r3, r2
 800b71a:	3401      	adds	r4, #1
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b722:	4829      	ldr	r0, [pc, #164]	@ (800b7c8 <_vfiprintf_r+0x220>)
 800b724:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b728:	2206      	movs	r2, #6
 800b72a:	f7f4 fd79 	bl	8000220 <memchr>
 800b72e:	2800      	cmp	r0, #0
 800b730:	d03f      	beq.n	800b7b2 <_vfiprintf_r+0x20a>
 800b732:	4b26      	ldr	r3, [pc, #152]	@ (800b7cc <_vfiprintf_r+0x224>)
 800b734:	bb1b      	cbnz	r3, 800b77e <_vfiprintf_r+0x1d6>
 800b736:	9b03      	ldr	r3, [sp, #12]
 800b738:	3307      	adds	r3, #7
 800b73a:	f023 0307 	bic.w	r3, r3, #7
 800b73e:	3308      	adds	r3, #8
 800b740:	9303      	str	r3, [sp, #12]
 800b742:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b744:	443b      	add	r3, r7
 800b746:	9309      	str	r3, [sp, #36]	@ 0x24
 800b748:	e76a      	b.n	800b620 <_vfiprintf_r+0x78>
 800b74a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b74e:	460c      	mov	r4, r1
 800b750:	2001      	movs	r0, #1
 800b752:	e7a8      	b.n	800b6a6 <_vfiprintf_r+0xfe>
 800b754:	2300      	movs	r3, #0
 800b756:	3401      	adds	r4, #1
 800b758:	9305      	str	r3, [sp, #20]
 800b75a:	4619      	mov	r1, r3
 800b75c:	f04f 0c0a 	mov.w	ip, #10
 800b760:	4620      	mov	r0, r4
 800b762:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b766:	3a30      	subs	r2, #48	@ 0x30
 800b768:	2a09      	cmp	r2, #9
 800b76a:	d903      	bls.n	800b774 <_vfiprintf_r+0x1cc>
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d0c6      	beq.n	800b6fe <_vfiprintf_r+0x156>
 800b770:	9105      	str	r1, [sp, #20]
 800b772:	e7c4      	b.n	800b6fe <_vfiprintf_r+0x156>
 800b774:	fb0c 2101 	mla	r1, ip, r1, r2
 800b778:	4604      	mov	r4, r0
 800b77a:	2301      	movs	r3, #1
 800b77c:	e7f0      	b.n	800b760 <_vfiprintf_r+0x1b8>
 800b77e:	ab03      	add	r3, sp, #12
 800b780:	9300      	str	r3, [sp, #0]
 800b782:	462a      	mov	r2, r5
 800b784:	4b12      	ldr	r3, [pc, #72]	@ (800b7d0 <_vfiprintf_r+0x228>)
 800b786:	a904      	add	r1, sp, #16
 800b788:	4630      	mov	r0, r6
 800b78a:	f7fc fd83 	bl	8008294 <_printf_float>
 800b78e:	4607      	mov	r7, r0
 800b790:	1c78      	adds	r0, r7, #1
 800b792:	d1d6      	bne.n	800b742 <_vfiprintf_r+0x19a>
 800b794:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b796:	07d9      	lsls	r1, r3, #31
 800b798:	d405      	bmi.n	800b7a6 <_vfiprintf_r+0x1fe>
 800b79a:	89ab      	ldrh	r3, [r5, #12]
 800b79c:	059a      	lsls	r2, r3, #22
 800b79e:	d402      	bmi.n	800b7a6 <_vfiprintf_r+0x1fe>
 800b7a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b7a2:	f7fd fd8d 	bl	80092c0 <__retarget_lock_release_recursive>
 800b7a6:	89ab      	ldrh	r3, [r5, #12]
 800b7a8:	065b      	lsls	r3, r3, #25
 800b7aa:	f53f af1f 	bmi.w	800b5ec <_vfiprintf_r+0x44>
 800b7ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b7b0:	e71e      	b.n	800b5f0 <_vfiprintf_r+0x48>
 800b7b2:	ab03      	add	r3, sp, #12
 800b7b4:	9300      	str	r3, [sp, #0]
 800b7b6:	462a      	mov	r2, r5
 800b7b8:	4b05      	ldr	r3, [pc, #20]	@ (800b7d0 <_vfiprintf_r+0x228>)
 800b7ba:	a904      	add	r1, sp, #16
 800b7bc:	4630      	mov	r0, r6
 800b7be:	f7fd f801 	bl	80087c4 <_printf_i>
 800b7c2:	e7e4      	b.n	800b78e <_vfiprintf_r+0x1e6>
 800b7c4:	0800c051 	.word	0x0800c051
 800b7c8:	0800c05b 	.word	0x0800c05b
 800b7cc:	08008295 	.word	0x08008295
 800b7d0:	0800b583 	.word	0x0800b583
 800b7d4:	0800c057 	.word	0x0800c057

0800b7d8 <__sflush_r>:
 800b7d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7e0:	0716      	lsls	r6, r2, #28
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	460c      	mov	r4, r1
 800b7e6:	d454      	bmi.n	800b892 <__sflush_r+0xba>
 800b7e8:	684b      	ldr	r3, [r1, #4]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	dc02      	bgt.n	800b7f4 <__sflush_r+0x1c>
 800b7ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	dd48      	ble.n	800b886 <__sflush_r+0xae>
 800b7f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7f6:	2e00      	cmp	r6, #0
 800b7f8:	d045      	beq.n	800b886 <__sflush_r+0xae>
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b800:	682f      	ldr	r7, [r5, #0]
 800b802:	6a21      	ldr	r1, [r4, #32]
 800b804:	602b      	str	r3, [r5, #0]
 800b806:	d030      	beq.n	800b86a <__sflush_r+0x92>
 800b808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b80a:	89a3      	ldrh	r3, [r4, #12]
 800b80c:	0759      	lsls	r1, r3, #29
 800b80e:	d505      	bpl.n	800b81c <__sflush_r+0x44>
 800b810:	6863      	ldr	r3, [r4, #4]
 800b812:	1ad2      	subs	r2, r2, r3
 800b814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b816:	b10b      	cbz	r3, 800b81c <__sflush_r+0x44>
 800b818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b81a:	1ad2      	subs	r2, r2, r3
 800b81c:	2300      	movs	r3, #0
 800b81e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b820:	6a21      	ldr	r1, [r4, #32]
 800b822:	4628      	mov	r0, r5
 800b824:	47b0      	blx	r6
 800b826:	1c43      	adds	r3, r0, #1
 800b828:	89a3      	ldrh	r3, [r4, #12]
 800b82a:	d106      	bne.n	800b83a <__sflush_r+0x62>
 800b82c:	6829      	ldr	r1, [r5, #0]
 800b82e:	291d      	cmp	r1, #29
 800b830:	d82b      	bhi.n	800b88a <__sflush_r+0xb2>
 800b832:	4a2a      	ldr	r2, [pc, #168]	@ (800b8dc <__sflush_r+0x104>)
 800b834:	410a      	asrs	r2, r1
 800b836:	07d6      	lsls	r6, r2, #31
 800b838:	d427      	bmi.n	800b88a <__sflush_r+0xb2>
 800b83a:	2200      	movs	r2, #0
 800b83c:	6062      	str	r2, [r4, #4]
 800b83e:	04d9      	lsls	r1, r3, #19
 800b840:	6922      	ldr	r2, [r4, #16]
 800b842:	6022      	str	r2, [r4, #0]
 800b844:	d504      	bpl.n	800b850 <__sflush_r+0x78>
 800b846:	1c42      	adds	r2, r0, #1
 800b848:	d101      	bne.n	800b84e <__sflush_r+0x76>
 800b84a:	682b      	ldr	r3, [r5, #0]
 800b84c:	b903      	cbnz	r3, 800b850 <__sflush_r+0x78>
 800b84e:	6560      	str	r0, [r4, #84]	@ 0x54
 800b850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b852:	602f      	str	r7, [r5, #0]
 800b854:	b1b9      	cbz	r1, 800b886 <__sflush_r+0xae>
 800b856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b85a:	4299      	cmp	r1, r3
 800b85c:	d002      	beq.n	800b864 <__sflush_r+0x8c>
 800b85e:	4628      	mov	r0, r5
 800b860:	f7fe fb9a 	bl	8009f98 <_free_r>
 800b864:	2300      	movs	r3, #0
 800b866:	6363      	str	r3, [r4, #52]	@ 0x34
 800b868:	e00d      	b.n	800b886 <__sflush_r+0xae>
 800b86a:	2301      	movs	r3, #1
 800b86c:	4628      	mov	r0, r5
 800b86e:	47b0      	blx	r6
 800b870:	4602      	mov	r2, r0
 800b872:	1c50      	adds	r0, r2, #1
 800b874:	d1c9      	bne.n	800b80a <__sflush_r+0x32>
 800b876:	682b      	ldr	r3, [r5, #0]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d0c6      	beq.n	800b80a <__sflush_r+0x32>
 800b87c:	2b1d      	cmp	r3, #29
 800b87e:	d001      	beq.n	800b884 <__sflush_r+0xac>
 800b880:	2b16      	cmp	r3, #22
 800b882:	d11e      	bne.n	800b8c2 <__sflush_r+0xea>
 800b884:	602f      	str	r7, [r5, #0]
 800b886:	2000      	movs	r0, #0
 800b888:	e022      	b.n	800b8d0 <__sflush_r+0xf8>
 800b88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b88e:	b21b      	sxth	r3, r3
 800b890:	e01b      	b.n	800b8ca <__sflush_r+0xf2>
 800b892:	690f      	ldr	r7, [r1, #16]
 800b894:	2f00      	cmp	r7, #0
 800b896:	d0f6      	beq.n	800b886 <__sflush_r+0xae>
 800b898:	0793      	lsls	r3, r2, #30
 800b89a:	680e      	ldr	r6, [r1, #0]
 800b89c:	bf08      	it	eq
 800b89e:	694b      	ldreq	r3, [r1, #20]
 800b8a0:	600f      	str	r7, [r1, #0]
 800b8a2:	bf18      	it	ne
 800b8a4:	2300      	movne	r3, #0
 800b8a6:	eba6 0807 	sub.w	r8, r6, r7
 800b8aa:	608b      	str	r3, [r1, #8]
 800b8ac:	f1b8 0f00 	cmp.w	r8, #0
 800b8b0:	dde9      	ble.n	800b886 <__sflush_r+0xae>
 800b8b2:	6a21      	ldr	r1, [r4, #32]
 800b8b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b8b6:	4643      	mov	r3, r8
 800b8b8:	463a      	mov	r2, r7
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	47b0      	blx	r6
 800b8be:	2800      	cmp	r0, #0
 800b8c0:	dc08      	bgt.n	800b8d4 <__sflush_r+0xfc>
 800b8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b8ca:	81a3      	strh	r3, [r4, #12]
 800b8cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d4:	4407      	add	r7, r0
 800b8d6:	eba8 0800 	sub.w	r8, r8, r0
 800b8da:	e7e7      	b.n	800b8ac <__sflush_r+0xd4>
 800b8dc:	dfbffffe 	.word	0xdfbffffe

0800b8e0 <_fflush_r>:
 800b8e0:	b538      	push	{r3, r4, r5, lr}
 800b8e2:	690b      	ldr	r3, [r1, #16]
 800b8e4:	4605      	mov	r5, r0
 800b8e6:	460c      	mov	r4, r1
 800b8e8:	b913      	cbnz	r3, 800b8f0 <_fflush_r+0x10>
 800b8ea:	2500      	movs	r5, #0
 800b8ec:	4628      	mov	r0, r5
 800b8ee:	bd38      	pop	{r3, r4, r5, pc}
 800b8f0:	b118      	cbz	r0, 800b8fa <_fflush_r+0x1a>
 800b8f2:	6a03      	ldr	r3, [r0, #32]
 800b8f4:	b90b      	cbnz	r3, 800b8fa <_fflush_r+0x1a>
 800b8f6:	f7fd fb25 	bl	8008f44 <__sinit>
 800b8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d0f3      	beq.n	800b8ea <_fflush_r+0xa>
 800b902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b904:	07d0      	lsls	r0, r2, #31
 800b906:	d404      	bmi.n	800b912 <_fflush_r+0x32>
 800b908:	0599      	lsls	r1, r3, #22
 800b90a:	d402      	bmi.n	800b912 <_fflush_r+0x32>
 800b90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b90e:	f7fd fcd6 	bl	80092be <__retarget_lock_acquire_recursive>
 800b912:	4628      	mov	r0, r5
 800b914:	4621      	mov	r1, r4
 800b916:	f7ff ff5f 	bl	800b7d8 <__sflush_r>
 800b91a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b91c:	07da      	lsls	r2, r3, #31
 800b91e:	4605      	mov	r5, r0
 800b920:	d4e4      	bmi.n	800b8ec <_fflush_r+0xc>
 800b922:	89a3      	ldrh	r3, [r4, #12]
 800b924:	059b      	lsls	r3, r3, #22
 800b926:	d4e1      	bmi.n	800b8ec <_fflush_r+0xc>
 800b928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b92a:	f7fd fcc9 	bl	80092c0 <__retarget_lock_release_recursive>
 800b92e:	e7dd      	b.n	800b8ec <_fflush_r+0xc>

0800b930 <__swhatbuf_r>:
 800b930:	b570      	push	{r4, r5, r6, lr}
 800b932:	460c      	mov	r4, r1
 800b934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b938:	2900      	cmp	r1, #0
 800b93a:	b096      	sub	sp, #88	@ 0x58
 800b93c:	4615      	mov	r5, r2
 800b93e:	461e      	mov	r6, r3
 800b940:	da0d      	bge.n	800b95e <__swhatbuf_r+0x2e>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b948:	f04f 0100 	mov.w	r1, #0
 800b94c:	bf14      	ite	ne
 800b94e:	2340      	movne	r3, #64	@ 0x40
 800b950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b954:	2000      	movs	r0, #0
 800b956:	6031      	str	r1, [r6, #0]
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	b016      	add	sp, #88	@ 0x58
 800b95c:	bd70      	pop	{r4, r5, r6, pc}
 800b95e:	466a      	mov	r2, sp
 800b960:	f000 f862 	bl	800ba28 <_fstat_r>
 800b964:	2800      	cmp	r0, #0
 800b966:	dbec      	blt.n	800b942 <__swhatbuf_r+0x12>
 800b968:	9901      	ldr	r1, [sp, #4]
 800b96a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b96e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b972:	4259      	negs	r1, r3
 800b974:	4159      	adcs	r1, r3
 800b976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b97a:	e7eb      	b.n	800b954 <__swhatbuf_r+0x24>

0800b97c <__smakebuf_r>:
 800b97c:	898b      	ldrh	r3, [r1, #12]
 800b97e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b980:	079d      	lsls	r5, r3, #30
 800b982:	4606      	mov	r6, r0
 800b984:	460c      	mov	r4, r1
 800b986:	d507      	bpl.n	800b998 <__smakebuf_r+0x1c>
 800b988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b98c:	6023      	str	r3, [r4, #0]
 800b98e:	6123      	str	r3, [r4, #16]
 800b990:	2301      	movs	r3, #1
 800b992:	6163      	str	r3, [r4, #20]
 800b994:	b003      	add	sp, #12
 800b996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b998:	ab01      	add	r3, sp, #4
 800b99a:	466a      	mov	r2, sp
 800b99c:	f7ff ffc8 	bl	800b930 <__swhatbuf_r>
 800b9a0:	9f00      	ldr	r7, [sp, #0]
 800b9a2:	4605      	mov	r5, r0
 800b9a4:	4639      	mov	r1, r7
 800b9a6:	4630      	mov	r0, r6
 800b9a8:	f7fe fea4 	bl	800a6f4 <_malloc_r>
 800b9ac:	b948      	cbnz	r0, 800b9c2 <__smakebuf_r+0x46>
 800b9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b2:	059a      	lsls	r2, r3, #22
 800b9b4:	d4ee      	bmi.n	800b994 <__smakebuf_r+0x18>
 800b9b6:	f023 0303 	bic.w	r3, r3, #3
 800b9ba:	f043 0302 	orr.w	r3, r3, #2
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	e7e2      	b.n	800b988 <__smakebuf_r+0xc>
 800b9c2:	89a3      	ldrh	r3, [r4, #12]
 800b9c4:	6020      	str	r0, [r4, #0]
 800b9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9ca:	81a3      	strh	r3, [r4, #12]
 800b9cc:	9b01      	ldr	r3, [sp, #4]
 800b9ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b9d2:	b15b      	cbz	r3, 800b9ec <__smakebuf_r+0x70>
 800b9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f000 f837 	bl	800ba4c <_isatty_r>
 800b9de:	b128      	cbz	r0, 800b9ec <__smakebuf_r+0x70>
 800b9e0:	89a3      	ldrh	r3, [r4, #12]
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	f043 0301 	orr.w	r3, r3, #1
 800b9ea:	81a3      	strh	r3, [r4, #12]
 800b9ec:	89a3      	ldrh	r3, [r4, #12]
 800b9ee:	431d      	orrs	r5, r3
 800b9f0:	81a5      	strh	r5, [r4, #12]
 800b9f2:	e7cf      	b.n	800b994 <__smakebuf_r+0x18>

0800b9f4 <memmove>:
 800b9f4:	4288      	cmp	r0, r1
 800b9f6:	b510      	push	{r4, lr}
 800b9f8:	eb01 0402 	add.w	r4, r1, r2
 800b9fc:	d902      	bls.n	800ba04 <memmove+0x10>
 800b9fe:	4284      	cmp	r4, r0
 800ba00:	4623      	mov	r3, r4
 800ba02:	d807      	bhi.n	800ba14 <memmove+0x20>
 800ba04:	1e43      	subs	r3, r0, #1
 800ba06:	42a1      	cmp	r1, r4
 800ba08:	d008      	beq.n	800ba1c <memmove+0x28>
 800ba0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba12:	e7f8      	b.n	800ba06 <memmove+0x12>
 800ba14:	4402      	add	r2, r0
 800ba16:	4601      	mov	r1, r0
 800ba18:	428a      	cmp	r2, r1
 800ba1a:	d100      	bne.n	800ba1e <memmove+0x2a>
 800ba1c:	bd10      	pop	{r4, pc}
 800ba1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba26:	e7f7      	b.n	800ba18 <memmove+0x24>

0800ba28 <_fstat_r>:
 800ba28:	b538      	push	{r3, r4, r5, lr}
 800ba2a:	4d07      	ldr	r5, [pc, #28]	@ (800ba48 <_fstat_r+0x20>)
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	4604      	mov	r4, r0
 800ba30:	4608      	mov	r0, r1
 800ba32:	4611      	mov	r1, r2
 800ba34:	602b      	str	r3, [r5, #0]
 800ba36:	f7f6 faff 	bl	8002038 <_fstat>
 800ba3a:	1c43      	adds	r3, r0, #1
 800ba3c:	d102      	bne.n	800ba44 <_fstat_r+0x1c>
 800ba3e:	682b      	ldr	r3, [r5, #0]
 800ba40:	b103      	cbz	r3, 800ba44 <_fstat_r+0x1c>
 800ba42:	6023      	str	r3, [r4, #0]
 800ba44:	bd38      	pop	{r3, r4, r5, pc}
 800ba46:	bf00      	nop
 800ba48:	200007f0 	.word	0x200007f0

0800ba4c <_isatty_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4d06      	ldr	r5, [pc, #24]	@ (800ba68 <_isatty_r+0x1c>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4604      	mov	r4, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	f7f6 fafe 	bl	8002058 <_isatty>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_isatty_r+0x1a>
 800ba60:	682b      	ldr	r3, [r5, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_isatty_r+0x1a>
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	200007f0 	.word	0x200007f0

0800ba6c <_sbrk_r>:
 800ba6c:	b538      	push	{r3, r4, r5, lr}
 800ba6e:	4d06      	ldr	r5, [pc, #24]	@ (800ba88 <_sbrk_r+0x1c>)
 800ba70:	2300      	movs	r3, #0
 800ba72:	4604      	mov	r4, r0
 800ba74:	4608      	mov	r0, r1
 800ba76:	602b      	str	r3, [r5, #0]
 800ba78:	f7f6 fb06 	bl	8002088 <_sbrk>
 800ba7c:	1c43      	adds	r3, r0, #1
 800ba7e:	d102      	bne.n	800ba86 <_sbrk_r+0x1a>
 800ba80:	682b      	ldr	r3, [r5, #0]
 800ba82:	b103      	cbz	r3, 800ba86 <_sbrk_r+0x1a>
 800ba84:	6023      	str	r3, [r4, #0]
 800ba86:	bd38      	pop	{r3, r4, r5, pc}
 800ba88:	200007f0 	.word	0x200007f0

0800ba8c <__assert_func>:
 800ba8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba8e:	4614      	mov	r4, r2
 800ba90:	461a      	mov	r2, r3
 800ba92:	4b09      	ldr	r3, [pc, #36]	@ (800bab8 <__assert_func+0x2c>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4605      	mov	r5, r0
 800ba98:	68d8      	ldr	r0, [r3, #12]
 800ba9a:	b954      	cbnz	r4, 800bab2 <__assert_func+0x26>
 800ba9c:	4b07      	ldr	r3, [pc, #28]	@ (800babc <__assert_func+0x30>)
 800ba9e:	461c      	mov	r4, r3
 800baa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baa4:	9100      	str	r1, [sp, #0]
 800baa6:	462b      	mov	r3, r5
 800baa8:	4905      	ldr	r1, [pc, #20]	@ (800bac0 <__assert_func+0x34>)
 800baaa:	f000 f84f 	bl	800bb4c <fiprintf>
 800baae:	f000 f85f 	bl	800bb70 <abort>
 800bab2:	4b04      	ldr	r3, [pc, #16]	@ (800bac4 <__assert_func+0x38>)
 800bab4:	e7f4      	b.n	800baa0 <__assert_func+0x14>
 800bab6:	bf00      	nop
 800bab8:	20000184 	.word	0x20000184
 800babc:	0800c09d 	.word	0x0800c09d
 800bac0:	0800c06f 	.word	0x0800c06f
 800bac4:	0800c062 	.word	0x0800c062

0800bac8 <_calloc_r>:
 800bac8:	b570      	push	{r4, r5, r6, lr}
 800baca:	fba1 5402 	umull	r5, r4, r1, r2
 800bace:	b93c      	cbnz	r4, 800bae0 <_calloc_r+0x18>
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7fe fe0f 	bl	800a6f4 <_malloc_r>
 800bad6:	4606      	mov	r6, r0
 800bad8:	b928      	cbnz	r0, 800bae6 <_calloc_r+0x1e>
 800bada:	2600      	movs	r6, #0
 800badc:	4630      	mov	r0, r6
 800bade:	bd70      	pop	{r4, r5, r6, pc}
 800bae0:	220c      	movs	r2, #12
 800bae2:	6002      	str	r2, [r0, #0]
 800bae4:	e7f9      	b.n	800bada <_calloc_r+0x12>
 800bae6:	462a      	mov	r2, r5
 800bae8:	4621      	mov	r1, r4
 800baea:	f7fd fb59 	bl	80091a0 <memset>
 800baee:	e7f5      	b.n	800badc <_calloc_r+0x14>

0800baf0 <_realloc_r>:
 800baf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	4680      	mov	r8, r0
 800baf6:	4615      	mov	r5, r2
 800baf8:	460c      	mov	r4, r1
 800bafa:	b921      	cbnz	r1, 800bb06 <_realloc_r+0x16>
 800bafc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb00:	4611      	mov	r1, r2
 800bb02:	f7fe bdf7 	b.w	800a6f4 <_malloc_r>
 800bb06:	b92a      	cbnz	r2, 800bb14 <_realloc_r+0x24>
 800bb08:	f7fe fa46 	bl	8009f98 <_free_r>
 800bb0c:	2400      	movs	r4, #0
 800bb0e:	4620      	mov	r0, r4
 800bb10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb14:	f000 f833 	bl	800bb7e <_malloc_usable_size_r>
 800bb18:	4285      	cmp	r5, r0
 800bb1a:	4606      	mov	r6, r0
 800bb1c:	d802      	bhi.n	800bb24 <_realloc_r+0x34>
 800bb1e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bb22:	d8f4      	bhi.n	800bb0e <_realloc_r+0x1e>
 800bb24:	4629      	mov	r1, r5
 800bb26:	4640      	mov	r0, r8
 800bb28:	f7fe fde4 	bl	800a6f4 <_malloc_r>
 800bb2c:	4607      	mov	r7, r0
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	d0ec      	beq.n	800bb0c <_realloc_r+0x1c>
 800bb32:	42b5      	cmp	r5, r6
 800bb34:	462a      	mov	r2, r5
 800bb36:	4621      	mov	r1, r4
 800bb38:	bf28      	it	cs
 800bb3a:	4632      	movcs	r2, r6
 800bb3c:	f7fd fbc1 	bl	80092c2 <memcpy>
 800bb40:	4621      	mov	r1, r4
 800bb42:	4640      	mov	r0, r8
 800bb44:	f7fe fa28 	bl	8009f98 <_free_r>
 800bb48:	463c      	mov	r4, r7
 800bb4a:	e7e0      	b.n	800bb0e <_realloc_r+0x1e>

0800bb4c <fiprintf>:
 800bb4c:	b40e      	push	{r1, r2, r3}
 800bb4e:	b503      	push	{r0, r1, lr}
 800bb50:	4601      	mov	r1, r0
 800bb52:	ab03      	add	r3, sp, #12
 800bb54:	4805      	ldr	r0, [pc, #20]	@ (800bb6c <fiprintf+0x20>)
 800bb56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb5a:	6800      	ldr	r0, [r0, #0]
 800bb5c:	9301      	str	r3, [sp, #4]
 800bb5e:	f7ff fd23 	bl	800b5a8 <_vfiprintf_r>
 800bb62:	b002      	add	sp, #8
 800bb64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb68:	b003      	add	sp, #12
 800bb6a:	4770      	bx	lr
 800bb6c:	20000184 	.word	0x20000184

0800bb70 <abort>:
 800bb70:	b508      	push	{r3, lr}
 800bb72:	2006      	movs	r0, #6
 800bb74:	f000 f834 	bl	800bbe0 <raise>
 800bb78:	2001      	movs	r0, #1
 800bb7a:	f7f6 fa0d 	bl	8001f98 <_exit>

0800bb7e <_malloc_usable_size_r>:
 800bb7e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb82:	1f18      	subs	r0, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	bfbc      	itt	lt
 800bb88:	580b      	ldrlt	r3, [r1, r0]
 800bb8a:	18c0      	addlt	r0, r0, r3
 800bb8c:	4770      	bx	lr

0800bb8e <_raise_r>:
 800bb8e:	291f      	cmp	r1, #31
 800bb90:	b538      	push	{r3, r4, r5, lr}
 800bb92:	4605      	mov	r5, r0
 800bb94:	460c      	mov	r4, r1
 800bb96:	d904      	bls.n	800bba2 <_raise_r+0x14>
 800bb98:	2316      	movs	r3, #22
 800bb9a:	6003      	str	r3, [r0, #0]
 800bb9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bba0:	bd38      	pop	{r3, r4, r5, pc}
 800bba2:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bba4:	b112      	cbz	r2, 800bbac <_raise_r+0x1e>
 800bba6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bbaa:	b94b      	cbnz	r3, 800bbc0 <_raise_r+0x32>
 800bbac:	4628      	mov	r0, r5
 800bbae:	f000 f831 	bl	800bc14 <_getpid_r>
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	4601      	mov	r1, r0
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbbc:	f000 b818 	b.w	800bbf0 <_kill_r>
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d00a      	beq.n	800bbda <_raise_r+0x4c>
 800bbc4:	1c59      	adds	r1, r3, #1
 800bbc6:	d103      	bne.n	800bbd0 <_raise_r+0x42>
 800bbc8:	2316      	movs	r3, #22
 800bbca:	6003      	str	r3, [r0, #0]
 800bbcc:	2001      	movs	r0, #1
 800bbce:	e7e7      	b.n	800bba0 <_raise_r+0x12>
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	4798      	blx	r3
 800bbda:	2000      	movs	r0, #0
 800bbdc:	e7e0      	b.n	800bba0 <_raise_r+0x12>
	...

0800bbe0 <raise>:
 800bbe0:	4b02      	ldr	r3, [pc, #8]	@ (800bbec <raise+0xc>)
 800bbe2:	4601      	mov	r1, r0
 800bbe4:	6818      	ldr	r0, [r3, #0]
 800bbe6:	f7ff bfd2 	b.w	800bb8e <_raise_r>
 800bbea:	bf00      	nop
 800bbec:	20000184 	.word	0x20000184

0800bbf0 <_kill_r>:
 800bbf0:	b538      	push	{r3, r4, r5, lr}
 800bbf2:	4d07      	ldr	r5, [pc, #28]	@ (800bc10 <_kill_r+0x20>)
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	602b      	str	r3, [r5, #0]
 800bbfe:	f7f6 f9bb 	bl	8001f78 <_kill>
 800bc02:	1c43      	adds	r3, r0, #1
 800bc04:	d102      	bne.n	800bc0c <_kill_r+0x1c>
 800bc06:	682b      	ldr	r3, [r5, #0]
 800bc08:	b103      	cbz	r3, 800bc0c <_kill_r+0x1c>
 800bc0a:	6023      	str	r3, [r4, #0]
 800bc0c:	bd38      	pop	{r3, r4, r5, pc}
 800bc0e:	bf00      	nop
 800bc10:	200007f0 	.word	0x200007f0

0800bc14 <_getpid_r>:
 800bc14:	f7f6 b9a8 	b.w	8001f68 <_getpid>

0800bc18 <_init>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	bf00      	nop
 800bc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1e:	bc08      	pop	{r3}
 800bc20:	469e      	mov	lr, r3
 800bc22:	4770      	bx	lr

0800bc24 <_fini>:
 800bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc26:	bf00      	nop
 800bc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc2a:	bc08      	pop	{r3}
 800bc2c:	469e      	mov	lr, r3
 800bc2e:	4770      	bx	lr
