
ProjetDEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004408  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004594  08004594  00014594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080045dc  080045dc  000145dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e4  080045e4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e4  080045e4  000145e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080045ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  2000000c  080045f8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  080045f8  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000122ea  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000233c  00000000  00000000  00032369  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  000346a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d95  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001abe6  00000000  00000000  00036575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000140ab  00000000  00000000  0005115b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab9f9  00000000  00000000  00065206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004968  00000000  00000000  00110c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00115568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800457c 	.word	0x0800457c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	0800457c 	.word	0x0800457c

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b092      	sub	sp, #72	; 0x48
 80004cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ce:	f000 fe5e 	bl	800118e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d2:	f000 f86d 	bl	80005b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d6:	f000 faa1 	bl	8000a1c <MX_GPIO_Init>
  MX_TIM1_Init();
 80004da:	f000 f8ed 	bl	80006b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80004de:	f000 fa3d 	bl	800095c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 fa6b 	bl	80009bc <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80004e6:	f000 f8a9 	bl	800063c <MX_I2C3_Init>
  MX_TIM2_Init();
 80004ea:	f000 f9b5 	bl	8000858 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004ee:	2100      	movs	r1, #0
 80004f0:	482c      	ldr	r0, [pc, #176]	; (80005a4 <main+0xdc>)
 80004f2:	f002 fbc7 	bl	8002c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80004f6:	2104      	movs	r1, #4
 80004f8:	482a      	ldr	r0, [pc, #168]	; (80005a4 <main+0xdc>)
 80004fa:	f002 fbc3 	bl	8002c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80004fe:	2108      	movs	r1, #8
 8000500:	4828      	ldr	r0, [pc, #160]	; (80005a4 <main+0xdc>)
 8000502:	f002 fbbf 	bl	8002c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000506:	210c      	movs	r1, #12
 8000508:	4826      	ldr	r0, [pc, #152]	; (80005a4 <main+0xdc>)
 800050a:	f002 fbbb 	bl	8002c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800050e:	2100      	movs	r1, #0
 8000510:	4825      	ldr	r0, [pc, #148]	; (80005a8 <main+0xe0>)
 8000512:	f002 fbb7 	bl	8002c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000516:	2104      	movs	r1, #4
 8000518:	4823      	ldr	r0, [pc, #140]	; (80005a8 <main+0xe0>)
 800051a:	f002 fbb3 	bl	8002c84 <HAL_TIM_PWM_Start>
  __Servo_HandleTypeDef Servo_2;
  __Servo_HandleTypeDef Servo_3;

  /* USER CODE END 2 */

  servoInit(&Servo_1, GPIOB, BTN_1_Pin, &htim1, TIM_CHANNEL_4);
 800051e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8000522:	230c      	movs	r3, #12
 8000524:	9300      	str	r3, [sp, #0]
 8000526:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <main+0xdc>)
 8000528:	2202      	movs	r2, #2
 800052a:	4920      	ldr	r1, [pc, #128]	; (80005ac <main+0xe4>)
 800052c:	f000 faed 	bl	8000b0a <servoInit>
  servoInit(&Servo_2, GPIOB, BTN_2_Pin, &htim1, TIM_CHANNEL_3);
 8000530:	f107 0014 	add.w	r0, r7, #20
 8000534:	2308      	movs	r3, #8
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <main+0xdc>)
 800053a:	2201      	movs	r2, #1
 800053c:	491b      	ldr	r1, [pc, #108]	; (80005ac <main+0xe4>)
 800053e:	f000 fae4 	bl	8000b0a <servoInit>
  servoInit(&Servo_3, GPIOA, BTN_3_Pin, &htim1, TIM_CHANNEL_2);
 8000542:	4638      	mov	r0, r7
 8000544:	2304      	movs	r3, #4
 8000546:	9300      	str	r3, [sp, #0]
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <main+0xdc>)
 800054a:	2240      	movs	r2, #64	; 0x40
 800054c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000550:	f000 fadb 	bl	8000b0a <servoInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(btnPressed() != 0){
 8000554:	f000 fb2e 	bl	8000bb4 <btnPressed>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d020      	beq.n	80005a0 <main+0xd8>
		  int a = btnPressed();
 800055e:	f000 fb29 	bl	8000bb4 <btnPressed>
 8000562:	63f8      	str	r0, [r7, #60]	; 0x3c
		  switch(a){
 8000564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000566:	2b03      	cmp	r3, #3
 8000568:	d015      	beq.n	8000596 <main+0xce>
 800056a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800056c:	2b03      	cmp	r3, #3
 800056e:	dcf1      	bgt.n	8000554 <main+0x8c>
 8000570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000572:	2b01      	cmp	r3, #1
 8000574:	d003      	beq.n	800057e <main+0xb6>
 8000576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000578:	2b02      	cmp	r3, #2
 800057a:	d006      	beq.n	800058a <main+0xc2>
 800057c:	e011      	b.n	80005a2 <main+0xda>
		  	  case 1:
		  		  turnServo(&Servo_1);
 800057e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fb52 	bl	8000c2c <turnServo>
		  		  break;
 8000588:	e00b      	b.n	80005a2 <main+0xda>
		  	  case 2:
		  		  turnServo(&Servo_2);
 800058a:	f107 0314 	add.w	r3, r7, #20
 800058e:	4618      	mov	r0, r3
 8000590:	f000 fb4c 	bl	8000c2c <turnServo>
		  		  break;
 8000594:	e005      	b.n	80005a2 <main+0xda>
		  	  case 3:
		  		  turnServo(&Servo_3);
 8000596:	463b      	mov	r3, r7
 8000598:	4618      	mov	r0, r3
 800059a:	f000 fb47 	bl	8000c2c <turnServo>
		  		  break;
 800059e:	e000      	b.n	80005a2 <main+0xda>
		  	  default:
 80005a0:	bf00      	nop
	  if(btnPressed() != 0){
 80005a2:	e7d7      	b.n	8000554 <main+0x8c>
 80005a4:	2000007c 	.word	0x2000007c
 80005a8:	200000c8 	.word	0x200000c8
 80005ac:	48000400 	.word	0x48000400

080005b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b096      	sub	sp, #88	; 0x58
 80005b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	2244      	movs	r2, #68	; 0x44
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 ffaf 	bl	8004522 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c4:	463b      	mov	r3, r7
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005d6:	f001 fa3b 	bl	8001a50 <HAL_PWREx_ControlVoltageScaling>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e0:	f000 fa8e 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005e4:	2310      	movs	r3, #16
 80005e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005e8:	2301      	movs	r3, #1
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005f0:	2360      	movs	r3, #96	; 0x60
 80005f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f4:	2300      	movs	r3, #0
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	4618      	mov	r0, r3
 80005fe:	f001 fa7d 	bl	8001afc <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000608:	f000 fa7a 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f001 fecb 	bl	80023c0 <HAL_RCC_ClockConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000630:	f000 fa66 	bl	8000b00 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3758      	adds	r7, #88	; 0x58
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000640:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000642:	4a1c      	ldr	r2, [pc, #112]	; (80006b4 <MX_I2C3_Init+0x78>)
 8000644:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00000E14;
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000648:	f640 6214 	movw	r2, #3604	; 0xe14
 800064c:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000656:	2201      	movs	r2, #1
 8000658:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MX_I2C3_Init+0x74>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000668:	2200      	movs	r2, #0
 800066a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <MX_I2C3_Init+0x74>)
 800066e:	2200      	movs	r2, #0
 8000670:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000672:	4b0f      	ldr	r3, [pc, #60]	; (80006b0 <MX_I2C3_Init+0x74>)
 8000674:	2200      	movs	r2, #0
 8000676:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000678:	480d      	ldr	r0, [pc, #52]	; (80006b0 <MX_I2C3_Init+0x74>)
 800067a:	f001 f8a9 	bl	80017d0 <HAL_I2C_Init>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000684:	f000 fa3c 	bl	8000b00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000688:	2100      	movs	r1, #0
 800068a:	4809      	ldr	r0, [pc, #36]	; (80006b0 <MX_I2C3_Init+0x74>)
 800068c:	f001 f93b 	bl	8001906 <HAL_I2CEx_ConfigAnalogFilter>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000696:	f000 fa33 	bl	8000b00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800069a:	2100      	movs	r1, #0
 800069c:	4804      	ldr	r0, [pc, #16]	; (80006b0 <MX_I2C3_Init+0x74>)
 800069e:	f001 f97d 	bl	800199c <HAL_I2CEx_ConfigDigitalFilter>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006a8:	f000 fa2a 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006ac:	bf00      	nop
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000028 	.word	0x20000028
 80006b4:	40005c00 	.word	0x40005c00

080006b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09a      	sub	sp, #104	; 0x68
 80006bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006be:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006cc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]
 80006e8:	615a      	str	r2, [r3, #20]
 80006ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	222c      	movs	r2, #44	; 0x2c
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f003 ff15 	bl	8004522 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f8:	4b55      	ldr	r3, [pc, #340]	; (8000850 <MX_TIM1_Init+0x198>)
 80006fa:	4a56      	ldr	r2, [pc, #344]	; (8000854 <MX_TIM1_Init+0x19c>)
 80006fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8-1;
 80006fe:	4b54      	ldr	r3, [pc, #336]	; (8000850 <MX_TIM1_Init+0x198>)
 8000700:	2207      	movs	r2, #7
 8000702:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000704:	4b52      	ldr	r3, [pc, #328]	; (8000850 <MX_TIM1_Init+0x198>)
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 800070a:	4b51      	ldr	r3, [pc, #324]	; (8000850 <MX_TIM1_Init+0x198>)
 800070c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000710:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000712:	4b4f      	ldr	r3, [pc, #316]	; (8000850 <MX_TIM1_Init+0x198>)
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000718:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <MX_TIM1_Init+0x198>)
 800071a:	2200      	movs	r2, #0
 800071c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800071e:	4b4c      	ldr	r3, [pc, #304]	; (8000850 <MX_TIM1_Init+0x198>)
 8000720:	2200      	movs	r2, #0
 8000722:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000724:	484a      	ldr	r0, [pc, #296]	; (8000850 <MX_TIM1_Init+0x198>)
 8000726:	f002 f9f5 	bl	8002b14 <HAL_TIM_Base_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000730:	f000 f9e6 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000738:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800073a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800073e:	4619      	mov	r1, r3
 8000740:	4843      	ldr	r0, [pc, #268]	; (8000850 <MX_TIM1_Init+0x198>)
 8000742:	f002 fc91 	bl	8003068 <HAL_TIM_ConfigClockSource>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800074c:	f000 f9d8 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000750:	483f      	ldr	r0, [pc, #252]	; (8000850 <MX_TIM1_Init+0x198>)
 8000752:	f002 fa36 	bl	8002bc2 <HAL_TIM_PWM_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800075c:	f000 f9d0 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000760:	2300      	movs	r3, #0
 8000762:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000764:	2300      	movs	r3, #0
 8000766:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800076c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000770:	4619      	mov	r1, r3
 8000772:	4837      	ldr	r0, [pc, #220]	; (8000850 <MX_TIM1_Init+0x198>)
 8000774:	f003 f8e4 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800077e:	f000 f9bf 	bl	8000b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000782:	2360      	movs	r3, #96	; 0x60
 8000784:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000786:	2300      	movs	r3, #0
 8000788:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800078a:	2300      	movs	r3, #0
 800078c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800078e:	2300      	movs	r3, #0
 8000790:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000792:	2300      	movs	r3, #0
 8000794:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000796:	2300      	movs	r3, #0
 8000798:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007a2:	2200      	movs	r2, #0
 80007a4:	4619      	mov	r1, r3
 80007a6:	482a      	ldr	r0, [pc, #168]	; (8000850 <MX_TIM1_Init+0x198>)
 80007a8:	f002 fb4a 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007b2:	f000 f9a5 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ba:	2204      	movs	r2, #4
 80007bc:	4619      	mov	r1, r3
 80007be:	4824      	ldr	r0, [pc, #144]	; (8000850 <MX_TIM1_Init+0x198>)
 80007c0:	f002 fb3e 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007ca:	f000 f999 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007d2:	2208      	movs	r2, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	481e      	ldr	r0, [pc, #120]	; (8000850 <MX_TIM1_Init+0x198>)
 80007d8:	f002 fb32 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007e2:	f000 f98d 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80007ea:	220c      	movs	r2, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4818      	ldr	r0, [pc, #96]	; (8000850 <MX_TIM1_Init+0x198>)
 80007f0:	f002 fb26 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 80007fa:	f000 f981 	bl	8000b00 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000820:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	; (8000850 <MX_TIM1_Init+0x198>)
 8000834:	f003 f8ea 	bl	8003a0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 800083e:	f000 f95f 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <MX_TIM1_Init+0x198>)
 8000844:	f000 fb4c 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3768      	adds	r7, #104	; 0x68
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	2000007c 	.word	0x2000007c
 8000854:	40012c00 	.word	0x40012c00

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	; 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088a:	4b33      	ldr	r3, [pc, #204]	; (8000958 <MX_TIM2_Init+0x100>)
 800088c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8-1;
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <MX_TIM2_Init+0x100>)
 8000894:	2207      	movs	r2, #7
 8000896:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <MX_TIM2_Init+0x100>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_TIM2_Init+0x100>)
 80008a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80008a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	4b2c      	ldr	r3, [pc, #176]	; (8000958 <MX_TIM2_Init+0x100>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <MX_TIM2_Init+0x100>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b2:	4829      	ldr	r0, [pc, #164]	; (8000958 <MX_TIM2_Init+0x100>)
 80008b4:	f002 f92e 	bl	8002b14 <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 f91f 	bl	8000b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4822      	ldr	r0, [pc, #136]	; (8000958 <MX_TIM2_Init+0x100>)
 80008d0:	f002 fbca 	bl	8003068 <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008da:	f000 f911 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008de:	481e      	ldr	r0, [pc, #120]	; (8000958 <MX_TIM2_Init+0x100>)
 80008e0:	f002 f96f 	bl	8002bc2 <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008ea:	f000 f909 	bl	8000b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <MX_TIM2_Init+0x100>)
 80008fe:	f003 f81f 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000908:	f000 f8fa 	bl	8000b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	; 0x60
 800090e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_TIM2_Init+0x100>)
 8000924:	f002 fa8c 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800092e:	f000 f8e7 	bl	8000b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	2204      	movs	r2, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <MX_TIM2_Init+0x100>)
 800093a:	f002 fa81 	bl	8002e40 <HAL_TIM_PWM_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000944:	f000 f8dc 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000948:	4803      	ldr	r0, [pc, #12]	; (8000958 <MX_TIM2_Init+0x100>)
 800094a:	f000 fac9 	bl	8000ee0 <HAL_TIM_MspPostInit>

}
 800094e:	bf00      	nop
 8000950:	3738      	adds	r7, #56	; 0x38
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200000c8 	.word	0x200000c8

0800095c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000960:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000962:	4a15      	ldr	r2, [pc, #84]	; (80009b8 <MX_USART1_UART_Init+0x5c>)
 8000964:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_USART1_UART_Init+0x58>)
 80009a0:	f003 f8ac 	bl	8003afc <HAL_UART_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009aa:	f000 f8a9 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000114 	.word	0x20000114
 80009b8:	40013800 	.word	0x40013800

080009bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009c0:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c2:	4a15      	ldr	r2, [pc, #84]	; (8000a18 <MX_USART2_UART_Init+0x5c>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 80009c6:	4b13      	ldr	r3, [pc, #76]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009c8:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80009cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART2_UART_Init+0x58>)
 8000a00:	f003 f8ca 	bl	8003b98 <HAL_HalfDuplex_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a0a:	f000 f879 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000019c 	.word	0x2000019c
 8000a18:	40004400 	.word	0x40004400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b088      	sub	sp, #32
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a30      	ldr	r2, [pc, #192]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b2b      	ldr	r3, [pc, #172]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a2a      	ldr	r2, [pc, #168]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <MX_GPIO_Init+0xdc>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	607b      	str	r3, [r7, #4]
 8000a60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6c:	f000 fe98 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000a70:	2200      	movs	r2, #0
 8000a72:	2128      	movs	r1, #40	; 0x28
 8000a74:	4821      	ldr	r0, [pc, #132]	; (8000afc <MX_GPIO_Init+0xe0>)
 8000a76:	f000 fe93 	bl	80017a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN_5_Pin BTN_6_M_Pin BTN_4_Pin BTN_3_Pin
                           BTN_7_M_Pin */
  GPIO_InitStruct.Pin = BTN_5_Pin|BTN_6_M_Pin|BTN_4_Pin|BTN_3_Pin
 8000a7a:	f241 0378 	movw	r3, #4216	; 0x1078
 8000a7e:	60fb      	str	r3, [r7, #12]
                          |BTN_7_M_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a80:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a94:	f000 fcfa 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_2_Pin BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_2_Pin|BTN_1_Pin;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a9c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <MX_GPIO_Init+0xe0>)
 8000aae:	f000 fced 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 fcdd 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8000ad2:	2328      	movs	r3, #40	; 0x28
 8000ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae2:	f107 030c 	add.w	r3, r7, #12
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_GPIO_Init+0xe0>)
 8000aea:	f000 fccf 	bl	800148c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	3720      	adds	r7, #32
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40021000 	.word	0x40021000
 8000afc:	48000400 	.word	0x48000400

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>

08000b0a <servoInit>:
 *      Author: administrateur
 */

#include "servo.h"

void servoInit(__Servo_HandleTypeDef *Servo_Handle, GPIO_TypeDef *btn_port, uint16_t btn_pin, TIM_HandleTypeDef *timer, uint32_t timer_channel){
 8000b0a:	b480      	push	{r7}
 8000b0c:	b085      	sub	sp, #20
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	60f8      	str	r0, [r7, #12]
 8000b12:	60b9      	str	r1, [r7, #8]
 8000b14:	603b      	str	r3, [r7, #0]
 8000b16:	4613      	mov	r3, r2
 8000b18:	80fb      	strh	r3, [r7, #6]
	Servo_Handle->btn_port = btn_port;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	68ba      	ldr	r2, [r7, #8]
 8000b1e:	601a      	str	r2, [r3, #0]
	Servo_Handle->btn_pin = btn_pin;
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	88fa      	ldrh	r2, [r7, #6]
 8000b24:	809a      	strh	r2, [r3, #4]
	Servo_Handle->timer = timer;
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	683a      	ldr	r2, [r7, #0]
 8000b2a:	609a      	str	r2, [r3, #8]
	Servo_Handle->timer_channel = timer_channel;
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	69ba      	ldr	r2, [r7, #24]
 8000b30:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(Servo_Handle->timer, Servo_Handle->timer_channel, NOT_TURNED);
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	68db      	ldr	r3, [r3, #12]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d105      	bne.n	8000b46 <servoInit+0x3c>
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	22fa      	movs	r2, #250	; 0xfa
 8000b42:	635a      	str	r2, [r3, #52]	; 0x34
 8000b44:	e02c      	b.n	8000ba0 <servoInit+0x96>
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	d105      	bne.n	8000b5a <servoInit+0x50>
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	689b      	ldr	r3, [r3, #8]
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	23fa      	movs	r3, #250	; 0xfa
 8000b56:	6393      	str	r3, [r2, #56]	; 0x38
 8000b58:	e022      	b.n	8000ba0 <servoInit+0x96>
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	68db      	ldr	r3, [r3, #12]
 8000b5e:	2b08      	cmp	r3, #8
 8000b60:	d105      	bne.n	8000b6e <servoInit+0x64>
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	23fa      	movs	r3, #250	; 0xfa
 8000b6a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000b6c:	e018      	b.n	8000ba0 <servoInit+0x96>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	68db      	ldr	r3, [r3, #12]
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d105      	bne.n	8000b82 <servoInit+0x78>
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	23fa      	movs	r3, #250	; 0xfa
 8000b7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b80:	e00e      	b.n	8000ba0 <servoInit+0x96>
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	2b10      	cmp	r3, #16
 8000b88:	d105      	bne.n	8000b96 <servoInit+0x8c>
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	23fa      	movs	r3, #250	; 0xfa
 8000b92:	6593      	str	r3, [r2, #88]	; 0x58
 8000b94:	e004      	b.n	8000ba0 <servoInit+0x96>
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	23fa      	movs	r3, #250	; 0xfa
 8000b9e:	65d3      	str	r3, [r2, #92]	; 0x5c
	Servo_Handle->is_turned = 0;
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	741a      	strb	r2, [r3, #16]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <btnPressed>:

int btnPressed(void){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
	int btnNumber = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOB, BTN_1_Pin) == 0) btnNumber = 1;
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4819      	ldr	r0, [pc, #100]	; (8000c28 <btnPressed+0x74>)
 8000bc2:	f000 fdd5 	bl	8001770 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d101      	bne.n	8000bd0 <btnPressed+0x1c>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOB, BTN_2_Pin) == 0) btnNumber = 2;
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	4815      	ldr	r0, [pc, #84]	; (8000c28 <btnPressed+0x74>)
 8000bd4:	f000 fdcc 	bl	8001770 <HAL_GPIO_ReadPin>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d101      	bne.n	8000be2 <btnPressed+0x2e>
 8000bde:	2302      	movs	r3, #2
 8000be0:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, BTN_3_Pin) == 0) btnNumber = 3;
 8000be2:	2140      	movs	r1, #64	; 0x40
 8000be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be8:	f000 fdc2 	bl	8001770 <HAL_GPIO_ReadPin>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d101      	bne.n	8000bf6 <btnPressed+0x42>
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, BTN_4_Pin) == 0) btnNumber = 4;
 8000bf6:	2120      	movs	r1, #32
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 fdb8 	bl	8001770 <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d101      	bne.n	8000c0a <btnPressed+0x56>
 8000c06:	2304      	movs	r3, #4
 8000c08:	607b      	str	r3, [r7, #4]
	if (HAL_GPIO_ReadPin(GPIOA, BTN_5_Pin) == 0) btnNumber = 5;
 8000c0a:	2108      	movs	r1, #8
 8000c0c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c10:	f000 fdae 	bl	8001770 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <btnPressed+0x6a>
 8000c1a:	2305      	movs	r3, #5
 8000c1c:	607b      	str	r3, [r7, #4]
	//if (HAL_GPIO_ReadPin(GPIOA, BTN_6_M_Pin) == 0) btnNumber = 6;
	//if (HAL_GPIO_ReadPin(GPIOA, BTN_7_M_Pin) == 0) btnNumber = 7;
	return btnNumber;
 8000c1e:	687b      	ldr	r3, [r7, #4]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3708      	adds	r7, #8
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000400 	.word	0x48000400

08000c2c <turnServo>:

void turnServo(__Servo_HandleTypeDef *Servo_Handle){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
	if(Servo_Handle->is_turned == 0){
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	7c1b      	ldrb	r3, [r3, #16]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d143      	bne.n	8000cc4 <turnServo+0x98>
		__HAL_TIM_SET_COMPARE(Servo_Handle->timer, Servo_Handle->timer_channel, TURNED);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d106      	bne.n	8000c52 <turnServo+0x26>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000c4e:	635a      	str	r2, [r3, #52]	; 0x34
 8000c50:	e031      	b.n	8000cb6 <turnServo+0x8a>
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	d106      	bne.n	8000c68 <turnServo+0x3c>
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000c64:	6393      	str	r3, [r2, #56]	; 0x38
 8000c66:	e026      	b.n	8000cb6 <turnServo+0x8a>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	2b08      	cmp	r3, #8
 8000c6e:	d106      	bne.n	8000c7e <turnServo+0x52>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000c7a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000c7c:	e01b      	b.n	8000cb6 <turnServo+0x8a>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	2b0c      	cmp	r3, #12
 8000c84:	d106      	bne.n	8000c94 <turnServo+0x68>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000c90:	6413      	str	r3, [r2, #64]	; 0x40
 8000c92:	e010      	b.n	8000cb6 <turnServo+0x8a>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b10      	cmp	r3, #16
 8000c9a:	d106      	bne.n	8000caa <turnServo+0x7e>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca8:	e005      	b.n	8000cb6 <turnServo+0x8a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	689b      	ldr	r3, [r3, #8]
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8000cb4:	65d3      	str	r3, [r2, #92]	; 0x5c
		Servo_Handle->is_turned = 1;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2201      	movs	r2, #1
 8000cba:	741a      	strb	r2, [r3, #16]
		HAL_Delay(250);
 8000cbc:	20fa      	movs	r0, #250	; 0xfa
 8000cbe:	f000 fadb 	bl	8001278 <HAL_Delay>
	else{
		__HAL_TIM_SET_COMPARE(Servo_Handle->timer, Servo_Handle->timer_channel, NOT_TURNED);
		Servo_Handle->is_turned = 0;
		HAL_Delay(250);
	}
}
 8000cc2:	e03c      	b.n	8000d3e <turnServo+0x112>
		__HAL_TIM_SET_COMPARE(Servo_Handle->timer, Servo_Handle->timer_channel, NOT_TURNED);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d105      	bne.n	8000cd8 <turnServo+0xac>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	22fa      	movs	r2, #250	; 0xfa
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd6:	e02c      	b.n	8000d32 <turnServo+0x106>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	2b04      	cmp	r3, #4
 8000cde:	d105      	bne.n	8000cec <turnServo+0xc0>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	23fa      	movs	r3, #250	; 0xfa
 8000ce8:	6393      	str	r3, [r2, #56]	; 0x38
 8000cea:	e022      	b.n	8000d32 <turnServo+0x106>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	2b08      	cmp	r3, #8
 8000cf2:	d105      	bne.n	8000d00 <turnServo+0xd4>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	689b      	ldr	r3, [r3, #8]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	23fa      	movs	r3, #250	; 0xfa
 8000cfc:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000cfe:	e018      	b.n	8000d32 <turnServo+0x106>
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2b0c      	cmp	r3, #12
 8000d06:	d105      	bne.n	8000d14 <turnServo+0xe8>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	23fa      	movs	r3, #250	; 0xfa
 8000d10:	6413      	str	r3, [r2, #64]	; 0x40
 8000d12:	e00e      	b.n	8000d32 <turnServo+0x106>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	2b10      	cmp	r3, #16
 8000d1a:	d105      	bne.n	8000d28 <turnServo+0xfc>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	689b      	ldr	r3, [r3, #8]
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	23fa      	movs	r3, #250	; 0xfa
 8000d24:	6593      	str	r3, [r2, #88]	; 0x58
 8000d26:	e004      	b.n	8000d32 <turnServo+0x106>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	689b      	ldr	r3, [r3, #8]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	23fa      	movs	r3, #250	; 0xfa
 8000d30:	65d3      	str	r3, [r2, #92]	; 0x5c
		Servo_Handle->is_turned = 0;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
		HAL_Delay(250);
 8000d38:	20fa      	movs	r0, #250	; 0xfa
 8000d3a:	f000 fa9d 	bl	8001278 <HAL_Delay>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x44>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	4a0e      	ldr	r2, [pc, #56]	; (8000d8c <HAL_MspInit+0x44>)
 8000d54:	f043 0301 	orr.w	r3, r3, #1
 8000d58:	6613      	str	r3, [r2, #96]	; 0x60
 8000d5a:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_MspInit+0x44>)
 8000d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5e:	f003 0301 	and.w	r3, r3, #1
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d66:	4b09      	ldr	r3, [pc, #36]	; (8000d8c <HAL_MspInit+0x44>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	4a08      	ldr	r2, [pc, #32]	; (8000d8c <HAL_MspInit+0x44>)
 8000d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_MspInit+0x44>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	370c      	adds	r7, #12
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b098      	sub	sp, #96	; 0x60
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]
 8000da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da8:	f107 0318 	add.w	r3, r7, #24
 8000dac:	2234      	movs	r2, #52	; 0x34
 8000dae:	2100      	movs	r1, #0
 8000db0:	4618      	mov	r0, r3
 8000db2:	f003 fbb6 	bl	8004522 <memset>
  if(hi2c->Instance==I2C3)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a2d      	ldr	r2, [pc, #180]	; (8000e70 <HAL_I2C_MspInit+0xe0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d153      	bne.n	8000e68 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000dc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000dc4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fd1a 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000dda:	f7ff fe91 	bl	8000b00 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b25      	ldr	r3, [pc, #148]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de2:	4a24      	ldr	r2, [pc, #144]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000dfc:	f043 0302 	orr.w	r3, r3, #2
 8000e00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e02:	4b1c      	ldr	r3, [pc, #112]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e0e:	2380      	movs	r3, #128	; 0x80
 8000e10:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e12:	2312      	movs	r3, #18
 8000e14:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e1e:	2304      	movs	r3, #4
 8000e20:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e26:	4619      	mov	r1, r3
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f000 fb2e 	bl	800148c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e30:	2310      	movs	r3, #16
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e34:	2312      	movs	r3, #18
 8000e36:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e40:	2304      	movs	r3, #4
 8000e42:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e44:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e48:	4619      	mov	r1, r3
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <HAL_I2C_MspInit+0xe8>)
 8000e4c:	f000 fb1e 	bl	800148c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000e56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8000e5c:	4b05      	ldr	r3, [pc, #20]	; (8000e74 <HAL_I2C_MspInit+0xe4>)
 8000e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3760      	adds	r7, #96	; 0x60
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40005c00 	.word	0x40005c00
 8000e74:	40021000 	.word	0x40021000
 8000e78:	48000400 	.word	0x48000400

08000e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b085      	sub	sp, #20
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <HAL_TIM_Base_MspInit+0x5c>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d10c      	bne.n	8000ea8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <HAL_TIM_Base_MspInit+0x60>)
 8000e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e92:	4a12      	ldr	r2, [pc, #72]	; (8000edc <HAL_TIM_Base_MspInit+0x60>)
 8000e94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e98:	6613      	str	r3, [r2, #96]	; 0x60
 8000e9a:	4b10      	ldr	r3, [pc, #64]	; (8000edc <HAL_TIM_Base_MspInit+0x60>)
 8000e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ea6:	e010      	b.n	8000eca <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000eb0:	d10b      	bne.n	8000eca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x60>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <HAL_TIM_Base_MspInit+0x60>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <HAL_TIM_Base_MspInit+0x60>)
 8000ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <HAL_TIM_MspPostInit+0xac>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d11e      	bne.n	8000f40 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <HAL_TIM_MspPostInit+0xb0>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <HAL_TIM_MspPostInit+0xb0>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <HAL_TIM_MspPostInit+0xb0>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000f1a:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000f1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f20:	2302      	movs	r3, #2
 8000f22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f30:	f107 0314 	add.w	r3, r7, #20
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f000 faa7 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f3e:	e021      	b.n	8000f84 <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f48:	d11c      	bne.n	8000f84 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_TIM_MspPostInit+0xb0>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <HAL_TIM_MspPostInit+0xb0>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_TIM_MspPostInit+0xb0>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f62:	2303      	movs	r3, #3
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f72:	2301      	movs	r3, #1
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f000 fa84 	bl	800148c <HAL_GPIO_Init>
}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	; 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40012c00 	.word	0x40012c00
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b098      	sub	sp, #96	; 0x60
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fac:	f107 0318 	add.w	r3, r7, #24
 8000fb0:	2234      	movs	r2, #52	; 0x34
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fab4 	bl	8004522 <memset>
  if(huart->Instance==USART1)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a3d      	ldr	r2, [pc, #244]	; (80010b4 <HAL_UART_MspInit+0x120>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d136      	bne.n	8001032 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fcc:	f107 0318 	add.w	r3, r7, #24
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f001 fc19 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fdc:	f7ff fd90 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8000fe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe4:	4a34      	ldr	r2, [pc, #208]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8000fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fea:	6613      	str	r3, [r2, #96]	; 0x60
 8000fec:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8000fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b2f      	ldr	r3, [pc, #188]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8000ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8000ffe:	f043 0302 	orr.w	r3, r3, #2
 8001002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001004:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8001006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001010:	23c0      	movs	r3, #192	; 0xc0
 8001012:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001014:	2302      	movs	r3, #2
 8001016:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001020:	2307      	movs	r3, #7
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001028:	4619      	mov	r1, r3
 800102a:	4824      	ldr	r0, [pc, #144]	; (80010bc <HAL_UART_MspInit+0x128>)
 800102c:	f000 fa2e 	bl	800148c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001030:	e03b      	b.n	80010aa <HAL_UART_MspInit+0x116>
  else if(huart->Instance==USART2)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <HAL_UART_MspInit+0x12c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d136      	bne.n	80010aa <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4618      	mov	r0, r3
 800104a:	f001 fbdd 	bl	8002808 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <HAL_UART_MspInit+0xc4>
      Error_Handler();
 8001054:	f7ff fd54 	bl	8000b00 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001058:	4b17      	ldr	r3, [pc, #92]	; (80010b8 <HAL_UART_MspInit+0x124>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	4a16      	ldr	r2, [pc, #88]	; (80010b8 <HAL_UART_MspInit+0x124>)
 800105e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001062:	6593      	str	r3, [r2, #88]	; 0x58
 8001064:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8001066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8001072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001074:	4a10      	ldr	r2, [pc, #64]	; (80010b8 <HAL_UART_MspInit+0x124>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_UART_MspInit+0x124>)
 800107e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
 8001086:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001088:	2304      	movs	r3, #4
 800108a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800108c:	2312      	movs	r3, #18
 800108e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001098:	2307      	movs	r3, #7
 800109a:	65fb      	str	r3, [r7, #92]	; 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80010a0:	4619      	mov	r1, r3
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f000 f9f1 	bl	800148c <HAL_GPIO_Init>
}
 80010aa:	bf00      	nop
 80010ac:	3760      	adds	r7, #96	; 0x60
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40013800 	.word	0x40013800
 80010b8:	40021000 	.word	0x40021000
 80010bc:	48000400 	.word	0x48000400
 80010c0:	40004400 	.word	0x40004400

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler+0x4>

080010ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ca:	b480      	push	{r7}
 80010cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <HardFault_Handler+0x4>

080010d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d4:	e7fe      	b.n	80010d4 <MemManage_Handler+0x4>

080010d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010da:	e7fe      	b.n	80010da <BusFault_Handler+0x4>

080010dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e0:	e7fe      	b.n	80010e0 <UsageFault_Handler+0x4>

080010e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001110:	f000 f892 	bl	8001238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	bd80      	pop	{r7, pc}

08001118 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001174 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001140:	f7ff ffea 	bl	8001118 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	; (8001178 <LoopForever+0x6>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	; (800117c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	; (8001180 <LoopForever+0xe>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <LoopForever+0x12>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	; (8001188 <LoopForever+0x16>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800116a:	f003 f9e3 	bl	8004534 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800116e:	f7ff f9ab 	bl	80004c8 <main>

08001172 <LoopForever>:

LoopForever:
    b LoopForever
 8001172:	e7fe      	b.n	8001172 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001174:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001180:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8001184:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001188:	20000228 	.word	0x20000228

0800118c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC1_2_IRQHandler>

0800118e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b082      	sub	sp, #8
 8001192:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001198:	2003      	movs	r0, #3
 800119a:	f000 f943 	bl	8001424 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800119e:	200f      	movs	r0, #15
 80011a0:	f000 f80e 	bl	80011c0 <HAL_InitTick>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d002      	beq.n	80011b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	e001      	b.n	80011b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011b0:	f7ff fdca 	bl	8000d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011b4:	79fb      	ldrb	r3, [r7, #7]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
	...

080011c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011c8:	2300      	movs	r3, #0
 80011ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011cc:	4b17      	ldr	r3, [pc, #92]	; (800122c <HAL_InitTick+0x6c>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d023      	beq.n	800121c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_InitTick+0x70>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_InitTick+0x6c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f941 	bl	8001472 <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10f      	bne.n	8001216 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0f      	cmp	r3, #15
 80011fa:	d809      	bhi.n	8001210 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011fc:	2200      	movs	r2, #0
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001204:	f000 f919 	bl	800143a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001208:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <HAL_InitTick+0x74>)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e007      	b.n	8001220 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e004      	b.n	8001220 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	e001      	b.n	8001220 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001220:	7bfb      	ldrb	r3, [r7, #15]
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000008 	.word	0x20000008
 8001230:	20000000 	.word	0x20000000
 8001234:	20000004 	.word	0x20000004

08001238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <HAL_IncTick+0x20>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_IncTick+0x24>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4413      	add	r3, r2
 8001248:	4a04      	ldr	r2, [pc, #16]	; (800125c <HAL_IncTick+0x24>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	20000008 	.word	0x20000008
 800125c:	20000224 	.word	0x20000224

08001260 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return uwTick;
 8001264:	4b03      	ldr	r3, [pc, #12]	; (8001274 <HAL_GetTick+0x14>)
 8001266:	681b      	ldr	r3, [r3, #0]
}
 8001268:	4618      	mov	r0, r3
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	20000224 	.word	0x20000224

08001278 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001280:	f7ff ffee 	bl	8001260 <HAL_GetTick>
 8001284:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001290:	d005      	beq.n	800129e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_Delay+0x44>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	461a      	mov	r2, r3
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	4413      	add	r3, r2
 800129c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800129e:	bf00      	nop
 80012a0:	f7ff ffde 	bl	8001260 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d8f7      	bhi.n	80012a0 <HAL_Delay+0x28>
  {
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	3710      	adds	r7, #16
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20000008 	.word	0x20000008

080012c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d0:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012d2:	68db      	ldr	r3, [r3, #12]
 80012d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012dc:	4013      	ands	r3, r2
 80012de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	; (8001304 <__NVIC_SetPriorityGrouping+0x44>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00

08001308 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <__NVIC_GetPriorityGrouping+0x18>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	0a1b      	lsrs	r3, r3, #8
 8001312:	f003 0307 	and.w	r3, r3, #7
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	db0a      	blt.n	800134e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	b2da      	uxtb	r2, r3
 800133c:	490c      	ldr	r1, [pc, #48]	; (8001370 <__NVIC_SetPriority+0x4c>)
 800133e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001342:	0112      	lsls	r2, r2, #4
 8001344:	b2d2      	uxtb	r2, r2
 8001346:	440b      	add	r3, r1
 8001348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800134c:	e00a      	b.n	8001364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	b2da      	uxtb	r2, r3
 8001352:	4908      	ldr	r1, [pc, #32]	; (8001374 <__NVIC_SetPriority+0x50>)
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	3b04      	subs	r3, #4
 800135c:	0112      	lsls	r2, r2, #4
 800135e:	b2d2      	uxtb	r2, r2
 8001360:	440b      	add	r3, r1
 8001362:	761a      	strb	r2, [r3, #24]
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100
 8001374:	e000ed00 	.word	0xe000ed00

08001378 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001378:	b480      	push	{r7}
 800137a:	b089      	sub	sp, #36	; 0x24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	f1c3 0307 	rsb	r3, r3, #7
 8001392:	2b04      	cmp	r3, #4
 8001394:	bf28      	it	cs
 8001396:	2304      	movcs	r3, #4
 8001398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	3304      	adds	r3, #4
 800139e:	2b06      	cmp	r3, #6
 80013a0:	d902      	bls.n	80013a8 <NVIC_EncodePriority+0x30>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3b03      	subs	r3, #3
 80013a6:	e000      	b.n	80013aa <NVIC_EncodePriority+0x32>
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43da      	mvns	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	401a      	ands	r2, r3
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	fa01 f303 	lsl.w	r3, r1, r3
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d0:	4313      	orrs	r3, r2
         );
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3724      	adds	r7, #36	; 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	3b01      	subs	r3, #1
 80013ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f0:	d301      	bcc.n	80013f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00f      	b.n	8001416 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <SysTick_Config+0x40>)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fe:	210f      	movs	r1, #15
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001404:	f7ff ff8e 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <SysTick_Config+0x40>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140e:	4b04      	ldr	r3, [pc, #16]	; (8001420 <SysTick_Config+0x40>)
 8001410:	2207      	movs	r2, #7
 8001412:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	e000e010 	.word	0xe000e010

08001424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7ff ff47 	bl	80012c0 <__NVIC_SetPriorityGrouping>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b086      	sub	sp, #24
 800143e:	af00      	add	r7, sp, #0
 8001440:	4603      	mov	r3, r0
 8001442:	60b9      	str	r1, [r7, #8]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001448:	2300      	movs	r3, #0
 800144a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff5c 	bl	8001308 <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff8e 	bl	8001378 <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffb0 	bl	80013e0 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800149a:	e14e      	b.n	800173a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	2101      	movs	r1, #1
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	fa01 f303 	lsl.w	r3, r1, r3
 80014a8:	4013      	ands	r3, r2
 80014aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f000 8140 	beq.w	8001734 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0303 	and.w	r3, r3, #3
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d005      	beq.n	80014cc <HAL_GPIO_Init+0x40>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d130      	bne.n	800152e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	2203      	movs	r2, #3
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	68da      	ldr	r2, [r3, #12]
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001502:	2201      	movs	r2, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	091b      	lsrs	r3, r3, #4
 8001518:	f003 0201 	and.w	r2, r3, #1
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b03      	cmp	r3, #3
 8001538:	d017      	beq.n	800156a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	2203      	movs	r2, #3
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4013      	ands	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	689a      	ldr	r2, [r3, #8]
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	693a      	ldr	r2, [r7, #16]
 8001560:	4313      	orrs	r3, r2
 8001562:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 0303 	and.w	r3, r3, #3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d123      	bne.n	80015be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	08da      	lsrs	r2, r3, #3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3208      	adds	r2, #8
 800157e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001582:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	220f      	movs	r2, #15
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43db      	mvns	r3, r3
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	4013      	ands	r3, r2
 8001598:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	691a      	ldr	r2, [r3, #16]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0307 	and.w	r3, r3, #7
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	08da      	lsrs	r2, r3, #3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3208      	adds	r2, #8
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	2203      	movs	r2, #3
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f003 0203 	and.w	r2, r3, #3
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f000 809a 	beq.w	8001734 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_GPIO_Init+0x2cc>)
 8001602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <HAL_GPIO_Init+0x2cc>)
 8001606:	f043 0301 	orr.w	r3, r3, #1
 800160a:	6613      	str	r3, [r2, #96]	; 0x60
 800160c:	4b52      	ldr	r3, [pc, #328]	; (8001758 <HAL_GPIO_Init+0x2cc>)
 800160e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001618:	4a50      	ldr	r2, [pc, #320]	; (800175c <HAL_GPIO_Init+0x2d0>)
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	089b      	lsrs	r3, r3, #2
 800161e:	3302      	adds	r3, #2
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	f003 0303 	and.w	r3, r3, #3
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	4013      	ands	r3, r2
 800163a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001642:	d013      	beq.n	800166c <HAL_GPIO_Init+0x1e0>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	4a46      	ldr	r2, [pc, #280]	; (8001760 <HAL_GPIO_Init+0x2d4>)
 8001648:	4293      	cmp	r3, r2
 800164a:	d00d      	beq.n	8001668 <HAL_GPIO_Init+0x1dc>
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a45      	ldr	r2, [pc, #276]	; (8001764 <HAL_GPIO_Init+0x2d8>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d007      	beq.n	8001664 <HAL_GPIO_Init+0x1d8>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	4a44      	ldr	r2, [pc, #272]	; (8001768 <HAL_GPIO_Init+0x2dc>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d101      	bne.n	8001660 <HAL_GPIO_Init+0x1d4>
 800165c:	2303      	movs	r3, #3
 800165e:	e006      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 8001660:	2307      	movs	r3, #7
 8001662:	e004      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 8001664:	2302      	movs	r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 8001668:	2301      	movs	r3, #1
 800166a:	e000      	b.n	800166e <HAL_GPIO_Init+0x1e2>
 800166c:	2300      	movs	r3, #0
 800166e:	697a      	ldr	r2, [r7, #20]
 8001670:	f002 0203 	and.w	r2, r2, #3
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	4093      	lsls	r3, r2
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	4313      	orrs	r3, r2
 800167c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800167e:	4937      	ldr	r1, [pc, #220]	; (800175c <HAL_GPIO_Init+0x2d0>)
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	089b      	lsrs	r3, r3, #2
 8001684:	3302      	adds	r3, #2
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800168c:	4b37      	ldr	r3, [pc, #220]	; (800176c <HAL_GPIO_Init+0x2e0>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	43db      	mvns	r3, r3
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d003      	beq.n	80016b0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016b0:	4a2e      	ldr	r2, [pc, #184]	; (800176c <HAL_GPIO_Init+0x2e0>)
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016b6:	4b2d      	ldr	r3, [pc, #180]	; (800176c <HAL_GPIO_Init+0x2e0>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	43db      	mvns	r3, r3
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d003      	beq.n	80016da <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016da:	4a24      	ldr	r2, [pc, #144]	; (800176c <HAL_GPIO_Init+0x2e0>)
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016e0:	4b22      	ldr	r3, [pc, #136]	; (800176c <HAL_GPIO_Init+0x2e0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d003      	beq.n	8001704 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_GPIO_Init+0x2e0>)
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <HAL_GPIO_Init+0x2e0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800172e:	4a0f      	ldr	r2, [pc, #60]	; (800176c <HAL_GPIO_Init+0x2e0>)
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	2b00      	cmp	r3, #0
 8001746:	f47f aea9 	bne.w	800149c <HAL_GPIO_Init+0x10>
  }
}
 800174a:	bf00      	nop
 800174c:	bf00      	nop
 800174e:	371c      	adds	r7, #28
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr
 8001758:	40021000 	.word	0x40021000
 800175c:	40010000 	.word	0x40010000
 8001760:	48000400 	.word	0x48000400
 8001764:	48000800 	.word	0x48000800
 8001768:	48000c00 	.word	0x48000c00
 800176c:	40010400 	.word	0x40010400

08001770 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	691a      	ldr	r2, [r3, #16]
 8001780:	887b      	ldrh	r3, [r7, #2]
 8001782:	4013      	ands	r3, r2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d002      	beq.n	800178e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001788:	2301      	movs	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	e001      	b.n	8001792 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	807b      	strh	r3, [r7, #2]
 80017ac:	4613      	mov	r3, r2
 80017ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017b0:	787b      	ldrb	r3, [r7, #1]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017b6:	887a      	ldrh	r2, [r7, #2]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017be:	887a      	ldrh	r2, [r7, #2]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e08d      	b.n	80018fe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d106      	bne.n	80017fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7ff faca 	bl	8000d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2224      	movs	r2, #36	; 0x24
 8001800:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0201 	bic.w	r2, r2, #1
 8001812:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001820:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001830:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689a      	ldr	r2, [r3, #8]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	e006      	b.n	8001858 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001856:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	2b02      	cmp	r3, #2
 800185e:	d108      	bne.n	8001872 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	e007      	b.n	8001882 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001880:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001894:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68da      	ldr	r2, [r3, #12]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691a      	ldr	r2, [r3, #16]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69d9      	ldr	r1, [r3, #28]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1a      	ldr	r2, [r3, #32]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0201 	orr.w	r2, r2, #1
 80018de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2220      	movs	r2, #32
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001906:	b480      	push	{r7}
 8001908:	b083      	sub	sp, #12
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
 800190e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001916:	b2db      	uxtb	r3, r3
 8001918:	2b20      	cmp	r3, #32
 800191a:	d138      	bne.n	800198e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001922:	2b01      	cmp	r3, #1
 8001924:	d101      	bne.n	800192a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001926:	2302      	movs	r3, #2
 8001928:	e032      	b.n	8001990 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2224      	movs	r2, #36	; 0x24
 8001936:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001958:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	6819      	ldr	r1, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f042 0201 	orr.w	r2, r2, #1
 8001978:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2220      	movs	r2, #32
 800197e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	e000      	b.n	8001990 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800198e:	2302      	movs	r3, #2
  }
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	d139      	bne.n	8001a26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d101      	bne.n	80019c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019bc:	2302      	movs	r3, #2
 80019be:	e033      	b.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2224      	movs	r2, #36	; 0x24
 80019cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80019ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	021b      	lsls	r3, r3, #8
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f042 0201 	orr.w	r2, r2, #1
 8001a10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2220      	movs	r2, #32
 8001a16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
 8001a24:	e000      	b.n	8001a28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a26:	2302      	movs	r3, #2
  }
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr

08001a34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a38:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40007000 	.word	0x40007000

08001a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a5e:	d130      	bne.n	8001ac2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a60:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a6c:	d038      	beq.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a6e:	4b20      	ldr	r3, [pc, #128]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a76:	4a1e      	ldr	r2, [pc, #120]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2232      	movs	r2, #50	; 0x32
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	0c9b      	lsrs	r3, r3, #18
 8001a90:	3301      	adds	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a94:	e002      	b.n	8001a9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a9c:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9e:	695b      	ldr	r3, [r3, #20]
 8001aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa8:	d102      	bne.n	8001ab0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f2      	bne.n	8001a96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ab2:	695b      	ldr	r3, [r3, #20]
 8001ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abc:	d110      	bne.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e00f      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d007      	beq.n	8001ae0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ad8:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ada:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ade:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40007000 	.word	0x40007000
 8001af4:	20000000 	.word	0x20000000
 8001af8:	431bde83 	.word	0x431bde83

08001afc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d102      	bne.n	8001b10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f000 bc4f 	b.w	80023ae <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b10:	4b97      	ldr	r3, [pc, #604]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 030c 	and.w	r3, r3, #12
 8001b18:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b1a:	4b95      	ldr	r3, [pc, #596]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80e6 	beq.w	8001cfe <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4c>
 8001b38:	6a3b      	ldr	r3, [r7, #32]
 8001b3a:	2b0c      	cmp	r3, #12
 8001b3c:	f040 808d 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	f040 8089 	bne.w	8001c5a <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b48:	4b89      	ldr	r3, [pc, #548]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d006      	beq.n	8001b62 <HAL_RCC_OscConfig+0x66>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d102      	bne.n	8001b62 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	f000 bc26 	b.w	80023ae <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b66:	4b82      	ldr	r3, [pc, #520]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d004      	beq.n	8001b7c <HAL_RCC_OscConfig+0x80>
 8001b72:	4b7f      	ldr	r3, [pc, #508]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7a:	e005      	b.n	8001b88 <HAL_RCC_OscConfig+0x8c>
 8001b7c:	4b7c      	ldr	r3, [pc, #496]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001b7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b82:	091b      	lsrs	r3, r3, #4
 8001b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d224      	bcs.n	8001bd6 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fdd9 	bl	8002748 <RCC_SetFlashLatencyFromMSIRange>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	f000 bc06 	b.w	80023ae <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ba2:	4b73      	ldr	r3, [pc, #460]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a72      	ldr	r2, [pc, #456]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001ba8:	f043 0308 	orr.w	r3, r3, #8
 8001bac:	6013      	str	r3, [r2, #0]
 8001bae:	4b70      	ldr	r3, [pc, #448]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	496d      	ldr	r1, [pc, #436]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bc0:	4b6b      	ldr	r3, [pc, #428]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	4968      	ldr	r1, [pc, #416]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
 8001bd4:	e025      	b.n	8001c22 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd6:	4b66      	ldr	r3, [pc, #408]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a65      	ldr	r2, [pc, #404]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bdc:	f043 0308 	orr.w	r3, r3, #8
 8001be0:	6013      	str	r3, [r2, #0]
 8001be2:	4b63      	ldr	r3, [pc, #396]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bee:	4960      	ldr	r1, [pc, #384]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf4:	4b5e      	ldr	r3, [pc, #376]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6a1b      	ldr	r3, [r3, #32]
 8001c00:	021b      	lsls	r3, r3, #8
 8001c02:	495b      	ldr	r1, [pc, #364]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c04:	4313      	orrs	r3, r2
 8001c06:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	6a3b      	ldr	r3, [r7, #32]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d109      	bne.n	8001c22 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 fd98 	bl	8002748 <RCC_SetFlashLatencyFromMSIRange>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e3c5      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c22:	f000 fccd 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b51      	ldr	r3, [pc, #324]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	091b      	lsrs	r3, r3, #4
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	4950      	ldr	r1, [pc, #320]	; (8001d74 <HAL_RCC_OscConfig+0x278>)
 8001c34:	5ccb      	ldrb	r3, [r1, r3]
 8001c36:	f003 031f 	and.w	r3, r3, #31
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_RCC_OscConfig+0x27c>)
 8001c40:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c42:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <HAL_RCC_OscConfig+0x280>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff faba 	bl	80011c0 <HAL_InitTick>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001c50:	7dfb      	ldrb	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d052      	beq.n	8001cfc <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	e3a9      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d032      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c62:	4b43      	ldr	r3, [pc, #268]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6e:	f7ff faf7 	bl	8001260 <HAL_GetTick>
 8001c72:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c76:	f7ff faf3 	bl	8001260 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e392      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c88:	4b39      	ldr	r3, [pc, #228]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c94:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a35      	ldr	r2, [pc, #212]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b33      	ldr	r3, [pc, #204]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cac:	4930      	ldr	r1, [pc, #192]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb2:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	492b      	ldr	r1, [pc, #172]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e01a      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001cc8:	4b29      	ldr	r3, [pc, #164]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a28      	ldr	r2, [pc, #160]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fac4 	bl	8001260 <HAL_GetTick>
 8001cd8:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fac0 	bl	8001260 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e35f      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cee:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x1e0>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d073      	beq.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	2b08      	cmp	r3, #8
 8001d0e:	d005      	beq.n	8001d1c <HAL_RCC_OscConfig+0x220>
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	d10e      	bne.n	8001d34 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d10b      	bne.n	8001d34 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1c:	4b14      	ldr	r3, [pc, #80]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d063      	beq.n	8001df0 <HAL_RCC_OscConfig+0x2f4>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d15f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e33c      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d3c:	d106      	bne.n	8001d4c <HAL_RCC_OscConfig+0x250>
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a0b      	ldr	r2, [pc, #44]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d48:	6013      	str	r3, [r2, #0]
 8001d4a:	e025      	b.n	8001d98 <HAL_RCC_OscConfig+0x29c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d54:	d114      	bne.n	8001d80 <HAL_RCC_OscConfig+0x284>
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a05      	ldr	r2, [pc, #20]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	4b03      	ldr	r3, [pc, #12]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a02      	ldr	r2, [pc, #8]	; (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e013      	b.n	8001d98 <HAL_RCC_OscConfig+0x29c>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	08004594 	.word	0x08004594
 8001d78:	20000000 	.word	0x20000000
 8001d7c:	20000004 	.word	0x20000004
 8001d80:	4b8f      	ldr	r3, [pc, #572]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a8e      	ldr	r2, [pc, #568]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8a:	6013      	str	r3, [r2, #0]
 8001d8c:	4b8c      	ldr	r3, [pc, #560]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a8b      	ldr	r2, [pc, #556]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d013      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da0:	f7ff fa5e 	bl	8001260 <HAL_GetTick>
 8001da4:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff fa5a 	bl	8001260 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e2f9      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dba:	4b81      	ldr	r3, [pc, #516]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f0      	beq.n	8001da8 <HAL_RCC_OscConfig+0x2ac>
 8001dc6:	e014      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff fa4a 	bl	8001260 <HAL_GetTick>
 8001dcc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff fa46 	bl	8001260 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e2e5      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001de2:	4b77      	ldr	r3, [pc, #476]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x2d4>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d060      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dfe:	6a3b      	ldr	r3, [r7, #32]
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d005      	beq.n	8001e10 <HAL_RCC_OscConfig+0x314>
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2b0c      	cmp	r3, #12
 8001e08:	d119      	bne.n	8001e3e <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d116      	bne.n	8001e3e <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_RCC_OscConfig+0x32c>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e2c2      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e28:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	061b      	lsls	r3, r3, #24
 8001e36:	4962      	ldr	r1, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e3c:	e040      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d023      	beq.n	8001e8e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e46:	4b5e      	ldr	r3, [pc, #376]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a5d      	ldr	r2, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e52:	f7ff fa05 	bl	8001260 <HAL_GetTick>
 8001e56:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff fa01 	bl	8001260 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e2a0      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e6c:	4b54      	ldr	r3, [pc, #336]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e78:	4b51      	ldr	r3, [pc, #324]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	061b      	lsls	r3, r3, #24
 8001e86:	494e      	ldr	r1, [pc, #312]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a4b      	ldr	r2, [pc, #300]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f9e1 	bl	8001260 <HAL_GetTick>
 8001e9e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ea0:	e008      	b.n	8001eb4 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea2:	f7ff f9dd 	bl	8001260 <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d901      	bls.n	8001eb4 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	e27c      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	4b42      	ldr	r3, [pc, #264]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f0      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0308 	and.w	r3, r3, #8
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8082 	beq.w	8001fd2 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	695b      	ldr	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d05f      	beq.n	8001f96 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001ed6:	4b3a      	ldr	r3, [pc, #232]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001edc:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d037      	beq.n	8001f5c <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d006      	beq.n	8001f04 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e254      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d01b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f14:	4a2a      	ldr	r2, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f16:	f023 0301 	bic.w	r3, r3, #1
 8001f1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001f1e:	f7ff f99f 	bl	8001260 <HAL_GetTick>
 8001f22:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7ff f99b 	bl	8001260 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b11      	cmp	r3, #17
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e23a      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f38:	4b21      	ldr	r3, [pc, #132]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d1ef      	bne.n	8001f26 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	f023 0210 	bic.w	r2, r3, #16
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	491a      	ldr	r1, [pc, #104]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f5c:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f62:	4a17      	ldr	r2, [pc, #92]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f6c:	f7ff f978 	bl	8001260 <HAL_GetTick>
 8001f70:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f74:	f7ff f974 	bl	8001260 <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b11      	cmp	r3, #17
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e213      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d0ef      	beq.n	8001f74 <HAL_RCC_OscConfig+0x478>
 8001f94:	e01d      	b.n	8001fd2 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	4a08      	ldr	r2, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f9e:	f023 0301 	bic.w	r3, r3, #1
 8001fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa6:	f7ff f95b 	bl	8001260 <HAL_GetTick>
 8001faa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fac:	e00a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fae:	f7ff f957 	bl	8001260 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69bb      	ldr	r3, [r7, #24]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b11      	cmp	r3, #17
 8001fba:	d903      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e1f6      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
 8001fc0:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fc4:	4ba9      	ldr	r3, [pc, #676]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8001fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1ed      	bne.n	8001fae <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80bd 	beq.w	800215a <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fe6:	4ba1      	ldr	r3, [pc, #644]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b9e      	ldr	r3, [pc, #632]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8001ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff6:	4a9d      	ldr	r2, [pc, #628]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ffe:	4b9b      	ldr	r3, [pc, #620]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002002:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002010:	4b97      	ldr	r3, [pc, #604]	; (8002270 <HAL_RCC_OscConfig+0x774>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d118      	bne.n	800204e <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800201c:	4b94      	ldr	r3, [pc, #592]	; (8002270 <HAL_RCC_OscConfig+0x774>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a93      	ldr	r2, [pc, #588]	; (8002270 <HAL_RCC_OscConfig+0x774>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002026:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002028:	f7ff f91a 	bl	8001260 <HAL_GetTick>
 800202c:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002030:	f7ff f916 	bl	8001260 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e1b5      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002042:	4b8b      	ldr	r3, [pc, #556]	; (8002270 <HAL_RCC_OscConfig+0x774>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0f0      	beq.n	8002030 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d02c      	beq.n	80020b4 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 800205a:	4b84      	ldr	r3, [pc, #528]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	497f      	ldr	r1, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0304 	and.w	r3, r3, #4
 800207c:	2b00      	cmp	r3, #0
 800207e:	d010      	beq.n	80020a2 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002080:	4b7a      	ldr	r3, [pc, #488]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002086:	4a79      	ldr	r2, [pc, #484]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002090:	4b76      	ldr	r3, [pc, #472]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002096:	4a75      	ldr	r2, [pc, #468]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020a0:	e018      	b.n	80020d4 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020a2:	4b72      	ldr	r3, [pc, #456]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a8:	4a70      	ldr	r2, [pc, #448]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020aa:	f043 0301 	orr.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020b2:	e00f      	b.n	80020d4 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020b4:	4b6d      	ldr	r3, [pc, #436]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a6c      	ldr	r2, [pc, #432]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020bc:	f023 0301 	bic.w	r3, r3, #1
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80020c4:	4b69      	ldr	r3, [pc, #420]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ca:	4a68      	ldr	r2, [pc, #416]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d016      	beq.n	800210a <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020dc:	f7ff f8c0 	bl	8001260 <HAL_GetTick>
 80020e0:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e4:	f7ff f8bc 	bl	8001260 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e159      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020fa:	4b5c      	ldr	r3, [pc, #368]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0ed      	beq.n	80020e4 <HAL_RCC_OscConfig+0x5e8>
 8002108:	e01d      	b.n	8002146 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800210a:	f7ff f8a9 	bl	8001260 <HAL_GetTick>
 800210e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002110:	e00a      	b.n	8002128 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002112:	f7ff f8a5 	bl	8001260 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002120:	4293      	cmp	r3, r2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e142      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002128:	4b50      	ldr	r3, [pc, #320]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800212a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ed      	bne.n	8002112 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002136:	4b4d      	ldr	r3, [pc, #308]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	4a4b      	ldr	r2, [pc, #300]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800213e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800214a:	2b01      	cmp	r3, #1
 800214c:	d105      	bne.n	800215a <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800214e:	4b47      	ldr	r3, [pc, #284]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	4a46      	ldr	r2, [pc, #280]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002158:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0320 	and.w	r3, r3, #32
 8002162:	2b00      	cmp	r3, #0
 8002164:	d03c      	beq.n	80021e0 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800216e:	4b3f      	ldr	r3, [pc, #252]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002170:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002174:	4a3d      	ldr	r2, [pc, #244]	; (800226c <HAL_RCC_OscConfig+0x770>)
 8002176:	f043 0301 	orr.w	r3, r3, #1
 800217a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800217e:	f7ff f86f 	bl	8001260 <HAL_GetTick>
 8002182:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002184:	e008      	b.n	8002198 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002186:	f7ff f86b 	bl	8001260 <HAL_GetTick>
 800218a:	4602      	mov	r2, r0
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e10a      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002198:	4b34      	ldr	r3, [pc, #208]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800219a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0ef      	beq.n	8002186 <HAL_RCC_OscConfig+0x68a>
 80021a6:	e01b      	b.n	80021e0 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021a8:	4b30      	ldr	r3, [pc, #192]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80021aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021ae:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80021b0:	f023 0301 	bic.w	r3, r3, #1
 80021b4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b8:	f7ff f852 	bl	8001260 <HAL_GetTick>
 80021bc:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c0:	f7ff f84e 	bl	8001260 <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e0ed      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80021d2:	4b26      	ldr	r3, [pc, #152]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80021d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1ef      	bne.n	80021c0 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	f000 80e1 	beq.w	80023ac <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	f040 80b5 	bne.w	800235e <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021f4:	4b1d      	ldr	r3, [pc, #116]	; (800226c <HAL_RCC_OscConfig+0x770>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0203 	and.w	r2, r3, #3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002204:	429a      	cmp	r2, r3
 8002206:	d124      	bne.n	8002252 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002212:	3b01      	subs	r3, #1
 8002214:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d11b      	bne.n	8002252 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002224:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d113      	bne.n	8002252 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	3b01      	subs	r3, #1
 8002238:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d109      	bne.n	8002252 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	085b      	lsrs	r3, r3, #1
 800224a:	3b01      	subs	r3, #1
 800224c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800224e:	429a      	cmp	r2, r3
 8002250:	d05f      	beq.n	8002312 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d05a      	beq.n	800230e <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a03      	ldr	r2, [pc, #12]	; (800226c <HAL_RCC_OscConfig+0x770>)
 800225e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002262:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002264:	f7fe fffc 	bl	8001260 <HAL_GetTick>
 8002268:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226a:	e00c      	b.n	8002286 <HAL_RCC_OscConfig+0x78a>
 800226c:	40021000 	.word	0x40021000
 8002270:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002274:	f7fe fff4 	bl	8001260 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e093      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002286:	4b4c      	ldr	r3, [pc, #304]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1f0      	bne.n	8002274 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002292:	4b49      	ldr	r3, [pc, #292]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002294:	68da      	ldr	r2, [r3, #12]
 8002296:	4b49      	ldr	r3, [pc, #292]	; (80023bc <HAL_RCC_OscConfig+0x8c0>)
 8002298:	4013      	ands	r3, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022a2:	3a01      	subs	r2, #1
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ac:	0212      	lsls	r2, r2, #8
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022b4:	0852      	lsrs	r2, r2, #1
 80022b6:	3a01      	subs	r2, #1
 80022b8:	0552      	lsls	r2, r2, #21
 80022ba:	4311      	orrs	r1, r2
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022c0:	0852      	lsrs	r2, r2, #1
 80022c2:	3a01      	subs	r2, #1
 80022c4:	0652      	lsls	r2, r2, #25
 80022c6:	430a      	orrs	r2, r1
 80022c8:	493b      	ldr	r1, [pc, #236]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022ce:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a39      	ldr	r2, [pc, #228]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 80022d4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022da:	4b37      	ldr	r3, [pc, #220]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4a36      	ldr	r2, [pc, #216]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 80022e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022e4:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e6:	f7fe ffbb 	bl	8001260 <HAL_GetTick>
 80022ea:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ee:	f7fe ffb7 	bl	8001260 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	69bb      	ldr	r3, [r7, #24]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e056      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002300:	4b2d      	ldr	r3, [pc, #180]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d0f0      	beq.n	80022ee <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800230c:	e04e      	b.n	80023ac <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e04d      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	4b29      	ldr	r3, [pc, #164]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d146      	bne.n	80023ac <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800231e:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a25      	ldr	r2, [pc, #148]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002328:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002334:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002336:	f7fe ff93 	bl	8001260 <HAL_GetTick>
 800233a:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233e:	f7fe ff8f 	bl	8001260 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e02e      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002350:	4b19      	ldr	r3, [pc, #100]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x842>
 800235c:	e026      	b.n	80023ac <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800235e:	6a3b      	ldr	r3, [r7, #32]
 8002360:	2b0c      	cmp	r3, #12
 8002362:	d021      	beq.n	80023a8 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	4b14      	ldr	r3, [pc, #80]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a13      	ldr	r2, [pc, #76]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 800236a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800236e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7fe ff76 	bl	8001260 <HAL_GetTick>
 8002374:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002376:	e008      	b.n	800238a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7fe ff72 	bl	8001260 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d901      	bls.n	800238a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e011      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d1f0      	bne.n	8002378 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002396:	4b08      	ldr	r3, [pc, #32]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4a07      	ldr	r2, [pc, #28]	; (80023b8 <HAL_RCC_OscConfig+0x8bc>)
 800239c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80023a0:	f023 0303 	bic.w	r3, r3, #3
 80023a4:	60d3      	str	r3, [r2, #12]
 80023a6:	e001      	b.n	80023ac <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3728      	adds	r7, #40	; 0x28
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	f99f808c 	.word	0xf99f808c

080023c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e0e7      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023d4:	4b75      	ldr	r3, [pc, #468]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d910      	bls.n	8002404 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e2:	4b72      	ldr	r3, [pc, #456]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f023 0207 	bic.w	r2, r3, #7
 80023ea:	4970      	ldr	r1, [pc, #448]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f2:	4b6e      	ldr	r3, [pc, #440]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	683a      	ldr	r2, [r7, #0]
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d001      	beq.n	8002404 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0cf      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d010      	beq.n	8002432 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	4b66      	ldr	r3, [pc, #408]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	429a      	cmp	r2, r3
 800241e:	d908      	bls.n	8002432 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002420:	4b63      	ldr	r3, [pc, #396]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	4960      	ldr	r1, [pc, #384]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 800242e:	4313      	orrs	r3, r2
 8002430:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d04c      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b03      	cmp	r3, #3
 8002444:	d107      	bne.n	8002456 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002446:	4b5a      	ldr	r3, [pc, #360]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d121      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0a6      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b02      	cmp	r3, #2
 800245c:	d107      	bne.n	800246e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800245e:	4b54      	ldr	r3, [pc, #336]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d115      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e09a      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002476:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e08e      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002486:	4b4a      	ldr	r3, [pc, #296]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e086      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b46      	ldr	r3, [pc, #280]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	4943      	ldr	r1, [pc, #268]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a8:	f7fe feda 	bl	8001260 <HAL_GetTick>
 80024ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fed6 	bl	8001260 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e06e      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b3a      	ldr	r3, [pc, #232]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0302 	and.w	r3, r3, #2
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d010      	beq.n	8002506 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	4b31      	ldr	r3, [pc, #196]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d208      	bcs.n	8002506 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024f4:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	492b      	ldr	r1, [pc, #172]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002502:	4313      	orrs	r3, r2
 8002504:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002506:	4b29      	ldr	r3, [pc, #164]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d210      	bcs.n	8002536 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002514:	4b25      	ldr	r3, [pc, #148]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f023 0207 	bic.w	r2, r3, #7
 800251c:	4923      	ldr	r1, [pc, #140]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	4313      	orrs	r3, r2
 8002522:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002524:	4b21      	ldr	r3, [pc, #132]	; (80025ac <HAL_RCC_ClockConfig+0x1ec>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e036      	b.n	80025a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0304 	and.w	r3, r3, #4
 800253e:	2b00      	cmp	r3, #0
 8002540:	d008      	beq.n	8002554 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002542:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	4918      	ldr	r1, [pc, #96]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002550:	4313      	orrs	r3, r2
 8002552:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d009      	beq.n	8002574 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002560:	4b13      	ldr	r3, [pc, #76]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4910      	ldr	r1, [pc, #64]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	4313      	orrs	r3, r2
 8002572:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002574:	f000 f824 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8002578:	4602      	mov	r2, r0
 800257a:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <HAL_RCC_ClockConfig+0x1f0>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	091b      	lsrs	r3, r3, #4
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	490b      	ldr	r1, [pc, #44]	; (80025b4 <HAL_RCC_ClockConfig+0x1f4>)
 8002586:	5ccb      	ldrb	r3, [r1, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	fa22 f303 	lsr.w	r3, r2, r3
 8002590:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <HAL_RCC_ClockConfig+0x1f8>)
 8002592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <HAL_RCC_ClockConfig+0x1fc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4618      	mov	r0, r3
 800259a:	f7fe fe11 	bl	80011c0 <HAL_InitTick>
 800259e:	4603      	mov	r3, r0
 80025a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80025a2:	7afb      	ldrb	r3, [r7, #11]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40022000 	.word	0x40022000
 80025b0:	40021000 	.word	0x40021000
 80025b4:	08004594 	.word	0x08004594
 80025b8:	20000000 	.word	0x20000000
 80025bc:	20000004 	.word	0x20000004

080025c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	61fb      	str	r3, [r7, #28]
 80025ca:	2300      	movs	r3, #0
 80025cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	f003 030c 	and.w	r3, r3, #12
 80025d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025d8:	4b3b      	ldr	r3, [pc, #236]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	f003 0303 	and.w	r3, r3, #3
 80025e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d005      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x34>
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	2b0c      	cmp	r3, #12
 80025ec:	d121      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d11e      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025f4:	4b34      	ldr	r3, [pc, #208]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0308 	and.w	r3, r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002600:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e005      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800261c:	4a2b      	ldr	r2, [pc, #172]	; (80026cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10d      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002630:	e00a      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b04      	cmp	r3, #4
 8002636:	d102      	bne.n	800263e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002638:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	e004      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	2b08      	cmp	r3, #8
 8002642:	d101      	bne.n	8002648 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002644:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002646:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	2b0c      	cmp	r3, #12
 800264c:	d134      	bne.n	80026b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800264e:	4b1e      	ldr	r3, [pc, #120]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	2b02      	cmp	r3, #2
 800265c:	d003      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0xa6>
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	2b03      	cmp	r3, #3
 8002662:	d003      	beq.n	800266c <HAL_RCC_GetSysClockFreq+0xac>
 8002664:	e005      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	e005      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800266c:	4b19      	ldr	r3, [pc, #100]	; (80026d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800266e:	617b      	str	r3, [r7, #20]
      break;
 8002670:	e002      	b.n	8002678 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	617b      	str	r3, [r7, #20]
      break;
 8002676:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	3301      	adds	r3, #1
 8002684:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	fb03 f202 	mul.w	r2, r3, r2
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	fbb2 f3f3 	udiv	r3, r2, r3
 800269c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800269e:	4b0a      	ldr	r3, [pc, #40]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	0e5b      	lsrs	r3, r3, #25
 80026a4:	f003 0303 	and.w	r3, r3, #3
 80026a8:	3301      	adds	r3, #1
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026b8:	69bb      	ldr	r3, [r7, #24]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3724      	adds	r7, #36	; 0x24
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080045ac 	.word	0x080045ac
 80026d0:	00f42400 	.word	0x00f42400
 80026d4:	007a1200 	.word	0x007a1200

080026d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026d8:	b480      	push	{r7}
 80026da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_RCC_GetHCLKFreq+0x14>)
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000000 	.word	0x20000000

080026f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026f4:	f7ff fff0 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 80026f8:	4602      	mov	r2, r0
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	0a1b      	lsrs	r3, r3, #8
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002706:	5ccb      	ldrb	r3, [r1, r3]
 8002708:	f003 031f 	and.w	r3, r3, #31
 800270c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40021000 	.word	0x40021000
 8002718:	080045a4 	.word	0x080045a4

0800271c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002720:	f7ff ffda 	bl	80026d8 <HAL_RCC_GetHCLKFreq>
 8002724:	4602      	mov	r2, r0
 8002726:	4b06      	ldr	r3, [pc, #24]	; (8002740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	0adb      	lsrs	r3, r3, #11
 800272c:	f003 0307 	and.w	r3, r3, #7
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002732:	5ccb      	ldrb	r3, [r1, r3]
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800273c:	4618      	mov	r0, r3
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40021000 	.word	0x40021000
 8002744:	080045a4 	.word	0x080045a4

08002748 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002750:	2300      	movs	r3, #0
 8002752:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002754:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002760:	f7ff f968 	bl	8001a34 <HAL_PWREx_GetVoltageRange>
 8002764:	6178      	str	r0, [r7, #20]
 8002766:	e014      	b.n	8002792 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4b25      	ldr	r3, [pc, #148]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800276c:	4a24      	ldr	r2, [pc, #144]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800276e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002772:	6593      	str	r3, [r2, #88]	; 0x58
 8002774:	4b22      	ldr	r3, [pc, #136]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002778:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002780:	f7ff f958 	bl	8001a34 <HAL_PWREx_GetVoltageRange>
 8002784:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278a:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800278c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002790:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002798:	d10b      	bne.n	80027b2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b80      	cmp	r3, #128	; 0x80
 800279e:	d919      	bls.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2ba0      	cmp	r3, #160	; 0xa0
 80027a4:	d902      	bls.n	80027ac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027a6:	2302      	movs	r3, #2
 80027a8:	613b      	str	r3, [r7, #16]
 80027aa:	e013      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027ac:	2301      	movs	r3, #1
 80027ae:	613b      	str	r3, [r7, #16]
 80027b0:	e010      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b80      	cmp	r3, #128	; 0x80
 80027b6:	d902      	bls.n	80027be <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80027b8:	2303      	movs	r3, #3
 80027ba:	613b      	str	r3, [r7, #16]
 80027bc:	e00a      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2b80      	cmp	r3, #128	; 0x80
 80027c2:	d102      	bne.n	80027ca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027c4:	2302      	movs	r3, #2
 80027c6:	613b      	str	r3, [r7, #16]
 80027c8:	e004      	b.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2b70      	cmp	r3, #112	; 0x70
 80027ce:	d101      	bne.n	80027d4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027d0:	2301      	movs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027d4:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f023 0207 	bic.w	r2, r3, #7
 80027dc:	4909      	ldr	r1, [pc, #36]	; (8002804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027e4:	4b07      	ldr	r3, [pc, #28]	; (8002804 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	693a      	ldr	r2, [r7, #16]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d001      	beq.n	80027f6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40021000 	.word	0x40021000
 8002804:	40022000 	.word	0x40022000

08002808 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002810:	2300      	movs	r3, #0
 8002812:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002814:	2300      	movs	r3, #0
 8002816:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 809e 	beq.w	8002962 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002826:	2300      	movs	r3, #0
 8002828:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800282a:	4b46      	ldr	r3, [pc, #280]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x34>
 800283a:	2300      	movs	r3, #0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002840:	4b40      	ldr	r3, [pc, #256]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002844:	4a3f      	ldr	r2, [pc, #252]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002846:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800284a:	6593      	str	r3, [r2, #88]	; 0x58
 800284c:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800284e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002858:	2301      	movs	r3, #1
 800285a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a39      	ldr	r2, [pc, #228]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002862:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002866:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002868:	f7fe fcfa 	bl	8001260 <HAL_GetTick>
 800286c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800286e:	e009      	b.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe fcf6 	bl	8001260 <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d902      	bls.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	74fb      	strb	r3, [r7, #19]
        break;
 8002882:	e005      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002884:	4b30      	ldr	r3, [pc, #192]	; (8002948 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ef      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002890:	7cfb      	ldrb	r3, [r7, #19]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d15a      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002896:	4b2b      	ldr	r3, [pc, #172]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01e      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d019      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028b2:	4b24      	ldr	r3, [pc, #144]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028be:	4b21      	ldr	r3, [pc, #132]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c4:	4a1f      	ldr	r2, [pc, #124]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028ce:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	4a1b      	ldr	r2, [pc, #108]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028de:	4a19      	ldr	r2, [pc, #100]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f0:	f7fe fcb6 	bl	8001260 <HAL_GetTick>
 80028f4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028f6:	e00b      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe fcb2 	bl	8001260 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d902      	bls.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	74fb      	strb	r3, [r7, #19]
            break;
 800290e:	e006      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002910:	4b0c      	ldr	r3, [pc, #48]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0ec      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 800291e:	7cfb      	ldrb	r3, [r7, #19]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10b      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4904      	ldr	r1, [pc, #16]	; (8002944 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800293a:	e009      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	74bb      	strb	r3, [r7, #18]
 8002940:	e006      	b.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000
 8002948:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	7cfb      	ldrb	r3, [r7, #19]
 800294e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002950:	7c7b      	ldrb	r3, [r7, #17]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d105      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002956:	4b6e      	ldr	r3, [pc, #440]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	4a6d      	ldr	r2, [pc, #436]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800295c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002960:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00a      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800296e:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002970:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002974:	f023 0203 	bic.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	4964      	ldr	r1, [pc, #400]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800297e:	4313      	orrs	r3, r2
 8002980:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d00a      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002990:	4b5f      	ldr	r3, [pc, #380]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002996:	f023 020c 	bic.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	495c      	ldr	r1, [pc, #368]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4953      	ldr	r1, [pc, #332]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00a      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d4:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691b      	ldr	r3, [r3, #16]
 80029e2:	494b      	ldr	r1, [pc, #300]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f6:	4b46      	ldr	r3, [pc, #280]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a1b      	ldr	r3, [r3, #32]
 8002a04:	4942      	ldr	r1, [pc, #264]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a18:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	493a      	ldr	r1, [pc, #232]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00a      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	4931      	ldr	r1, [pc, #196]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00a      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	4929      	ldr	r1, [pc, #164]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d00a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a7e:	4b24      	ldr	r3, [pc, #144]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	4920      	ldr	r1, [pc, #128]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d015      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aae:	4918      	ldr	r1, [pc, #96]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002abe:	d105      	bne.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ac6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002aca:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d015      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ad8:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae6:	490a      	ldr	r1, [pc, #40]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af6:	d105      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a04      	ldr	r2, [pc, #16]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b04:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3718      	adds	r7, #24
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e049      	b.n	8002bba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d106      	bne.n	8002b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7fe f99e 	bl	8000e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3304      	adds	r3, #4
 8002b50:	4619      	mov	r1, r3
 8002b52:	4610      	mov	r0, r2
 8002b54:	f000 fb52 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e049      	b.n	8002c68 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d106      	bne.n	8002bee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f841 	bl	8002c70 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	4619      	mov	r1, r3
 8002c00:	4610      	mov	r0, r2
 8002c02:	f000 fafb 	bl	80031fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3708      	adds	r7, #8
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d109      	bne.n	8002ca8 <HAL_TIM_PWM_Start+0x24>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	bf14      	ite	ne
 8002ca0:	2301      	movne	r3, #1
 8002ca2:	2300      	moveq	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e03c      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	2b04      	cmp	r3, #4
 8002cac:	d109      	bne.n	8002cc2 <HAL_TIM_PWM_Start+0x3e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	bf14      	ite	ne
 8002cba:	2301      	movne	r3, #1
 8002cbc:	2300      	moveq	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	e02f      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d109      	bne.n	8002cdc <HAL_TIM_PWM_Start+0x58>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	bf14      	ite	ne
 8002cd4:	2301      	movne	r3, #1
 8002cd6:	2300      	moveq	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	e022      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	2b0c      	cmp	r3, #12
 8002ce0:	d109      	bne.n	8002cf6 <HAL_TIM_PWM_Start+0x72>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ce8:	b2db      	uxtb	r3, r3
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	bf14      	ite	ne
 8002cee:	2301      	movne	r3, #1
 8002cf0:	2300      	moveq	r3, #0
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	e015      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	d109      	bne.n	8002d10 <HAL_TIM_PWM_Start+0x8c>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	bf14      	ite	ne
 8002d08:	2301      	movne	r3, #1
 8002d0a:	2300      	moveq	r3, #0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	e008      	b.n	8002d22 <HAL_TIM_PWM_Start+0x9e>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	bf14      	ite	ne
 8002d1c:	2301      	movne	r3, #1
 8002d1e:	2300      	moveq	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e07e      	b.n	8002e28 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xb6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	e023      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b04      	cmp	r3, #4
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xc6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d48:	e01b      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0xd6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d58:	e013      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d104      	bne.n	8002d6a <HAL_TIM_PWM_Start+0xe6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d68:	e00b      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b10      	cmp	r3, #16
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_PWM_Start+0xf6>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d78:	e003      	b.n	8002d82 <HAL_TIM_PWM_Start+0xfe>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	6839      	ldr	r1, [r7, #0]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fdb2 	bl	80038f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <HAL_TIM_PWM_Start+0x1ac>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_TIM_PWM_Start+0x12a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a25      	ldr	r2, [pc, #148]	; (8002e34 <HAL_TIM_PWM_Start+0x1b0>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_TIM_PWM_Start+0x12a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a23      	ldr	r2, [pc, #140]	; (8002e38 <HAL_TIM_PWM_Start+0x1b4>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_TIM_PWM_Start+0x12e>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_TIM_PWM_Start+0x130>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_TIM_PWM_Start+0x1ac>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d009      	beq.n	8002de6 <HAL_TIM_PWM_Start+0x162>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dda:	d004      	beq.n	8002de6 <HAL_TIM_PWM_Start+0x162>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <HAL_TIM_PWM_Start+0x1b0>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d115      	bne.n	8002e12 <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <HAL_TIM_PWM_Start+0x1b8>)
 8002dee:	4013      	ands	r3, r2
 8002df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b06      	cmp	r3, #6
 8002df6:	d015      	beq.n	8002e24 <HAL_TIM_PWM_Start+0x1a0>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dfe:	d011      	beq.n	8002e24 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0201 	orr.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e10:	e008      	b.n	8002e24 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e000      	b.n	8002e26 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40014000 	.word	0x40014000
 8002e38:	40014400 	.word	0x40014400
 8002e3c:	00010007 	.word	0x00010007

08002e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0ff      	b.n	800305e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b14      	cmp	r3, #20
 8002e6a:	f200 80f0 	bhi.w	800304e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002e6e:	a201      	add	r2, pc, #4	; (adr r2, 8002e74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e74:	08002ec9 	.word	0x08002ec9
 8002e78:	0800304f 	.word	0x0800304f
 8002e7c:	0800304f 	.word	0x0800304f
 8002e80:	0800304f 	.word	0x0800304f
 8002e84:	08002f09 	.word	0x08002f09
 8002e88:	0800304f 	.word	0x0800304f
 8002e8c:	0800304f 	.word	0x0800304f
 8002e90:	0800304f 	.word	0x0800304f
 8002e94:	08002f4b 	.word	0x08002f4b
 8002e98:	0800304f 	.word	0x0800304f
 8002e9c:	0800304f 	.word	0x0800304f
 8002ea0:	0800304f 	.word	0x0800304f
 8002ea4:	08002f8b 	.word	0x08002f8b
 8002ea8:	0800304f 	.word	0x0800304f
 8002eac:	0800304f 	.word	0x0800304f
 8002eb0:	0800304f 	.word	0x0800304f
 8002eb4:	08002fcd 	.word	0x08002fcd
 8002eb8:	0800304f 	.word	0x0800304f
 8002ebc:	0800304f 	.word	0x0800304f
 8002ec0:	0800304f 	.word	0x0800304f
 8002ec4:	0800300d 	.word	0x0800300d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f000 f9f8 	bl	80032c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	699a      	ldr	r2, [r3, #24]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f042 0208 	orr.w	r2, r2, #8
 8002ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	699a      	ldr	r2, [r3, #24]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f022 0204 	bic.w	r2, r2, #4
 8002ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6999      	ldr	r1, [r3, #24]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	430a      	orrs	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
      break;
 8002f06:	e0a5      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68b9      	ldr	r1, [r7, #8]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fa54 	bl	80033bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699a      	ldr	r2, [r3, #24]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699a      	ldr	r2, [r3, #24]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6999      	ldr	r1, [r3, #24]
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	021a      	lsls	r2, r3, #8
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	619a      	str	r2, [r3, #24]
      break;
 8002f48:	e084      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f000 faad 	bl	80034b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	69da      	ldr	r2, [r3, #28]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f042 0208 	orr.w	r2, r2, #8
 8002f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0204 	bic.w	r2, r2, #4
 8002f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	69d9      	ldr	r1, [r3, #28]
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	61da      	str	r2, [r3, #28]
      break;
 8002f88:	e064      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68b9      	ldr	r1, [r7, #8]
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 fb05 	bl	80035a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	69da      	ldr	r2, [r3, #28]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	69d9      	ldr	r1, [r3, #28]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	021a      	lsls	r2, r3, #8
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	61da      	str	r2, [r3, #28]
      break;
 8002fca:	e043      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb42 	bl	800365c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f042 0208 	orr.w	r2, r2, #8
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 0204 	bic.w	r2, r2, #4
 8002ff6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800300a:	e023      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	4618      	mov	r0, r3
 8003014:	f000 fb7a 	bl	800370c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003026:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	021a      	lsls	r2, r3, #8
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800304c:	e002      	b.n	8003054 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	75fb      	strb	r3, [r7, #23]
      break;
 8003052:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800305c:	7dfb      	ldrb	r3, [r7, #23]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop

08003068 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003072:	2300      	movs	r3, #0
 8003074:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_TIM_ConfigClockSource+0x1c>
 8003080:	2302      	movs	r3, #2
 8003082:	e0b6      	b.n	80031f2 <HAL_TIM_ConfigClockSource+0x18a>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80030a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c0:	d03e      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0xd8>
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c6:	f200 8087 	bhi.w	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 80030ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030ce:	f000 8086 	beq.w	80031de <HAL_TIM_ConfigClockSource+0x176>
 80030d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030d6:	d87f      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 80030d8:	2b70      	cmp	r3, #112	; 0x70
 80030da:	d01a      	beq.n	8003112 <HAL_TIM_ConfigClockSource+0xaa>
 80030dc:	2b70      	cmp	r3, #112	; 0x70
 80030de:	d87b      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 80030e0:	2b60      	cmp	r3, #96	; 0x60
 80030e2:	d050      	beq.n	8003186 <HAL_TIM_ConfigClockSource+0x11e>
 80030e4:	2b60      	cmp	r3, #96	; 0x60
 80030e6:	d877      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 80030e8:	2b50      	cmp	r3, #80	; 0x50
 80030ea:	d03c      	beq.n	8003166 <HAL_TIM_ConfigClockSource+0xfe>
 80030ec:	2b50      	cmp	r3, #80	; 0x50
 80030ee:	d873      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d058      	beq.n	80031a6 <HAL_TIM_ConfigClockSource+0x13e>
 80030f4:	2b40      	cmp	r3, #64	; 0x40
 80030f6:	d86f      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 80030f8:	2b30      	cmp	r3, #48	; 0x30
 80030fa:	d064      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15e>
 80030fc:	2b30      	cmp	r3, #48	; 0x30
 80030fe:	d86b      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 8003100:	2b20      	cmp	r3, #32
 8003102:	d060      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15e>
 8003104:	2b20      	cmp	r3, #32
 8003106:	d867      	bhi.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
 8003108:	2b00      	cmp	r3, #0
 800310a:	d05c      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15e>
 800310c:	2b10      	cmp	r3, #16
 800310e:	d05a      	beq.n	80031c6 <HAL_TIM_ConfigClockSource+0x15e>
 8003110:	e062      	b.n	80031d8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003122:	f000 fbc7 	bl	80038b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003134:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	609a      	str	r2, [r3, #8]
      break;
 800313e:	e04f      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003150:	f000 fbb0 	bl	80038b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003162:	609a      	str	r2, [r3, #8]
      break;
 8003164:	e03c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003172:	461a      	mov	r2, r3
 8003174:	f000 fb24 	bl	80037c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2150      	movs	r1, #80	; 0x50
 800317e:	4618      	mov	r0, r3
 8003180:	f000 fb7d 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 8003184:	e02c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003192:	461a      	mov	r2, r3
 8003194:	f000 fb43 	bl	800381e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2160      	movs	r1, #96	; 0x60
 800319e:	4618      	mov	r0, r3
 80031a0:	f000 fb6d 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80031a4:	e01c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031b2:	461a      	mov	r2, r3
 80031b4:	f000 fb04 	bl	80037c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2140      	movs	r1, #64	; 0x40
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 fb5d 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80031c4:	e00c      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4619      	mov	r1, r3
 80031d0:	4610      	mov	r0, r2
 80031d2:	f000 fb54 	bl	800387e <TIM_ITRx_SetConfig>
      break;
 80031d6:	e003      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	73fb      	strb	r3, [r7, #15]
      break;
 80031dc:	e000      	b.n	80031e0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80031de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b085      	sub	sp, #20
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a2a      	ldr	r2, [pc, #168]	; (80032b8 <TIM_Base_SetConfig+0xbc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0x20>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321a:	d108      	bne.n	800322e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003222:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	4313      	orrs	r3, r2
 800322c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a21      	ldr	r2, [pc, #132]	; (80032b8 <TIM_Base_SetConfig+0xbc>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00b      	beq.n	800324e <TIM_Base_SetConfig+0x52>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800323c:	d007      	beq.n	800324e <TIM_Base_SetConfig+0x52>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <TIM_Base_SetConfig+0xc0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d003      	beq.n	800324e <TIM_Base_SetConfig+0x52>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4a1d      	ldr	r2, [pc, #116]	; (80032c0 <TIM_Base_SetConfig+0xc4>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d108      	bne.n	8003260 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003254:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	4313      	orrs	r3, r2
 800325e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68fa      	ldr	r2, [r7, #12]
 8003272:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a0c      	ldr	r2, [pc, #48]	; (80032b8 <TIM_Base_SetConfig+0xbc>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_Base_SetConfig+0xa0>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a0b      	ldr	r2, [pc, #44]	; (80032bc <TIM_Base_SetConfig+0xc0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_Base_SetConfig+0xa0>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0a      	ldr	r2, [pc, #40]	; (80032c0 <TIM_Base_SetConfig+0xc4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d103      	bne.n	80032a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	615a      	str	r2, [r3, #20]
}
 80032aa:	bf00      	nop
 80032ac:	3714      	adds	r7, #20
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40014000 	.word	0x40014000
 80032c0:	40014400 	.word	0x40014400

080032c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b087      	sub	sp, #28
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
 80032d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	f023 0201 	bic.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f023 0303 	bic.w	r3, r3, #3
 80032fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f023 0302 	bic.w	r3, r3, #2
 8003310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	4313      	orrs	r3, r2
 800331a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a24      	ldr	r2, [pc, #144]	; (80033b0 <TIM_OC1_SetConfig+0xec>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d007      	beq.n	8003334 <TIM_OC1_SetConfig+0x70>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a23      	ldr	r2, [pc, #140]	; (80033b4 <TIM_OC1_SetConfig+0xf0>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d003      	beq.n	8003334 <TIM_OC1_SetConfig+0x70>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <TIM_OC1_SetConfig+0xf4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d10c      	bne.n	800334e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	f023 0308 	bic.w	r3, r3, #8
 800333a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	697a      	ldr	r2, [r7, #20]
 8003342:	4313      	orrs	r3, r2
 8003344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f023 0304 	bic.w	r3, r3, #4
 800334c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a17      	ldr	r2, [pc, #92]	; (80033b0 <TIM_OC1_SetConfig+0xec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d007      	beq.n	8003366 <TIM_OC1_SetConfig+0xa2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a16      	ldr	r2, [pc, #88]	; (80033b4 <TIM_OC1_SetConfig+0xf0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d003      	beq.n	8003366 <TIM_OC1_SetConfig+0xa2>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a15      	ldr	r2, [pc, #84]	; (80033b8 <TIM_OC1_SetConfig+0xf4>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d111      	bne.n	800338a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003374:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	695b      	ldr	r3, [r3, #20]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685a      	ldr	r2, [r3, #4]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	621a      	str	r2, [r3, #32]
}
 80033a4:	bf00      	nop
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40014000 	.word	0x40014000
 80033b8:	40014400 	.word	0x40014400

080033bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f023 0210 	bic.w	r2, r3, #16
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	699b      	ldr	r3, [r3, #24]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	4313      	orrs	r3, r2
 8003402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	f023 0320 	bic.w	r3, r3, #32
 800340a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4313      	orrs	r3, r2
 8003416:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a22      	ldr	r2, [pc, #136]	; (80034a4 <TIM_OC2_SetConfig+0xe8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d10d      	bne.n	800343c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4313      	orrs	r3, r2
 8003432:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a19      	ldr	r2, [pc, #100]	; (80034a4 <TIM_OC2_SetConfig+0xe8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d007      	beq.n	8003454 <TIM_OC2_SetConfig+0x98>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a18      	ldr	r2, [pc, #96]	; (80034a8 <TIM_OC2_SetConfig+0xec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d003      	beq.n	8003454 <TIM_OC2_SetConfig+0x98>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a17      	ldr	r2, [pc, #92]	; (80034ac <TIM_OC2_SetConfig+0xf0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d113      	bne.n	800347c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800345a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003462:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	4313      	orrs	r3, r2
 800347a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	621a      	str	r2, [r3, #32]
}
 8003496:	bf00      	nop
 8003498:	371c      	adds	r7, #28
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40012c00 	.word	0x40012c00
 80034a8:	40014000 	.word	0x40014000
 80034ac:	40014400 	.word	0x40014400

080034b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a1b      	ldr	r3, [r3, #32]
 80034c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0303 	bic.w	r3, r3, #3
 80034ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80034fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	021b      	lsls	r3, r3, #8
 8003504:	697a      	ldr	r2, [r7, #20]
 8003506:	4313      	orrs	r3, r2
 8003508:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a21      	ldr	r2, [pc, #132]	; (8003594 <TIM_OC3_SetConfig+0xe4>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d10d      	bne.n	800352e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003518:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	021b      	lsls	r3, r3, #8
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	4313      	orrs	r3, r2
 8003524:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800352c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a18      	ldr	r2, [pc, #96]	; (8003594 <TIM_OC3_SetConfig+0xe4>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d007      	beq.n	8003546 <TIM_OC3_SetConfig+0x96>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a17      	ldr	r2, [pc, #92]	; (8003598 <TIM_OC3_SetConfig+0xe8>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d003      	beq.n	8003546 <TIM_OC3_SetConfig+0x96>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a16      	ldr	r2, [pc, #88]	; (800359c <TIM_OC3_SetConfig+0xec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d113      	bne.n	800356e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800354c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003554:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	011b      	lsls	r3, r3, #4
 800355c:	693a      	ldr	r2, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	697a      	ldr	r2, [r7, #20]
 8003586:	621a      	str	r2, [r3, #32]
}
 8003588:	bf00      	nop
 800358a:	371c      	adds	r7, #28
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	40012c00 	.word	0x40012c00
 8003598:	40014000 	.word	0x40014000
 800359c:	40014400 	.word	0x40014400

080035a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b087      	sub	sp, #28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
 80035ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a1b      	ldr	r3, [r3, #32]
 80035b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	021b      	lsls	r3, r3, #8
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	031b      	lsls	r3, r3, #12
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	4a14      	ldr	r2, [pc, #80]	; (8003650 <TIM_OC4_SetConfig+0xb0>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d007      	beq.n	8003614 <TIM_OC4_SetConfig+0x74>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a13      	ldr	r2, [pc, #76]	; (8003654 <TIM_OC4_SetConfig+0xb4>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d003      	beq.n	8003614 <TIM_OC4_SetConfig+0x74>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a12      	ldr	r2, [pc, #72]	; (8003658 <TIM_OC4_SetConfig+0xb8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d109      	bne.n	8003628 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800361a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	019b      	lsls	r3, r3, #6
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	621a      	str	r2, [r3, #32]
}
 8003642:	bf00      	nop
 8003644:	371c      	adds	r7, #28
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40012c00 	.word	0x40012c00
 8003654:	40014000 	.word	0x40014000
 8003658:	40014400 	.word	0x40014400

0800365c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800365c:	b480      	push	{r7}
 800365e:	b087      	sub	sp, #28
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800368a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68fa      	ldr	r2, [r7, #12]
 8003696:	4313      	orrs	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	041b      	lsls	r3, r3, #16
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a13      	ldr	r2, [pc, #76]	; (8003700 <TIM_OC5_SetConfig+0xa4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <TIM_OC5_SetConfig+0x6a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a12      	ldr	r2, [pc, #72]	; (8003704 <TIM_OC5_SetConfig+0xa8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d003      	beq.n	80036c6 <TIM_OC5_SetConfig+0x6a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a11      	ldr	r2, [pc, #68]	; (8003708 <TIM_OC5_SetConfig+0xac>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d109      	bne.n	80036da <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036cc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	021b      	lsls	r3, r3, #8
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	697a      	ldr	r2, [r7, #20]
 80036de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	621a      	str	r2, [r3, #32]
}
 80036f4:	bf00      	nop
 80036f6:	371c      	adds	r7, #28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012c00 	.word	0x40012c00
 8003704:	40014000 	.word	0x40014000
 8003708:	40014400 	.word	0x40014400

0800370c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a1b      	ldr	r3, [r3, #32]
 8003720:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800373a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	021b      	lsls	r3, r3, #8
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	4313      	orrs	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003752:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	051b      	lsls	r3, r3, #20
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a14      	ldr	r2, [pc, #80]	; (80037b4 <TIM_OC6_SetConfig+0xa8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d007      	beq.n	8003778 <TIM_OC6_SetConfig+0x6c>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a13      	ldr	r2, [pc, #76]	; (80037b8 <TIM_OC6_SetConfig+0xac>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d003      	beq.n	8003778 <TIM_OC6_SetConfig+0x6c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a12      	ldr	r2, [pc, #72]	; (80037bc <TIM_OC6_SetConfig+0xb0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d109      	bne.n	800378c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800377e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	029b      	lsls	r3, r3, #10
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	621a      	str	r2, [r3, #32]
}
 80037a6:	bf00      	nop
 80037a8:	371c      	adds	r7, #28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40014000 	.word	0x40014000
 80037bc:	40014400 	.word	0x40014400

080037c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	f023 0201 	bic.w	r2, r3, #1
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	011b      	lsls	r3, r3, #4
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	f023 030a 	bic.w	r3, r3, #10
 80037fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	621a      	str	r2, [r3, #32]
}
 8003812:	bf00      	nop
 8003814:	371c      	adds	r7, #28
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr

0800381e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800381e:	b480      	push	{r7}
 8003820:	b087      	sub	sp, #28
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1b      	ldr	r3, [r3, #32]
 8003834:	f023 0210 	bic.w	r2, r3, #16
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003848:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	031b      	lsls	r3, r3, #12
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800385a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	697a      	ldr	r2, [r7, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr

0800387e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800387e:	b480      	push	{r7}
 8003880:	b085      	sub	sp, #20
 8003882:	af00      	add	r7, sp, #0
 8003884:	6078      	str	r0, [r7, #4]
 8003886:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003894:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	f043 0307 	orr.w	r3, r3, #7
 80038a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68fa      	ldr	r2, [r7, #12]
 80038a6:	609a      	str	r2, [r3, #8]
}
 80038a8:	bf00      	nop
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
 80038c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	021a      	lsls	r2, r3, #8
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	4313      	orrs	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	697a      	ldr	r2, [r7, #20]
 80038e6:	609a      	str	r2, [r3, #8]
}
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr

080038f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b087      	sub	sp, #28
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 031f 	and.w	r3, r3, #31
 8003906:	2201      	movs	r2, #1
 8003908:	fa02 f303 	lsl.w	r3, r2, r3
 800390c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6a1a      	ldr	r2, [r3, #32]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	43db      	mvns	r3, r3
 8003916:	401a      	ands	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1a      	ldr	r2, [r3, #32]
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 031f 	and.w	r3, r3, #31
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	fa01 f303 	lsl.w	r3, r1, r3
 800392c:	431a      	orrs	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	621a      	str	r2, [r3, #32]
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003954:	2302      	movs	r3, #2
 8003956:	e04f      	b.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003988:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68fa      	ldr	r2, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a14      	ldr	r2, [pc, #80]	; (8003a04 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d009      	beq.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c0:	d004      	beq.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a10      	ldr	r2, [pc, #64]	; (8003a08 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d10c      	bne.n	80039e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	4313      	orrs	r3, r2
 80039dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f6:	2300      	movs	r3, #0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3714      	adds	r7, #20
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40014000 	.word	0x40014000

08003a0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b085      	sub	sp, #20
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d101      	bne.n	8003a28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003a24:	2302      	movs	r3, #2
 8003a26:	e060      	b.n	8003aea <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	041b      	lsls	r3, r3, #16
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d115      	bne.n	8003ad8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	051b      	lsls	r3, r3, #20
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop
 8003af8:	40012c00 	.word	0x40012c00

08003afc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d101      	bne.n	8003b0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	e040      	b.n	8003b90 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd fa38 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2224      	movs	r2, #36	; 0x24
 8003b28:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0201 	bic.w	r2, r2, #1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 fad8 	bl	80040f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f87b 	bl	8003c44 <UART_SetConfig>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d101      	bne.n	8003b58 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e01b      	b.n	8003b90 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b66:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b76:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f042 0201 	orr.w	r2, r2, #1
 8003b86:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fb57 	bl	800423c <UART_CheckIdleState>
 8003b8e:	4603      	mov	r3, r0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e048      	b.n	8003c3c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd f9ea 	bl	8000f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f022 0201 	bic.w	r2, r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa8a 	bl	80040f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f82d 	bl	8003c44 <UART_SetConfig>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e023      	b.n	8003c3c <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003c12:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f042 0208 	orr.w	r2, r2, #8
 8003c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0201 	orr.w	r2, r2, #1
 8003c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f000 fb01 	bl	800423c <UART_CheckIdleState>
 8003c3a:	4603      	mov	r3, r0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c48:	b08a      	sub	sp, #40	; 0x28
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b9e      	ldr	r3, [pc, #632]	; (8003eec <UART_SetConfig+0x2a8>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a93      	ldr	r2, [pc, #588]	; (8003ef0 <UART_SetConfig+0x2ac>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cac:	4313      	orrs	r3, r2
 8003cae:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a8a      	ldr	r2, [pc, #552]	; (8003ef4 <UART_SetConfig+0x2b0>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d126      	bne.n	8003d1c <UART_SetConfig+0xd8>
 8003cce:	4b8a      	ldr	r3, [pc, #552]	; (8003ef8 <UART_SetConfig+0x2b4>)
 8003cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd4:	f003 0303 	and.w	r3, r3, #3
 8003cd8:	2b03      	cmp	r3, #3
 8003cda:	d81b      	bhi.n	8003d14 <UART_SetConfig+0xd0>
 8003cdc:	a201      	add	r2, pc, #4	; (adr r2, 8003ce4 <UART_SetConfig+0xa0>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003cf5 	.word	0x08003cf5
 8003ce8:	08003d05 	.word	0x08003d05
 8003cec:	08003cfd 	.word	0x08003cfd
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e0ab      	b.n	8003e54 <UART_SetConfig+0x210>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d02:	e0a7      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d04:	2304      	movs	r3, #4
 8003d06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d0a:	e0a3      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d12:	e09f      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d14:	2310      	movs	r3, #16
 8003d16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1a:	e09b      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a76      	ldr	r2, [pc, #472]	; (8003efc <UART_SetConfig+0x2b8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d138      	bne.n	8003d98 <UART_SetConfig+0x154>
 8003d26:	4b74      	ldr	r3, [pc, #464]	; (8003ef8 <UART_SetConfig+0x2b4>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	2b0c      	cmp	r3, #12
 8003d32:	d82d      	bhi.n	8003d90 <UART_SetConfig+0x14c>
 8003d34:	a201      	add	r2, pc, #4	; (adr r2, 8003d3c <UART_SetConfig+0xf8>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d71 	.word	0x08003d71
 8003d40:	08003d91 	.word	0x08003d91
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d91 	.word	0x08003d91
 8003d4c:	08003d81 	.word	0x08003d81
 8003d50:	08003d91 	.word	0x08003d91
 8003d54:	08003d91 	.word	0x08003d91
 8003d58:	08003d91 	.word	0x08003d91
 8003d5c:	08003d79 	.word	0x08003d79
 8003d60:	08003d91 	.word	0x08003d91
 8003d64:	08003d91 	.word	0x08003d91
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003d89 	.word	0x08003d89
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e06d      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7e:	e069      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d80:	2304      	movs	r3, #4
 8003d82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d86:	e065      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d88:	2308      	movs	r3, #8
 8003d8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8e:	e061      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d90:	2310      	movs	r3, #16
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e05d      	b.n	8003e54 <UART_SetConfig+0x210>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a58      	ldr	r2, [pc, #352]	; (8003f00 <UART_SetConfig+0x2bc>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d125      	bne.n	8003dee <UART_SetConfig+0x1aa>
 8003da2:	4b55      	ldr	r3, [pc, #340]	; (8003ef8 <UART_SetConfig+0x2b4>)
 8003da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003da8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003dac:	2b30      	cmp	r3, #48	; 0x30
 8003dae:	d016      	beq.n	8003dde <UART_SetConfig+0x19a>
 8003db0:	2b30      	cmp	r3, #48	; 0x30
 8003db2:	d818      	bhi.n	8003de6 <UART_SetConfig+0x1a2>
 8003db4:	2b20      	cmp	r3, #32
 8003db6:	d00a      	beq.n	8003dce <UART_SetConfig+0x18a>
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d814      	bhi.n	8003de6 <UART_SetConfig+0x1a2>
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d002      	beq.n	8003dc6 <UART_SetConfig+0x182>
 8003dc0:	2b10      	cmp	r3, #16
 8003dc2:	d008      	beq.n	8003dd6 <UART_SetConfig+0x192>
 8003dc4:	e00f      	b.n	8003de6 <UART_SetConfig+0x1a2>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dcc:	e042      	b.n	8003e54 <UART_SetConfig+0x210>
 8003dce:	2302      	movs	r3, #2
 8003dd0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dd4:	e03e      	b.n	8003e54 <UART_SetConfig+0x210>
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ddc:	e03a      	b.n	8003e54 <UART_SetConfig+0x210>
 8003dde:	2308      	movs	r3, #8
 8003de0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de4:	e036      	b.n	8003e54 <UART_SetConfig+0x210>
 8003de6:	2310      	movs	r3, #16
 8003de8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dec:	e032      	b.n	8003e54 <UART_SetConfig+0x210>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a3f      	ldr	r2, [pc, #252]	; (8003ef0 <UART_SetConfig+0x2ac>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d12a      	bne.n	8003e4e <UART_SetConfig+0x20a>
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <UART_SetConfig+0x2b4>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e06:	d01a      	beq.n	8003e3e <UART_SetConfig+0x1fa>
 8003e08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e0c:	d81b      	bhi.n	8003e46 <UART_SetConfig+0x202>
 8003e0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e12:	d00c      	beq.n	8003e2e <UART_SetConfig+0x1ea>
 8003e14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e18:	d815      	bhi.n	8003e46 <UART_SetConfig+0x202>
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <UART_SetConfig+0x1e2>
 8003e1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e22:	d008      	beq.n	8003e36 <UART_SetConfig+0x1f2>
 8003e24:	e00f      	b.n	8003e46 <UART_SetConfig+0x202>
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e2c:	e012      	b.n	8003e54 <UART_SetConfig+0x210>
 8003e2e:	2302      	movs	r3, #2
 8003e30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e34:	e00e      	b.n	8003e54 <UART_SetConfig+0x210>
 8003e36:	2304      	movs	r3, #4
 8003e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e3c:	e00a      	b.n	8003e54 <UART_SetConfig+0x210>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e44:	e006      	b.n	8003e54 <UART_SetConfig+0x210>
 8003e46:	2310      	movs	r3, #16
 8003e48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4c:	e002      	b.n	8003e54 <UART_SetConfig+0x210>
 8003e4e:	2310      	movs	r3, #16
 8003e50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a25      	ldr	r2, [pc, #148]	; (8003ef0 <UART_SetConfig+0x2ac>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	f040 808a 	bne.w	8003f74 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e60:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d824      	bhi.n	8003eb2 <UART_SetConfig+0x26e>
 8003e68:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0x22c>)
 8003e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6e:	bf00      	nop
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003eb3 	.word	0x08003eb3
 8003e78:	08003e9d 	.word	0x08003e9d
 8003e7c:	08003eb3 	.word	0x08003eb3
 8003e80:	08003ea3 	.word	0x08003ea3
 8003e84:	08003eb3 	.word	0x08003eb3
 8003e88:	08003eb3 	.word	0x08003eb3
 8003e8c:	08003eb3 	.word	0x08003eb3
 8003e90:	08003eab 	.word	0x08003eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe fc2c 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8003e98:	61f8      	str	r0, [r7, #28]
        break;
 8003e9a:	e010      	b.n	8003ebe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e9c:	4b19      	ldr	r3, [pc, #100]	; (8003f04 <UART_SetConfig+0x2c0>)
 8003e9e:	61fb      	str	r3, [r7, #28]
        break;
 8003ea0:	e00d      	b.n	8003ebe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea2:	f7fe fb8d 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8003ea6:	61f8      	str	r0, [r7, #28]
        break;
 8003ea8:	e009      	b.n	8003ebe <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eae:	61fb      	str	r3, [r7, #28]
        break;
 8003eb0:	e005      	b.n	8003ebe <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f000 8109 	beq.w	80040d8 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	69fa      	ldr	r2, [r7, #28]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d305      	bcc.n	8003ee2 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d912      	bls.n	8003f08 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ee8:	e0f6      	b.n	80040d8 <UART_SetConfig+0x494>
 8003eea:	bf00      	nop
 8003eec:	efff69f3 	.word	0xefff69f3
 8003ef0:	40008000 	.word	0x40008000
 8003ef4:	40013800 	.word	0x40013800
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	40004400 	.word	0x40004400
 8003f00:	40004800 	.word	0x40004800
 8003f04:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	461c      	mov	r4, r3
 8003f0e:	4615      	mov	r5, r2
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	022b      	lsls	r3, r5, #8
 8003f1a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f1e:	0222      	lsls	r2, r4, #8
 8003f20:	68f9      	ldr	r1, [r7, #12]
 8003f22:	6849      	ldr	r1, [r1, #4]
 8003f24:	0849      	lsrs	r1, r1, #1
 8003f26:	2000      	movs	r0, #0
 8003f28:	4688      	mov	r8, r1
 8003f2a:	4681      	mov	r9, r0
 8003f2c:	eb12 0a08 	adds.w	sl, r2, r8
 8003f30:	eb43 0b09 	adc.w	fp, r3, r9
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	603b      	str	r3, [r7, #0]
 8003f3c:	607a      	str	r2, [r7, #4]
 8003f3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f42:	4650      	mov	r0, sl
 8003f44:	4659      	mov	r1, fp
 8003f46:	f7fc f941 	bl	80001cc <__aeabi_uldivmod>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	460b      	mov	r3, r1
 8003f4e:	4613      	mov	r3, r2
 8003f50:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f58:	d308      	bcc.n	8003f6c <UART_SetConfig+0x328>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f60:	d204      	bcs.n	8003f6c <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e0b5      	b.n	80040d8 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f72:	e0b1      	b.n	80040d8 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	69db      	ldr	r3, [r3, #28]
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d15d      	bne.n	800403a <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003f7e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f82:	2b08      	cmp	r3, #8
 8003f84:	d827      	bhi.n	8003fd6 <UART_SetConfig+0x392>
 8003f86:	a201      	add	r2, pc, #4	; (adr r2, 8003f8c <UART_SetConfig+0x348>)
 8003f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8c:	08003fb1 	.word	0x08003fb1
 8003f90:	08003fb9 	.word	0x08003fb9
 8003f94:	08003fc1 	.word	0x08003fc1
 8003f98:	08003fd7 	.word	0x08003fd7
 8003f9c:	08003fc7 	.word	0x08003fc7
 8003fa0:	08003fd7 	.word	0x08003fd7
 8003fa4:	08003fd7 	.word	0x08003fd7
 8003fa8:	08003fd7 	.word	0x08003fd7
 8003fac:	08003fcf 	.word	0x08003fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb0:	f7fe fb9e 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8003fb4:	61f8      	str	r0, [r7, #28]
        break;
 8003fb6:	e014      	b.n	8003fe2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb8:	f7fe fbb0 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 8003fbc:	61f8      	str	r0, [r7, #28]
        break;
 8003fbe:	e010      	b.n	8003fe2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <UART_SetConfig+0x4b0>)
 8003fc2:	61fb      	str	r3, [r7, #28]
        break;
 8003fc4:	e00d      	b.n	8003fe2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc6:	f7fe fafb 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8003fca:	61f8      	str	r0, [r7, #28]
        break;
 8003fcc:	e009      	b.n	8003fe2 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd2:	61fb      	str	r3, [r7, #28]
        break;
 8003fd4:	e005      	b.n	8003fe2 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fe0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d077      	beq.n	80040d8 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005a      	lsls	r2, r3, #1
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	085b      	lsrs	r3, r3, #1
 8003ff2:	441a      	add	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b0f      	cmp	r3, #15
 8004002:	d916      	bls.n	8004032 <UART_SetConfig+0x3ee>
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400a:	d212      	bcs.n	8004032 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	b29b      	uxth	r3, r3
 8004010:	f023 030f 	bic.w	r3, r3, #15
 8004014:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	f003 0307 	and.w	r3, r3, #7
 8004020:	b29a      	uxth	r2, r3
 8004022:	8afb      	ldrh	r3, [r7, #22]
 8004024:	4313      	orrs	r3, r2
 8004026:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	8afa      	ldrh	r2, [r7, #22]
 800402e:	60da      	str	r2, [r3, #12]
 8004030:	e052      	b.n	80040d8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004038:	e04e      	b.n	80040d8 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800403a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800403e:	2b08      	cmp	r3, #8
 8004040:	d827      	bhi.n	8004092 <UART_SetConfig+0x44e>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <UART_SetConfig+0x404>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	0800406d 	.word	0x0800406d
 800404c:	08004075 	.word	0x08004075
 8004050:	0800407d 	.word	0x0800407d
 8004054:	08004093 	.word	0x08004093
 8004058:	08004083 	.word	0x08004083
 800405c:	08004093 	.word	0x08004093
 8004060:	08004093 	.word	0x08004093
 8004064:	08004093 	.word	0x08004093
 8004068:	0800408b 	.word	0x0800408b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800406c:	f7fe fb40 	bl	80026f0 <HAL_RCC_GetPCLK1Freq>
 8004070:	61f8      	str	r0, [r7, #28]
        break;
 8004072:	e014      	b.n	800409e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004074:	f7fe fb52 	bl	800271c <HAL_RCC_GetPCLK2Freq>
 8004078:	61f8      	str	r0, [r7, #28]
        break;
 800407a:	e010      	b.n	800409e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800407c:	4b1d      	ldr	r3, [pc, #116]	; (80040f4 <UART_SetConfig+0x4b0>)
 800407e:	61fb      	str	r3, [r7, #28]
        break;
 8004080:	e00d      	b.n	800409e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004082:	f7fe fa9d 	bl	80025c0 <HAL_RCC_GetSysClockFreq>
 8004086:	61f8      	str	r0, [r7, #28]
        break;
 8004088:	e009      	b.n	800409e <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800408e:	61fb      	str	r3, [r7, #28]
        break;
 8004090:	e005      	b.n	800409e <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800409c:	bf00      	nop
    }

    if (pclk != 0U)
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d019      	beq.n	80040d8 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	085a      	lsrs	r2, r3, #1
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	441a      	add	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	2b0f      	cmp	r3, #15
 80040bc:	d909      	bls.n	80040d2 <UART_SetConfig+0x48e>
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c4:	d205      	bcs.n	80040d2 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e002      	b.n	80040d8 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80040e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040f2:	bf00      	nop
 80040f4:	00f42400 	.word	0x00f42400

080040f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00a      	beq.n	8004122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	430a      	orrs	r2, r1
 8004142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00a      	beq.n	8004166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f003 0310 	and.w	r3, r3, #16
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00a      	beq.n	80041aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	f003 0320 	and.w	r3, r3, #32
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00a      	beq.n	80041cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01a      	beq.n	800420e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f6:	d10a      	bne.n	800420e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00a      	beq.n	8004230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	605a      	str	r2, [r3, #4]
  }
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b098      	sub	sp, #96	; 0x60
 8004240:	af02      	add	r7, sp, #8
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800424c:	f7fd f808 	bl	8001260 <HAL_GetTick>
 8004250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0308 	and.w	r3, r3, #8
 800425c:	2b08      	cmp	r3, #8
 800425e:	d12e      	bne.n	80042be <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004268:	2200      	movs	r2, #0
 800426a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f88c 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d021      	beq.n	80042be <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004282:	e853 3f00 	ldrex	r3, [r3]
 8004286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800428e:	653b      	str	r3, [r7, #80]	; 0x50
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	461a      	mov	r2, r3
 8004296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004298:	647b      	str	r3, [r7, #68]	; 0x44
 800429a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800429e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042a0:	e841 2300 	strex	r3, r2, [r1]
 80042a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1e6      	bne.n	800427a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2220      	movs	r2, #32
 80042b0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e062      	b.n	8004384 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0304 	and.w	r3, r3, #4
 80042c8:	2b04      	cmp	r3, #4
 80042ca:	d149      	bne.n	8004360 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042d4:	2200      	movs	r2, #0
 80042d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f856 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d03c      	beq.n	8004360 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	e853 3f00 	ldrex	r3, [r3]
 80042f2:	623b      	str	r3, [r7, #32]
   return(result);
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	461a      	mov	r2, r3
 8004302:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004304:	633b      	str	r3, [r7, #48]	; 0x30
 8004306:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800430a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430c:	e841 2300 	strex	r3, r2, [r1]
 8004310:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1e6      	bne.n	80042e6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3308      	adds	r3, #8
 800431e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	60fb      	str	r3, [r7, #12]
   return(result);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3308      	adds	r3, #8
 8004336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004338:	61fa      	str	r2, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	617b      	str	r3, [r7, #20]
   return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e5      	bne.n	8004318 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2220      	movs	r2, #32
 8004350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e011      	b.n	8004384 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3758      	adds	r7, #88	; 0x58
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	e049      	b.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043a4:	d045      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fc ff5b 	bl	8001260 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	69ba      	ldr	r2, [r7, #24]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <UART_WaitOnFlagUntilTimeout+0x30>
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e048      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d031      	beq.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 0308 	and.w	r3, r3, #8
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d110      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2208      	movs	r2, #8
 80043e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e4:	68f8      	ldr	r0, [r7, #12]
 80043e6:	f000 f838 	bl	800445a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2208      	movs	r2, #8
 80043ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e029      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800440c:	d111      	bne.n	8004432 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004416:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004418:	68f8      	ldr	r0, [r7, #12]
 800441a:	f000 f81e 	bl	800445a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2220      	movs	r2, #32
 8004422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e00f      	b.n	8004452 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69da      	ldr	r2, [r3, #28]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	4013      	ands	r3, r2
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	429a      	cmp	r2, r3
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	79fb      	ldrb	r3, [r7, #7]
 800444c:	429a      	cmp	r2, r3
 800444e:	d0a6      	beq.n	800439e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800445a:	b480      	push	{r7}
 800445c:	b095      	sub	sp, #84	; 0x54
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800446a:	e853 3f00 	ldrex	r3, [r3]
 800446e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004472:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004480:	643b      	str	r3, [r7, #64]	; 0x40
 8004482:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004484:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004486:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004488:	e841 2300 	strex	r3, r2, [r1]
 800448c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800448e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004490:	2b00      	cmp	r3, #0
 8004492:	d1e6      	bne.n	8004462 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3308      	adds	r3, #8
 800449a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800449c:	6a3b      	ldr	r3, [r7, #32]
 800449e:	e853 3f00 	ldrex	r3, [r3]
 80044a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3308      	adds	r3, #8
 80044b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044bc:	e841 2300 	strex	r3, r2, [r1]
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1e5      	bne.n	8004494 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044cc:	2b01      	cmp	r3, #1
 80044ce:	d118      	bne.n	8004502 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	e853 3f00 	ldrex	r3, [r3]
 80044dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f023 0310 	bic.w	r3, r3, #16
 80044e4:	647b      	str	r3, [r7, #68]	; 0x44
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ee:	61bb      	str	r3, [r7, #24]
 80044f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f2:	6979      	ldr	r1, [r7, #20]
 80044f4:	69ba      	ldr	r2, [r7, #24]
 80044f6:	e841 2300 	strex	r3, r2, [r1]
 80044fa:	613b      	str	r3, [r7, #16]
   return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1e6      	bne.n	80044d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004516:	bf00      	nop
 8004518:	3754      	adds	r7, #84	; 0x54
 800451a:	46bd      	mov	sp, r7
 800451c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004520:	4770      	bx	lr

08004522 <memset>:
 8004522:	4402      	add	r2, r0
 8004524:	4603      	mov	r3, r0
 8004526:	4293      	cmp	r3, r2
 8004528:	d100      	bne.n	800452c <memset+0xa>
 800452a:	4770      	bx	lr
 800452c:	f803 1b01 	strb.w	r1, [r3], #1
 8004530:	e7f9      	b.n	8004526 <memset+0x4>
	...

08004534 <__libc_init_array>:
 8004534:	b570      	push	{r4, r5, r6, lr}
 8004536:	4d0d      	ldr	r5, [pc, #52]	; (800456c <__libc_init_array+0x38>)
 8004538:	4c0d      	ldr	r4, [pc, #52]	; (8004570 <__libc_init_array+0x3c>)
 800453a:	1b64      	subs	r4, r4, r5
 800453c:	10a4      	asrs	r4, r4, #2
 800453e:	2600      	movs	r6, #0
 8004540:	42a6      	cmp	r6, r4
 8004542:	d109      	bne.n	8004558 <__libc_init_array+0x24>
 8004544:	4d0b      	ldr	r5, [pc, #44]	; (8004574 <__libc_init_array+0x40>)
 8004546:	4c0c      	ldr	r4, [pc, #48]	; (8004578 <__libc_init_array+0x44>)
 8004548:	f000 f818 	bl	800457c <_init>
 800454c:	1b64      	subs	r4, r4, r5
 800454e:	10a4      	asrs	r4, r4, #2
 8004550:	2600      	movs	r6, #0
 8004552:	42a6      	cmp	r6, r4
 8004554:	d105      	bne.n	8004562 <__libc_init_array+0x2e>
 8004556:	bd70      	pop	{r4, r5, r6, pc}
 8004558:	f855 3b04 	ldr.w	r3, [r5], #4
 800455c:	4798      	blx	r3
 800455e:	3601      	adds	r6, #1
 8004560:	e7ee      	b.n	8004540 <__libc_init_array+0xc>
 8004562:	f855 3b04 	ldr.w	r3, [r5], #4
 8004566:	4798      	blx	r3
 8004568:	3601      	adds	r6, #1
 800456a:	e7f2      	b.n	8004552 <__libc_init_array+0x1e>
 800456c:	080045e4 	.word	0x080045e4
 8004570:	080045e4 	.word	0x080045e4
 8004574:	080045e4 	.word	0x080045e4
 8004578:	080045e8 	.word	0x080045e8

0800457c <_init>:
 800457c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800457e:	bf00      	nop
 8004580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004582:	bc08      	pop	{r3}
 8004584:	469e      	mov	lr, r3
 8004586:	4770      	bx	lr

08004588 <_fini>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	bf00      	nop
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr
