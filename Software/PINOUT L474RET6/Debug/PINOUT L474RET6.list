
PINOUT L474RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000577c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005954  08005954  00006954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c0  080059c0  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c8  080059c8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c8  080059c8  000069c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059cc  080059cc  000069cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000068  08005a38  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08005a38  00007568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d63  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9e  00000000  00000000  0001ddfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  00020aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001006  00000000  00000000  00021f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003ac9  00000000  00000000  00022f16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018638  00000000  00000000  000269df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101ded  00000000  00000000  0003f017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00140e04  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d6c  00000000  00000000  00140e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00146bb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800593c 	.word	0x0800593c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	0800593c 	.word	0x0800593c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000516:	2201      	movs	r2, #1
 8000518:	4803      	ldr	r0, [pc, #12]	@ (8000528 <__io_putchar+0x20>)
 800051a:	f003 fdef 	bl	80040fc <HAL_UART_Transmit>
    return ch;
 800051e:	687b      	ldr	r3, [r7, #4]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	200002e4 	.word	0x200002e4

0800052c <__io_getchar>:

GETCHAR_PROTOTYPE
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8000532:	2300      	movs	r3, #0
 8000534:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 8000536:	4b0b      	ldr	r3, [pc, #44]	@ (8000564 <__io_getchar+0x38>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2208      	movs	r2, #8
 800053c:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800053e:	1df9      	adds	r1, r7, #7
 8000540:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000544:	2201      	movs	r2, #1
 8000546:	4807      	ldr	r0, [pc, #28]	@ (8000564 <__io_getchar+0x38>)
 8000548:	f003 fe66 	bl	8004218 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800054c:	1df9      	adds	r1, r7, #7
 800054e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000552:	2201      	movs	r2, #1
 8000554:	4803      	ldr	r0, [pc, #12]	@ (8000564 <__io_getchar+0x38>)
 8000556:	f003 fdd1 	bl	80040fc <HAL_UART_Transmit>
	return ch;
 800055a:	79fb      	ldrb	r3, [r7, #7]
}
 800055c:	4618      	mov	r0, r3
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200002e4 	.word	0x200002e4

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	f5ad 6d82 	sub.w	sp, sp, #1040	@ 0x410
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f001 f845 	bl	80015fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f828 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 fba6 	bl	8000cc8 <MX_GPIO_Init>
  MX_TIM1_Init();
 800057c:	f000 f8a4 	bl	80006c8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000580:	f000 f96a 	bl	8000858 <MX_TIM2_Init>
  MX_UART4_Init();
 8000584:	f000 fa6c 	bl	8000a60 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000588:	f000 faba 	bl	8000b00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800058c:	f000 fb04 	bl	8000b98 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000590:	f000 fb4e 	bl	8000c30 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 8000594:	f000 f858 	bl	8000648 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000598:	f000 f9ea 	bl	8000970 <MX_TIM4_Init>
//    uint8_t status;


  //////// Tests XL430

	printf("\r\n===== ANIMATRONIC EAGLE FUCK YEAH =====\r\n");
 800059c:	4809      	ldr	r0, [pc, #36]	@ (80005c4 <main+0x5c>)
 800059e:	f004 fe39 	bl	8005214 <puts>
	//arrayRepaint();


	///////// Tests mp3 player

	mp3_selectStorageDevice();
 80005a2:	f000 fc03 	bl	8000dac <mp3_selectStorageDevice>
	waitNms(20);
 80005a6:	2014      	movs	r0, #20
 80005a8:	f000 ffe4 	bl	8001574 <waitNms>
	mp3_setVolume(10);
 80005ac:	200a      	movs	r0, #10
 80005ae:	f000 fc51 	bl	8000e54 <mp3_setVolume>
	waitNms(20);
 80005b2:	2014      	movs	r0, #20
 80005b4:	f000 ffde 	bl	8001574 <waitNms>
	mp3_playWithIndex(2);
 80005b8:	2002      	movs	r0, #2
 80005ba:	f000 fc1d 	bl	8000df8 <mp3_playWithIndex>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80005be:	bf00      	nop
 80005c0:	e7fd      	b.n	80005be <main+0x56>
 80005c2:	bf00      	nop
 80005c4:	08005954 	.word	0x08005954

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	@ 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0318 	add.w	r3, r7, #24
 80005d2:	2238      	movs	r2, #56	@ 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f004 fefc 	bl	80053d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005ee:	f001 fc27 	bl	8001e40 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005f2:	2302      	movs	r3, #2
 80005f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005fc:	2340      	movs	r3, #64	@ 0x40
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000600:	2300      	movs	r3, #0
 8000602:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4618      	mov	r0, r3
 800060a:	f001 fccd 	bl	8001fa8 <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000614:	f000 fbc4 	bl	8000da0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800061c:	2301      	movs	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800062c:	1d3b      	adds	r3, r7, #4
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f001 ffcb 	bl	80025cc <HAL_RCC_ClockConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800063c:	f000 fbb0 	bl	8000da0 <Error_Handler>
  }
}
 8000640:	bf00      	nop
 8000642:	3750      	adds	r7, #80	@ 0x50
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800064c:	4b1b      	ldr	r3, [pc, #108]	@ (80006bc <MX_I2C3_Init+0x74>)
 800064e:	4a1c      	ldr	r2, [pc, #112]	@ (80006c0 <MX_I2C3_Init+0x78>)
 8000650:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 8000652:	4b1a      	ldr	r3, [pc, #104]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000654:	4a1b      	ldr	r2, [pc, #108]	@ (80006c4 <MX_I2C3_Init+0x7c>)
 8000656:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <MX_I2C3_Init+0x74>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065e:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000660:	2201      	movs	r2, #1
 8000662:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000666:	2200      	movs	r2, #0
 8000668:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800066a:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_I2C3_Init+0x74>)
 800066c:	2200      	movs	r2, #0
 800066e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000670:	4b12      	ldr	r3, [pc, #72]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000676:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000678:	2200      	movs	r2, #0
 800067a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_I2C3_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000682:	480e      	ldr	r0, [pc, #56]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000684:	f001 faaa 	bl	8001bdc <HAL_I2C_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800068e:	f000 fb87 	bl	8000da0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000692:	2100      	movs	r1, #0
 8000694:	4809      	ldr	r0, [pc, #36]	@ (80006bc <MX_I2C3_Init+0x74>)
 8000696:	f001 fb3c 	bl	8001d12 <HAL_I2CEx_ConfigAnalogFilter>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80006a0:	f000 fb7e 	bl	8000da0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006a4:	2100      	movs	r1, #0
 80006a6:	4805      	ldr	r0, [pc, #20]	@ (80006bc <MX_I2C3_Init+0x74>)
 80006a8:	f001 fb7e 	bl	8001da8 <HAL_I2CEx_ConfigDigitalFilter>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80006b2:	f000 fb75 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	20000084 	.word	0x20000084
 80006c0:	40007800 	.word	0x40007800
 80006c4:	00503d58 	.word	0x00503d58

080006c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b09c      	sub	sp, #112	@ 0x70
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ce:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
 80006f8:	615a      	str	r2, [r3, #20]
 80006fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2234      	movs	r2, #52	@ 0x34
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f004 fe66 	bl	80053d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000708:	4b51      	ldr	r3, [pc, #324]	@ (8000850 <MX_TIM1_Init+0x188>)
 800070a:	4a52      	ldr	r2, [pc, #328]	@ (8000854 <MX_TIM1_Init+0x18c>)
 800070c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800070e:	4b50      	ldr	r3, [pc, #320]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000710:	2200      	movs	r2, #0
 8000712:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000714:	4b4e      	ldr	r3, [pc, #312]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800071a:	4b4d      	ldr	r3, [pc, #308]	@ (8000850 <MX_TIM1_Init+0x188>)
 800071c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000720:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000722:	4b4b      	ldr	r3, [pc, #300]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000728:	4b49      	ldr	r3, [pc, #292]	@ (8000850 <MX_TIM1_Init+0x188>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800072e:	4b48      	ldr	r3, [pc, #288]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000734:	4846      	ldr	r0, [pc, #280]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000736:	f002 fbb3 	bl	8002ea0 <HAL_TIM_Base_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000740:	f000 fb2e 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000748:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800074a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800074e:	4619      	mov	r1, r3
 8000750:	483f      	ldr	r0, [pc, #252]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000752:	f002 fd71 	bl	8003238 <HAL_TIM_ConfigClockSource>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 fb20 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000760:	483b      	ldr	r0, [pc, #236]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000762:	f002 fbf4 	bl	8002f4e <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800076c:	f000 fb18 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000774:	2300      	movs	r3, #0
 8000776:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800077c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000780:	4619      	mov	r1, r3
 8000782:	4833      	ldr	r0, [pc, #204]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000784:	f003 fae8 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800078e:	f000 fb07 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000792:	2360      	movs	r3, #96	@ 0x60
 8000794:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800079a:	2300      	movs	r3, #0
 800079c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800079e:	2300      	movs	r3, #0
 80007a0:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a2:	2300      	movs	r3, #0
 80007a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b2:	2200      	movs	r2, #0
 80007b4:	4619      	mov	r1, r3
 80007b6:	4826      	ldr	r0, [pc, #152]	@ (8000850 <MX_TIM1_Init+0x188>)
 80007b8:	f002 fc2a 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80007c2:	f000 faed 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007c6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007ca:	2204      	movs	r2, #4
 80007cc:	4619      	mov	r1, r3
 80007ce:	4820      	ldr	r0, [pc, #128]	@ (8000850 <MX_TIM1_Init+0x188>)
 80007d0:	f002 fc1e 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80007da:	f000 fae1 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007de:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007e2:	2208      	movs	r2, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	481a      	ldr	r0, [pc, #104]	@ (8000850 <MX_TIM1_Init+0x188>)
 80007e8:	f002 fc12 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80007f2:	f000 fad5 	bl	8000da0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800080e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000814:	2300      	movs	r3, #0
 8000816:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800081c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000820:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000822:	2300      	movs	r3, #0
 8000824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000826:	2300      	movs	r3, #0
 8000828:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800082a:	2300      	movs	r3, #0
 800082c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	4619      	mov	r1, r3
 8000832:	4807      	ldr	r0, [pc, #28]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000834:	f003 fb26 	bl	8003e84 <HAL_TIMEx_ConfigBreakDeadTime>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800083e:	f000 faaf 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000842:	4803      	ldr	r0, [pc, #12]	@ (8000850 <MX_TIM1_Init+0x188>)
 8000844:	f000 fbf8 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000848:	bf00      	nop
 800084a:	3770      	adds	r7, #112	@ 0x70
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200000d8 	.word	0x200000d8
 8000854:	40012c00 	.word	0x40012c00

08000858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b08e      	sub	sp, #56	@ 0x38
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800085e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]
 8000886:	615a      	str	r2, [r3, #20]
 8000888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800088a:	4b38      	ldr	r3, [pc, #224]	@ (800096c <MX_TIM2_Init+0x114>)
 800088c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000890:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000892:	4b36      	ldr	r3, [pc, #216]	@ (800096c <MX_TIM2_Init+0x114>)
 8000894:	2200      	movs	r2, #0
 8000896:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000898:	4b34      	ldr	r3, [pc, #208]	@ (800096c <MX_TIM2_Init+0x114>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800089e:	4b33      	ldr	r3, [pc, #204]	@ (800096c <MX_TIM2_Init+0x114>)
 80008a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80008a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a6:	4b31      	ldr	r3, [pc, #196]	@ (800096c <MX_TIM2_Init+0x114>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b2f      	ldr	r3, [pc, #188]	@ (800096c <MX_TIM2_Init+0x114>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b2:	482e      	ldr	r0, [pc, #184]	@ (800096c <MX_TIM2_Init+0x114>)
 80008b4:	f002 faf4 	bl	8002ea0 <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80008be:	f000 fa6f 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008cc:	4619      	mov	r1, r3
 80008ce:	4827      	ldr	r0, [pc, #156]	@ (800096c <MX_TIM2_Init+0x114>)
 80008d0:	f002 fcb2 	bl	8003238 <HAL_TIM_ConfigClockSource>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80008da:	f000 fa61 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008de:	4823      	ldr	r0, [pc, #140]	@ (800096c <MX_TIM2_Init+0x114>)
 80008e0:	f002 fb35 	bl	8002f4e <HAL_TIM_PWM_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80008ea:	f000 fa59 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	481b      	ldr	r0, [pc, #108]	@ (800096c <MX_TIM2_Init+0x114>)
 80008fe:	f003 fa2b 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000908:	f000 fa4a 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090c:	2360      	movs	r3, #96	@ 0x60
 800090e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000914:	2300      	movs	r3, #0
 8000916:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000918:	2300      	movs	r3, #0
 800091a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091c:	463b      	mov	r3, r7
 800091e:	2200      	movs	r2, #0
 8000920:	4619      	mov	r1, r3
 8000922:	4812      	ldr	r0, [pc, #72]	@ (800096c <MX_TIM2_Init+0x114>)
 8000924:	f002 fb74 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800092e:	f000 fa37 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000932:	463b      	mov	r3, r7
 8000934:	2204      	movs	r2, #4
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <MX_TIM2_Init+0x114>)
 800093a:	f002 fb69 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000944:	f000 fa2c 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	2208      	movs	r2, #8
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM2_Init+0x114>)
 8000950:	f002 fb5e 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800095a:	f000 fa21 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM2_Init+0x114>)
 8000960:	f000 fb6a 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3738      	adds	r7, #56	@ 0x38
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	20000124 	.word	0x20000124

08000970 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08e      	sub	sp, #56	@ 0x38
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	463b      	mov	r3, r7
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
 800099e:	615a      	str	r2, [r3, #20]
 80009a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80009a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009a4:	4a2d      	ldr	r2, [pc, #180]	@ (8000a5c <MX_TIM4_Init+0xec>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80009a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80009b4:	4b28      	ldr	r3, [pc, #160]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009ba:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c2:	4b25      	ldr	r3, [pc, #148]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80009c8:	4823      	ldr	r0, [pc, #140]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009ca:	f002 fa69 	bl	8002ea0 <HAL_TIM_Base_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80009d4:	f000 f9e4 	bl	8000da0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009de:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e2:	4619      	mov	r1, r3
 80009e4:	481c      	ldr	r0, [pc, #112]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009e6:	f002 fc27 	bl	8003238 <HAL_TIM_ConfigClockSource>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80009f0:	f000 f9d6 	bl	8000da0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009f4:	4818      	ldr	r0, [pc, #96]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 80009f6:	f002 faaa 	bl	8002f4e <HAL_TIM_PWM_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000a00:	f000 f9ce 	bl	8000da0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4811      	ldr	r0, [pc, #68]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 8000a14:	f003 f9a0 	bl	8003d58 <HAL_TIMEx_MasterConfigSynchronization>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000a1e:	f000 f9bf 	bl	8000da0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a22:	2360      	movs	r3, #96	@ 0x60
 8000a24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4807      	ldr	r0, [pc, #28]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 8000a3a:	f002 fae9 	bl	8003010 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000a44:	f000 f9ac 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a48:	4803      	ldr	r0, [pc, #12]	@ (8000a58 <MX_TIM4_Init+0xe8>)
 8000a4a:	f000 faf5 	bl	8001038 <HAL_TIM_MspPostInit>

}
 8000a4e:	bf00      	nop
 8000a50:	3738      	adds	r7, #56	@ 0x38
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000170 	.word	0x20000170
 8000a5c:	40000800 	.word	0x40000800

08000a60 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a66:	4a25      	ldr	r2, [pc, #148]	@ (8000afc <MX_UART4_Init+0x9c>)
 8000a68:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000a6a:	4b23      	ldr	r3, [pc, #140]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a6c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a70:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a86:	220c      	movs	r2, #12
 8000a88:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a90:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a96:	4b18      	ldr	r3, [pc, #96]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000aa2:	4b15      	ldr	r3, [pc, #84]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000aa4:	2208      	movs	r2, #8
 8000aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8000aa8:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000aaa:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000aae:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000ab2:	f003 fa7b 	bl	8003fac <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8000abc:	f000 f970 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000ac4:	f004 f9c4 	bl	8004e50 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8000ace:	f000 f967 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000ad6:	f004 f9f9 	bl	8004ecc <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 8000ae0:	f000 f95e 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_UART4_Init+0x98>)
 8000ae6:	f004 f97a 	bl	8004dde <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 8000af0:	f000 f956 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200001bc 	.word	0x200001bc
 8000afc:	40004c00 	.word	0x40004c00

08000b00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b04:	4b22      	ldr	r3, [pc, #136]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b06:	4a23      	ldr	r2, [pc, #140]	@ (8000b94 <MX_USART1_UART_Init+0x94>)
 8000b08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b1f      	ldr	r3, [pc, #124]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b1d      	ldr	r3, [pc, #116]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b1a      	ldr	r3, [pc, #104]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b19      	ldr	r3, [pc, #100]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b17      	ldr	r3, [pc, #92]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b36:	4b16      	ldr	r3, [pc, #88]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b3c:	4b14      	ldr	r3, [pc, #80]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b42:	4b13      	ldr	r3, [pc, #76]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000b48:	4811      	ldr	r0, [pc, #68]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b4a:	f003 fa7f 	bl	800404c <HAL_HalfDuplex_Init>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b54:	f000 f924 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	480d      	ldr	r0, [pc, #52]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b5c:	f004 f978 	bl	8004e50 <HAL_UARTEx_SetTxFifoThreshold>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b66:	f000 f91b 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4808      	ldr	r0, [pc, #32]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b6e:	f004 f9ad 	bl	8004ecc <HAL_UARTEx_SetRxFifoThreshold>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b78:	f000 f912 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b7c:	4804      	ldr	r0, [pc, #16]	@ (8000b90 <MX_USART1_UART_Init+0x90>)
 8000b7e:	f004 f92e 	bl	8004dde <HAL_UARTEx_DisableFifoMode>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b88:	f000 f90a 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000250 	.word	0x20000250
 8000b94:	40013800 	.word	0x40013800

08000b98 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000b9e:	4a23      	ldr	r2, [pc, #140]	@ (8000c2c <MX_USART2_UART_Init+0x94>)
 8000ba0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ba2:	4b21      	ldr	r3, [pc, #132]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000ba4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ba8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bbe:	220c      	movs	r2, #12
 8000bc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bce:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bda:	4b13      	ldr	r3, [pc, #76]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be0:	4811      	ldr	r0, [pc, #68]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000be2:	f003 f9e3 	bl	8003fac <HAL_UART_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bec:	f000 f8d8 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	480d      	ldr	r0, [pc, #52]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000bf4:	f004 f92c 	bl	8004e50 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bfe:	f000 f8cf 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c02:	2100      	movs	r1, #0
 8000c04:	4808      	ldr	r0, [pc, #32]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000c06:	f004 f961 	bl	8004ecc <HAL_UARTEx_SetRxFifoThreshold>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c10:	f000 f8c6 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c14:	4804      	ldr	r0, [pc, #16]	@ (8000c28 <MX_USART2_UART_Init+0x90>)
 8000c16:	f004 f8e2 	bl	8004dde <HAL_UARTEx_DisableFifoMode>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c20:	f000 f8be 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200002e4 	.word	0x200002e4
 8000c2c:	40004400 	.word	0x40004400

08000c30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c34:	4b22      	ldr	r3, [pc, #136]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c36:	4a23      	ldr	r2, [pc, #140]	@ (8000cc4 <MX_USART3_UART_Init+0x94>)
 8000c38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c3a:	4b21      	ldr	r3, [pc, #132]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c42:	4b1f      	ldr	r3, [pc, #124]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c56:	220c      	movs	r2, #12
 8000c58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c60:	4b17      	ldr	r3, [pc, #92]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c72:	4b13      	ldr	r3, [pc, #76]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c78:	4811      	ldr	r0, [pc, #68]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c7a:	f003 f997 	bl	8003fac <HAL_UART_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c84:	f000 f88c 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c88:	2100      	movs	r1, #0
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c8c:	f004 f8e0 	bl	8004e50 <HAL_UARTEx_SetTxFifoThreshold>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c96:	f000 f883 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4808      	ldr	r0, [pc, #32]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000c9e:	f004 f915 	bl	8004ecc <HAL_UARTEx_SetRxFifoThreshold>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca8:	f000 f87a 	bl	8000da0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000cac:	4804      	ldr	r0, [pc, #16]	@ (8000cc0 <MX_USART3_UART_Init+0x90>)
 8000cae:	f004 f896 	bl	8004dde <HAL_UARTEx_DisableFifoMode>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb8:	f000 f872 	bl	8000da0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000378 	.word	0x20000378
 8000cc4:	40004800 	.word	0x40004800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cde:	4b2d      	ldr	r3, [pc, #180]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ce2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cea:	4b2a      	ldr	r3, [pc, #168]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b27      	ldr	r3, [pc, #156]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cfa:	4a26      	ldr	r2, [pc, #152]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d02:	4b24      	ldr	r3, [pc, #144]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d12:	4a20      	ldr	r2, [pc, #128]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <MX_GPIO_Init+0xcc>)
 8000d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TOF_GPIO_GPIO_Port, TOF_GPIO_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2180      	movs	r1, #128	@ 0x80
 8000d2a:	481b      	ldr	r0, [pc, #108]	@ (8000d98 <MX_GPIO_Init+0xd0>)
 8000d2c:	f000 ff3e 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2170      	movs	r1, #112	@ 0x70
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d36:	f000 ff39 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f107 030c 	add.w	r3, r7, #12
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	4813      	ldr	r0, [pc, #76]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d4e:	f000 fdab 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOF_GPIO_Pin */
  GPIO_InitStruct.Pin = TOF_GPIO_Pin;
 8000d52:	2380      	movs	r3, #128	@ 0x80
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d56:	2301      	movs	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOF_GPIO_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	480b      	ldr	r0, [pc, #44]	@ (8000d98 <MX_GPIO_Init+0xd0>)
 8000d6a:	f000 fd9d 	bl	80018a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000d6e:	2370      	movs	r3, #112	@ 0x70
 8000d70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d72:	2301      	movs	r3, #1
 8000d74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	@ (8000d9c <MX_GPIO_Init+0xd4>)
 8000d86:	f000 fd8f 	bl	80018a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000800 	.word	0x48000800
 8000d9c:	48000400 	.word	0x48000400

08000da0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da4:	b672      	cpsid	i
}
 8000da6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <Error_Handler+0x8>

08000dac <mp3_selectStorageDevice>:
#include "mp3.h"

uint8_t mp3_tx_buffer[MP3_TX_BUFFER_LENGTH] = {0};
extern UART_HandleTypeDef huart4;

void mp3_selectStorageDevice() {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	mp3_tx_buffer[0] = MP3_BUFFER_HEADER_0;
 8000db0:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000db2:	227e      	movs	r2, #126	@ 0x7e
 8000db4:	701a      	strb	r2, [r3, #0]
	mp3_tx_buffer[1] = MP3_BUFFER_HEADER_1;
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000db8:	22ff      	movs	r2, #255	@ 0xff
 8000dba:	705a      	strb	r2, [r3, #1]
	mp3_tx_buffer[2] = MP3_BUFFER_HEADER_2;
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	709a      	strb	r2, [r3, #2]
	mp3_tx_buffer[3] = MP3_CMD_SELECT_DEVICE;
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000dc4:	2209      	movs	r2, #9
 8000dc6:	70da      	strb	r2, [r3, #3]
	mp3_tx_buffer[4] = MP3_NO_FEEDBACK;
 8000dc8:	4b09      	ldr	r3, [pc, #36]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	711a      	strb	r2, [r3, #4]
	mp3_tx_buffer[5] = MP3_MICRO_SD_STORAGE_H0;
 8000dce:	4b08      	ldr	r3, [pc, #32]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	715a      	strb	r2, [r3, #5]
	mp3_tx_buffer[6] = MP3_MICRO_SD_STORAGE_H1;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	719a      	strb	r2, [r3, #6]
	mp3_tx_buffer[7] = MP3_BUFFER_TAIL;
 8000dda:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000ddc:	22ef      	movs	r2, #239	@ 0xef
 8000dde:	71da      	strb	r2, [r3, #7]

	HAL_UART_Transmit(&huart4,mp3_tx_buffer,MP3_TX_BUFFER_LENGTH,10);
 8000de0:	230a      	movs	r3, #10
 8000de2:	2208      	movs	r2, #8
 8000de4:	4902      	ldr	r1, [pc, #8]	@ (8000df0 <mp3_selectStorageDevice+0x44>)
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <mp3_selectStorageDevice+0x48>)
 8000de8:	f003 f988 	bl	80040fc <HAL_UART_Transmit>
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000040c 	.word	0x2000040c
 8000df4:	200001bc 	.word	0x200001bc

08000df8 <mp3_playWithIndex>:

void mp3_playWithIndex(int track_index) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	mp3_tx_buffer[0] = MP3_BUFFER_HEADER_0;
 8000e00:	4b12      	ldr	r3, [pc, #72]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e02:	227e      	movs	r2, #126	@ 0x7e
 8000e04:	701a      	strb	r2, [r3, #0]
	mp3_tx_buffer[1] = MP3_BUFFER_HEADER_1;
 8000e06:	4b11      	ldr	r3, [pc, #68]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e08:	22ff      	movs	r2, #255	@ 0xff
 8000e0a:	705a      	strb	r2, [r3, #1]
	mp3_tx_buffer[2] = MP3_BUFFER_HEADER_2;
 8000e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e0e:	2206      	movs	r2, #6
 8000e10:	709a      	strb	r2, [r3, #2]
	mp3_tx_buffer[3] = MP3_CMD_PLAY_WITH_INDEX;
 8000e12:	4b0e      	ldr	r3, [pc, #56]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e14:	2203      	movs	r2, #3
 8000e16:	70da      	strb	r2, [r3, #3]
	mp3_tx_buffer[4] = MP3_NO_FEEDBACK;
 8000e18:	4b0c      	ldr	r3, [pc, #48]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	711a      	strb	r2, [r3, #4]
	mp3_tx_buffer[5] = (((uint8_t)track_index) >> 8);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	121b      	asrs	r3, r3, #8
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b09      	ldr	r3, [pc, #36]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e28:	715a      	strb	r2, [r3, #5]
	mp3_tx_buffer[6] = (uint8_t)track_index;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	b2da      	uxtb	r2, r3
 8000e2e:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e30:	719a      	strb	r2, [r3, #6]
	mp3_tx_buffer[7] = MP3_BUFFER_TAIL;
 8000e32:	4b06      	ldr	r3, [pc, #24]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e34:	22ef      	movs	r2, #239	@ 0xef
 8000e36:	71da      	strb	r2, [r3, #7]

	HAL_UART_Transmit(&huart4,mp3_tx_buffer,MP3_TX_BUFFER_LENGTH,10);
 8000e38:	230a      	movs	r3, #10
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	4903      	ldr	r1, [pc, #12]	@ (8000e4c <mp3_playWithIndex+0x54>)
 8000e3e:	4804      	ldr	r0, [pc, #16]	@ (8000e50 <mp3_playWithIndex+0x58>)
 8000e40:	f003 f95c 	bl	80040fc <HAL_UART_Transmit>
}
 8000e44:	bf00      	nop
 8000e46:	3708      	adds	r7, #8
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	2000040c 	.word	0x2000040c
 8000e50:	200001bc 	.word	0x200001bc

08000e54 <mp3_setVolume>:
	mp3_tx_buffer[7] = MP3_BUFFER_TAIL;

	HAL_UART_Transmit(&huart4,mp3_tx_buffer,MP3_TX_BUFFER_LENGTH,10);
}

void mp3_setVolume(int volume) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
	mp3_tx_buffer[0] = MP3_BUFFER_HEADER_0;
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e5e:	227e      	movs	r2, #126	@ 0x7e
 8000e60:	701a      	strb	r2, [r3, #0]
	mp3_tx_buffer[1] = MP3_BUFFER_HEADER_1;
 8000e62:	4b11      	ldr	r3, [pc, #68]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e64:	22ff      	movs	r2, #255	@ 0xff
 8000e66:	705a      	strb	r2, [r3, #1]
	mp3_tx_buffer[2] = MP3_BUFFER_HEADER_2;
 8000e68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e6a:	2206      	movs	r2, #6
 8000e6c:	709a      	strb	r2, [r3, #2]
	mp3_tx_buffer[3] = MP3_CMD_SET_VOLUME;
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e70:	2206      	movs	r2, #6
 8000e72:	70da      	strb	r2, [r3, #3]
	mp3_tx_buffer[4] = MP3_NO_FEEDBACK;
 8000e74:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	711a      	strb	r2, [r3, #4]
	mp3_tx_buffer[5] = (((uint8_t)volume) >> 8);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	121b      	asrs	r3, r3, #8
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4b09      	ldr	r3, [pc, #36]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e84:	715a      	strb	r2, [r3, #5]
	mp3_tx_buffer[6] = (uint8_t)volume;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b07      	ldr	r3, [pc, #28]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e8c:	719a      	strb	r2, [r3, #6]
	mp3_tx_buffer[7] = MP3_BUFFER_TAIL;
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e90:	22ef      	movs	r2, #239	@ 0xef
 8000e92:	71da      	strb	r2, [r3, #7]

	HAL_UART_Transmit(&huart4,mp3_tx_buffer,MP3_TX_BUFFER_LENGTH,10);
 8000e94:	230a      	movs	r3, #10
 8000e96:	2208      	movs	r2, #8
 8000e98:	4903      	ldr	r1, [pc, #12]	@ (8000ea8 <mp3_setVolume+0x54>)
 8000e9a:	4804      	ldr	r0, [pc, #16]	@ (8000eac <mp3_setVolume+0x58>)
 8000e9c:	f003 f92e 	bl	80040fc <HAL_UART_Transmit>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	2000040c 	.word	0x2000040c
 8000eac:	200001bc 	.word	0x200001bc

08000eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef4 <HAL_MspInit+0x44>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <HAL_MspInit+0x44>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef4 <HAL_MspInit+0x44>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	607b      	str	r3, [r7, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <HAL_MspInit+0x44>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed2:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x44>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x44>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ee6:	f001 f84f 	bl	8001f88 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b09e      	sub	sp, #120	@ 0x78
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	2254      	movs	r2, #84	@ 0x54
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f004 fa5b 	bl	80053d4 <memset>
  if(hi2c->Instance==I2C3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa0 <HAL_I2C_MspInit+0xa8>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d137      	bne.n	8000f98 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fd64 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f42:	f7ff ff2d 	bl	8000da0 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	4a16      	ldr	r2, [pc, #88]	@ (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f52:	4b14      	ldr	r3, [pc, #80]	@ (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f62:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f64:	2312      	movs	r3, #18
 8000f66:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000f70:	2308      	movs	r3, #8
 8000f72:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f74:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480b      	ldr	r0, [pc, #44]	@ (8000fa8 <HAL_I2C_MspInit+0xb0>)
 8000f7c:	f000 fc94 	bl	80018a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f80:	4b08      	ldr	r3, [pc, #32]	@ (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f84:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f8c:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_I2C_MspInit+0xac>)
 8000f8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f98:	bf00      	nop
 8000f9a:	3778      	adds	r7, #120	@ 0x78
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40007800 	.word	0x40007800
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000800 	.word	0x48000800

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b087      	sub	sp, #28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800102c <HAL_TIM_Base_MspInit+0x80>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d10c      	bne.n	8000fd8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8000fc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fc8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fca:	4b19      	ldr	r3, [pc, #100]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8000fcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fd6:	e022      	b.n	800101e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe0:	d10c      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fe6:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fee:	4b10      	ldr	r3, [pc, #64]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
}
 8000ffa:	e010      	b.n	800101e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a0c      	ldr	r2, [pc, #48]	@ (8001034 <HAL_TIM_Base_MspInit+0x88>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d10b      	bne.n	800101e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800100a:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6593      	str	r3, [r2, #88]	@ 0x58
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <HAL_TIM_Base_MspInit+0x84>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
}
 800101e:	bf00      	nop
 8001020:	371c      	adds	r7, #28
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	40012c00 	.word	0x40012c00
 8001030:	40021000 	.word	0x40021000
 8001034:	40000800 	.word	0x40000800

08001038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	@ 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a3d      	ldr	r2, [pc, #244]	@ (800114c <HAL_TIM_MspPostInit+0x114>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d11c      	bne.n	8001094 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	4b3d      	ldr	r3, [pc, #244]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105e:	4a3c      	ldr	r2, [pc, #240]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 8001060:	f043 0304 	orr.w	r3, r3, #4
 8001064:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001066:	4b3a      	ldr	r3, [pc, #232]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001072:	2307      	movs	r3, #7
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001076:	2302      	movs	r3, #2
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001082:	2302      	movs	r3, #2
 8001084:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	4831      	ldr	r0, [pc, #196]	@ (8001154 <HAL_TIM_MspPostInit+0x11c>)
 800108e:	f000 fc0b 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001092:	e057      	b.n	8001144 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM2)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800109c:	d12f      	bne.n	80010fe <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b2c      	ldr	r3, [pc, #176]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a2b      	ldr	r2, [pc, #172]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010b6:	2303      	movs	r3, #3
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010c6:	2301      	movs	r3, #1
 80010c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010d4:	f000 fbe8 	bl	80018a8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80010ea:	230a      	movs	r3, #10
 80010ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010f8:	f000 fbd6 	bl	80018a8 <HAL_GPIO_Init>
}
 80010fc:	e022      	b.n	8001144 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM4)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a15      	ldr	r2, [pc, #84]	@ (8001158 <HAL_TIM_MspPostInit+0x120>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d11d      	bne.n	8001144 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 800110a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110c:	4a10      	ldr	r2, [pc, #64]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 800110e:	f043 0301 	orr.w	r3, r3, #1
 8001112:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001114:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <HAL_TIM_MspPostInit+0x118>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001120:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001132:	230a      	movs	r3, #10
 8001134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001140:	f000 fbb2 	bl	80018a8 <HAL_GPIO_Init>
}
 8001144:	bf00      	nop
 8001146:	3728      	adds	r7, #40	@ 0x28
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40012c00 	.word	0x40012c00
 8001150:	40021000 	.word	0x40021000
 8001154:	48000800 	.word	0x48000800
 8001158:	40000800 	.word	0x40000800

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0a4      	sub	sp, #144	@ 0x90
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001178:	2254      	movs	r2, #84	@ 0x54
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f004 f929 	bl	80053d4 <memset>
  if(huart->Instance==UART4)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a82      	ldr	r2, [pc, #520]	@ (8001390 <HAL_UART_MspInit+0x234>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d13b      	bne.n	8001204 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800118c:	2308      	movs	r3, #8
 800118e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fc33 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a4:	f7ff fdfc 	bl	8000da0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80011aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011ac:	4a79      	ldr	r2, [pc, #484]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80011ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011b4:	4b77      	ldr	r3, [pc, #476]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80011b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c0:	4b74      	ldr	r3, [pc, #464]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c4:	4a73      	ldr	r2, [pc, #460]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80011c6:	f043 0304 	orr.w	r3, r3, #4
 80011ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011cc:	4b71      	ldr	r3, [pc, #452]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
 80011d6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80011d8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 80011f0:	2305      	movs	r3, #5
 80011f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80011fa:	4619      	mov	r1, r3
 80011fc:	4866      	ldr	r0, [pc, #408]	@ (8001398 <HAL_UART_MspInit+0x23c>)
 80011fe:	f000 fb53 	bl	80018a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001202:	e0c0      	b.n	8001386 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART1)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a64      	ldr	r2, [pc, #400]	@ (800139c <HAL_UART_MspInit+0x240>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d13a      	bne.n	8001284 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800120e:	2301      	movs	r3, #1
 8001210:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001212:	2300      	movs	r3, #0
 8001214:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fbf2 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001226:	f7ff fdbb 	bl	8000da0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800122a:	4b5a      	ldr	r3, [pc, #360]	@ (8001394 <HAL_UART_MspInit+0x238>)
 800122c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800122e:	4a59      	ldr	r2, [pc, #356]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001230:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001234:	6613      	str	r3, [r2, #96]	@ 0x60
 8001236:	4b57      	ldr	r3, [pc, #348]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800123e:	61fb      	str	r3, [r7, #28]
 8001240:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b54      	ldr	r3, [pc, #336]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a53      	ldr	r2, [pc, #332]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b51      	ldr	r3, [pc, #324]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800125a:	2310      	movs	r3, #16
 800125c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125e:	2312      	movs	r3, #18
 8001260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001264:	2301      	movs	r3, #1
 8001266:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001270:	2307      	movs	r3, #7
 8001272:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001276:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800127a:	4619      	mov	r1, r3
 800127c:	4846      	ldr	r0, [pc, #280]	@ (8001398 <HAL_UART_MspInit+0x23c>)
 800127e:	f000 fb13 	bl	80018a8 <HAL_GPIO_Init>
}
 8001282:	e080      	b.n	8001386 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART2)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a45      	ldr	r2, [pc, #276]	@ (80013a0 <HAL_UART_MspInit+0x244>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d13b      	bne.n	8001306 <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800128e:	2302      	movs	r3, #2
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001292:	2300      	movs	r3, #0
 8001294:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001296:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fbb2 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <HAL_UART_MspInit+0x14e>
      Error_Handler();
 80012a6:	f7ff fd7b 	bl	8000da0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ae:	4a39      	ldr	r2, [pc, #228]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80012b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012b6:	4b37      	ldr	r3, [pc, #220]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80012c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012c6:	4a33      	ldr	r2, [pc, #204]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012ce:	4b31      	ldr	r3, [pc, #196]	@ (8001394 <HAL_UART_MspInit+0x238>)
 80012d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80012da:	230c      	movs	r3, #12
 80012dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f0:	2307      	movs	r3, #7
 80012f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f000 fad2 	bl	80018a8 <HAL_GPIO_Init>
}
 8001304:	e03f      	b.n	8001386 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART3)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a26      	ldr	r2, [pc, #152]	@ (80013a4 <HAL_UART_MspInit+0x248>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d13a      	bne.n	8001386 <HAL_UART_MspInit+0x22a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001310:	2304      	movs	r3, #4
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001318:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800131c:	4618      	mov	r0, r3
 800131e:	f001 fb71 	bl	8002a04 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8001328:	f7ff fd3a 	bl	8000da0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800132c:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_UART_MspInit+0x238>)
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001332:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001336:	6593      	str	r3, [r2, #88]	@ 0x58
 8001338:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_UART_MspInit+0x238>)
 800133a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b13      	ldr	r3, [pc, #76]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001346:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001348:	4a12      	ldr	r2, [pc, #72]	@ (8001394 <HAL_UART_MspInit+0x238>)
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_UART_MspInit+0x238>)
 8001352:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800135c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001360:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001368:	2300      	movs	r3, #0
 800136a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001374:	2307      	movs	r3, #7
 8001376:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800137e:	4619      	mov	r1, r3
 8001380:	4809      	ldr	r0, [pc, #36]	@ (80013a8 <HAL_UART_MspInit+0x24c>)
 8001382:	f000 fa91 	bl	80018a8 <HAL_GPIO_Init>
}
 8001386:	bf00      	nop
 8001388:	3790      	adds	r7, #144	@ 0x90
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40004c00 	.word	0x40004c00
 8001394:	40021000 	.word	0x40021000
 8001398:	48000800 	.word	0x48000800
 800139c:	40013800 	.word	0x40013800
 80013a0:	40004400 	.word	0x40004400
 80013a4:	40004800 	.word	0x40004800
 80013a8:	48000400 	.word	0x48000400

080013ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013b0:	bf00      	nop
 80013b2:	e7fd      	b.n	80013b0 <NMI_Handler+0x4>

080013b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b8:	bf00      	nop
 80013ba:	e7fd      	b.n	80013b8 <HardFault_Handler+0x4>

080013bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <MemManage_Handler+0x4>

080013c4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <BusFault_Handler+0x4>

080013cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <UsageFault_Handler+0x4>

080013d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001402:	f000 f94f 	bl	80016a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}

0800140a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b086      	sub	sp, #24
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001416:	2300      	movs	r3, #0
 8001418:	617b      	str	r3, [r7, #20]
 800141a:	e00a      	b.n	8001432 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800141c:	f7ff f886 	bl	800052c <__io_getchar>
 8001420:	4601      	mov	r1, r0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	1c5a      	adds	r2, r3, #1
 8001426:	60ba      	str	r2, [r7, #8]
 8001428:	b2ca      	uxtb	r2, r1
 800142a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	429a      	cmp	r2, r3
 8001438:	dbf0      	blt.n	800141c <_read+0x12>
  }

  return len;
 800143a:	687b      	ldr	r3, [r7, #4]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	e009      	b.n	800146a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	60ba      	str	r2, [r7, #8]
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f852 	bl	8000508 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	429a      	cmp	r2, r3
 8001470:	dbf1      	blt.n	8001456 <_write+0x12>
  }
  return len;
 8001472:	687b      	ldr	r3, [r7, #4]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3718      	adds	r7, #24
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <_close>:

int _close(int file)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001484:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001488:	4618      	mov	r0, r3
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr

08001494 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014a4:	605a      	str	r2, [r3, #4]
  return 0;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <_isatty>:

int _isatty(int file)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014bc:	2301      	movs	r3, #1
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3714      	adds	r7, #20
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ec:	4a14      	ldr	r2, [pc, #80]	@ (8001540 <_sbrk+0x5c>)
 80014ee:	4b15      	ldr	r3, [pc, #84]	@ (8001544 <_sbrk+0x60>)
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014f8:	4b13      	ldr	r3, [pc, #76]	@ (8001548 <_sbrk+0x64>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001500:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <_sbrk+0x64>)
 8001502:	4a12      	ldr	r2, [pc, #72]	@ (800154c <_sbrk+0x68>)
 8001504:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <_sbrk+0x64>)
 8001508:	681a      	ldr	r2, [r3, #0]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4413      	add	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	429a      	cmp	r2, r3
 8001512:	d207      	bcs.n	8001524 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001514:	f003 ffac 	bl	8005470 <__errno>
 8001518:	4603      	mov	r3, r0
 800151a:	220c      	movs	r2, #12
 800151c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800151e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001522:	e009      	b.n	8001538 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001524:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <_sbrk+0x64>)
 8001534:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001536:	68fb      	ldr	r3, [r7, #12]
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	20020000 	.word	0x20020000
 8001544:	00000400 	.word	0x00000400
 8001548:	20000414 	.word	0x20000414
 800154c:	20000568 	.word	0x20000568

08001550 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001554:	4b06      	ldr	r3, [pc, #24]	@ (8001570 <SystemInit+0x20>)
 8001556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <SystemInit+0x20>)
 800155c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001560:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <waitNms>:
	}
	if(crc_accum == crc_read) return HAL_OK;
	else return HAL_ERROR;
}

void waitNms(int N){
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
	int i;
	int numb = 51000*N;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f24c 7238 	movw	r2, #51000	@ 0xc738
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	60bb      	str	r3, [r7, #8]
	for(i=0;i<numb;i++);
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e002      	b.n	8001594 <waitNms+0x20>
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	3301      	adds	r3, #1
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	68fa      	ldr	r2, [r7, #12]
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	429a      	cmp	r2, r3
 800159a:	dbf8      	blt.n	800158e <waitNms+0x1a>
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015ac:	480d      	ldr	r0, [pc, #52]	@ (80015e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015b0:	f7ff ffce 	bl	8001550 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015b4:	480c      	ldr	r0, [pc, #48]	@ (80015e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80015b6:	490d      	ldr	r1, [pc, #52]	@ (80015ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80015b8:	4a0d      	ldr	r2, [pc, #52]	@ (80015f0 <LoopForever+0xe>)
  movs r3, #0
 80015ba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015bc:	e002      	b.n	80015c4 <LoopCopyDataInit>

080015be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015c2:	3304      	adds	r3, #4

080015c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015c8:	d3f9      	bcc.n	80015be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ca:	4a0a      	ldr	r2, [pc, #40]	@ (80015f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015cc:	4c0a      	ldr	r4, [pc, #40]	@ (80015f8 <LoopForever+0x16>)
  movs r3, #0
 80015ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d0:	e001      	b.n	80015d6 <LoopFillZerobss>

080015d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015d4:	3204      	adds	r2, #4

080015d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015d8:	d3fb      	bcc.n	80015d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015da:	f003 ff4f 	bl	800547c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015de:	f7fe ffc3 	bl	8000568 <main>

080015e2 <LoopForever>:

LoopForever:
    b LoopForever
 80015e2:	e7fe      	b.n	80015e2 <LoopForever>
  ldr   r0, =_estack
 80015e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015ec:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80015f0:	080059d0 	.word	0x080059d0
  ldr r2, =_sbss
 80015f4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80015f8:	20000568 	.word	0x20000568

080015fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015fc:	e7fe      	b.n	80015fc <ADC1_2_IRQHandler>

080015fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015fe:	b580      	push	{r7, lr}
 8001600:	b082      	sub	sp, #8
 8001602:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001604:	2300      	movs	r3, #0
 8001606:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001608:	2003      	movs	r0, #3
 800160a:	f000 f91b 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160e:	200f      	movs	r0, #15
 8001610:	f000 f80e 	bl	8001630 <HAL_InitTick>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	71fb      	strb	r3, [r7, #7]
 800161e:	e001      	b.n	8001624 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001620:	f7ff fc46 	bl	8000eb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001624:	79fb      	ldrb	r3, [r7, #7]

}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001638:	2300      	movs	r3, #0
 800163a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800163c:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <HAL_InitTick+0x68>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d022      	beq.n	800168a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <HAL_InitTick+0x6c>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <HAL_InitTick+0x68>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001650:	fbb1 f3f3 	udiv	r3, r1, r3
 8001654:	fbb2 f3f3 	udiv	r3, r2, r3
 8001658:	4618      	mov	r0, r3
 800165a:	f000 f918 	bl	800188e <HAL_SYSTICK_Config>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d10f      	bne.n	8001684 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b0f      	cmp	r3, #15
 8001668:	d809      	bhi.n	800167e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166a:	2200      	movs	r2, #0
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001672:	f000 f8f2 	bl	800185a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001676:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <HAL_InitTick+0x70>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6013      	str	r3, [r2, #0]
 800167c:	e007      	b.n	800168e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e004      	b.n	800168e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e001      	b.n	800168e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	20000008 	.word	0x20000008
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000004 	.word	0x20000004

080016a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <HAL_IncTick+0x1c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_IncTick+0x20>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4413      	add	r3, r2
 80016b2:	4a03      	ldr	r2, [pc, #12]	@ (80016c0 <HAL_IncTick+0x1c>)
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	20000418 	.word	0x20000418
 80016c4:	20000008 	.word	0x20000008

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	@ (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000418 	.word	0x20000418

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	@ (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	@ (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	@ (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	@ (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	@ 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	@ 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	@ (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff47 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001868:	f7ff ff5e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 800186c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186e:	687a      	ldr	r2, [r7, #4]
 8001870:	68b9      	ldr	r1, [r7, #8]
 8001872:	6978      	ldr	r0, [r7, #20]
 8001874:	f7ff ff90 	bl	8001798 <NVIC_EncodePriority>
 8001878:	4602      	mov	r2, r0
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff ff5f 	bl	8001744 <__NVIC_SetPriority>
}
 8001886:	bf00      	nop
 8001888:	3718      	adds	r7, #24
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff ffb2 	bl	8001800 <SysTick_Config>
 800189c:	4603      	mov	r3, r0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
	...

080018a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b087      	sub	sp, #28
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80018b6:	e15a      	b.n	8001b6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	2101      	movs	r1, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	f000 814c 	beq.w	8001b68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d005      	beq.n	80018e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d130      	bne.n	800194a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	2203      	movs	r2, #3
 80018f4:	fa02 f303 	lsl.w	r3, r2, r3
 80018f8:	43db      	mvns	r3, r3
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	4013      	ands	r3, r2
 80018fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68da      	ldr	r2, [r3, #12]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800191e:	2201      	movs	r2, #1
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	43db      	mvns	r3, r3
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4013      	ands	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	091b      	lsrs	r3, r3, #4
 8001934:	f003 0201 	and.w	r2, r3, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b03      	cmp	r3, #3
 8001954:	d017      	beq.n	8001986 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 0303 	and.w	r3, r3, #3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d123      	bne.n	80019da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	08da      	lsrs	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	3208      	adds	r2, #8
 800199a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	220f      	movs	r2, #15
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	691a      	ldr	r2, [r3, #16]
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f003 0307 	and.w	r3, r3, #7
 80019c0:	009b      	lsls	r3, r3, #2
 80019c2:	fa02 f303 	lsl.w	r3, r2, r3
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	08da      	lsrs	r2, r3, #3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3208      	adds	r2, #8
 80019d4:	6939      	ldr	r1, [r7, #16]
 80019d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 0203 	and.w	r2, r3, #3
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 80a6 	beq.w	8001b68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1c:	4b5b      	ldr	r3, [pc, #364]	@ (8001b8c <HAL_GPIO_Init+0x2e4>)
 8001a1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a20:	4a5a      	ldr	r2, [pc, #360]	@ (8001b8c <HAL_GPIO_Init+0x2e4>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a28:	4b58      	ldr	r3, [pc, #352]	@ (8001b8c <HAL_GPIO_Init+0x2e4>)
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a34:	4a56      	ldr	r2, [pc, #344]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	089b      	lsrs	r3, r3, #2
 8001a3a:	3302      	adds	r3, #2
 8001a3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	220f      	movs	r2, #15
 8001a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a50:	43db      	mvns	r3, r3
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a5e:	d01f      	beq.n	8001aa0 <HAL_GPIO_Init+0x1f8>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_GPIO_Init+0x2ec>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d019      	beq.n	8001a9c <HAL_GPIO_Init+0x1f4>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4b      	ldr	r2, [pc, #300]	@ (8001b98 <HAL_GPIO_Init+0x2f0>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d013      	beq.n	8001a98 <HAL_GPIO_Init+0x1f0>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a4a      	ldr	r2, [pc, #296]	@ (8001b9c <HAL_GPIO_Init+0x2f4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d00d      	beq.n	8001a94 <HAL_GPIO_Init+0x1ec>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a49      	ldr	r2, [pc, #292]	@ (8001ba0 <HAL_GPIO_Init+0x2f8>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d007      	beq.n	8001a90 <HAL_GPIO_Init+0x1e8>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	4a48      	ldr	r2, [pc, #288]	@ (8001ba4 <HAL_GPIO_Init+0x2fc>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d101      	bne.n	8001a8c <HAL_GPIO_Init+0x1e4>
 8001a88:	2305      	movs	r3, #5
 8001a8a:	e00a      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a8c:	2306      	movs	r3, #6
 8001a8e:	e008      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a90:	2304      	movs	r3, #4
 8001a92:	e006      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a94:	2303      	movs	r3, #3
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x1fa>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	697a      	ldr	r2, [r7, #20]
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ab2:	4937      	ldr	r1, [pc, #220]	@ (8001b90 <HAL_GPIO_Init+0x2e8>)
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ac0:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4013      	ands	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ae4:	4a30      	ldr	r2, [pc, #192]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aea:	4b2f      	ldr	r3, [pc, #188]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	4013      	ands	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b0e:	4a26      	ldr	r2, [pc, #152]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001b14:	4b24      	ldr	r3, [pc, #144]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001b5a:	693a      	ldr	r2, [r7, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b62:	4a11      	ldr	r2, [pc, #68]	@ (8001ba8 <HAL_GPIO_Init+0x300>)
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	fa22 f303 	lsr.w	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	f47f ae9d 	bne.w	80018b8 <HAL_GPIO_Init+0x10>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	bf00      	nop
 8001b82:	371c      	adds	r7, #28
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	40010000 	.word	0x40010000
 8001b94:	48000400 	.word	0x48000400
 8001b98:	48000800 	.word	0x48000800
 8001b9c:	48000c00 	.word	0x48000c00
 8001ba0:	48001000 	.word	0x48001000
 8001ba4:	48001400 	.word	0x48001400
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc8:	e002      	b.n	8001bd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e08d      	b.n	8001d0a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff f978 	bl	8000ef8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2224      	movs	r2, #36	@ 0x24
 8001c0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0201 	bic.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685a      	ldr	r2, [r3, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c2c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c3c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d107      	bne.n	8001c56 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c52:	609a      	str	r2, [r3, #8]
 8001c54:	e006      	b.n	8001c64 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689a      	ldr	r2, [r3, #8]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001c62:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d108      	bne.n	8001c7e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001c7a:	605a      	str	r2, [r3, #4]
 8001c7c:	e007      	b.n	8001c8e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c8c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001c9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ca0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68da      	ldr	r2, [r3, #12]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cb0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	691a      	ldr	r2, [r3, #16]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	695b      	ldr	r3, [r3, #20]
 8001cba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	699b      	ldr	r3, [r3, #24]
 8001cc2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69d9      	ldr	r1, [r3, #28]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a1a      	ldr	r2, [r3, #32]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f042 0201 	orr.w	r2, r2, #1
 8001cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2220      	movs	r2, #32
 8001cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d138      	bne.n	8001d9a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d101      	bne.n	8001d36 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d32:	2302      	movs	r3, #2
 8001d34:	e032      	b.n	8001d9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2224      	movs	r2, #36	@ 0x24
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001d64:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	6819      	ldr	r1, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0201 	orr.w	r2, r2, #1
 8001d84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2220      	movs	r2, #32
 8001d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e000      	b.n	8001d9c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001d9a:	2302      	movs	r3, #2
  }
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b20      	cmp	r3, #32
 8001dbc:	d139      	bne.n	8001e32 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001dc4:	2b01      	cmp	r3, #1
 8001dc6:	d101      	bne.n	8001dcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001dc8:	2302      	movs	r3, #2
 8001dca:	e033      	b.n	8001e34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2224      	movs	r2, #36	@ 0x24
 8001dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001dfa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	021b      	lsls	r3, r3, #8
 8001e00:	68fa      	ldr	r2, [r7, #12]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2220      	movs	r2, #32
 8001e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	e000      	b.n	8001e34 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e32:	2302      	movs	r3, #2
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b085      	sub	sp, #20
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d141      	bne.n	8001ed2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5a:	d131      	bne.n	8001ec0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e5c:	4b47      	ldr	r3, [pc, #284]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e62:	4a46      	ldr	r2, [pc, #280]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e68:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e6c:	4b43      	ldr	r3, [pc, #268]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e74:	4a41      	ldr	r2, [pc, #260]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e7c:	4b40      	ldr	r3, [pc, #256]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	2232      	movs	r2, #50	@ 0x32
 8001e82:	fb02 f303 	mul.w	r3, r2, r3
 8001e86:	4a3f      	ldr	r2, [pc, #252]	@ (8001f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9b      	lsrs	r3, r3, #18
 8001e8e:	3301      	adds	r3, #1
 8001e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e92:	e002      	b.n	8001e9a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e9a:	4b38      	ldr	r3, [pc, #224]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea6:	d102      	bne.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1f2      	bne.n	8001e94 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eae:	4b33      	ldr	r3, [pc, #204]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001eb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eba:	d158      	bne.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e057      	b.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ec0:	4b2e      	ldr	r3, [pc, #184]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ecc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ed0:	e04d      	b.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed8:	d141      	bne.n	8001f5e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ee2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ee6:	d131      	bne.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ee8:	4b24      	ldr	r3, [pc, #144]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eee:	4a23      	ldr	r2, [pc, #140]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ef4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ef8:	4b20      	ldr	r3, [pc, #128]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f00:	4a1e      	ldr	r2, [pc, #120]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2232      	movs	r2, #50	@ 0x32
 8001f0e:	fb02 f303 	mul.w	r3, r2, r3
 8001f12:	4a1c      	ldr	r2, [pc, #112]	@ (8001f84 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	0c9b      	lsrs	r3, r3, #18
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f1e:	e002      	b.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f32:	d102      	bne.n	8001f3a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f2      	bne.n	8001f20 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f3a:	4b10      	ldr	r3, [pc, #64]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f46:	d112      	bne.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e011      	b.n	8001f70 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f52:	4a0a      	ldr	r2, [pc, #40]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f58:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f5c:	e007      	b.n	8001f6e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f5e:	4b07      	ldr	r3, [pc, #28]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f66:	4a05      	ldr	r2, [pc, #20]	@ (8001f7c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f68:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f6c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	20000000 	.word	0x20000000
 8001f84:	431bde83 	.word	0x431bde83

08001f88 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001f8c:	4b05      	ldr	r3, [pc, #20]	@ (8001fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001f92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f96:	6093      	str	r3, [r2, #8]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	40007000 	.word	0x40007000

08001fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b088      	sub	sp, #32
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e2fe      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d075      	beq.n	80020b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fc6:	4b97      	ldr	r3, [pc, #604]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd0:	4b94      	ldr	r3, [pc, #592]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b0c      	cmp	r3, #12
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3e>
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	2b03      	cmp	r3, #3
 8001fe4:	d002      	beq.n	8001fec <HAL_RCC_OscConfig+0x44>
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	d10b      	bne.n	8002004 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fec:	4b8d      	ldr	r3, [pc, #564]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d05b      	beq.n	80020b0 <HAL_RCC_OscConfig+0x108>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d157      	bne.n	80020b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e2d9      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800200c:	d106      	bne.n	800201c <HAL_RCC_OscConfig+0x74>
 800200e:	4b85      	ldr	r3, [pc, #532]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a84      	ldr	r2, [pc, #528]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	e01d      	b.n	8002058 <HAL_RCC_OscConfig+0xb0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002024:	d10c      	bne.n	8002040 <HAL_RCC_OscConfig+0x98>
 8002026:	4b7f      	ldr	r3, [pc, #508]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a7e      	ldr	r2, [pc, #504]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	4b7c      	ldr	r3, [pc, #496]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a7b      	ldr	r2, [pc, #492]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xb0>
 8002040:	4b78      	ldr	r3, [pc, #480]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a77      	ldr	r2, [pc, #476]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800204a:	6013      	str	r3, [r2, #0]
 800204c:	4b75      	ldr	r3, [pc, #468]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a74      	ldr	r2, [pc, #464]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002052:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d013      	beq.n	8002088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7ff fb32 	bl	80016c8 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002066:	e008      	b.n	800207a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002068:	f7ff fb2e 	bl	80016c8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b64      	cmp	r3, #100	@ 0x64
 8002074:	d901      	bls.n	800207a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e29e      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800207a:	4b6a      	ldr	r3, [pc, #424]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d0f0      	beq.n	8002068 <HAL_RCC_OscConfig+0xc0>
 8002086:	e014      	b.n	80020b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002088:	f7ff fb1e 	bl	80016c8 <HAL_GetTick>
 800208c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800208e:	e008      	b.n	80020a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002090:	f7ff fb1a 	bl	80016c8 <HAL_GetTick>
 8002094:	4602      	mov	r2, r0
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	1ad3      	subs	r3, r2, r3
 800209a:	2b64      	cmp	r3, #100	@ 0x64
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e28a      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020a2:	4b60      	ldr	r3, [pc, #384]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d1f0      	bne.n	8002090 <HAL_RCC_OscConfig+0xe8>
 80020ae:	e000      	b.n	80020b2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d075      	beq.n	80021aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020be:	4b59      	ldr	r3, [pc, #356]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 030c 	and.w	r3, r3, #12
 80020c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020c8:	4b56      	ldr	r3, [pc, #344]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	f003 0303 	and.w	r3, r3, #3
 80020d0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b0c      	cmp	r3, #12
 80020d6:	d102      	bne.n	80020de <HAL_RCC_OscConfig+0x136>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d002      	beq.n	80020e4 <HAL_RCC_OscConfig+0x13c>
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d11f      	bne.n	8002124 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d005      	beq.n	80020fc <HAL_RCC_OscConfig+0x154>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d101      	bne.n	80020fc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e25d      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	4b49      	ldr	r3, [pc, #292]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	4946      	ldr	r1, [pc, #280]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800210c:	4313      	orrs	r3, r2
 800210e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002110:	4b45      	ldr	r3, [pc, #276]	@ (8002228 <HAL_RCC_OscConfig+0x280>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4618      	mov	r0, r3
 8002116:	f7ff fa8b 	bl	8001630 <HAL_InitTick>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d043      	beq.n	80021a8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e249      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d023      	beq.n	8002174 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800212c:	4b3d      	ldr	r3, [pc, #244]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a3c      	ldr	r2, [pc, #240]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff fac6 	bl	80016c8 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002140:	f7ff fac2 	bl	80016c8 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e232      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002152:	4b34      	ldr	r3, [pc, #208]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800215e:	4b31      	ldr	r3, [pc, #196]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	061b      	lsls	r3, r3, #24
 800216c:	492d      	ldr	r1, [pc, #180]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	604b      	str	r3, [r1, #4]
 8002172:	e01a      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002174:	4b2b      	ldr	r3, [pc, #172]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800217a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800217e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002180:	f7ff faa2 	bl	80016c8 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002188:	f7ff fa9e 	bl	80016c8 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b02      	cmp	r3, #2
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e20e      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800219a:	4b22      	ldr	r3, [pc, #136]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x1e0>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0308 	and.w	r3, r3, #8
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d041      	beq.n	800223a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01c      	beq.n	80021f8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021be:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80021c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021c4:	4a17      	ldr	r2, [pc, #92]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff fa7b 	bl	80016c8 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021d6:	f7ff fa77 	bl	80016c8 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e1e7      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80021ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0ef      	beq.n	80021d6 <HAL_RCC_OscConfig+0x22e>
 80021f6:	e020      	b.n	800223a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 80021fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021fe:	4a09      	ldr	r2, [pc, #36]	@ (8002224 <HAL_RCC_OscConfig+0x27c>)
 8002200:	f023 0301 	bic.w	r3, r3, #1
 8002204:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002208:	f7ff fa5e 	bl	80016c8 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800220e:	e00d      	b.n	800222c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002210:	f7ff fa5a 	bl	80016c8 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d906      	bls.n	800222c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e1ca      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800222c:	4b8c      	ldr	r3, [pc, #560]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1ea      	bne.n	8002210 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80a6 	beq.w	8002394 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002248:	2300      	movs	r3, #0
 800224a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800224c:	4b84      	ldr	r3, [pc, #528]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 800224e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002250:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d101      	bne.n	800225c <HAL_RCC_OscConfig+0x2b4>
 8002258:	2301      	movs	r3, #1
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x2b6>
 800225c:	2300      	movs	r3, #0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d00d      	beq.n	800227e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b7f      	ldr	r3, [pc, #508]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002266:	4a7e      	ldr	r2, [pc, #504]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	@ 0x58
 800226e:	4b7c      	ldr	r3, [pc, #496]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800227a:	2301      	movs	r3, #1
 800227c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800227e:	4b79      	ldr	r3, [pc, #484]	@ (8002464 <HAL_RCC_OscConfig+0x4bc>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002286:	2b00      	cmp	r3, #0
 8002288:	d118      	bne.n	80022bc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800228a:	4b76      	ldr	r3, [pc, #472]	@ (8002464 <HAL_RCC_OscConfig+0x4bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a75      	ldr	r2, [pc, #468]	@ (8002464 <HAL_RCC_OscConfig+0x4bc>)
 8002290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002296:	f7ff fa17 	bl	80016c8 <HAL_GetTick>
 800229a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800229c:	e008      	b.n	80022b0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800229e:	f7ff fa13 	bl	80016c8 <HAL_GetTick>
 80022a2:	4602      	mov	r2, r0
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e183      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002464 <HAL_RCC_OscConfig+0x4bc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d0f0      	beq.n	800229e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_RCC_OscConfig+0x32e>
 80022c4:	4b66      	ldr	r3, [pc, #408]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80022c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022ca:	4a65      	ldr	r2, [pc, #404]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022d4:	e024      	b.n	8002320 <HAL_RCC_OscConfig+0x378>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b05      	cmp	r3, #5
 80022dc:	d110      	bne.n	8002300 <HAL_RCC_OscConfig+0x358>
 80022de:	4b60      	ldr	r3, [pc, #384]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022e4:	4a5e      	ldr	r2, [pc, #376]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	f043 0304 	orr.w	r3, r3, #4
 80022ea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022f4:	4a5a      	ldr	r2, [pc, #360]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80022f6:	f043 0301 	orr.w	r3, r3, #1
 80022fa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80022fe:	e00f      	b.n	8002320 <HAL_RCC_OscConfig+0x378>
 8002300:	4b57      	ldr	r3, [pc, #348]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002306:	4a56      	ldr	r2, [pc, #344]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002308:	f023 0301 	bic.w	r3, r3, #1
 800230c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002310:	4b53      	ldr	r3, [pc, #332]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002316:	4a52      	ldr	r2, [pc, #328]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002318:	f023 0304 	bic.w	r3, r3, #4
 800231c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d016      	beq.n	8002356 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002328:	f7ff f9ce 	bl	80016c8 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800232e:	e00a      	b.n	8002346 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002330:	f7ff f9ca 	bl	80016c8 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800233e:	4293      	cmp	r3, r2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e138      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002346:	4b46      	ldr	r3, [pc, #280]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002348:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0ed      	beq.n	8002330 <HAL_RCC_OscConfig+0x388>
 8002354:	e015      	b.n	8002382 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002356:	f7ff f9b7 	bl	80016c8 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800235c:	e00a      	b.n	8002374 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235e:	f7ff f9b3 	bl	80016c8 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236c:	4293      	cmp	r3, r2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e121      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002374:	4b3a      	ldr	r3, [pc, #232]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1ed      	bne.n	800235e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002382:	7ffb      	ldrb	r3, [r7, #31]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d105      	bne.n	8002394 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002388:	4b35      	ldr	r3, [pc, #212]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238c:	4a34      	ldr	r2, [pc, #208]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 800238e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002392:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	2b00      	cmp	r3, #0
 800239e:	d03c      	beq.n	800241a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01c      	beq.n	80023e2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b8:	f7ff f986 	bl	80016c8 <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023c0:	f7ff f982 	bl	80016c8 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e0f2      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023d2:	4b23      	ldr	r3, [pc, #140]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80023d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ef      	beq.n	80023c0 <HAL_RCC_OscConfig+0x418>
 80023e0:	e01b      	b.n	800241a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80023e2:	4b1f      	ldr	r3, [pc, #124]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	f023 0301 	bic.w	r3, r3, #1
 80023ee:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7ff f969 	bl	80016c8 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023fa:	f7ff f965 	bl	80016c8 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e0d5      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800240c:	4b14      	ldr	r3, [pc, #80]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 800240e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1ef      	bne.n	80023fa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	2b00      	cmp	r3, #0
 8002420:	f000 80c9 	beq.w	80025b6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002424:	4b0e      	ldr	r3, [pc, #56]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b0c      	cmp	r3, #12
 800242e:	f000 8083 	beq.w	8002538 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	2b02      	cmp	r3, #2
 8002438:	d15e      	bne.n	80024f8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243a:	4b09      	ldr	r3, [pc, #36]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a08      	ldr	r2, [pc, #32]	@ (8002460 <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002446:	f7ff f93f 	bl	80016c8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800244c:	e00c      	b.n	8002468 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7ff f93b 	bl	80016c8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d905      	bls.n	8002468 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e0ab      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
 8002460:	40021000 	.word	0x40021000
 8002464:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002468:	4b55      	ldr	r3, [pc, #340]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ec      	bne.n	800244e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002474:	4b52      	ldr	r3, [pc, #328]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	4b52      	ldr	r3, [pc, #328]	@ (80025c4 <HAL_RCC_OscConfig+0x61c>)
 800247a:	4013      	ands	r3, r2
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6a11      	ldr	r1, [r2, #32]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002484:	3a01      	subs	r2, #1
 8002486:	0112      	lsls	r2, r2, #4
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800248e:	0212      	lsls	r2, r2, #8
 8002490:	4311      	orrs	r1, r2
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002496:	0852      	lsrs	r2, r2, #1
 8002498:	3a01      	subs	r2, #1
 800249a:	0552      	lsls	r2, r2, #21
 800249c:	4311      	orrs	r1, r2
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024a2:	0852      	lsrs	r2, r2, #1
 80024a4:	3a01      	subs	r2, #1
 80024a6:	0652      	lsls	r2, r2, #25
 80024a8:	4311      	orrs	r1, r2
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024ae:	06d2      	lsls	r2, r2, #27
 80024b0:	430a      	orrs	r2, r1
 80024b2:	4943      	ldr	r1, [pc, #268]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024b8:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a40      	ldr	r2, [pc, #256]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024c4:	4b3e      	ldr	r3, [pc, #248]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a3d      	ldr	r2, [pc, #244]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d0:	f7ff f8fa 	bl	80016c8 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7ff f8f6 	bl	80016c8 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e066      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ea:	4b35      	ldr	r3, [pc, #212]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d0f0      	beq.n	80024d8 <HAL_RCC_OscConfig+0x530>
 80024f6:	e05e      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f8:	4b31      	ldr	r3, [pc, #196]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a30      	ldr	r2, [pc, #192]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 80024fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff f8e0 	bl	80016c8 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7ff f8dc 	bl	80016c8 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e04c      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800251e:	4b28      	ldr	r3, [pc, #160]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1f0      	bne.n	800250c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800252a:	4b25      	ldr	r3, [pc, #148]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	4924      	ldr	r1, [pc, #144]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002530:	4b25      	ldr	r3, [pc, #148]	@ (80025c8 <HAL_RCC_OscConfig+0x620>)
 8002532:	4013      	ands	r3, r2
 8002534:	60cb      	str	r3, [r1, #12]
 8002536:	e03e      	b.n	80025b6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69db      	ldr	r3, [r3, #28]
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e039      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002544:	4b1e      	ldr	r3, [pc, #120]	@ (80025c0 <HAL_RCC_OscConfig+0x618>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0203 	and.w	r2, r3, #3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a1b      	ldr	r3, [r3, #32]
 8002554:	429a      	cmp	r2, r3
 8002556:	d12c      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002566:	429a      	cmp	r2, r3
 8002568:	d123      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002574:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002576:	429a      	cmp	r2, r3
 8002578:	d11b      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d113      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002594:	085b      	lsrs	r3, r3, #1
 8002596:	3b01      	subs	r3, #1
 8002598:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d109      	bne.n	80025b2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a8:	085b      	lsrs	r3, r3, #1
 80025aa:	3b01      	subs	r3, #1
 80025ac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ae:	429a      	cmp	r2, r3
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	019f800c 	.word	0x019f800c
 80025c8:	feeefffc 	.word	0xfeeefffc

080025cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d101      	bne.n	80025e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e11e      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025e4:	4b91      	ldr	r3, [pc, #580]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 030f 	and.w	r3, r3, #15
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d910      	bls.n	8002614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025f2:	4b8e      	ldr	r3, [pc, #568]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 020f 	bic.w	r2, r3, #15
 80025fa:	498c      	ldr	r1, [pc, #560]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	4313      	orrs	r3, r2
 8002600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002602:	4b8a      	ldr	r3, [pc, #552]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	683a      	ldr	r2, [r7, #0]
 800260c:	429a      	cmp	r2, r3
 800260e:	d001      	beq.n	8002614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e106      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b00      	cmp	r3, #0
 800261e:	d073      	beq.n	8002708 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d129      	bne.n	800267c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002628:	4b81      	ldr	r3, [pc, #516]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0f4      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002638:	f000 f99e 	bl	8002978 <RCC_GetSysClockFreqFromPLLSource>
 800263c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4a7c      	ldr	r2, [pc, #496]	@ (8002834 <HAL_RCC_ClockConfig+0x268>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d93f      	bls.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002646:	4b7a      	ldr	r3, [pc, #488]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d009      	beq.n	8002666 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800265a:	2b00      	cmp	r3, #0
 800265c:	d033      	beq.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002662:	2b00      	cmp	r3, #0
 8002664:	d12f      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002666:	4b72      	ldr	r3, [pc, #456]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800266e:	4a70      	ldr	r2, [pc, #448]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002670:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002674:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002676:	2380      	movs	r3, #128	@ 0x80
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e024      	b.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d107      	bne.n	8002694 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002684:	4b6a      	ldr	r3, [pc, #424]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d109      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0c6      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002694:	4b66      	ldr	r3, [pc, #408]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e0be      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026a4:	f000 f8ce 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80026a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4a61      	ldr	r2, [pc, #388]	@ (8002834 <HAL_RCC_ClockConfig+0x268>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d909      	bls.n	80026c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ba:	4a5d      	ldr	r2, [pc, #372]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b5a      	ldr	r3, [pc, #360]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4957      	ldr	r1, [pc, #348]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026d8:	f7fe fff6 	bl	80016c8 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe fff2 	bl	80016c8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e095      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	2b00      	cmp	r3, #0
 8002712:	d023      	beq.n	800275c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0304 	and.w	r3, r3, #4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002720:	4b43      	ldr	r3, [pc, #268]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	4a42      	ldr	r2, [pc, #264]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002726:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800272a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0308 	and.w	r3, r3, #8
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002738:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002740:	4a3b      	ldr	r2, [pc, #236]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002742:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002746:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b39      	ldr	r3, [pc, #228]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4936      	ldr	r1, [pc, #216]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
 800275a:	e008      	b.n	800276e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	2b80      	cmp	r3, #128	@ 0x80
 8002760:	d105      	bne.n	800276e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002762:	4b33      	ldr	r3, [pc, #204]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	4a32      	ldr	r2, [pc, #200]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 8002768:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800276c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800276e:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d21d      	bcs.n	80027b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277c:	4b2b      	ldr	r3, [pc, #172]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f023 020f 	bic.w	r2, r3, #15
 8002784:	4929      	ldr	r1, [pc, #164]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	4313      	orrs	r3, r2
 800278a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800278c:	f7fe ff9c 	bl	80016c8 <HAL_GetTick>
 8002790:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002792:	e00a      	b.n	80027aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002794:	f7fe ff98 	bl	80016c8 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e03b      	b.n	8002822 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b20      	ldr	r3, [pc, #128]	@ (800282c <HAL_RCC_ClockConfig+0x260>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d1ed      	bne.n	8002794 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027c4:	4b1a      	ldr	r3, [pc, #104]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4917      	ldr	r1, [pc, #92]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0308 	and.w	r3, r3, #8
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d009      	beq.n	80027f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	490f      	ldr	r1, [pc, #60]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027f6:	f000 f825 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80027fa:	4602      	mov	r2, r0
 80027fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <HAL_RCC_ClockConfig+0x264>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	490c      	ldr	r1, [pc, #48]	@ (8002838 <HAL_RCC_ClockConfig+0x26c>)
 8002808:	5ccb      	ldrb	r3, [r1, r3]
 800280a:	f003 031f 	and.w	r3, r3, #31
 800280e:	fa22 f303 	lsr.w	r3, r2, r3
 8002812:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <HAL_RCC_ClockConfig+0x270>)
 8002814:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002816:	4b0a      	ldr	r3, [pc, #40]	@ (8002840 <HAL_RCC_ClockConfig+0x274>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f7fe ff08 	bl	8001630 <HAL_InitTick>
 8002820:	4603      	mov	r3, r0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40022000 	.word	0x40022000
 8002830:	40021000 	.word	0x40021000
 8002834:	04c4b400 	.word	0x04c4b400
 8002838:	08005980 	.word	0x08005980
 800283c:	20000000 	.word	0x20000000
 8002840:	20000004 	.word	0x20000004

08002844 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800284a:	4b2c      	ldr	r3, [pc, #176]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
 8002852:	2b04      	cmp	r3, #4
 8002854:	d102      	bne.n	800285c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002856:	4b2a      	ldr	r3, [pc, #168]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	e047      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800285c:	4b27      	ldr	r3, [pc, #156]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d102      	bne.n	800286e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002868:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800286a:	613b      	str	r3, [r7, #16]
 800286c:	e03e      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800286e:	4b23      	ldr	r3, [pc, #140]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 030c 	and.w	r3, r3, #12
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d136      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800287a:	4b20      	ldr	r3, [pc, #128]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002884:	4b1d      	ldr	r3, [pc, #116]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b03      	cmp	r3, #3
 8002896:	d10c      	bne.n	80028b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002898:	4a1a      	ldr	r2, [pc, #104]	@ (8002904 <HAL_RCC_GetSysClockFreq+0xc0>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a0:	4a16      	ldr	r2, [pc, #88]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a2:	68d2      	ldr	r2, [r2, #12]
 80028a4:	0a12      	lsrs	r2, r2, #8
 80028a6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028aa:	fb02 f303 	mul.w	r3, r2, r3
 80028ae:	617b      	str	r3, [r7, #20]
      break;
 80028b0:	e00c      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028b2:	4a13      	ldr	r2, [pc, #76]	@ (8002900 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ba:	4a10      	ldr	r2, [pc, #64]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028bc:	68d2      	ldr	r2, [r2, #12]
 80028be:	0a12      	lsrs	r2, r2, #8
 80028c0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028c4:	fb02 f303 	mul.w	r3, r2, r3
 80028c8:	617b      	str	r3, [r7, #20]
      break;
 80028ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	@ (80028fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	0e5b      	lsrs	r3, r3, #25
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	3301      	adds	r3, #1
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e001      	b.n	80028ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80028ec:	693b      	ldr	r3, [r7, #16]
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	00f42400 	.word	0x00f42400
 8002904:	007a1200 	.word	0x007a1200

08002908 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800290c:	4b03      	ldr	r3, [pc, #12]	@ (800291c <HAL_RCC_GetHCLKFreq+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000

08002920 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002924:	f7ff fff0 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002928:	4602      	mov	r2, r0
 800292a:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_RCC_GetPCLK1Freq+0x24>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	f003 0307 	and.w	r3, r3, #7
 8002934:	4904      	ldr	r1, [pc, #16]	@ (8002948 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002936:	5ccb      	ldrb	r3, [r1, r3]
 8002938:	f003 031f 	and.w	r3, r3, #31
 800293c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002940:	4618      	mov	r0, r3
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40021000 	.word	0x40021000
 8002948:	08005990 	.word	0x08005990

0800294c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002950:	f7ff ffda 	bl	8002908 <HAL_RCC_GetHCLKFreq>
 8002954:	4602      	mov	r2, r0
 8002956:	4b06      	ldr	r3, [pc, #24]	@ (8002970 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	0adb      	lsrs	r3, r3, #11
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	4904      	ldr	r1, [pc, #16]	@ (8002974 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002962:	5ccb      	ldrb	r3, [r1, r3]
 8002964:	f003 031f 	and.w	r3, r3, #31
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	bd80      	pop	{r7, pc}
 8002970:	40021000 	.word	0x40021000
 8002974:	08005990 	.word	0x08005990

08002978 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b087      	sub	sp, #28
 800297c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800297e:	4b1e      	ldr	r3, [pc, #120]	@ (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002988:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3301      	adds	r3, #1
 8002994:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d10c      	bne.n	80029b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800299c:	4a17      	ldr	r2, [pc, #92]	@ (80029fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	4a14      	ldr	r2, [pc, #80]	@ (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029a6:	68d2      	ldr	r2, [r2, #12]
 80029a8:	0a12      	lsrs	r2, r2, #8
 80029aa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	617b      	str	r3, [r7, #20]
    break;
 80029b4:	e00c      	b.n	80029d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029b6:	4a12      	ldr	r2, [pc, #72]	@ (8002a00 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80029be:	4a0e      	ldr	r2, [pc, #56]	@ (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029c0:	68d2      	ldr	r2, [r2, #12]
 80029c2:	0a12      	lsrs	r2, r2, #8
 80029c4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029c8:	fb02 f303 	mul.w	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
    break;
 80029ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	0e5b      	lsrs	r3, r3, #25
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	3301      	adds	r3, #1
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80029e0:	697a      	ldr	r2, [r7, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80029ea:	687b      	ldr	r3, [r7, #4]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	371c      	adds	r7, #28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40021000 	.word	0x40021000
 80029fc:	007a1200 	.word	0x007a1200
 8002a00:	00f42400 	.word	0x00f42400

08002a04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a10:	2300      	movs	r3, #0
 8002a12:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8098 	beq.w	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a22:	2300      	movs	r3, #0
 8002a24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a26:	4b43      	ldr	r3, [pc, #268]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d10d      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b40      	ldr	r3, [pc, #256]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	4a3f      	ldr	r2, [pc, #252]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a39      	ldr	r2, [pc, #228]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5a:	f7fe fe35 	bl	80016c8 <HAL_GetTick>
 8002a5e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a60:	e009      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a62:	f7fe fe31 	bl	80016c8 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d902      	bls.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	74fb      	strb	r3, [r7, #19]
        break;
 8002a74:	e005      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a76:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ef      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002a82:	7cfb      	ldrb	r3, [r7, #19]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d159      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a88:	4b2a      	ldr	r3, [pc, #168]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a92:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d01e      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d019      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002aa4:	4b23      	ldr	r3, [pc, #140]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002aae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ab0:	4b20      	ldr	r3, [pc, #128]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab6:	4a1f      	ldr	r2, [pc, #124]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ad0:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d016      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fdf1 	bl	80016c8 <HAL_GetTick>
 8002ae6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ae8:	e00b      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aea:	f7fe fded 	bl	80016c8 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d902      	bls.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	74fb      	strb	r3, [r7, #19]
            break;
 8002b00:	e006      	b.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ec      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002b10:	7cfb      	ldrb	r3, [r7, #19]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d10b      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b16:	4b07      	ldr	r3, [pc, #28]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b1c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b24:	4903      	ldr	r1, [pc, #12]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002b2c:	e008      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
 8002b32:	e005      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3c:	7cfb      	ldrb	r3, [r7, #19]
 8002b3e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b40:	7c7b      	ldrb	r3, [r7, #17]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d105      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b46:	4ba7      	ldr	r3, [pc, #668]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4a:	4aa6      	ldr	r2, [pc, #664]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b50:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00a      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b64:	f023 0203 	bic.w	r2, r3, #3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	499d      	ldr	r1, [pc, #628]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b80:	4b98      	ldr	r3, [pc, #608]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b86:	f023 020c 	bic.w	r2, r3, #12
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4995      	ldr	r1, [pc, #596]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00a      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ba2:	4b90      	ldr	r3, [pc, #576]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	498c      	ldr	r1, [pc, #560]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0308 	and.w	r3, r3, #8
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00a      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bc4:	4b87      	ldr	r3, [pc, #540]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bca:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	4984      	ldr	r1, [pc, #528]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0310 	and.w	r3, r3, #16
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00a      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002be6:	4b7f      	ldr	r3, [pc, #508]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002be8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
 8002bf4:	497b      	ldr	r1, [pc, #492]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0320 	and.w	r3, r3, #32
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00a      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c08:	4b76      	ldr	r3, [pc, #472]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c0e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	4973      	ldr	r1, [pc, #460]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2a:	4b6e      	ldr	r3, [pc, #440]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c30:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69db      	ldr	r3, [r3, #28]
 8002c38:	496a      	ldr	r1, [pc, #424]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00a      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c4c:	4b65      	ldr	r3, [pc, #404]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c52:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
 8002c5a:	4962      	ldr	r1, [pc, #392]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c6e:	4b5d      	ldr	r3, [pc, #372]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c74:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c7c:	4959      	ldr	r1, [pc, #356]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c90:	4b54      	ldr	r3, [pc, #336]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002c96:	f023 0203 	bic.w	r2, r3, #3
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9e:	4951      	ldr	r1, [pc, #324]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc0:	4948      	ldr	r1, [pc, #288]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d015      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cd4:	4b43      	ldr	r3, [pc, #268]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cda:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4940      	ldr	r1, [pc, #256]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4a3a      	ldr	r2, [pc, #232]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002cfe:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d0c:	4b35      	ldr	r3, [pc, #212]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d12:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	4932      	ldr	r1, [pc, #200]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d2a:	d105      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d2c:	4b2d      	ldr	r3, [pc, #180]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4a2c      	ldr	r2, [pc, #176]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d36:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d015      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d44:	4b27      	ldr	r3, [pc, #156]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	4924      	ldr	r1, [pc, #144]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d62:	d105      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d64:	4b1f      	ldr	r3, [pc, #124]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4a1e      	ldr	r2, [pc, #120]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d6e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d015      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d7c:	4b19      	ldr	r3, [pc, #100]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8a:	4916      	ldr	r1, [pc, #88]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d9a:	d105      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d9c:	4b11      	ldr	r3, [pc, #68]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4a10      	ldr	r2, [pc, #64]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002da6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d019      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002db4:	4b0b      	ldr	r3, [pc, #44]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc2:	4908      	ldr	r1, [pc, #32]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002dd2:	d109      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd4:	4b03      	ldr	r3, [pc, #12]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	4a02      	ldr	r2, [pc, #8]	@ (8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002dde:	60d3      	str	r3, [r2, #12]
 8002de0:	e002      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d015      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002df4:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfa:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e02:	4926      	ldr	r1, [pc, #152]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e12:	d105      	bne.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e14:	4b21      	ldr	r3, [pc, #132]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	4a20      	ldr	r2, [pc, #128]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d015      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e32:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e3a:	4918      	ldr	r1, [pc, #96]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4a:	d105      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e4c:	4b13      	ldr	r3, [pc, #76]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a12      	ldr	r2, [pc, #72]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e56:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d015      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002e64:	4b0d      	ldr	r3, [pc, #52]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e72:	490a      	ldr	r1, [pc, #40]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002e82:	d105      	bne.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e84:	4b05      	ldr	r3, [pc, #20]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002e8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e90:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000

08002ea0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e049      	b.n	8002f46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f7fe f870 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2202      	movs	r2, #2
 8002ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	4619      	mov	r1, r3
 8002ede:	4610      	mov	r0, r2
 8002ee0:	f000 fac0 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2201      	movs	r2, #1
 8002f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e049      	b.n	8002ff4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f841 	bl	8002ffc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	f000 fa69 	bl	8003464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800302a:	2302      	movs	r3, #2
 800302c:	e0ff      	b.n	800322e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b14      	cmp	r3, #20
 800303a:	f200 80f0 	bhi.w	800321e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800303e:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003099 	.word	0x08003099
 8003048:	0800321f 	.word	0x0800321f
 800304c:	0800321f 	.word	0x0800321f
 8003050:	0800321f 	.word	0x0800321f
 8003054:	080030d9 	.word	0x080030d9
 8003058:	0800321f 	.word	0x0800321f
 800305c:	0800321f 	.word	0x0800321f
 8003060:	0800321f 	.word	0x0800321f
 8003064:	0800311b 	.word	0x0800311b
 8003068:	0800321f 	.word	0x0800321f
 800306c:	0800321f 	.word	0x0800321f
 8003070:	0800321f 	.word	0x0800321f
 8003074:	0800315b 	.word	0x0800315b
 8003078:	0800321f 	.word	0x0800321f
 800307c:	0800321f 	.word	0x0800321f
 8003080:	0800321f 	.word	0x0800321f
 8003084:	0800319d 	.word	0x0800319d
 8003088:	0800321f 	.word	0x0800321f
 800308c:	0800321f 	.word	0x0800321f
 8003090:	0800321f 	.word	0x0800321f
 8003094:	080031dd 	.word	0x080031dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fa94 	bl	80035cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0208 	orr.w	r2, r2, #8
 80030b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6999      	ldr	r1, [r3, #24]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	619a      	str	r2, [r3, #24]
      break;
 80030d6:	e0a5      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fb0e 	bl	8003700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80030f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	021a      	lsls	r2, r3, #8
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	619a      	str	r2, [r3, #24]
      break;
 8003118:	e084      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fb81 	bl	8003828 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0208 	orr.w	r2, r2, #8
 8003134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0204 	bic.w	r2, r2, #4
 8003144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69d9      	ldr	r1, [r3, #28]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	61da      	str	r2, [r3, #28]
      break;
 8003158:	e064      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fbf3 	bl	800394c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69d9      	ldr	r1, [r3, #28]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	61da      	str	r2, [r3, #28]
      break;
 800319a:	e043      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68b9      	ldr	r1, [r7, #8]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f000 fc66 	bl	8003a74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0208 	orr.w	r2, r2, #8
 80031b6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0204 	bic.w	r2, r2, #4
 80031c6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80031da:	e023      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68b9      	ldr	r1, [r7, #8]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fcb0 	bl	8003b48 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031f6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003206:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	021a      	lsls	r2, r3, #8
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800321c:	e002      	b.n	8003224 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	75fb      	strb	r3, [r7, #23]
      break;
 8003222:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800322c:	7dfb      	ldrb	r3, [r7, #23]
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop

08003238 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d101      	bne.n	8003254 <HAL_TIM_ConfigClockSource+0x1c>
 8003250:	2302      	movs	r3, #2
 8003252:	e0f6      	b.n	8003442 <HAL_TIM_ConfigClockSource+0x20a>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2202      	movs	r2, #2
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003272:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800327e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a6f      	ldr	r2, [pc, #444]	@ (800344c <HAL_TIM_ConfigClockSource+0x214>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f000 80c1 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 8003294:	4a6d      	ldr	r2, [pc, #436]	@ (800344c <HAL_TIM_ConfigClockSource+0x214>)
 8003296:	4293      	cmp	r3, r2
 8003298:	f200 80c6 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 800329c:	4a6c      	ldr	r2, [pc, #432]	@ (8003450 <HAL_TIM_ConfigClockSource+0x218>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	f000 80b9 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 80032a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003450 <HAL_TIM_ConfigClockSource+0x218>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	f200 80be 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 80032ac:	4a69      	ldr	r2, [pc, #420]	@ (8003454 <HAL_TIM_ConfigClockSource+0x21c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	f000 80b1 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 80032b4:	4a67      	ldr	r2, [pc, #412]	@ (8003454 <HAL_TIM_ConfigClockSource+0x21c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	f200 80b6 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 80032bc:	4a66      	ldr	r2, [pc, #408]	@ (8003458 <HAL_TIM_ConfigClockSource+0x220>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	f000 80a9 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 80032c4:	4a64      	ldr	r2, [pc, #400]	@ (8003458 <HAL_TIM_ConfigClockSource+0x220>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	f200 80ae 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 80032cc:	4a63      	ldr	r2, [pc, #396]	@ (800345c <HAL_TIM_ConfigClockSource+0x224>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	f000 80a1 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 80032d4:	4a61      	ldr	r2, [pc, #388]	@ (800345c <HAL_TIM_ConfigClockSource+0x224>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	f200 80a6 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 80032dc:	4a60      	ldr	r2, [pc, #384]	@ (8003460 <HAL_TIM_ConfigClockSource+0x228>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	f000 8099 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 80032e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003460 <HAL_TIM_ConfigClockSource+0x228>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	f200 809e 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 80032ec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032f0:	f000 8091 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 80032f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80032f8:	f200 8096 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 80032fc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003300:	f000 8089 	beq.w	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 8003304:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003308:	f200 808e 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 800330c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003310:	d03e      	beq.n	8003390 <HAL_TIM_ConfigClockSource+0x158>
 8003312:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003316:	f200 8087 	bhi.w	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 800331a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800331e:	f000 8086 	beq.w	800342e <HAL_TIM_ConfigClockSource+0x1f6>
 8003322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003326:	d87f      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003328:	2b70      	cmp	r3, #112	@ 0x70
 800332a:	d01a      	beq.n	8003362 <HAL_TIM_ConfigClockSource+0x12a>
 800332c:	2b70      	cmp	r3, #112	@ 0x70
 800332e:	d87b      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003330:	2b60      	cmp	r3, #96	@ 0x60
 8003332:	d050      	beq.n	80033d6 <HAL_TIM_ConfigClockSource+0x19e>
 8003334:	2b60      	cmp	r3, #96	@ 0x60
 8003336:	d877      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003338:	2b50      	cmp	r3, #80	@ 0x50
 800333a:	d03c      	beq.n	80033b6 <HAL_TIM_ConfigClockSource+0x17e>
 800333c:	2b50      	cmp	r3, #80	@ 0x50
 800333e:	d873      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003340:	2b40      	cmp	r3, #64	@ 0x40
 8003342:	d058      	beq.n	80033f6 <HAL_TIM_ConfigClockSource+0x1be>
 8003344:	2b40      	cmp	r3, #64	@ 0x40
 8003346:	d86f      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003348:	2b30      	cmp	r3, #48	@ 0x30
 800334a:	d064      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 800334c:	2b30      	cmp	r3, #48	@ 0x30
 800334e:	d86b      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003350:	2b20      	cmp	r3, #32
 8003352:	d060      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 8003354:	2b20      	cmp	r3, #32
 8003356:	d867      	bhi.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
 8003358:	2b00      	cmp	r3, #0
 800335a:	d05c      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 800335c:	2b10      	cmp	r3, #16
 800335e:	d05a      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0x1de>
 8003360:	e062      	b.n	8003428 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003372:	f000 fcd1 	bl	8003d18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003384:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	609a      	str	r2, [r3, #8]
      break;
 800338e:	e04f      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033a0:	f000 fcba 	bl	8003d18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80033b2:	609a      	str	r2, [r3, #8]
      break;
 80033b4:	e03c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033c2:	461a      	mov	r2, r3
 80033c4:	f000 fc2c 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2150      	movs	r1, #80	@ 0x50
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 fc85 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 80033d4:	e02c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033e2:	461a      	mov	r2, r3
 80033e4:	f000 fc4b 	bl	8003c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2160      	movs	r1, #96	@ 0x60
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fc75 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 80033f4:	e01c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003402:	461a      	mov	r2, r3
 8003404:	f000 fc0c 	bl	8003c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2140      	movs	r1, #64	@ 0x40
 800340e:	4618      	mov	r0, r3
 8003410:	f000 fc65 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 8003414:	e00c      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f000 fc5c 	bl	8003cde <TIM_ITRx_SetConfig>
      break;
 8003426:	e003      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	73fb      	strb	r3, [r7, #15]
      break;
 800342c:	e000      	b.n	8003430 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800342e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003440:	7bfb      	ldrb	r3, [r7, #15]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	00100070 	.word	0x00100070
 8003450:	00100060 	.word	0x00100060
 8003454:	00100050 	.word	0x00100050
 8003458:	00100040 	.word	0x00100040
 800345c:	00100030 	.word	0x00100030
 8003460:	00100020 	.word	0x00100020

08003464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a4c      	ldr	r2, [pc, #304]	@ (80035a8 <TIM_Base_SetConfig+0x144>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d017      	beq.n	80034ac <TIM_Base_SetConfig+0x48>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003482:	d013      	beq.n	80034ac <TIM_Base_SetConfig+0x48>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a49      	ldr	r2, [pc, #292]	@ (80035ac <TIM_Base_SetConfig+0x148>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0x48>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a48      	ldr	r2, [pc, #288]	@ (80035b0 <TIM_Base_SetConfig+0x14c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0x48>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a47      	ldr	r2, [pc, #284]	@ (80035b4 <TIM_Base_SetConfig+0x150>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0x48>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a46      	ldr	r2, [pc, #280]	@ (80035b8 <TIM_Base_SetConfig+0x154>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0x48>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a45      	ldr	r2, [pc, #276]	@ (80035bc <TIM_Base_SetConfig+0x158>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d108      	bne.n	80034be <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a39      	ldr	r2, [pc, #228]	@ (80035a8 <TIM_Base_SetConfig+0x144>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d023      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034cc:	d01f      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a36      	ldr	r2, [pc, #216]	@ (80035ac <TIM_Base_SetConfig+0x148>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d01b      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a35      	ldr	r2, [pc, #212]	@ (80035b0 <TIM_Base_SetConfig+0x14c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d017      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a34      	ldr	r2, [pc, #208]	@ (80035b4 <TIM_Base_SetConfig+0x150>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d013      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a33      	ldr	r2, [pc, #204]	@ (80035b8 <TIM_Base_SetConfig+0x154>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d00f      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a33      	ldr	r2, [pc, #204]	@ (80035c0 <TIM_Base_SetConfig+0x15c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a32      	ldr	r2, [pc, #200]	@ (80035c4 <TIM_Base_SetConfig+0x160>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a31      	ldr	r2, [pc, #196]	@ (80035c8 <TIM_Base_SetConfig+0x164>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0xaa>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2c      	ldr	r2, [pc, #176]	@ (80035bc <TIM_Base_SetConfig+0x158>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a18      	ldr	r2, [pc, #96]	@ (80035a8 <TIM_Base_SetConfig+0x144>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <TIM_Base_SetConfig+0x110>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a1a      	ldr	r2, [pc, #104]	@ (80035b8 <TIM_Base_SetConfig+0x154>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d00f      	beq.n	8003574 <TIM_Base_SetConfig+0x110>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <TIM_Base_SetConfig+0x15c>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d00b      	beq.n	8003574 <TIM_Base_SetConfig+0x110>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a19      	ldr	r2, [pc, #100]	@ (80035c4 <TIM_Base_SetConfig+0x160>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d007      	beq.n	8003574 <TIM_Base_SetConfig+0x110>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a18      	ldr	r2, [pc, #96]	@ (80035c8 <TIM_Base_SetConfig+0x164>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d003      	beq.n	8003574 <TIM_Base_SetConfig+0x110>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a13      	ldr	r2, [pc, #76]	@ (80035bc <TIM_Base_SetConfig+0x158>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d103      	bne.n	800357c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0301 	and.w	r3, r3, #1
 800358a:	2b01      	cmp	r3, #1
 800358c:	d105      	bne.n	800359a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f023 0201 	bic.w	r2, r3, #1
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	611a      	str	r2, [r3, #16]
  }
}
 800359a:	bf00      	nop
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40013400 	.word	0x40013400
 80035bc:	40015000 	.word	0x40015000
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800

080035cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	f023 0201 	bic.w	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	f023 0302 	bic.w	r3, r3, #2
 8003618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	4313      	orrs	r3, r2
 8003622:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a30      	ldr	r2, [pc, #192]	@ (80036e8 <TIM_OC1_SetConfig+0x11c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <TIM_OC1_SetConfig+0x88>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a2f      	ldr	r2, [pc, #188]	@ (80036ec <TIM_OC1_SetConfig+0x120>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00f      	beq.n	8003654 <TIM_OC1_SetConfig+0x88>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a2e      	ldr	r2, [pc, #184]	@ (80036f0 <TIM_OC1_SetConfig+0x124>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00b      	beq.n	8003654 <TIM_OC1_SetConfig+0x88>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a2d      	ldr	r2, [pc, #180]	@ (80036f4 <TIM_OC1_SetConfig+0x128>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d007      	beq.n	8003654 <TIM_OC1_SetConfig+0x88>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a2c      	ldr	r2, [pc, #176]	@ (80036f8 <TIM_OC1_SetConfig+0x12c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d003      	beq.n	8003654 <TIM_OC1_SetConfig+0x88>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a2b      	ldr	r2, [pc, #172]	@ (80036fc <TIM_OC1_SetConfig+0x130>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d10c      	bne.n	800366e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	f023 0308 	bic.w	r3, r3, #8
 800365a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	697a      	ldr	r2, [r7, #20]
 8003662:	4313      	orrs	r3, r2
 8003664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	f023 0304 	bic.w	r3, r3, #4
 800366c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a1d      	ldr	r2, [pc, #116]	@ (80036e8 <TIM_OC1_SetConfig+0x11c>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <TIM_OC1_SetConfig+0xd2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a1c      	ldr	r2, [pc, #112]	@ (80036ec <TIM_OC1_SetConfig+0x120>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <TIM_OC1_SetConfig+0xd2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1b      	ldr	r2, [pc, #108]	@ (80036f0 <TIM_OC1_SetConfig+0x124>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <TIM_OC1_SetConfig+0xd2>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a1a      	ldr	r2, [pc, #104]	@ (80036f4 <TIM_OC1_SetConfig+0x128>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <TIM_OC1_SetConfig+0xd2>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <TIM_OC1_SetConfig+0x12c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <TIM_OC1_SetConfig+0xd2>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <TIM_OC1_SetConfig+0x130>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d111      	bne.n	80036c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	4313      	orrs	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	693a      	ldr	r2, [r7, #16]
 80036c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	621a      	str	r2, [r3, #32]
}
 80036dc:	bf00      	nop
 80036de:	371c      	adds	r7, #28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr
 80036e8:	40012c00 	.word	0x40012c00
 80036ec:	40013400 	.word	0x40013400
 80036f0:	40014000 	.word	0x40014000
 80036f4:	40014400 	.word	0x40014400
 80036f8:	40014800 	.word	0x40014800
 80036fc:	40015000 	.word	0x40015000

08003700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003700:	b480      	push	{r7}
 8003702:	b087      	sub	sp, #28
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	f023 0210 	bic.w	r2, r3, #16
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800372e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800373a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	f023 0320 	bic.w	r3, r3, #32
 800374e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	4313      	orrs	r3, r2
 800375a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a2c      	ldr	r2, [pc, #176]	@ (8003810 <TIM_OC2_SetConfig+0x110>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d007      	beq.n	8003774 <TIM_OC2_SetConfig+0x74>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a2b      	ldr	r2, [pc, #172]	@ (8003814 <TIM_OC2_SetConfig+0x114>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d003      	beq.n	8003774 <TIM_OC2_SetConfig+0x74>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a2a      	ldr	r2, [pc, #168]	@ (8003818 <TIM_OC2_SetConfig+0x118>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d10d      	bne.n	8003790 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800377a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800378e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a1f      	ldr	r2, [pc, #124]	@ (8003810 <TIM_OC2_SetConfig+0x110>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d013      	beq.n	80037c0 <TIM_OC2_SetConfig+0xc0>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a1e      	ldr	r2, [pc, #120]	@ (8003814 <TIM_OC2_SetConfig+0x114>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d00f      	beq.n	80037c0 <TIM_OC2_SetConfig+0xc0>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1e      	ldr	r2, [pc, #120]	@ (800381c <TIM_OC2_SetConfig+0x11c>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00b      	beq.n	80037c0 <TIM_OC2_SetConfig+0xc0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003820 <TIM_OC2_SetConfig+0x120>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d007      	beq.n	80037c0 <TIM_OC2_SetConfig+0xc0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003824 <TIM_OC2_SetConfig+0x124>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d003      	beq.n	80037c0 <TIM_OC2_SetConfig+0xc0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a17      	ldr	r2, [pc, #92]	@ (8003818 <TIM_OC2_SetConfig+0x118>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d113      	bne.n	80037e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	621a      	str	r2, [r3, #32]
}
 8003802:	bf00      	nop
 8003804:	371c      	adds	r7, #28
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40013400 	.word	0x40013400
 8003818:	40015000 	.word	0x40015000
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003856:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0303 	bic.w	r3, r3, #3
 8003862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4313      	orrs	r3, r2
 800386c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	021b      	lsls	r3, r3, #8
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4313      	orrs	r3, r2
 8003880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a2b      	ldr	r2, [pc, #172]	@ (8003934 <TIM_OC3_SetConfig+0x10c>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_OC3_SetConfig+0x72>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a2a      	ldr	r2, [pc, #168]	@ (8003938 <TIM_OC3_SetConfig+0x110>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC3_SetConfig+0x72>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a29      	ldr	r2, [pc, #164]	@ (800393c <TIM_OC3_SetConfig+0x114>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10d      	bne.n	80038b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	021b      	lsls	r3, r3, #8
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ae:	697b      	ldr	r3, [r7, #20]
 80038b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80038b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <TIM_OC3_SetConfig+0x10c>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <TIM_OC3_SetConfig+0xbe>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <TIM_OC3_SetConfig+0x110>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00f      	beq.n	80038e6 <TIM_OC3_SetConfig+0xbe>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003940 <TIM_OC3_SetConfig+0x118>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00b      	beq.n	80038e6 <TIM_OC3_SetConfig+0xbe>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a1c      	ldr	r2, [pc, #112]	@ (8003944 <TIM_OC3_SetConfig+0x11c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <TIM_OC3_SetConfig+0xbe>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003948 <TIM_OC3_SetConfig+0x120>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d003      	beq.n	80038e6 <TIM_OC3_SetConfig+0xbe>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a16      	ldr	r2, [pc, #88]	@ (800393c <TIM_OC3_SetConfig+0x114>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d113      	bne.n	800390e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	621a      	str	r2, [r3, #32]
}
 8003928:	bf00      	nop
 800392a:	371c      	adds	r7, #28
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012c00 	.word	0x40012c00
 8003938:	40013400 	.word	0x40013400
 800393c:	40015000 	.word	0x40015000
 8003940:	40014000 	.word	0x40014000
 8003944:	40014400 	.word	0x40014400
 8003948:	40014800 	.word	0x40014800

0800394c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800394c:	b480      	push	{r7}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	69db      	ldr	r3, [r3, #28]
 8003972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800397a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	021b      	lsls	r3, r3, #8
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800399a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	031b      	lsls	r3, r3, #12
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	4a2c      	ldr	r2, [pc, #176]	@ (8003a5c <TIM_OC4_SetConfig+0x110>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d007      	beq.n	80039c0 <TIM_OC4_SetConfig+0x74>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003a60 <TIM_OC4_SetConfig+0x114>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d003      	beq.n	80039c0 <TIM_OC4_SetConfig+0x74>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003a64 <TIM_OC4_SetConfig+0x118>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d10d      	bne.n	80039dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80039c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	031b      	lsls	r3, r3, #12
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	4313      	orrs	r3, r2
 80039d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1f      	ldr	r2, [pc, #124]	@ (8003a5c <TIM_OC4_SetConfig+0x110>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d013      	beq.n	8003a0c <TIM_OC4_SetConfig+0xc0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003a60 <TIM_OC4_SetConfig+0x114>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00f      	beq.n	8003a0c <TIM_OC4_SetConfig+0xc0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003a68 <TIM_OC4_SetConfig+0x11c>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d00b      	beq.n	8003a0c <TIM_OC4_SetConfig+0xc0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a1d      	ldr	r2, [pc, #116]	@ (8003a6c <TIM_OC4_SetConfig+0x120>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d007      	beq.n	8003a0c <TIM_OC4_SetConfig+0xc0>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003a70 <TIM_OC4_SetConfig+0x124>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_OC4_SetConfig+0xc0>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <TIM_OC4_SetConfig+0x118>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d113      	bne.n	8003a34 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a12:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a1a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	695b      	ldr	r3, [r3, #20]
 8003a20:	019b      	lsls	r3, r3, #6
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	019b      	lsls	r3, r3, #6
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68fa      	ldr	r2, [r7, #12]
 8003a3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
 8003a5a:	bf00      	nop
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40013400 	.word	0x40013400
 8003a64:	40015000 	.word	0x40015000
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800

08003a74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a1b      	ldr	r3, [r3, #32]
 8003a88:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ab8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	041b      	lsls	r3, r3, #16
 8003ac0:	693a      	ldr	r2, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <TIM_OC5_SetConfig+0xbc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <TIM_OC5_SetConfig+0x82>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a18      	ldr	r2, [pc, #96]	@ (8003b34 <TIM_OC5_SetConfig+0xc0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00f      	beq.n	8003af6 <TIM_OC5_SetConfig+0x82>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <TIM_OC5_SetConfig+0xc4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <TIM_OC5_SetConfig+0x82>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	@ (8003b3c <TIM_OC5_SetConfig+0xc8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d007      	beq.n	8003af6 <TIM_OC5_SetConfig+0x82>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	@ (8003b40 <TIM_OC5_SetConfig+0xcc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d003      	beq.n	8003af6 <TIM_OC5_SetConfig+0x82>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <TIM_OC5_SetConfig+0xd0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d109      	bne.n	8003b0a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003afc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	021b      	lsls	r3, r3, #8
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	40012c00 	.word	0x40012c00
 8003b34:	40013400 	.word	0x40013400
 8003b38:	40014000 	.word	0x40014000
 8003b3c:	40014400 	.word	0x40014400
 8003b40:	40014800 	.word	0x40014800
 8003b44:	40015000 	.word	0x40015000

08003b48 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b76:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	021b      	lsls	r3, r3, #8
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	051b      	lsls	r3, r3, #20
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a1a      	ldr	r2, [pc, #104]	@ (8003c08 <TIM_OC6_SetConfig+0xc0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <TIM_OC6_SetConfig+0x84>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a19      	ldr	r2, [pc, #100]	@ (8003c0c <TIM_OC6_SetConfig+0xc4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00f      	beq.n	8003bcc <TIM_OC6_SetConfig+0x84>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a18      	ldr	r2, [pc, #96]	@ (8003c10 <TIM_OC6_SetConfig+0xc8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <TIM_OC6_SetConfig+0x84>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a17      	ldr	r2, [pc, #92]	@ (8003c14 <TIM_OC6_SetConfig+0xcc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d007      	beq.n	8003bcc <TIM_OC6_SetConfig+0x84>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a16      	ldr	r2, [pc, #88]	@ (8003c18 <TIM_OC6_SetConfig+0xd0>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d003      	beq.n	8003bcc <TIM_OC6_SetConfig+0x84>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a15      	ldr	r2, [pc, #84]	@ (8003c1c <TIM_OC6_SetConfig+0xd4>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d109      	bne.n	8003be0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bd2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	029b      	lsls	r3, r3, #10
 8003bda:	697a      	ldr	r2, [r7, #20]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr
 8003c06:	bf00      	nop
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40013400 	.word	0x40013400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40014400 	.word	0x40014400
 8003c18:	40014800 	.word	0x40014800
 8003c1c:	40015000 	.word	0x40015000

08003c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6a1b      	ldr	r3, [r3, #32]
 8003c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1b      	ldr	r3, [r3, #32]
 8003c36:	f023 0201 	bic.w	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f023 030a 	bic.w	r3, r3, #10
 8003c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b087      	sub	sp, #28
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f023 0210 	bic.w	r2, r3, #16
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ca8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003cba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	621a      	str	r2, [r3, #32]
}
 8003cd2:	bf00      	nop
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr

08003cde <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cde:	b480      	push	{r7}
 8003ce0:	b085      	sub	sp, #20
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
 8003ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f043 0307 	orr.w	r3, r3, #7
 8003d04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	609a      	str	r2, [r3, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	3714      	adds	r7, #20
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr

08003d18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
 8003d24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003d32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	021a      	lsls	r2, r3, #8
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	609a      	str	r2, [r3, #8]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e074      	b.n	8003e5a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a34      	ldr	r2, [pc, #208]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a33      	ldr	r2, [pc, #204]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d004      	beq.n	8003dae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a31      	ldr	r2, [pc, #196]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d108      	bne.n	8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003db4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	68fa      	ldr	r2, [r7, #12]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8003dc6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a21      	ldr	r2, [pc, #132]	@ (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d022      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d01d      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a1f      	ldr	r2, [pc, #124]	@ (8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d018      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1d      	ldr	r2, [pc, #116]	@ (8003e78 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d013      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1c      	ldr	r2, [pc, #112]	@ (8003e7c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00e      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a15      	ldr	r2, [pc, #84]	@ (8003e6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d009      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a18      	ldr	r2, [pc, #96]	@ (8003e80 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d004      	beq.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d10c      	bne.n	8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	68ba      	ldr	r2, [r7, #8]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3714      	adds	r7, #20
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40015000 	.word	0x40015000
 8003e74:	40000400 	.word	0x40000400
 8003e78:	40000800 	.word	0x40000800
 8003e7c:	40000c00 	.word	0x40000c00
 8003e80:	40014000 	.word	0x40014000

08003e84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d101      	bne.n	8003ea0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	e078      	b.n	8003f92 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	041b      	lsls	r3, r3, #16
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8003fa0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a19      	ldr	r2, [pc, #100]	@ (8003fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d11c      	bne.n	8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f50:	051b      	lsls	r3, r3, #20
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3714      	adds	r7, #20
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40013400 	.word	0x40013400
 8003fa8:	40015000 	.word	0x40015000

08003fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e042      	b.n	8004044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d106      	bne.n	8003fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fd f8c3 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2224      	movs	r2, #36	@ 0x24
 8003fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 fcd2 	bl	80049a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f000 f9d3 	bl	80043a8 <UART_SetConfig>
 8004002:	4603      	mov	r3, r0
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e01b      	b.n	8004044 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800401a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800402a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 fd51 	bl	8004ae4 <UART_CheckIdleState>
 8004042:	4603      	mov	r3, r0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e04a      	b.n	80040f4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fd f873 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2224      	movs	r2, #36	@ 0x24
 800407a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 0201 	bic.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004092:	2b00      	cmp	r3, #0
 8004094:	d002      	beq.n	800409c <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fc82 	bl	80049a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f983 	bl	80043a8 <UART_SetConfig>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d101      	bne.n	80040ac <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e023      	b.n	80040f4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685a      	ldr	r2, [r3, #4]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689a      	ldr	r2, [r3, #8]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80040ca:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0208 	orr.w	r2, r2, #8
 80040da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0201 	orr.w	r2, r2, #1
 80040ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f000 fcf9 	bl	8004ae4 <UART_CheckIdleState>
 80040f2:	4603      	mov	r3, r0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08a      	sub	sp, #40	@ 0x28
 8004100:	af02      	add	r7, sp, #8
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	603b      	str	r3, [r7, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004112:	2b20      	cmp	r3, #32
 8004114:	d17b      	bne.n	800420e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_UART_Transmit+0x26>
 800411c:	88fb      	ldrh	r3, [r7, #6]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e074      	b.n	8004210 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2221      	movs	r2, #33	@ 0x21
 8004132:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004136:	f7fd fac7 	bl	80016c8 <HAL_GetTick>
 800413a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	88fa      	ldrh	r2, [r7, #6]
 8004148:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004154:	d108      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d104      	bne.n	8004168 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800415e:	2300      	movs	r3, #0
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	61bb      	str	r3, [r7, #24]
 8004166:	e003      	b.n	8004170 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004170:	e030      	b.n	80041d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	9300      	str	r3, [sp, #0]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2200      	movs	r2, #0
 800417a:	2180      	movs	r1, #128	@ 0x80
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fd5b 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d005      	beq.n	8004194 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03d      	b.n	8004210 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d10b      	bne.n	80041b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	3302      	adds	r3, #2
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	e007      	b.n	80041c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	781a      	ldrb	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	3301      	adds	r3, #1
 80041c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80041da:	b29b      	uxth	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1c8      	bne.n	8004172 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	9300      	str	r3, [sp, #0]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2200      	movs	r2, #0
 80041e8:	2140      	movs	r1, #64	@ 0x40
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 fd24 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d005      	beq.n	8004202 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2220      	movs	r2, #32
 80041fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e006      	b.n	8004210 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3720      	adds	r7, #32
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08a      	sub	sp, #40	@ 0x28
 800421c:	af02      	add	r7, sp, #8
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	603b      	str	r3, [r7, #0]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800422e:	2b20      	cmp	r3, #32
 8004230:	f040 80b5 	bne.w	800439e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d002      	beq.n	8004240 <HAL_UART_Receive+0x28>
 800423a:	88fb      	ldrh	r3, [r7, #6]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e0ad      	b.n	80043a0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2222      	movs	r2, #34	@ 0x22
 8004250:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800425a:	f7fd fa35 	bl	80016c8 <HAL_GetTick>
 800425e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	88fa      	ldrh	r2, [r7, #6]
 8004264:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	88fa      	ldrh	r2, [r7, #6]
 800426c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004278:	d10e      	bne.n	8004298 <HAL_UART_Receive+0x80>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d105      	bne.n	800428e <HAL_UART_Receive+0x76>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004288:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800428c:	e02d      	b.n	80042ea <HAL_UART_Receive+0xd2>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	22ff      	movs	r2, #255	@ 0xff
 8004292:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004296:	e028      	b.n	80042ea <HAL_UART_Receive+0xd2>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10d      	bne.n	80042bc <HAL_UART_Receive+0xa4>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d104      	bne.n	80042b2 <HAL_UART_Receive+0x9a>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	22ff      	movs	r2, #255	@ 0xff
 80042ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042b0:	e01b      	b.n	80042ea <HAL_UART_Receive+0xd2>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	227f      	movs	r2, #127	@ 0x7f
 80042b6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042ba:	e016      	b.n	80042ea <HAL_UART_Receive+0xd2>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042c4:	d10d      	bne.n	80042e2 <HAL_UART_Receive+0xca>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_UART_Receive+0xc0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	227f      	movs	r2, #127	@ 0x7f
 80042d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042d6:	e008      	b.n	80042ea <HAL_UART_Receive+0xd2>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	223f      	movs	r2, #63	@ 0x3f
 80042dc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042e0:	e003      	b.n	80042ea <HAL_UART_Receive+0xd2>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80042f0:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d108      	bne.n	800430e <HAL_UART_Receive+0xf6>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8004304:	2300      	movs	r3, #0
 8004306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	61bb      	str	r3, [r7, #24]
 800430c:	e003      	b.n	8004316 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004316:	e036      	b.n	8004386 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	9300      	str	r3, [sp, #0]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	2200      	movs	r2, #0
 8004320:	2120      	movs	r1, #32
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fc88 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d005      	beq.n	800433a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e032      	b.n	80043a0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d10c      	bne.n	800435a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004346:	b29a      	uxth	r2, r3
 8004348:	8a7b      	ldrh	r3, [r7, #18]
 800434a:	4013      	ands	r3, r2
 800434c:	b29a      	uxth	r2, r3
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	3302      	adds	r3, #2
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e00c      	b.n	8004374 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	b2da      	uxtb	r2, r3
 8004362:	8a7b      	ldrh	r3, [r7, #18]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	4013      	ands	r3, r2
 8004368:	b2da      	uxtb	r2, r3
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	3301      	adds	r3, #1
 8004372:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800438c:	b29b      	uxth	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1c2      	bne.n	8004318 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800439a:	2300      	movs	r3, #0
 800439c:	e000      	b.n	80043a0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800439e:	2302      	movs	r3, #2
  }
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3720      	adds	r7, #32
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043ac:	b08c      	sub	sp, #48	@ 0x30
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	691b      	ldr	r3, [r3, #16]
 80043c0:	431a      	orrs	r2, r3
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	4baa      	ldr	r3, [pc, #680]	@ (8004680 <UART_SetConfig+0x2d8>)
 80043d8:	4013      	ands	r3, r2
 80043da:	697a      	ldr	r2, [r7, #20]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	68da      	ldr	r2, [r3, #12]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a9f      	ldr	r2, [pc, #636]	@ (8004684 <UART_SetConfig+0x2dc>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004410:	4313      	orrs	r3, r2
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800441e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004422:	697a      	ldr	r2, [r7, #20]
 8004424:	6812      	ldr	r2, [r2, #0]
 8004426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004428:	430b      	orrs	r3, r1
 800442a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004432:	f023 010f 	bic.w	r1, r3, #15
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a90      	ldr	r2, [pc, #576]	@ (8004688 <UART_SetConfig+0x2e0>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d125      	bne.n	8004498 <UART_SetConfig+0xf0>
 800444c:	4b8f      	ldr	r3, [pc, #572]	@ (800468c <UART_SetConfig+0x2e4>)
 800444e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b03      	cmp	r3, #3
 8004458:	d81a      	bhi.n	8004490 <UART_SetConfig+0xe8>
 800445a:	a201      	add	r2, pc, #4	@ (adr r2, 8004460 <UART_SetConfig+0xb8>)
 800445c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004460:	08004471 	.word	0x08004471
 8004464:	08004481 	.word	0x08004481
 8004468:	08004479 	.word	0x08004479
 800446c:	08004489 	.word	0x08004489
 8004470:	2301      	movs	r3, #1
 8004472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004476:	e116      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004478:	2302      	movs	r3, #2
 800447a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800447e:	e112      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004480:	2304      	movs	r3, #4
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004486:	e10e      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004488:	2308      	movs	r3, #8
 800448a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800448e:	e10a      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004490:	2310      	movs	r3, #16
 8004492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004496:	e106      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a7c      	ldr	r2, [pc, #496]	@ (8004690 <UART_SetConfig+0x2e8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d138      	bne.n	8004514 <UART_SetConfig+0x16c>
 80044a2:	4b7a      	ldr	r3, [pc, #488]	@ (800468c <UART_SetConfig+0x2e4>)
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a8:	f003 030c 	and.w	r3, r3, #12
 80044ac:	2b0c      	cmp	r3, #12
 80044ae:	d82d      	bhi.n	800450c <UART_SetConfig+0x164>
 80044b0:	a201      	add	r2, pc, #4	@ (adr r2, 80044b8 <UART_SetConfig+0x110>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044ed 	.word	0x080044ed
 80044bc:	0800450d 	.word	0x0800450d
 80044c0:	0800450d 	.word	0x0800450d
 80044c4:	0800450d 	.word	0x0800450d
 80044c8:	080044fd 	.word	0x080044fd
 80044cc:	0800450d 	.word	0x0800450d
 80044d0:	0800450d 	.word	0x0800450d
 80044d4:	0800450d 	.word	0x0800450d
 80044d8:	080044f5 	.word	0x080044f5
 80044dc:	0800450d 	.word	0x0800450d
 80044e0:	0800450d 	.word	0x0800450d
 80044e4:	0800450d 	.word	0x0800450d
 80044e8:	08004505 	.word	0x08004505
 80044ec:	2300      	movs	r3, #0
 80044ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044f2:	e0d8      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80044f4:	2302      	movs	r3, #2
 80044f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80044fa:	e0d4      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80044fc:	2304      	movs	r3, #4
 80044fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004502:	e0d0      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004504:	2308      	movs	r3, #8
 8004506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800450a:	e0cc      	b.n	80046a6 <UART_SetConfig+0x2fe>
 800450c:	2310      	movs	r3, #16
 800450e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004512:	e0c8      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5e      	ldr	r2, [pc, #376]	@ (8004694 <UART_SetConfig+0x2ec>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d125      	bne.n	800456a <UART_SetConfig+0x1c2>
 800451e:	4b5b      	ldr	r3, [pc, #364]	@ (800468c <UART_SetConfig+0x2e4>)
 8004520:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004524:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004528:	2b30      	cmp	r3, #48	@ 0x30
 800452a:	d016      	beq.n	800455a <UART_SetConfig+0x1b2>
 800452c:	2b30      	cmp	r3, #48	@ 0x30
 800452e:	d818      	bhi.n	8004562 <UART_SetConfig+0x1ba>
 8004530:	2b20      	cmp	r3, #32
 8004532:	d00a      	beq.n	800454a <UART_SetConfig+0x1a2>
 8004534:	2b20      	cmp	r3, #32
 8004536:	d814      	bhi.n	8004562 <UART_SetConfig+0x1ba>
 8004538:	2b00      	cmp	r3, #0
 800453a:	d002      	beq.n	8004542 <UART_SetConfig+0x19a>
 800453c:	2b10      	cmp	r3, #16
 800453e:	d008      	beq.n	8004552 <UART_SetConfig+0x1aa>
 8004540:	e00f      	b.n	8004562 <UART_SetConfig+0x1ba>
 8004542:	2300      	movs	r3, #0
 8004544:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004548:	e0ad      	b.n	80046a6 <UART_SetConfig+0x2fe>
 800454a:	2302      	movs	r3, #2
 800454c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004550:	e0a9      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004552:	2304      	movs	r3, #4
 8004554:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004558:	e0a5      	b.n	80046a6 <UART_SetConfig+0x2fe>
 800455a:	2308      	movs	r3, #8
 800455c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004560:	e0a1      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004562:	2310      	movs	r3, #16
 8004564:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004568:	e09d      	b.n	80046a6 <UART_SetConfig+0x2fe>
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a4a      	ldr	r2, [pc, #296]	@ (8004698 <UART_SetConfig+0x2f0>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d125      	bne.n	80045c0 <UART_SetConfig+0x218>
 8004574:	4b45      	ldr	r3, [pc, #276]	@ (800468c <UART_SetConfig+0x2e4>)
 8004576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800457e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004580:	d016      	beq.n	80045b0 <UART_SetConfig+0x208>
 8004582:	2bc0      	cmp	r3, #192	@ 0xc0
 8004584:	d818      	bhi.n	80045b8 <UART_SetConfig+0x210>
 8004586:	2b80      	cmp	r3, #128	@ 0x80
 8004588:	d00a      	beq.n	80045a0 <UART_SetConfig+0x1f8>
 800458a:	2b80      	cmp	r3, #128	@ 0x80
 800458c:	d814      	bhi.n	80045b8 <UART_SetConfig+0x210>
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <UART_SetConfig+0x1f0>
 8004592:	2b40      	cmp	r3, #64	@ 0x40
 8004594:	d008      	beq.n	80045a8 <UART_SetConfig+0x200>
 8004596:	e00f      	b.n	80045b8 <UART_SetConfig+0x210>
 8004598:	2300      	movs	r3, #0
 800459a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800459e:	e082      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80045a0:	2302      	movs	r3, #2
 80045a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045a6:	e07e      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80045a8:	2304      	movs	r3, #4
 80045aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045ae:	e07a      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80045b0:	2308      	movs	r3, #8
 80045b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045b6:	e076      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80045b8:	2310      	movs	r3, #16
 80045ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045be:	e072      	b.n	80046a6 <UART_SetConfig+0x2fe>
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a35      	ldr	r2, [pc, #212]	@ (800469c <UART_SetConfig+0x2f4>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d12a      	bne.n	8004620 <UART_SetConfig+0x278>
 80045ca:	4b30      	ldr	r3, [pc, #192]	@ (800468c <UART_SetConfig+0x2e4>)
 80045cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045d8:	d01a      	beq.n	8004610 <UART_SetConfig+0x268>
 80045da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045de:	d81b      	bhi.n	8004618 <UART_SetConfig+0x270>
 80045e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045e4:	d00c      	beq.n	8004600 <UART_SetConfig+0x258>
 80045e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ea:	d815      	bhi.n	8004618 <UART_SetConfig+0x270>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <UART_SetConfig+0x250>
 80045f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045f4:	d008      	beq.n	8004608 <UART_SetConfig+0x260>
 80045f6:	e00f      	b.n	8004618 <UART_SetConfig+0x270>
 80045f8:	2300      	movs	r3, #0
 80045fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80045fe:	e052      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004600:	2302      	movs	r3, #2
 8004602:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004606:	e04e      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004608:	2304      	movs	r3, #4
 800460a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800460e:	e04a      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004610:	2308      	movs	r3, #8
 8004612:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004616:	e046      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004618:	2310      	movs	r3, #16
 800461a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800461e:	e042      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a17      	ldr	r2, [pc, #92]	@ (8004684 <UART_SetConfig+0x2dc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d13a      	bne.n	80046a0 <UART_SetConfig+0x2f8>
 800462a:	4b18      	ldr	r3, [pc, #96]	@ (800468c <UART_SetConfig+0x2e4>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004630:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004634:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004638:	d01a      	beq.n	8004670 <UART_SetConfig+0x2c8>
 800463a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800463e:	d81b      	bhi.n	8004678 <UART_SetConfig+0x2d0>
 8004640:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004644:	d00c      	beq.n	8004660 <UART_SetConfig+0x2b8>
 8004646:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800464a:	d815      	bhi.n	8004678 <UART_SetConfig+0x2d0>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d003      	beq.n	8004658 <UART_SetConfig+0x2b0>
 8004650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004654:	d008      	beq.n	8004668 <UART_SetConfig+0x2c0>
 8004656:	e00f      	b.n	8004678 <UART_SetConfig+0x2d0>
 8004658:	2300      	movs	r3, #0
 800465a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800465e:	e022      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004660:	2302      	movs	r3, #2
 8004662:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004666:	e01e      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004668:	2304      	movs	r3, #4
 800466a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800466e:	e01a      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004670:	2308      	movs	r3, #8
 8004672:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004676:	e016      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004678:	2310      	movs	r3, #16
 800467a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800467e:	e012      	b.n	80046a6 <UART_SetConfig+0x2fe>
 8004680:	cfff69f3 	.word	0xcfff69f3
 8004684:	40008000 	.word	0x40008000
 8004688:	40013800 	.word	0x40013800
 800468c:	40021000 	.word	0x40021000
 8004690:	40004400 	.word	0x40004400
 8004694:	40004800 	.word	0x40004800
 8004698:	40004c00 	.word	0x40004c00
 800469c:	40005000 	.word	0x40005000
 80046a0:	2310      	movs	r3, #16
 80046a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4aae      	ldr	r2, [pc, #696]	@ (8004964 <UART_SetConfig+0x5bc>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	f040 8097 	bne.w	80047e0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80046b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d823      	bhi.n	8004702 <UART_SetConfig+0x35a>
 80046ba:	a201      	add	r2, pc, #4	@ (adr r2, 80046c0 <UART_SetConfig+0x318>)
 80046bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c0:	080046e5 	.word	0x080046e5
 80046c4:	08004703 	.word	0x08004703
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	08004703 	.word	0x08004703
 80046d0:	080046f3 	.word	0x080046f3
 80046d4:	08004703 	.word	0x08004703
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004703 	.word	0x08004703
 80046e0:	080046fb 	.word	0x080046fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e4:	f7fe f91c 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 80046e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046ea:	e010      	b.n	800470e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004968 <UART_SetConfig+0x5c0>)
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80046f0:	e00d      	b.n	800470e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f2:	f7fe f8a7 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 80046f6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80046f8:	e009      	b.n	800470e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004700:	e005      	b.n	800470e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800470c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	2b00      	cmp	r3, #0
 8004712:	f000 8130 	beq.w	8004976 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	4a94      	ldr	r2, [pc, #592]	@ (800496c <UART_SetConfig+0x5c4>)
 800471c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004720:	461a      	mov	r2, r3
 8004722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004724:	fbb3 f3f2 	udiv	r3, r3, r2
 8004728:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	005b      	lsls	r3, r3, #1
 8004732:	4413      	add	r3, r2
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	429a      	cmp	r2, r3
 8004738:	d305      	bcc.n	8004746 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	429a      	cmp	r2, r3
 8004744:	d903      	bls.n	800474e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800474c:	e113      	b.n	8004976 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	2200      	movs	r2, #0
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	60fa      	str	r2, [r7, #12]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475a:	4a84      	ldr	r2, [pc, #528]	@ (800496c <UART_SetConfig+0x5c4>)
 800475c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004760:	b29b      	uxth	r3, r3
 8004762:	2200      	movs	r2, #0
 8004764:	603b      	str	r3, [r7, #0]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800476c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004770:	f7fb fd52 	bl	8000218 <__aeabi_uldivmod>
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4610      	mov	r0, r2
 800477a:	4619      	mov	r1, r3
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	020b      	lsls	r3, r1, #8
 8004786:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800478a:	0202      	lsls	r2, r0, #8
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	6849      	ldr	r1, [r1, #4]
 8004790:	0849      	lsrs	r1, r1, #1
 8004792:	2000      	movs	r0, #0
 8004794:	460c      	mov	r4, r1
 8004796:	4605      	mov	r5, r0
 8004798:	eb12 0804 	adds.w	r8, r2, r4
 800479c:	eb43 0905 	adc.w	r9, r3, r5
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	469a      	mov	sl, r3
 80047a8:	4693      	mov	fp, r2
 80047aa:	4652      	mov	r2, sl
 80047ac:	465b      	mov	r3, fp
 80047ae:	4640      	mov	r0, r8
 80047b0:	4649      	mov	r1, r9
 80047b2:	f7fb fd31 	bl	8000218 <__aeabi_uldivmod>
 80047b6:	4602      	mov	r2, r0
 80047b8:	460b      	mov	r3, r1
 80047ba:	4613      	mov	r3, r2
 80047bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80047c4:	d308      	bcc.n	80047d8 <UART_SetConfig+0x430>
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047cc:	d204      	bcs.n	80047d8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a3a      	ldr	r2, [r7, #32]
 80047d4:	60da      	str	r2, [r3, #12]
 80047d6:	e0ce      	b.n	8004976 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80047de:	e0ca      	b.n	8004976 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047e8:	d166      	bne.n	80048b8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80047ea:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d827      	bhi.n	8004842 <UART_SetConfig+0x49a>
 80047f2:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <UART_SetConfig+0x450>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	08004825 	.word	0x08004825
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004843 	.word	0x08004843
 8004808:	08004833 	.word	0x08004833
 800480c:	08004843 	.word	0x08004843
 8004810:	08004843 	.word	0x08004843
 8004814:	08004843 	.word	0x08004843
 8004818:	0800483b 	.word	0x0800483b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7fe f880 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 8004820:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004822:	e014      	b.n	800484e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004824:	f7fe f892 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 8004828:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800482a:	e010      	b.n	800484e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800482c:	4b4e      	ldr	r3, [pc, #312]	@ (8004968 <UART_SetConfig+0x5c0>)
 800482e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004830:	e00d      	b.n	800484e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004832:	f7fe f807 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8004836:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004838:	e009      	b.n	800484e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800483a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800483e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004840:	e005      	b.n	800484e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004842:	2300      	movs	r3, #0
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800484c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800484e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8090 	beq.w	8004976 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800485a:	4a44      	ldr	r2, [pc, #272]	@ (800496c <UART_SetConfig+0x5c4>)
 800485c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004860:	461a      	mov	r2, r3
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	fbb3 f3f2 	udiv	r3, r3, r2
 8004868:	005a      	lsls	r2, r3, #1
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	085b      	lsrs	r3, r3, #1
 8004870:	441a      	add	r2, r3
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	fbb2 f3f3 	udiv	r3, r2, r3
 800487a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	2b0f      	cmp	r3, #15
 8004880:	d916      	bls.n	80048b0 <UART_SetConfig+0x508>
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004888:	d212      	bcs.n	80048b0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800488a:	6a3b      	ldr	r3, [r7, #32]
 800488c:	b29b      	uxth	r3, r3
 800488e:	f023 030f 	bic.w	r3, r3, #15
 8004892:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	085b      	lsrs	r3, r3, #1
 8004898:	b29b      	uxth	r3, r3
 800489a:	f003 0307 	and.w	r3, r3, #7
 800489e:	b29a      	uxth	r2, r3
 80048a0:	8bfb      	ldrh	r3, [r7, #30]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	8bfa      	ldrh	r2, [r7, #30]
 80048ac:	60da      	str	r2, [r3, #12]
 80048ae:	e062      	b.n	8004976 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80048b6:	e05e      	b.n	8004976 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048b8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d828      	bhi.n	8004912 <UART_SetConfig+0x56a>
 80048c0:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <UART_SetConfig+0x520>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080048ed 	.word	0x080048ed
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048fd 	.word	0x080048fd
 80048d4:	08004913 	.word	0x08004913
 80048d8:	08004903 	.word	0x08004903
 80048dc:	08004913 	.word	0x08004913
 80048e0:	08004913 	.word	0x08004913
 80048e4:	08004913 	.word	0x08004913
 80048e8:	0800490b 	.word	0x0800490b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ec:	f7fe f818 	bl	8002920 <HAL_RCC_GetPCLK1Freq>
 80048f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048f2:	e014      	b.n	800491e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048f4:	f7fe f82a 	bl	800294c <HAL_RCC_GetPCLK2Freq>
 80048f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80048fa:	e010      	b.n	800491e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004968 <UART_SetConfig+0x5c0>)
 80048fe:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004900:	e00d      	b.n	800491e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004902:	f7fd ff9f 	bl	8002844 <HAL_RCC_GetSysClockFreq>
 8004906:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004908:	e009      	b.n	800491e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800490a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004910:	e005      	b.n	800491e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004912:	2300      	movs	r3, #0
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800491c:	bf00      	nop
    }

    if (pclk != 0U)
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d028      	beq.n	8004976 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004928:	4a10      	ldr	r2, [pc, #64]	@ (800496c <UART_SetConfig+0x5c4>)
 800492a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492e:	461a      	mov	r2, r3
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	fbb3 f2f2 	udiv	r2, r3, r2
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	085b      	lsrs	r3, r3, #1
 800493c:	441a      	add	r2, r3
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	fbb2 f3f3 	udiv	r3, r2, r3
 8004946:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	2b0f      	cmp	r3, #15
 800494c:	d910      	bls.n	8004970 <UART_SetConfig+0x5c8>
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004954:	d20c      	bcs.n	8004970 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	b29a      	uxth	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	60da      	str	r2, [r3, #12]
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x5ce>
 8004962:	bf00      	nop
 8004964:	40008000 	.word	0x40008000
 8004968:	00f42400 	.word	0x00f42400
 800496c:	08005998 	.word	0x08005998
      }
      else
      {
        ret = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	2201      	movs	r2, #1
 800497a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2201      	movs	r2, #1
 8004982:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2200      	movs	r2, #0
 800498a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2200      	movs	r2, #0
 8004990:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004992:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004996:	4618      	mov	r0, r3
 8004998:	3730      	adds	r7, #48	@ 0x30
 800499a:	46bd      	mov	sp, r7
 800499c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080049a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ac:	f003 0308 	and.w	r3, r3, #8
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	430a      	orrs	r2, r1
 80049c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	430a      	orrs	r2, r1
 80049ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049f0:	f003 0302 	and.w	r3, r3, #2
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f003 0304 	and.w	r3, r3, #4
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d01a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a9e:	d10a      	bne.n	8004ab6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b098      	sub	sp, #96	@ 0x60
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004af4:	f7fc fde8 	bl	80016c8 <HAL_GetTick>
 8004af8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0308 	and.w	r3, r3, #8
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d12f      	bne.n	8004b68 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b08:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b0c:	9300      	str	r3, [sp, #0]
 8004b0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b10:	2200      	movs	r2, #0
 8004b12:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f88e 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d022      	beq.n	8004b68 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b2a:	e853 3f00 	ldrex	r3, [r3]
 8004b2e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b32:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b36:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b40:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b42:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004b46:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b48:	e841 2300 	strex	r3, r2, [r1]
 8004b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004b4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d1e6      	bne.n	8004b22 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2220      	movs	r2, #32
 8004b58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b64:	2303      	movs	r3, #3
 8004b66:	e063      	b.n	8004c30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b04      	cmp	r3, #4
 8004b74:	d149      	bne.n	8004c0a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b76:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b7a:	9300      	str	r3, [sp, #0]
 8004b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f857 	bl	8004c38 <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d03c      	beq.n	8004c0a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	623b      	str	r3, [r7, #32]
   return(result);
 8004b9e:	6a3b      	ldr	r3, [r7, #32]
 8004ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	461a      	mov	r2, r3
 8004bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bb0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bb6:	e841 2300 	strex	r3, r2, [r1]
 8004bba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1e6      	bne.n	8004b90 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f023 0301 	bic.w	r3, r3, #1
 8004bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004be2:	61fa      	str	r2, [r7, #28]
 8004be4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be6:	69b9      	ldr	r1, [r7, #24]
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	e841 2300 	strex	r3, r2, [r1]
 8004bee:	617b      	str	r3, [r7, #20]
   return(result);
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1e5      	bne.n	8004bc2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e012      	b.n	8004c30 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2220      	movs	r2, #32
 8004c0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2220      	movs	r2, #32
 8004c16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3758      	adds	r7, #88	@ 0x58
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	603b      	str	r3, [r7, #0]
 8004c44:	4613      	mov	r3, r2
 8004c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c48:	e04f      	b.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c50:	d04b      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c52:	f7fc fd39 	bl	80016c8 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d302      	bcc.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e04e      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d037      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b80      	cmp	r3, #128	@ 0x80
 8004c7e:	d034      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	2b40      	cmp	r3, #64	@ 0x40
 8004c84:	d031      	beq.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d110      	bne.n	8004cb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f838 	bl	8004d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2208      	movs	r2, #8
 8004ca6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e029      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cc4:	d111      	bne.n	8004cea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cd0:	68f8      	ldr	r0, [r7, #12]
 8004cd2:	f000 f81e 	bl	8004d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e00f      	b.n	8004d0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	bf0c      	ite	eq
 8004cfa:	2301      	moveq	r3, #1
 8004cfc:	2300      	movne	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d0a0      	beq.n	8004c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b095      	sub	sp, #84	@ 0x54
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	461a      	mov	r2, r3
 8004d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e6      	bne.n	8004d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	3308      	adds	r3, #8
 8004d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d54:	6a3b      	ldr	r3, [r7, #32]
 8004d56:	e853 3f00 	ldrex	r3, [r3]
 8004d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e3      	bne.n	8004d4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d118      	bne.n	8004dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	e853 3f00 	ldrex	r3, [r3]
 8004d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f023 0310 	bic.w	r3, r3, #16
 8004da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	461a      	mov	r2, r3
 8004da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004daa:	61bb      	str	r3, [r7, #24]
 8004dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	613b      	str	r3, [r7, #16]
   return(result);
 8004db8:	693b      	ldr	r3, [r7, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e6      	bne.n	8004d8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2220      	movs	r2, #32
 8004dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004dd2:	bf00      	nop
 8004dd4:	3754      	adds	r7, #84	@ 0x54
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d101      	bne.n	8004df4 <HAL_UARTEx_DisableFifoMode+0x16>
 8004df0:	2302      	movs	r3, #2
 8004df2:	e027      	b.n	8004e44 <HAL_UARTEx_DisableFifoMode+0x66>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2224      	movs	r2, #36	@ 0x24
 8004e00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f022 0201 	bic.w	r2, r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8004e22:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2220      	movs	r2, #32
 8004e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3714      	adds	r7, #20
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d101      	bne.n	8004e68 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004e64:	2302      	movs	r3, #2
 8004e66:	e02d      	b.n	8004ec4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2201      	movs	r2, #1
 8004e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	@ 0x24
 8004e74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	683a      	ldr	r2, [r7, #0]
 8004ea0:	430a      	orrs	r2, r1
 8004ea2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f000 f84f 	bl	8004f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2220      	movs	r2, #32
 8004eb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e02d      	b.n	8004f40 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2224      	movs	r2, #36	@ 0x24
 8004ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0201 	bic.w	r2, r2, #1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f811 	bl	8004f48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2220      	movs	r2, #32
 8004f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d108      	bne.n	8004f6a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004f68:	e031      	b.n	8004fce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004f6e:	2308      	movs	r3, #8
 8004f70:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	0e5b      	lsrs	r3, r3, #25
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	0f5b      	lsrs	r3, r3, #29
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f003 0307 	and.w	r3, r3, #7
 8004f90:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004f92:	7bbb      	ldrb	r3, [r7, #14]
 8004f94:	7b3a      	ldrb	r2, [r7, #12]
 8004f96:	4911      	ldr	r1, [pc, #68]	@ (8004fdc <UARTEx_SetNbDataToProcess+0x94>)
 8004f98:	5c8a      	ldrb	r2, [r1, r2]
 8004f9a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004f9e:	7b3a      	ldrb	r2, [r7, #12]
 8004fa0:	490f      	ldr	r1, [pc, #60]	@ (8004fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fa2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004fa4:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	7b7a      	ldrb	r2, [r7, #13]
 8004fb4:	4909      	ldr	r1, [pc, #36]	@ (8004fdc <UARTEx_SetNbDataToProcess+0x94>)
 8004fb6:	5c8a      	ldrb	r2, [r1, r2]
 8004fb8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004fbc:	7b7a      	ldrb	r2, [r7, #13]
 8004fbe:	4908      	ldr	r1, [pc, #32]	@ (8004fe0 <UARTEx_SetNbDataToProcess+0x98>)
 8004fc0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004fc2:	fb93 f3f2 	sdiv	r3, r3, r2
 8004fc6:	b29a      	uxth	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	080059b0 	.word	0x080059b0
 8004fe0:	080059b8 	.word	0x080059b8

08004fe4 <std>:
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	4604      	mov	r4, r0
 8004fea:	e9c0 3300 	strd	r3, r3, [r0]
 8004fee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ff2:	6083      	str	r3, [r0, #8]
 8004ff4:	8181      	strh	r1, [r0, #12]
 8004ff6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ff8:	81c2      	strh	r2, [r0, #14]
 8004ffa:	6183      	str	r3, [r0, #24]
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	2208      	movs	r2, #8
 8005000:	305c      	adds	r0, #92	@ 0x5c
 8005002:	f000 f9e7 	bl	80053d4 <memset>
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <std+0x58>)
 8005008:	6263      	str	r3, [r4, #36]	@ 0x24
 800500a:	4b0d      	ldr	r3, [pc, #52]	@ (8005040 <std+0x5c>)
 800500c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800500e:	4b0d      	ldr	r3, [pc, #52]	@ (8005044 <std+0x60>)
 8005010:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005012:	4b0d      	ldr	r3, [pc, #52]	@ (8005048 <std+0x64>)
 8005014:	6323      	str	r3, [r4, #48]	@ 0x30
 8005016:	4b0d      	ldr	r3, [pc, #52]	@ (800504c <std+0x68>)
 8005018:	6224      	str	r4, [r4, #32]
 800501a:	429c      	cmp	r4, r3
 800501c:	d006      	beq.n	800502c <std+0x48>
 800501e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005022:	4294      	cmp	r4, r2
 8005024:	d002      	beq.n	800502c <std+0x48>
 8005026:	33d0      	adds	r3, #208	@ 0xd0
 8005028:	429c      	cmp	r4, r3
 800502a:	d105      	bne.n	8005038 <std+0x54>
 800502c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005034:	f000 ba46 	b.w	80054c4 <__retarget_lock_init_recursive>
 8005038:	bd10      	pop	{r4, pc}
 800503a:	bf00      	nop
 800503c:	08005225 	.word	0x08005225
 8005040:	08005247 	.word	0x08005247
 8005044:	0800527f 	.word	0x0800527f
 8005048:	080052a3 	.word	0x080052a3
 800504c:	2000041c 	.word	0x2000041c

08005050 <stdio_exit_handler>:
 8005050:	4a02      	ldr	r2, [pc, #8]	@ (800505c <stdio_exit_handler+0xc>)
 8005052:	4903      	ldr	r1, [pc, #12]	@ (8005060 <stdio_exit_handler+0x10>)
 8005054:	4803      	ldr	r0, [pc, #12]	@ (8005064 <stdio_exit_handler+0x14>)
 8005056:	f000 b869 	b.w	800512c <_fwalk_sglue>
 800505a:	bf00      	nop
 800505c:	2000000c 	.word	0x2000000c
 8005060:	080057c5 	.word	0x080057c5
 8005064:	2000001c 	.word	0x2000001c

08005068 <cleanup_stdio>:
 8005068:	6841      	ldr	r1, [r0, #4]
 800506a:	4b0c      	ldr	r3, [pc, #48]	@ (800509c <cleanup_stdio+0x34>)
 800506c:	4299      	cmp	r1, r3
 800506e:	b510      	push	{r4, lr}
 8005070:	4604      	mov	r4, r0
 8005072:	d001      	beq.n	8005078 <cleanup_stdio+0x10>
 8005074:	f000 fba6 	bl	80057c4 <_fflush_r>
 8005078:	68a1      	ldr	r1, [r4, #8]
 800507a:	4b09      	ldr	r3, [pc, #36]	@ (80050a0 <cleanup_stdio+0x38>)
 800507c:	4299      	cmp	r1, r3
 800507e:	d002      	beq.n	8005086 <cleanup_stdio+0x1e>
 8005080:	4620      	mov	r0, r4
 8005082:	f000 fb9f 	bl	80057c4 <_fflush_r>
 8005086:	68e1      	ldr	r1, [r4, #12]
 8005088:	4b06      	ldr	r3, [pc, #24]	@ (80050a4 <cleanup_stdio+0x3c>)
 800508a:	4299      	cmp	r1, r3
 800508c:	d004      	beq.n	8005098 <cleanup_stdio+0x30>
 800508e:	4620      	mov	r0, r4
 8005090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005094:	f000 bb96 	b.w	80057c4 <_fflush_r>
 8005098:	bd10      	pop	{r4, pc}
 800509a:	bf00      	nop
 800509c:	2000041c 	.word	0x2000041c
 80050a0:	20000484 	.word	0x20000484
 80050a4:	200004ec 	.word	0x200004ec

080050a8 <global_stdio_init.part.0>:
 80050a8:	b510      	push	{r4, lr}
 80050aa:	4b0b      	ldr	r3, [pc, #44]	@ (80050d8 <global_stdio_init.part.0+0x30>)
 80050ac:	4c0b      	ldr	r4, [pc, #44]	@ (80050dc <global_stdio_init.part.0+0x34>)
 80050ae:	4a0c      	ldr	r2, [pc, #48]	@ (80050e0 <global_stdio_init.part.0+0x38>)
 80050b0:	601a      	str	r2, [r3, #0]
 80050b2:	4620      	mov	r0, r4
 80050b4:	2200      	movs	r2, #0
 80050b6:	2104      	movs	r1, #4
 80050b8:	f7ff ff94 	bl	8004fe4 <std>
 80050bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80050c0:	2201      	movs	r2, #1
 80050c2:	2109      	movs	r1, #9
 80050c4:	f7ff ff8e 	bl	8004fe4 <std>
 80050c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050cc:	2202      	movs	r2, #2
 80050ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050d2:	2112      	movs	r1, #18
 80050d4:	f7ff bf86 	b.w	8004fe4 <std>
 80050d8:	20000554 	.word	0x20000554
 80050dc:	2000041c 	.word	0x2000041c
 80050e0:	08005051 	.word	0x08005051

080050e4 <__sfp_lock_acquire>:
 80050e4:	4801      	ldr	r0, [pc, #4]	@ (80050ec <__sfp_lock_acquire+0x8>)
 80050e6:	f000 b9ee 	b.w	80054c6 <__retarget_lock_acquire_recursive>
 80050ea:	bf00      	nop
 80050ec:	2000055d 	.word	0x2000055d

080050f0 <__sfp_lock_release>:
 80050f0:	4801      	ldr	r0, [pc, #4]	@ (80050f8 <__sfp_lock_release+0x8>)
 80050f2:	f000 b9e9 	b.w	80054c8 <__retarget_lock_release_recursive>
 80050f6:	bf00      	nop
 80050f8:	2000055d 	.word	0x2000055d

080050fc <__sinit>:
 80050fc:	b510      	push	{r4, lr}
 80050fe:	4604      	mov	r4, r0
 8005100:	f7ff fff0 	bl	80050e4 <__sfp_lock_acquire>
 8005104:	6a23      	ldr	r3, [r4, #32]
 8005106:	b11b      	cbz	r3, 8005110 <__sinit+0x14>
 8005108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800510c:	f7ff bff0 	b.w	80050f0 <__sfp_lock_release>
 8005110:	4b04      	ldr	r3, [pc, #16]	@ (8005124 <__sinit+0x28>)
 8005112:	6223      	str	r3, [r4, #32]
 8005114:	4b04      	ldr	r3, [pc, #16]	@ (8005128 <__sinit+0x2c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1f5      	bne.n	8005108 <__sinit+0xc>
 800511c:	f7ff ffc4 	bl	80050a8 <global_stdio_init.part.0>
 8005120:	e7f2      	b.n	8005108 <__sinit+0xc>
 8005122:	bf00      	nop
 8005124:	08005069 	.word	0x08005069
 8005128:	20000554 	.word	0x20000554

0800512c <_fwalk_sglue>:
 800512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005130:	4607      	mov	r7, r0
 8005132:	4688      	mov	r8, r1
 8005134:	4614      	mov	r4, r2
 8005136:	2600      	movs	r6, #0
 8005138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800513c:	f1b9 0901 	subs.w	r9, r9, #1
 8005140:	d505      	bpl.n	800514e <_fwalk_sglue+0x22>
 8005142:	6824      	ldr	r4, [r4, #0]
 8005144:	2c00      	cmp	r4, #0
 8005146:	d1f7      	bne.n	8005138 <_fwalk_sglue+0xc>
 8005148:	4630      	mov	r0, r6
 800514a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800514e:	89ab      	ldrh	r3, [r5, #12]
 8005150:	2b01      	cmp	r3, #1
 8005152:	d907      	bls.n	8005164 <_fwalk_sglue+0x38>
 8005154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005158:	3301      	adds	r3, #1
 800515a:	d003      	beq.n	8005164 <_fwalk_sglue+0x38>
 800515c:	4629      	mov	r1, r5
 800515e:	4638      	mov	r0, r7
 8005160:	47c0      	blx	r8
 8005162:	4306      	orrs	r6, r0
 8005164:	3568      	adds	r5, #104	@ 0x68
 8005166:	e7e9      	b.n	800513c <_fwalk_sglue+0x10>

08005168 <_puts_r>:
 8005168:	6a03      	ldr	r3, [r0, #32]
 800516a:	b570      	push	{r4, r5, r6, lr}
 800516c:	6884      	ldr	r4, [r0, #8]
 800516e:	4605      	mov	r5, r0
 8005170:	460e      	mov	r6, r1
 8005172:	b90b      	cbnz	r3, 8005178 <_puts_r+0x10>
 8005174:	f7ff ffc2 	bl	80050fc <__sinit>
 8005178:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800517a:	07db      	lsls	r3, r3, #31
 800517c:	d405      	bmi.n	800518a <_puts_r+0x22>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	0598      	lsls	r0, r3, #22
 8005182:	d402      	bmi.n	800518a <_puts_r+0x22>
 8005184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005186:	f000 f99e 	bl	80054c6 <__retarget_lock_acquire_recursive>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	0719      	lsls	r1, r3, #28
 800518e:	d502      	bpl.n	8005196 <_puts_r+0x2e>
 8005190:	6923      	ldr	r3, [r4, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d135      	bne.n	8005202 <_puts_r+0x9a>
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 f8c5 	bl	8005328 <__swsetup_r>
 800519e:	b380      	cbz	r0, 8005202 <_puts_r+0x9a>
 80051a0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80051a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051a6:	07da      	lsls	r2, r3, #31
 80051a8:	d405      	bmi.n	80051b6 <_puts_r+0x4e>
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	059b      	lsls	r3, r3, #22
 80051ae:	d402      	bmi.n	80051b6 <_puts_r+0x4e>
 80051b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051b2:	f000 f989 	bl	80054c8 <__retarget_lock_release_recursive>
 80051b6:	4628      	mov	r0, r5
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	da04      	bge.n	80051c8 <_puts_r+0x60>
 80051be:	69a2      	ldr	r2, [r4, #24]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	dc17      	bgt.n	80051f4 <_puts_r+0x8c>
 80051c4:	290a      	cmp	r1, #10
 80051c6:	d015      	beq.n	80051f4 <_puts_r+0x8c>
 80051c8:	6823      	ldr	r3, [r4, #0]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	6022      	str	r2, [r4, #0]
 80051ce:	7019      	strb	r1, [r3, #0]
 80051d0:	68a3      	ldr	r3, [r4, #8]
 80051d2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051d6:	3b01      	subs	r3, #1
 80051d8:	60a3      	str	r3, [r4, #8]
 80051da:	2900      	cmp	r1, #0
 80051dc:	d1ed      	bne.n	80051ba <_puts_r+0x52>
 80051de:	2b00      	cmp	r3, #0
 80051e0:	da11      	bge.n	8005206 <_puts_r+0x9e>
 80051e2:	4622      	mov	r2, r4
 80051e4:	210a      	movs	r1, #10
 80051e6:	4628      	mov	r0, r5
 80051e8:	f000 f85f 	bl	80052aa <__swbuf_r>
 80051ec:	3001      	adds	r0, #1
 80051ee:	d0d7      	beq.n	80051a0 <_puts_r+0x38>
 80051f0:	250a      	movs	r5, #10
 80051f2:	e7d7      	b.n	80051a4 <_puts_r+0x3c>
 80051f4:	4622      	mov	r2, r4
 80051f6:	4628      	mov	r0, r5
 80051f8:	f000 f857 	bl	80052aa <__swbuf_r>
 80051fc:	3001      	adds	r0, #1
 80051fe:	d1e7      	bne.n	80051d0 <_puts_r+0x68>
 8005200:	e7ce      	b.n	80051a0 <_puts_r+0x38>
 8005202:	3e01      	subs	r6, #1
 8005204:	e7e4      	b.n	80051d0 <_puts_r+0x68>
 8005206:	6823      	ldr	r3, [r4, #0]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	6022      	str	r2, [r4, #0]
 800520c:	220a      	movs	r2, #10
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e7ee      	b.n	80051f0 <_puts_r+0x88>
	...

08005214 <puts>:
 8005214:	4b02      	ldr	r3, [pc, #8]	@ (8005220 <puts+0xc>)
 8005216:	4601      	mov	r1, r0
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	f7ff bfa5 	b.w	8005168 <_puts_r>
 800521e:	bf00      	nop
 8005220:	20000018 	.word	0x20000018

08005224 <__sread>:
 8005224:	b510      	push	{r4, lr}
 8005226:	460c      	mov	r4, r1
 8005228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800522c:	f000 f8fc 	bl	8005428 <_read_r>
 8005230:	2800      	cmp	r0, #0
 8005232:	bfab      	itete	ge
 8005234:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005236:	89a3      	ldrhlt	r3, [r4, #12]
 8005238:	181b      	addge	r3, r3, r0
 800523a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800523e:	bfac      	ite	ge
 8005240:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005242:	81a3      	strhlt	r3, [r4, #12]
 8005244:	bd10      	pop	{r4, pc}

08005246 <__swrite>:
 8005246:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800524a:	461f      	mov	r7, r3
 800524c:	898b      	ldrh	r3, [r1, #12]
 800524e:	05db      	lsls	r3, r3, #23
 8005250:	4605      	mov	r5, r0
 8005252:	460c      	mov	r4, r1
 8005254:	4616      	mov	r6, r2
 8005256:	d505      	bpl.n	8005264 <__swrite+0x1e>
 8005258:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800525c:	2302      	movs	r3, #2
 800525e:	2200      	movs	r2, #0
 8005260:	f000 f8d0 	bl	8005404 <_lseek_r>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800526a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800526e:	81a3      	strh	r3, [r4, #12]
 8005270:	4632      	mov	r2, r6
 8005272:	463b      	mov	r3, r7
 8005274:	4628      	mov	r0, r5
 8005276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527a:	f000 b8e7 	b.w	800544c <_write_r>

0800527e <__sseek>:
 800527e:	b510      	push	{r4, lr}
 8005280:	460c      	mov	r4, r1
 8005282:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005286:	f000 f8bd 	bl	8005404 <_lseek_r>
 800528a:	1c43      	adds	r3, r0, #1
 800528c:	89a3      	ldrh	r3, [r4, #12]
 800528e:	bf15      	itete	ne
 8005290:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005292:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005296:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800529a:	81a3      	strheq	r3, [r4, #12]
 800529c:	bf18      	it	ne
 800529e:	81a3      	strhne	r3, [r4, #12]
 80052a0:	bd10      	pop	{r4, pc}

080052a2 <__sclose>:
 80052a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a6:	f000 b89d 	b.w	80053e4 <_close_r>

080052aa <__swbuf_r>:
 80052aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ac:	460e      	mov	r6, r1
 80052ae:	4614      	mov	r4, r2
 80052b0:	4605      	mov	r5, r0
 80052b2:	b118      	cbz	r0, 80052bc <__swbuf_r+0x12>
 80052b4:	6a03      	ldr	r3, [r0, #32]
 80052b6:	b90b      	cbnz	r3, 80052bc <__swbuf_r+0x12>
 80052b8:	f7ff ff20 	bl	80050fc <__sinit>
 80052bc:	69a3      	ldr	r3, [r4, #24]
 80052be:	60a3      	str	r3, [r4, #8]
 80052c0:	89a3      	ldrh	r3, [r4, #12]
 80052c2:	071a      	lsls	r2, r3, #28
 80052c4:	d501      	bpl.n	80052ca <__swbuf_r+0x20>
 80052c6:	6923      	ldr	r3, [r4, #16]
 80052c8:	b943      	cbnz	r3, 80052dc <__swbuf_r+0x32>
 80052ca:	4621      	mov	r1, r4
 80052cc:	4628      	mov	r0, r5
 80052ce:	f000 f82b 	bl	8005328 <__swsetup_r>
 80052d2:	b118      	cbz	r0, 80052dc <__swbuf_r+0x32>
 80052d4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80052d8:	4638      	mov	r0, r7
 80052da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	6922      	ldr	r2, [r4, #16]
 80052e0:	1a98      	subs	r0, r3, r2
 80052e2:	6963      	ldr	r3, [r4, #20]
 80052e4:	b2f6      	uxtb	r6, r6
 80052e6:	4283      	cmp	r3, r0
 80052e8:	4637      	mov	r7, r6
 80052ea:	dc05      	bgt.n	80052f8 <__swbuf_r+0x4e>
 80052ec:	4621      	mov	r1, r4
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fa68 	bl	80057c4 <_fflush_r>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d1ed      	bne.n	80052d4 <__swbuf_r+0x2a>
 80052f8:	68a3      	ldr	r3, [r4, #8]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	60a3      	str	r3, [r4, #8]
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	1c5a      	adds	r2, r3, #1
 8005302:	6022      	str	r2, [r4, #0]
 8005304:	701e      	strb	r6, [r3, #0]
 8005306:	6962      	ldr	r2, [r4, #20]
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	429a      	cmp	r2, r3
 800530c:	d004      	beq.n	8005318 <__swbuf_r+0x6e>
 800530e:	89a3      	ldrh	r3, [r4, #12]
 8005310:	07db      	lsls	r3, r3, #31
 8005312:	d5e1      	bpl.n	80052d8 <__swbuf_r+0x2e>
 8005314:	2e0a      	cmp	r6, #10
 8005316:	d1df      	bne.n	80052d8 <__swbuf_r+0x2e>
 8005318:	4621      	mov	r1, r4
 800531a:	4628      	mov	r0, r5
 800531c:	f000 fa52 	bl	80057c4 <_fflush_r>
 8005320:	2800      	cmp	r0, #0
 8005322:	d0d9      	beq.n	80052d8 <__swbuf_r+0x2e>
 8005324:	e7d6      	b.n	80052d4 <__swbuf_r+0x2a>
	...

08005328 <__swsetup_r>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	4b29      	ldr	r3, [pc, #164]	@ (80053d0 <__swsetup_r+0xa8>)
 800532c:	4605      	mov	r5, r0
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	460c      	mov	r4, r1
 8005332:	b118      	cbz	r0, 800533c <__swsetup_r+0x14>
 8005334:	6a03      	ldr	r3, [r0, #32]
 8005336:	b90b      	cbnz	r3, 800533c <__swsetup_r+0x14>
 8005338:	f7ff fee0 	bl	80050fc <__sinit>
 800533c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005340:	0719      	lsls	r1, r3, #28
 8005342:	d422      	bmi.n	800538a <__swsetup_r+0x62>
 8005344:	06da      	lsls	r2, r3, #27
 8005346:	d407      	bmi.n	8005358 <__swsetup_r+0x30>
 8005348:	2209      	movs	r2, #9
 800534a:	602a      	str	r2, [r5, #0]
 800534c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005350:	81a3      	strh	r3, [r4, #12]
 8005352:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005356:	e033      	b.n	80053c0 <__swsetup_r+0x98>
 8005358:	0758      	lsls	r0, r3, #29
 800535a:	d512      	bpl.n	8005382 <__swsetup_r+0x5a>
 800535c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800535e:	b141      	cbz	r1, 8005372 <__swsetup_r+0x4a>
 8005360:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005364:	4299      	cmp	r1, r3
 8005366:	d002      	beq.n	800536e <__swsetup_r+0x46>
 8005368:	4628      	mov	r0, r5
 800536a:	f000 f8af 	bl	80054cc <_free_r>
 800536e:	2300      	movs	r3, #0
 8005370:	6363      	str	r3, [r4, #52]	@ 0x34
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005378:	81a3      	strh	r3, [r4, #12]
 800537a:	2300      	movs	r3, #0
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	6923      	ldr	r3, [r4, #16]
 8005380:	6023      	str	r3, [r4, #0]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	f043 0308 	orr.w	r3, r3, #8
 8005388:	81a3      	strh	r3, [r4, #12]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	b94b      	cbnz	r3, 80053a2 <__swsetup_r+0x7a>
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005394:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005398:	d003      	beq.n	80053a2 <__swsetup_r+0x7a>
 800539a:	4621      	mov	r1, r4
 800539c:	4628      	mov	r0, r5
 800539e:	f000 fa5f 	bl	8005860 <__smakebuf_r>
 80053a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a6:	f013 0201 	ands.w	r2, r3, #1
 80053aa:	d00a      	beq.n	80053c2 <__swsetup_r+0x9a>
 80053ac:	2200      	movs	r2, #0
 80053ae:	60a2      	str	r2, [r4, #8]
 80053b0:	6962      	ldr	r2, [r4, #20]
 80053b2:	4252      	negs	r2, r2
 80053b4:	61a2      	str	r2, [r4, #24]
 80053b6:	6922      	ldr	r2, [r4, #16]
 80053b8:	b942      	cbnz	r2, 80053cc <__swsetup_r+0xa4>
 80053ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053be:	d1c5      	bne.n	800534c <__swsetup_r+0x24>
 80053c0:	bd38      	pop	{r3, r4, r5, pc}
 80053c2:	0799      	lsls	r1, r3, #30
 80053c4:	bf58      	it	pl
 80053c6:	6962      	ldrpl	r2, [r4, #20]
 80053c8:	60a2      	str	r2, [r4, #8]
 80053ca:	e7f4      	b.n	80053b6 <__swsetup_r+0x8e>
 80053cc:	2000      	movs	r0, #0
 80053ce:	e7f7      	b.n	80053c0 <__swsetup_r+0x98>
 80053d0:	20000018 	.word	0x20000018

080053d4 <memset>:
 80053d4:	4402      	add	r2, r0
 80053d6:	4603      	mov	r3, r0
 80053d8:	4293      	cmp	r3, r2
 80053da:	d100      	bne.n	80053de <memset+0xa>
 80053dc:	4770      	bx	lr
 80053de:	f803 1b01 	strb.w	r1, [r3], #1
 80053e2:	e7f9      	b.n	80053d8 <memset+0x4>

080053e4 <_close_r>:
 80053e4:	b538      	push	{r3, r4, r5, lr}
 80053e6:	4d06      	ldr	r5, [pc, #24]	@ (8005400 <_close_r+0x1c>)
 80053e8:	2300      	movs	r3, #0
 80053ea:	4604      	mov	r4, r0
 80053ec:	4608      	mov	r0, r1
 80053ee:	602b      	str	r3, [r5, #0]
 80053f0:	f7fc f844 	bl	800147c <_close>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_close_r+0x1a>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_close_r+0x1a>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	20000558 	.word	0x20000558

08005404 <_lseek_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	@ (8005424 <_lseek_r+0x20>)
 8005408:	4604      	mov	r4, r0
 800540a:	4608      	mov	r0, r1
 800540c:	4611      	mov	r1, r2
 800540e:	2200      	movs	r2, #0
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fc f859 	bl	80014ca <_lseek>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_lseek_r+0x1e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_lseek_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	20000558 	.word	0x20000558

08005428 <_read_r>:
 8005428:	b538      	push	{r3, r4, r5, lr}
 800542a:	4d07      	ldr	r5, [pc, #28]	@ (8005448 <_read_r+0x20>)
 800542c:	4604      	mov	r4, r0
 800542e:	4608      	mov	r0, r1
 8005430:	4611      	mov	r1, r2
 8005432:	2200      	movs	r2, #0
 8005434:	602a      	str	r2, [r5, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	f7fb ffe7 	bl	800140a <_read>
 800543c:	1c43      	adds	r3, r0, #1
 800543e:	d102      	bne.n	8005446 <_read_r+0x1e>
 8005440:	682b      	ldr	r3, [r5, #0]
 8005442:	b103      	cbz	r3, 8005446 <_read_r+0x1e>
 8005444:	6023      	str	r3, [r4, #0]
 8005446:	bd38      	pop	{r3, r4, r5, pc}
 8005448:	20000558 	.word	0x20000558

0800544c <_write_r>:
 800544c:	b538      	push	{r3, r4, r5, lr}
 800544e:	4d07      	ldr	r5, [pc, #28]	@ (800546c <_write_r+0x20>)
 8005450:	4604      	mov	r4, r0
 8005452:	4608      	mov	r0, r1
 8005454:	4611      	mov	r1, r2
 8005456:	2200      	movs	r2, #0
 8005458:	602a      	str	r2, [r5, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	f7fb fff2 	bl	8001444 <_write>
 8005460:	1c43      	adds	r3, r0, #1
 8005462:	d102      	bne.n	800546a <_write_r+0x1e>
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	b103      	cbz	r3, 800546a <_write_r+0x1e>
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	bd38      	pop	{r3, r4, r5, pc}
 800546c:	20000558 	.word	0x20000558

08005470 <__errno>:
 8005470:	4b01      	ldr	r3, [pc, #4]	@ (8005478 <__errno+0x8>)
 8005472:	6818      	ldr	r0, [r3, #0]
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	20000018 	.word	0x20000018

0800547c <__libc_init_array>:
 800547c:	b570      	push	{r4, r5, r6, lr}
 800547e:	4d0d      	ldr	r5, [pc, #52]	@ (80054b4 <__libc_init_array+0x38>)
 8005480:	4c0d      	ldr	r4, [pc, #52]	@ (80054b8 <__libc_init_array+0x3c>)
 8005482:	1b64      	subs	r4, r4, r5
 8005484:	10a4      	asrs	r4, r4, #2
 8005486:	2600      	movs	r6, #0
 8005488:	42a6      	cmp	r6, r4
 800548a:	d109      	bne.n	80054a0 <__libc_init_array+0x24>
 800548c:	4d0b      	ldr	r5, [pc, #44]	@ (80054bc <__libc_init_array+0x40>)
 800548e:	4c0c      	ldr	r4, [pc, #48]	@ (80054c0 <__libc_init_array+0x44>)
 8005490:	f000 fa54 	bl	800593c <_init>
 8005494:	1b64      	subs	r4, r4, r5
 8005496:	10a4      	asrs	r4, r4, #2
 8005498:	2600      	movs	r6, #0
 800549a:	42a6      	cmp	r6, r4
 800549c:	d105      	bne.n	80054aa <__libc_init_array+0x2e>
 800549e:	bd70      	pop	{r4, r5, r6, pc}
 80054a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a4:	4798      	blx	r3
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7ee      	b.n	8005488 <__libc_init_array+0xc>
 80054aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ae:	4798      	blx	r3
 80054b0:	3601      	adds	r6, #1
 80054b2:	e7f2      	b.n	800549a <__libc_init_array+0x1e>
 80054b4:	080059c8 	.word	0x080059c8
 80054b8:	080059c8 	.word	0x080059c8
 80054bc:	080059c8 	.word	0x080059c8
 80054c0:	080059cc 	.word	0x080059cc

080054c4 <__retarget_lock_init_recursive>:
 80054c4:	4770      	bx	lr

080054c6 <__retarget_lock_acquire_recursive>:
 80054c6:	4770      	bx	lr

080054c8 <__retarget_lock_release_recursive>:
 80054c8:	4770      	bx	lr
	...

080054cc <_free_r>:
 80054cc:	b538      	push	{r3, r4, r5, lr}
 80054ce:	4605      	mov	r5, r0
 80054d0:	2900      	cmp	r1, #0
 80054d2:	d041      	beq.n	8005558 <_free_r+0x8c>
 80054d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054d8:	1f0c      	subs	r4, r1, #4
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bfb8      	it	lt
 80054de:	18e4      	addlt	r4, r4, r3
 80054e0:	f000 f8e0 	bl	80056a4 <__malloc_lock>
 80054e4:	4a1d      	ldr	r2, [pc, #116]	@ (800555c <_free_r+0x90>)
 80054e6:	6813      	ldr	r3, [r2, #0]
 80054e8:	b933      	cbnz	r3, 80054f8 <_free_r+0x2c>
 80054ea:	6063      	str	r3, [r4, #4]
 80054ec:	6014      	str	r4, [r2, #0]
 80054ee:	4628      	mov	r0, r5
 80054f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054f4:	f000 b8dc 	b.w	80056b0 <__malloc_unlock>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d908      	bls.n	800550e <_free_r+0x42>
 80054fc:	6820      	ldr	r0, [r4, #0]
 80054fe:	1821      	adds	r1, r4, r0
 8005500:	428b      	cmp	r3, r1
 8005502:	bf01      	itttt	eq
 8005504:	6819      	ldreq	r1, [r3, #0]
 8005506:	685b      	ldreq	r3, [r3, #4]
 8005508:	1809      	addeq	r1, r1, r0
 800550a:	6021      	streq	r1, [r4, #0]
 800550c:	e7ed      	b.n	80054ea <_free_r+0x1e>
 800550e:	461a      	mov	r2, r3
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b10b      	cbz	r3, 8005518 <_free_r+0x4c>
 8005514:	42a3      	cmp	r3, r4
 8005516:	d9fa      	bls.n	800550e <_free_r+0x42>
 8005518:	6811      	ldr	r1, [r2, #0]
 800551a:	1850      	adds	r0, r2, r1
 800551c:	42a0      	cmp	r0, r4
 800551e:	d10b      	bne.n	8005538 <_free_r+0x6c>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	4401      	add	r1, r0
 8005524:	1850      	adds	r0, r2, r1
 8005526:	4283      	cmp	r3, r0
 8005528:	6011      	str	r1, [r2, #0]
 800552a:	d1e0      	bne.n	80054ee <_free_r+0x22>
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	6053      	str	r3, [r2, #4]
 8005532:	4408      	add	r0, r1
 8005534:	6010      	str	r0, [r2, #0]
 8005536:	e7da      	b.n	80054ee <_free_r+0x22>
 8005538:	d902      	bls.n	8005540 <_free_r+0x74>
 800553a:	230c      	movs	r3, #12
 800553c:	602b      	str	r3, [r5, #0]
 800553e:	e7d6      	b.n	80054ee <_free_r+0x22>
 8005540:	6820      	ldr	r0, [r4, #0]
 8005542:	1821      	adds	r1, r4, r0
 8005544:	428b      	cmp	r3, r1
 8005546:	bf04      	itt	eq
 8005548:	6819      	ldreq	r1, [r3, #0]
 800554a:	685b      	ldreq	r3, [r3, #4]
 800554c:	6063      	str	r3, [r4, #4]
 800554e:	bf04      	itt	eq
 8005550:	1809      	addeq	r1, r1, r0
 8005552:	6021      	streq	r1, [r4, #0]
 8005554:	6054      	str	r4, [r2, #4]
 8005556:	e7ca      	b.n	80054ee <_free_r+0x22>
 8005558:	bd38      	pop	{r3, r4, r5, pc}
 800555a:	bf00      	nop
 800555c:	20000564 	.word	0x20000564

08005560 <sbrk_aligned>:
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4e0f      	ldr	r6, [pc, #60]	@ (80055a0 <sbrk_aligned+0x40>)
 8005564:	460c      	mov	r4, r1
 8005566:	6831      	ldr	r1, [r6, #0]
 8005568:	4605      	mov	r5, r0
 800556a:	b911      	cbnz	r1, 8005572 <sbrk_aligned+0x12>
 800556c:	f000 f9d6 	bl	800591c <_sbrk_r>
 8005570:	6030      	str	r0, [r6, #0]
 8005572:	4621      	mov	r1, r4
 8005574:	4628      	mov	r0, r5
 8005576:	f000 f9d1 	bl	800591c <_sbrk_r>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d103      	bne.n	8005586 <sbrk_aligned+0x26>
 800557e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005582:	4620      	mov	r0, r4
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	1cc4      	adds	r4, r0, #3
 8005588:	f024 0403 	bic.w	r4, r4, #3
 800558c:	42a0      	cmp	r0, r4
 800558e:	d0f8      	beq.n	8005582 <sbrk_aligned+0x22>
 8005590:	1a21      	subs	r1, r4, r0
 8005592:	4628      	mov	r0, r5
 8005594:	f000 f9c2 	bl	800591c <_sbrk_r>
 8005598:	3001      	adds	r0, #1
 800559a:	d1f2      	bne.n	8005582 <sbrk_aligned+0x22>
 800559c:	e7ef      	b.n	800557e <sbrk_aligned+0x1e>
 800559e:	bf00      	nop
 80055a0:	20000560 	.word	0x20000560

080055a4 <_malloc_r>:
 80055a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055a8:	1ccd      	adds	r5, r1, #3
 80055aa:	f025 0503 	bic.w	r5, r5, #3
 80055ae:	3508      	adds	r5, #8
 80055b0:	2d0c      	cmp	r5, #12
 80055b2:	bf38      	it	cc
 80055b4:	250c      	movcc	r5, #12
 80055b6:	2d00      	cmp	r5, #0
 80055b8:	4606      	mov	r6, r0
 80055ba:	db01      	blt.n	80055c0 <_malloc_r+0x1c>
 80055bc:	42a9      	cmp	r1, r5
 80055be:	d904      	bls.n	80055ca <_malloc_r+0x26>
 80055c0:	230c      	movs	r3, #12
 80055c2:	6033      	str	r3, [r6, #0]
 80055c4:	2000      	movs	r0, #0
 80055c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056a0 <_malloc_r+0xfc>
 80055ce:	f000 f869 	bl	80056a4 <__malloc_lock>
 80055d2:	f8d8 3000 	ldr.w	r3, [r8]
 80055d6:	461c      	mov	r4, r3
 80055d8:	bb44      	cbnz	r4, 800562c <_malloc_r+0x88>
 80055da:	4629      	mov	r1, r5
 80055dc:	4630      	mov	r0, r6
 80055de:	f7ff ffbf 	bl	8005560 <sbrk_aligned>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	4604      	mov	r4, r0
 80055e6:	d158      	bne.n	800569a <_malloc_r+0xf6>
 80055e8:	f8d8 4000 	ldr.w	r4, [r8]
 80055ec:	4627      	mov	r7, r4
 80055ee:	2f00      	cmp	r7, #0
 80055f0:	d143      	bne.n	800567a <_malloc_r+0xd6>
 80055f2:	2c00      	cmp	r4, #0
 80055f4:	d04b      	beq.n	800568e <_malloc_r+0xea>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	4639      	mov	r1, r7
 80055fa:	4630      	mov	r0, r6
 80055fc:	eb04 0903 	add.w	r9, r4, r3
 8005600:	f000 f98c 	bl	800591c <_sbrk_r>
 8005604:	4581      	cmp	r9, r0
 8005606:	d142      	bne.n	800568e <_malloc_r+0xea>
 8005608:	6821      	ldr	r1, [r4, #0]
 800560a:	1a6d      	subs	r5, r5, r1
 800560c:	4629      	mov	r1, r5
 800560e:	4630      	mov	r0, r6
 8005610:	f7ff ffa6 	bl	8005560 <sbrk_aligned>
 8005614:	3001      	adds	r0, #1
 8005616:	d03a      	beq.n	800568e <_malloc_r+0xea>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	442b      	add	r3, r5
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	f8d8 3000 	ldr.w	r3, [r8]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	bb62      	cbnz	r2, 8005680 <_malloc_r+0xdc>
 8005626:	f8c8 7000 	str.w	r7, [r8]
 800562a:	e00f      	b.n	800564c <_malloc_r+0xa8>
 800562c:	6822      	ldr	r2, [r4, #0]
 800562e:	1b52      	subs	r2, r2, r5
 8005630:	d420      	bmi.n	8005674 <_malloc_r+0xd0>
 8005632:	2a0b      	cmp	r2, #11
 8005634:	d917      	bls.n	8005666 <_malloc_r+0xc2>
 8005636:	1961      	adds	r1, r4, r5
 8005638:	42a3      	cmp	r3, r4
 800563a:	6025      	str	r5, [r4, #0]
 800563c:	bf18      	it	ne
 800563e:	6059      	strne	r1, [r3, #4]
 8005640:	6863      	ldr	r3, [r4, #4]
 8005642:	bf08      	it	eq
 8005644:	f8c8 1000 	streq.w	r1, [r8]
 8005648:	5162      	str	r2, [r4, r5]
 800564a:	604b      	str	r3, [r1, #4]
 800564c:	4630      	mov	r0, r6
 800564e:	f000 f82f 	bl	80056b0 <__malloc_unlock>
 8005652:	f104 000b 	add.w	r0, r4, #11
 8005656:	1d23      	adds	r3, r4, #4
 8005658:	f020 0007 	bic.w	r0, r0, #7
 800565c:	1ac2      	subs	r2, r0, r3
 800565e:	bf1c      	itt	ne
 8005660:	1a1b      	subne	r3, r3, r0
 8005662:	50a3      	strne	r3, [r4, r2]
 8005664:	e7af      	b.n	80055c6 <_malloc_r+0x22>
 8005666:	6862      	ldr	r2, [r4, #4]
 8005668:	42a3      	cmp	r3, r4
 800566a:	bf0c      	ite	eq
 800566c:	f8c8 2000 	streq.w	r2, [r8]
 8005670:	605a      	strne	r2, [r3, #4]
 8005672:	e7eb      	b.n	800564c <_malloc_r+0xa8>
 8005674:	4623      	mov	r3, r4
 8005676:	6864      	ldr	r4, [r4, #4]
 8005678:	e7ae      	b.n	80055d8 <_malloc_r+0x34>
 800567a:	463c      	mov	r4, r7
 800567c:	687f      	ldr	r7, [r7, #4]
 800567e:	e7b6      	b.n	80055ee <_malloc_r+0x4a>
 8005680:	461a      	mov	r2, r3
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	42a3      	cmp	r3, r4
 8005686:	d1fb      	bne.n	8005680 <_malloc_r+0xdc>
 8005688:	2300      	movs	r3, #0
 800568a:	6053      	str	r3, [r2, #4]
 800568c:	e7de      	b.n	800564c <_malloc_r+0xa8>
 800568e:	230c      	movs	r3, #12
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	4630      	mov	r0, r6
 8005694:	f000 f80c 	bl	80056b0 <__malloc_unlock>
 8005698:	e794      	b.n	80055c4 <_malloc_r+0x20>
 800569a:	6005      	str	r5, [r0, #0]
 800569c:	e7d6      	b.n	800564c <_malloc_r+0xa8>
 800569e:	bf00      	nop
 80056a0:	20000564 	.word	0x20000564

080056a4 <__malloc_lock>:
 80056a4:	4801      	ldr	r0, [pc, #4]	@ (80056ac <__malloc_lock+0x8>)
 80056a6:	f7ff bf0e 	b.w	80054c6 <__retarget_lock_acquire_recursive>
 80056aa:	bf00      	nop
 80056ac:	2000055c 	.word	0x2000055c

080056b0 <__malloc_unlock>:
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <__malloc_unlock+0x8>)
 80056b2:	f7ff bf09 	b.w	80054c8 <__retarget_lock_release_recursive>
 80056b6:	bf00      	nop
 80056b8:	2000055c 	.word	0x2000055c

080056bc <__sflush_r>:
 80056bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056c4:	0716      	lsls	r6, r2, #28
 80056c6:	4605      	mov	r5, r0
 80056c8:	460c      	mov	r4, r1
 80056ca:	d454      	bmi.n	8005776 <__sflush_r+0xba>
 80056cc:	684b      	ldr	r3, [r1, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	dc02      	bgt.n	80056d8 <__sflush_r+0x1c>
 80056d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	dd48      	ble.n	800576a <__sflush_r+0xae>
 80056d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056da:	2e00      	cmp	r6, #0
 80056dc:	d045      	beq.n	800576a <__sflush_r+0xae>
 80056de:	2300      	movs	r3, #0
 80056e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80056e4:	682f      	ldr	r7, [r5, #0]
 80056e6:	6a21      	ldr	r1, [r4, #32]
 80056e8:	602b      	str	r3, [r5, #0]
 80056ea:	d030      	beq.n	800574e <__sflush_r+0x92>
 80056ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056ee:	89a3      	ldrh	r3, [r4, #12]
 80056f0:	0759      	lsls	r1, r3, #29
 80056f2:	d505      	bpl.n	8005700 <__sflush_r+0x44>
 80056f4:	6863      	ldr	r3, [r4, #4]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056fa:	b10b      	cbz	r3, 8005700 <__sflush_r+0x44>
 80056fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	2300      	movs	r3, #0
 8005702:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005704:	6a21      	ldr	r1, [r4, #32]
 8005706:	4628      	mov	r0, r5
 8005708:	47b0      	blx	r6
 800570a:	1c43      	adds	r3, r0, #1
 800570c:	89a3      	ldrh	r3, [r4, #12]
 800570e:	d106      	bne.n	800571e <__sflush_r+0x62>
 8005710:	6829      	ldr	r1, [r5, #0]
 8005712:	291d      	cmp	r1, #29
 8005714:	d82b      	bhi.n	800576e <__sflush_r+0xb2>
 8005716:	4a2a      	ldr	r2, [pc, #168]	@ (80057c0 <__sflush_r+0x104>)
 8005718:	410a      	asrs	r2, r1
 800571a:	07d6      	lsls	r6, r2, #31
 800571c:	d427      	bmi.n	800576e <__sflush_r+0xb2>
 800571e:	2200      	movs	r2, #0
 8005720:	6062      	str	r2, [r4, #4]
 8005722:	04d9      	lsls	r1, r3, #19
 8005724:	6922      	ldr	r2, [r4, #16]
 8005726:	6022      	str	r2, [r4, #0]
 8005728:	d504      	bpl.n	8005734 <__sflush_r+0x78>
 800572a:	1c42      	adds	r2, r0, #1
 800572c:	d101      	bne.n	8005732 <__sflush_r+0x76>
 800572e:	682b      	ldr	r3, [r5, #0]
 8005730:	b903      	cbnz	r3, 8005734 <__sflush_r+0x78>
 8005732:	6560      	str	r0, [r4, #84]	@ 0x54
 8005734:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005736:	602f      	str	r7, [r5, #0]
 8005738:	b1b9      	cbz	r1, 800576a <__sflush_r+0xae>
 800573a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800573e:	4299      	cmp	r1, r3
 8005740:	d002      	beq.n	8005748 <__sflush_r+0x8c>
 8005742:	4628      	mov	r0, r5
 8005744:	f7ff fec2 	bl	80054cc <_free_r>
 8005748:	2300      	movs	r3, #0
 800574a:	6363      	str	r3, [r4, #52]	@ 0x34
 800574c:	e00d      	b.n	800576a <__sflush_r+0xae>
 800574e:	2301      	movs	r3, #1
 8005750:	4628      	mov	r0, r5
 8005752:	47b0      	blx	r6
 8005754:	4602      	mov	r2, r0
 8005756:	1c50      	adds	r0, r2, #1
 8005758:	d1c9      	bne.n	80056ee <__sflush_r+0x32>
 800575a:	682b      	ldr	r3, [r5, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0c6      	beq.n	80056ee <__sflush_r+0x32>
 8005760:	2b1d      	cmp	r3, #29
 8005762:	d001      	beq.n	8005768 <__sflush_r+0xac>
 8005764:	2b16      	cmp	r3, #22
 8005766:	d11e      	bne.n	80057a6 <__sflush_r+0xea>
 8005768:	602f      	str	r7, [r5, #0]
 800576a:	2000      	movs	r0, #0
 800576c:	e022      	b.n	80057b4 <__sflush_r+0xf8>
 800576e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005772:	b21b      	sxth	r3, r3
 8005774:	e01b      	b.n	80057ae <__sflush_r+0xf2>
 8005776:	690f      	ldr	r7, [r1, #16]
 8005778:	2f00      	cmp	r7, #0
 800577a:	d0f6      	beq.n	800576a <__sflush_r+0xae>
 800577c:	0793      	lsls	r3, r2, #30
 800577e:	680e      	ldr	r6, [r1, #0]
 8005780:	bf08      	it	eq
 8005782:	694b      	ldreq	r3, [r1, #20]
 8005784:	600f      	str	r7, [r1, #0]
 8005786:	bf18      	it	ne
 8005788:	2300      	movne	r3, #0
 800578a:	eba6 0807 	sub.w	r8, r6, r7
 800578e:	608b      	str	r3, [r1, #8]
 8005790:	f1b8 0f00 	cmp.w	r8, #0
 8005794:	dde9      	ble.n	800576a <__sflush_r+0xae>
 8005796:	6a21      	ldr	r1, [r4, #32]
 8005798:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800579a:	4643      	mov	r3, r8
 800579c:	463a      	mov	r2, r7
 800579e:	4628      	mov	r0, r5
 80057a0:	47b0      	blx	r6
 80057a2:	2800      	cmp	r0, #0
 80057a4:	dc08      	bgt.n	80057b8 <__sflush_r+0xfc>
 80057a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80057ae:	81a3      	strh	r3, [r4, #12]
 80057b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80057b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057b8:	4407      	add	r7, r0
 80057ba:	eba8 0800 	sub.w	r8, r8, r0
 80057be:	e7e7      	b.n	8005790 <__sflush_r+0xd4>
 80057c0:	dfbffffe 	.word	0xdfbffffe

080057c4 <_fflush_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	690b      	ldr	r3, [r1, #16]
 80057c8:	4605      	mov	r5, r0
 80057ca:	460c      	mov	r4, r1
 80057cc:	b913      	cbnz	r3, 80057d4 <_fflush_r+0x10>
 80057ce:	2500      	movs	r5, #0
 80057d0:	4628      	mov	r0, r5
 80057d2:	bd38      	pop	{r3, r4, r5, pc}
 80057d4:	b118      	cbz	r0, 80057de <_fflush_r+0x1a>
 80057d6:	6a03      	ldr	r3, [r0, #32]
 80057d8:	b90b      	cbnz	r3, 80057de <_fflush_r+0x1a>
 80057da:	f7ff fc8f 	bl	80050fc <__sinit>
 80057de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f3      	beq.n	80057ce <_fflush_r+0xa>
 80057e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80057e8:	07d0      	lsls	r0, r2, #31
 80057ea:	d404      	bmi.n	80057f6 <_fflush_r+0x32>
 80057ec:	0599      	lsls	r1, r3, #22
 80057ee:	d402      	bmi.n	80057f6 <_fflush_r+0x32>
 80057f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057f2:	f7ff fe68 	bl	80054c6 <__retarget_lock_acquire_recursive>
 80057f6:	4628      	mov	r0, r5
 80057f8:	4621      	mov	r1, r4
 80057fa:	f7ff ff5f 	bl	80056bc <__sflush_r>
 80057fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005800:	07da      	lsls	r2, r3, #31
 8005802:	4605      	mov	r5, r0
 8005804:	d4e4      	bmi.n	80057d0 <_fflush_r+0xc>
 8005806:	89a3      	ldrh	r3, [r4, #12]
 8005808:	059b      	lsls	r3, r3, #22
 800580a:	d4e1      	bmi.n	80057d0 <_fflush_r+0xc>
 800580c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800580e:	f7ff fe5b 	bl	80054c8 <__retarget_lock_release_recursive>
 8005812:	e7dd      	b.n	80057d0 <_fflush_r+0xc>

08005814 <__swhatbuf_r>:
 8005814:	b570      	push	{r4, r5, r6, lr}
 8005816:	460c      	mov	r4, r1
 8005818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800581c:	2900      	cmp	r1, #0
 800581e:	b096      	sub	sp, #88	@ 0x58
 8005820:	4615      	mov	r5, r2
 8005822:	461e      	mov	r6, r3
 8005824:	da0d      	bge.n	8005842 <__swhatbuf_r+0x2e>
 8005826:	89a3      	ldrh	r3, [r4, #12]
 8005828:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800582c:	f04f 0100 	mov.w	r1, #0
 8005830:	bf14      	ite	ne
 8005832:	2340      	movne	r3, #64	@ 0x40
 8005834:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005838:	2000      	movs	r0, #0
 800583a:	6031      	str	r1, [r6, #0]
 800583c:	602b      	str	r3, [r5, #0]
 800583e:	b016      	add	sp, #88	@ 0x58
 8005840:	bd70      	pop	{r4, r5, r6, pc}
 8005842:	466a      	mov	r2, sp
 8005844:	f000 f848 	bl	80058d8 <_fstat_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	dbec      	blt.n	8005826 <__swhatbuf_r+0x12>
 800584c:	9901      	ldr	r1, [sp, #4]
 800584e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005852:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005856:	4259      	negs	r1, r3
 8005858:	4159      	adcs	r1, r3
 800585a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800585e:	e7eb      	b.n	8005838 <__swhatbuf_r+0x24>

08005860 <__smakebuf_r>:
 8005860:	898b      	ldrh	r3, [r1, #12]
 8005862:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005864:	079d      	lsls	r5, r3, #30
 8005866:	4606      	mov	r6, r0
 8005868:	460c      	mov	r4, r1
 800586a:	d507      	bpl.n	800587c <__smakebuf_r+0x1c>
 800586c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	6123      	str	r3, [r4, #16]
 8005874:	2301      	movs	r3, #1
 8005876:	6163      	str	r3, [r4, #20]
 8005878:	b003      	add	sp, #12
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587c:	ab01      	add	r3, sp, #4
 800587e:	466a      	mov	r2, sp
 8005880:	f7ff ffc8 	bl	8005814 <__swhatbuf_r>
 8005884:	9f00      	ldr	r7, [sp, #0]
 8005886:	4605      	mov	r5, r0
 8005888:	4639      	mov	r1, r7
 800588a:	4630      	mov	r0, r6
 800588c:	f7ff fe8a 	bl	80055a4 <_malloc_r>
 8005890:	b948      	cbnz	r0, 80058a6 <__smakebuf_r+0x46>
 8005892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005896:	059a      	lsls	r2, r3, #22
 8005898:	d4ee      	bmi.n	8005878 <__smakebuf_r+0x18>
 800589a:	f023 0303 	bic.w	r3, r3, #3
 800589e:	f043 0302 	orr.w	r3, r3, #2
 80058a2:	81a3      	strh	r3, [r4, #12]
 80058a4:	e7e2      	b.n	800586c <__smakebuf_r+0xc>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	6020      	str	r0, [r4, #0]
 80058aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80058ae:	81a3      	strh	r3, [r4, #12]
 80058b0:	9b01      	ldr	r3, [sp, #4]
 80058b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80058b6:	b15b      	cbz	r3, 80058d0 <__smakebuf_r+0x70>
 80058b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058bc:	4630      	mov	r0, r6
 80058be:	f000 f81d 	bl	80058fc <_isatty_r>
 80058c2:	b128      	cbz	r0, 80058d0 <__smakebuf_r+0x70>
 80058c4:	89a3      	ldrh	r3, [r4, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	f043 0301 	orr.w	r3, r3, #1
 80058ce:	81a3      	strh	r3, [r4, #12]
 80058d0:	89a3      	ldrh	r3, [r4, #12]
 80058d2:	431d      	orrs	r5, r3
 80058d4:	81a5      	strh	r5, [r4, #12]
 80058d6:	e7cf      	b.n	8005878 <__smakebuf_r+0x18>

080058d8 <_fstat_r>:
 80058d8:	b538      	push	{r3, r4, r5, lr}
 80058da:	4d07      	ldr	r5, [pc, #28]	@ (80058f8 <_fstat_r+0x20>)
 80058dc:	2300      	movs	r3, #0
 80058de:	4604      	mov	r4, r0
 80058e0:	4608      	mov	r0, r1
 80058e2:	4611      	mov	r1, r2
 80058e4:	602b      	str	r3, [r5, #0]
 80058e6:	f7fb fdd5 	bl	8001494 <_fstat>
 80058ea:	1c43      	adds	r3, r0, #1
 80058ec:	d102      	bne.n	80058f4 <_fstat_r+0x1c>
 80058ee:	682b      	ldr	r3, [r5, #0]
 80058f0:	b103      	cbz	r3, 80058f4 <_fstat_r+0x1c>
 80058f2:	6023      	str	r3, [r4, #0]
 80058f4:	bd38      	pop	{r3, r4, r5, pc}
 80058f6:	bf00      	nop
 80058f8:	20000558 	.word	0x20000558

080058fc <_isatty_r>:
 80058fc:	b538      	push	{r3, r4, r5, lr}
 80058fe:	4d06      	ldr	r5, [pc, #24]	@ (8005918 <_isatty_r+0x1c>)
 8005900:	2300      	movs	r3, #0
 8005902:	4604      	mov	r4, r0
 8005904:	4608      	mov	r0, r1
 8005906:	602b      	str	r3, [r5, #0]
 8005908:	f7fb fdd4 	bl	80014b4 <_isatty>
 800590c:	1c43      	adds	r3, r0, #1
 800590e:	d102      	bne.n	8005916 <_isatty_r+0x1a>
 8005910:	682b      	ldr	r3, [r5, #0]
 8005912:	b103      	cbz	r3, 8005916 <_isatty_r+0x1a>
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	bd38      	pop	{r3, r4, r5, pc}
 8005918:	20000558 	.word	0x20000558

0800591c <_sbrk_r>:
 800591c:	b538      	push	{r3, r4, r5, lr}
 800591e:	4d06      	ldr	r5, [pc, #24]	@ (8005938 <_sbrk_r+0x1c>)
 8005920:	2300      	movs	r3, #0
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	602b      	str	r3, [r5, #0]
 8005928:	f7fb fddc 	bl	80014e4 <_sbrk>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_sbrk_r+0x1a>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_sbrk_r+0x1a>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20000558 	.word	0x20000558

0800593c <_init>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr

08005948 <_fini>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr
