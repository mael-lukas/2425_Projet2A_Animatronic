
PINOUT L474RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006488  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000374  08006668  08006668  00007668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069dc  080069dc  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  080069dc  080069dc  000079dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069e4  080069e4  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e4  080069e4  000079e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080069ec  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000068  08006a54  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000560  08006a54  00008560  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001650c  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b06  00000000  00000000  0001e5a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  000210b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fdc  00000000  00000000  000224e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027e5e  00000000  00000000  000234bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e42  00000000  00000000  0004b31a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101255  00000000  00000000  0006315c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001643b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ed0  00000000  00000000  001643f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0016a2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006650 	.word	0x08006650

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08006650 	.word	0x08006650

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005b8:	1d39      	adds	r1, r7, #4
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005be:	2201      	movs	r2, #1
 80005c0:	4803      	ldr	r0, [pc, #12]	@ (80005d0 <__io_putchar+0x20>)
 80005c2:	f004 f805 	bl	80045d0 <HAL_UART_Transmit>
	return ch;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	200002e4 	.word	0x200002e4

080005d4 <__io_getchar>:


GETCHAR_PROTOTYPE
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]

	/* Clear the Overrun flag just before receiving the first character */
	__HAL_UART_CLEAR_OREFLAG(&huart2);
 80005de:	4b0b      	ldr	r3, [pc, #44]	@ (800060c <__io_getchar+0x38>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	2208      	movs	r2, #8
 80005e4:	621a      	str	r2, [r3, #32]

	/* Wait for reception of a character on the USART RX line and echo this
	 * character on console */
	HAL_UART_Receive(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005e6:	1df9      	adds	r1, r7, #7
 80005e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ec:	2201      	movs	r2, #1
 80005ee:	4807      	ldr	r0, [pc, #28]	@ (800060c <__io_getchar+0x38>)
 80005f0:	f004 f87c 	bl	80046ec <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005f4:	1df9      	adds	r1, r7, #7
 80005f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fa:	2201      	movs	r2, #1
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <__io_getchar+0x38>)
 80005fe:	f003 ffe7 	bl	80045d0 <HAL_UART_Transmit>
	return ch;
 8000602:	79fb      	ldrb	r3, [r7, #7]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	200002e4 	.word	0x200002e4

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8000616:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000618:	f001 fa5b 	bl	8001ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061c:	f000 f862 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 fbdc 	bl	8000ddc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000624:	f000 f8de 	bl	80007e4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000628:	f000 f9a4 	bl	8000974 <MX_TIM2_Init>
  MX_UART4_Init();
 800062c:	f000 faa6 	bl	8000b7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000630:	f000 faf0 	bl	8000c14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000634:	f000 fb3a 	bl	8000cac <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000638:	f000 fb84 	bl	8000d44 <MX_USART3_UART_Init>
  MX_I2C3_Init();
 800063c:	f000 f892 	bl	8000764 <MX_I2C3_Init>
  MX_TIM4_Init();
 8000640:	f000 fa24 	bl	8000a8c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	printf("\r\n===== ANIMATRONIC EAGLE FUCK YEAH =====\r\n");
 8000644:	4824      	ldr	r0, [pc, #144]	@ (80006d8 <main+0xc8>)
 8000646:	f005 f8f7 	bl	8005838 <puts>
	__XL430_HandleTypeDef XL430_1;
	__XL430_HandleTypeDef XL430_2;

	XL430_Init(&XL430_1, &huart1, 1, 2);
 800064a:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 800064e:	2302      	movs	r3, #2
 8000650:	2201      	movs	r2, #1
 8000652:	4922      	ldr	r1, [pc, #136]	@ (80006dc <main+0xcc>)
 8000654:	f000 ff96 	bl	8001584 <XL430_Init>
	XL430_Init_debug(&XL430_1, &huart1, &huart2, 1, 2);
 8000658:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 800065c:	2302      	movs	r3, #2
 800065e:	9300      	str	r3, [sp, #0]
 8000660:	2301      	movs	r3, #1
 8000662:	4a1f      	ldr	r2, [pc, #124]	@ (80006e0 <main+0xd0>)
 8000664:	491d      	ldr	r1, [pc, #116]	@ (80006dc <main+0xcc>)
 8000666:	f000 ffbb 	bl	80015e0 <XL430_Init_debug>
	XL430_Init(&XL430_2, &huart1, 2, 2);
 800066a:	4638      	mov	r0, r7
 800066c:	2302      	movs	r3, #2
 800066e:	2202      	movs	r2, #2
 8000670:	491a      	ldr	r1, [pc, #104]	@ (80006dc <main+0xcc>)
 8000672:	f000 ff87 	bl	8001584 <XL430_Init>
	XL430_Init_debug(&XL430_2, &huart1, &huart2, 2, 2);
 8000676:	4638      	mov	r0, r7
 8000678:	2302      	movs	r3, #2
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2302      	movs	r3, #2
 800067e:	4a18      	ldr	r2, [pc, #96]	@ (80006e0 <main+0xd0>)
 8000680:	4916      	ldr	r1, [pc, #88]	@ (80006dc <main+0xcc>)
 8000682:	f000 ffad 	bl	80015e0 <XL430_Init_debug>
	XL430_Ping(&XL430_1);
 8000686:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800068a:	4618      	mov	r0, r3
 800068c:	f000 fff2 	bl	8001674 <XL430_Ping>
	XL430_Write_Data2(&XL430_1,XL430_REG_TORQUE_ENABLE,1);
 8000690:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	@ 0x40
 8000698:	4618      	mov	r0, r3
 800069a:	f001 f8d6 	bl	800184a <XL430_Write_Data2>
	waitNms(50);
 800069e:	2032      	movs	r0, #50	@ 0x32
 80006a0:	f001 f9d2 	bl	8001a48 <waitNms>
	(&XL430_1)->torque_enable = 1;
 80006a4:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 80006a8:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80006ac:	2201      	movs	r2, #1
 80006ae:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a

	XL430_Write_Data2(&XL430_1,XL430_REG_GOAL_VELOCITY,250);
 80006b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80006b6:	22fa      	movs	r2, #250	@ 0xfa
 80006b8:	2168      	movs	r1, #104	@ 0x68
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 f8c5 	bl	800184a <XL430_Write_Data2>
	waitNms(50);
 80006c0:	2032      	movs	r0, #50	@ 0x32
 80006c2:	f001 f9c1 	bl	8001a48 <waitNms>
	XL430_Write_Data2(&XL430_1,XL430_REG_GOAL_VELOCITY,0);
 80006c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80006ca:	2200      	movs	r2, #0
 80006cc:	2168      	movs	r1, #104	@ 0x68
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f8bb 	bl	800184a <XL430_Write_Data2>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80006d4:	bf00      	nop
 80006d6:	e7fd      	b.n	80006d4 <main+0xc4>
 80006d8:	08006668 	.word	0x08006668
 80006dc:	20000250 	.word	0x20000250
 80006e0:	200002e4 	.word	0x200002e4

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	@ 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	2238      	movs	r2, #56	@ 0x38
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f005 f9b4 	bl	8005a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000706:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800070a:	f001 fe03 	bl	8002314 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000716:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2340      	movs	r3, #64	@ 0x40
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0318 	add.w	r3, r7, #24
 8000724:	4618      	mov	r0, r3
 8000726:	f001 fea9 	bl	800247c <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000730:	f000 fbc0 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2301      	movs	r3, #1
 800073a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f9a7 	bl	8002aa0 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000758:	f000 fbac 	bl	8000eb4 <Error_Handler>
  }
}
 800075c:	bf00      	nop
 800075e:	3750      	adds	r7, #80	@ 0x50
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000768:	4b1b      	ldr	r3, [pc, #108]	@ (80007d8 <MX_I2C3_Init+0x74>)
 800076a:	4a1c      	ldr	r2, [pc, #112]	@ (80007dc <MX_I2C3_Init+0x78>)
 800076c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00503D58;
 800076e:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_I2C3_Init+0x74>)
 8000770:	4a1b      	ldr	r2, [pc, #108]	@ (80007e0 <MX_I2C3_Init+0x7c>)
 8000772:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000774:	4b18      	ldr	r3, [pc, #96]	@ (80007d8 <MX_I2C3_Init+0x74>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800077a:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_I2C3_Init+0x74>)
 800077c:	2201      	movs	r2, #1
 800077e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000780:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <MX_I2C3_Init+0x74>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_I2C3_Init+0x74>)
 8000788:	2200      	movs	r2, #0
 800078a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_I2C3_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_I2C3_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_I2C3_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800079e:	480e      	ldr	r0, [pc, #56]	@ (80007d8 <MX_I2C3_Init+0x74>)
 80007a0:	f001 fc86 	bl	80020b0 <HAL_I2C_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80007aa:	f000 fb83 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ae:	2100      	movs	r1, #0
 80007b0:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <MX_I2C3_Init+0x74>)
 80007b2:	f001 fd18 	bl	80021e6 <HAL_I2CEx_ConfigAnalogFilter>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80007bc:	f000 fb7a 	bl	8000eb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80007c0:	2100      	movs	r1, #0
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_I2C3_Init+0x74>)
 80007c4:	f001 fd5a 	bl	800227c <HAL_I2CEx_ConfigDigitalFilter>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80007ce:	f000 fb71 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000084 	.word	0x20000084
 80007dc:	40007800 	.word	0x40007800
 80007e0:	00503d58 	.word	0x00503d58

080007e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	@ 0x70
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ea:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000804:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2234      	movs	r2, #52	@ 0x34
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f005 f91e 	bl	8005a60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000824:	4b51      	ldr	r3, [pc, #324]	@ (800096c <MX_TIM1_Init+0x188>)
 8000826:	4a52      	ldr	r2, [pc, #328]	@ (8000970 <MX_TIM1_Init+0x18c>)
 8000828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800082a:	4b50      	ldr	r3, [pc, #320]	@ (800096c <MX_TIM1_Init+0x188>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000830:	4b4e      	ldr	r3, [pc, #312]	@ (800096c <MX_TIM1_Init+0x188>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000836:	4b4d      	ldr	r3, [pc, #308]	@ (800096c <MX_TIM1_Init+0x188>)
 8000838:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800083c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800083e:	4b4b      	ldr	r3, [pc, #300]	@ (800096c <MX_TIM1_Init+0x188>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000844:	4b49      	ldr	r3, [pc, #292]	@ (800096c <MX_TIM1_Init+0x188>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084a:	4b48      	ldr	r3, [pc, #288]	@ (800096c <MX_TIM1_Init+0x188>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000850:	4846      	ldr	r0, [pc, #280]	@ (800096c <MX_TIM1_Init+0x188>)
 8000852:	f002 fd8f 	bl	8003374 <HAL_TIM_Base_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800085c:	f000 fb2a 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000860:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000864:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000866:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800086a:	4619      	mov	r1, r3
 800086c:	483f      	ldr	r0, [pc, #252]	@ (800096c <MX_TIM1_Init+0x188>)
 800086e:	f002 ff4d 	bl	800370c <HAL_TIM_ConfigClockSource>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000878:	f000 fb1c 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800087c:	483b      	ldr	r0, [pc, #236]	@ (800096c <MX_TIM1_Init+0x188>)
 800087e:	f002 fdd0 	bl	8003422 <HAL_TIM_PWM_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000888:	f000 fb14 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800088c:	2300      	movs	r3, #0
 800088e:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000890:	2300      	movs	r3, #0
 8000892:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000898:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800089c:	4619      	mov	r1, r3
 800089e:	4833      	ldr	r0, [pc, #204]	@ (800096c <MX_TIM1_Init+0x188>)
 80008a0:	f003 fcc4 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80008aa:	f000 fb03 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ae:	2360      	movs	r3, #96	@ 0x60
 80008b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008b6:	2300      	movs	r3, #0
 80008b8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ba:	2300      	movs	r3, #0
 80008bc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008c2:	2300      	movs	r3, #0
 80008c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008c6:	2300      	movs	r3, #0
 80008c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008ce:	2200      	movs	r2, #0
 80008d0:	4619      	mov	r1, r3
 80008d2:	4826      	ldr	r0, [pc, #152]	@ (800096c <MX_TIM1_Init+0x188>)
 80008d4:	f002 fe06 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80008de:	f000 fae9 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	4820      	ldr	r0, [pc, #128]	@ (800096c <MX_TIM1_Init+0x188>)
 80008ec:	f002 fdfa 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80008f6:	f000 fadd 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80008fe:	2208      	movs	r2, #8
 8000900:	4619      	mov	r1, r3
 8000902:	481a      	ldr	r0, [pc, #104]	@ (800096c <MX_TIM1_Init+0x188>)
 8000904:	f002 fdee 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800090e:	f000 fad1 	bl	8000eb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000934:	2300      	movs	r3, #0
 8000936:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000938:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000942:	2300      	movs	r3, #0
 8000944:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000946:	2300      	movs	r3, #0
 8000948:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	4619      	mov	r1, r3
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <MX_TIM1_Init+0x188>)
 8000950:	f003 fd02 	bl	8004358 <HAL_TIMEx_ConfigBreakDeadTime>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_TIM1_Init+0x17a>
  {
    Error_Handler();
 800095a:	f000 faab 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800095e:	4803      	ldr	r0, [pc, #12]	@ (800096c <MX_TIM1_Init+0x188>)
 8000960:	f000 fb72 	bl	8001048 <HAL_TIM_MspPostInit>

}
 8000964:	bf00      	nop
 8000966:	3770      	adds	r7, #112	@ 0x70
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	200000d8 	.word	0x200000d8
 8000970:	40012c00 	.word	0x40012c00

08000974 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08e      	sub	sp, #56	@ 0x38
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800097a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097e:	2200      	movs	r2, #0
 8000980:	601a      	str	r2, [r3, #0]
 8000982:	605a      	str	r2, [r3, #4]
 8000984:	609a      	str	r2, [r3, #8]
 8000986:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000994:	463b      	mov	r3, r7
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
 80009a2:	615a      	str	r2, [r3, #20]
 80009a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a6:	4b38      	ldr	r3, [pc, #224]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009a8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009ae:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009ba:	4b33      	ldr	r3, [pc, #204]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80009c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009ce:	482e      	ldr	r0, [pc, #184]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009d0:	f002 fcd0 	bl	8003374 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 fa6b 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4827      	ldr	r0, [pc, #156]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009ec:	f002 fe8e 	bl	800370c <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80009f6:	f000 fa5d 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009fa:	4823      	ldr	r0, [pc, #140]	@ (8000a88 <MX_TIM2_Init+0x114>)
 80009fc:	f002 fd11 	bl	8003422 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a06:	f000 fa55 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a12:	f107 031c 	add.w	r3, r7, #28
 8000a16:	4619      	mov	r1, r3
 8000a18:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <MX_TIM2_Init+0x114>)
 8000a1a:	f003 fc07 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a24:	f000 fa46 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	@ 0x60
 8000a2a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a38:	463b      	mov	r3, r7
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4812      	ldr	r0, [pc, #72]	@ (8000a88 <MX_TIM2_Init+0x114>)
 8000a40:	f002 fd50 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000a4a:	f000 fa33 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2204      	movs	r2, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	480c      	ldr	r0, [pc, #48]	@ (8000a88 <MX_TIM2_Init+0x114>)
 8000a56:	f002 fd45 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000a60:	f000 fa28 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	2208      	movs	r2, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM2_Init+0x114>)
 8000a6c:	f002 fd3a 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000a76:	f000 fa1d 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a7a:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <MX_TIM2_Init+0x114>)
 8000a7c:	f000 fae4 	bl	8001048 <HAL_TIM_MspPostInit>

}
 8000a80:	bf00      	nop
 8000a82:	3738      	adds	r7, #56	@ 0x38
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000124 	.word	0x20000124

08000a8c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08e      	sub	sp, #56	@ 0x38
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
 8000a9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa0:	f107 031c 	add.w	r3, r7, #28
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aac:	463b      	mov	r3, r7
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000abe:	4b2d      	ldr	r3, [pc, #180]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8000b78 <MX_TIM4_Init+0xec>)
 8000ac2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aca:	4b2a      	ldr	r3, [pc, #168]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ad0:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000ad2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ad6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad8:	4b26      	ldr	r3, [pc, #152]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ae4:	4823      	ldr	r0, [pc, #140]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000ae6:	f002 fc45 	bl	8003374 <HAL_TIM_Base_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000af0:	f000 f9e0 	bl	8000eb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000afa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000afe:	4619      	mov	r1, r3
 8000b00:	481c      	ldr	r0, [pc, #112]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000b02:	f002 fe03 	bl	800370c <HAL_TIM_ConfigClockSource>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000b0c:	f000 f9d2 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000b10:	4818      	ldr	r0, [pc, #96]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000b12:	f002 fc86 	bl	8003422 <HAL_TIM_PWM_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000b1c:	f000 f9ca 	bl	8000eb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4811      	ldr	r0, [pc, #68]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000b30:	f003 fb7c 	bl	800422c <HAL_TIMEx_MasterConfigSynchronization>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000b3a:	f000 f9bb 	bl	8000eb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	@ 0x60
 8000b40:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b46:	2300      	movs	r3, #0
 8000b48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b4e:	463b      	mov	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	4619      	mov	r1, r3
 8000b54:	4807      	ldr	r0, [pc, #28]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000b56:	f002 fcc5 	bl	80034e4 <HAL_TIM_PWM_ConfigChannel>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000b60:	f000 f9a8 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b64:	4803      	ldr	r0, [pc, #12]	@ (8000b74 <MX_TIM4_Init+0xe8>)
 8000b66:	f000 fa6f 	bl	8001048 <HAL_TIM_MspPostInit>

}
 8000b6a:	bf00      	nop
 8000b6c:	3738      	adds	r7, #56	@ 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000170 	.word	0x20000170
 8000b78:	40000800 	.word	0x40000800

08000b7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000b82:	4a23      	ldr	r2, [pc, #140]	@ (8000c10 <MX_UART4_Init+0x94>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b86:	4b21      	ldr	r3, [pc, #132]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000b88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b17      	ldr	r3, [pc, #92]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bbe:	4b13      	ldr	r3, [pc, #76]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bc4:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bc6:	f003 fc5b 	bl	8004480 <HAL_UART_Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000bd0:	f000 f970 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	480d      	ldr	r0, [pc, #52]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bd8:	f004 fc4c 	bl	8005474 <HAL_UARTEx_SetTxFifoThreshold>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000be2:	f000 f967 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000be6:	2100      	movs	r1, #0
 8000be8:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bea:	f004 fc81 	bl	80054f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000bf4:	f000 f95e 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <MX_UART4_Init+0x90>)
 8000bfa:	f004 fc02 	bl	8005402 <HAL_UARTEx_DisableFifoMode>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d001      	beq.n	8000c08 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c04:	f000 f956 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001bc 	.word	0x200001bc
 8000c10:	40004c00 	.word	0x40004c00

08000c14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c18:	4b22      	ldr	r3, [pc, #136]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c1a:	4a23      	ldr	r2, [pc, #140]	@ (8000ca8 <MX_USART1_UART_Init+0x94>)
 8000c1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c20:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c50:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c56:	4b13      	ldr	r3, [pc, #76]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000c5c:	4811      	ldr	r0, [pc, #68]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c5e:	f003 fc5f 	bl	8004520 <HAL_HalfDuplex_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c68:	f000 f924 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	480d      	ldr	r0, [pc, #52]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c70:	f004 fc00 	bl	8005474 <HAL_UARTEx_SetTxFifoThreshold>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c7a:	f000 f91b 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c7e:	2100      	movs	r1, #0
 8000c80:	4808      	ldr	r0, [pc, #32]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c82:	f004 fc35 	bl	80054f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c8c:	f000 f912 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_USART1_UART_Init+0x90>)
 8000c92:	f004 fbb6 	bl	8005402 <HAL_UARTEx_DisableFifoMode>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c9c:	f000 f90a 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000250 	.word	0x20000250
 8000ca8:	40013800 	.word	0x40013800

08000cac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cb0:	4b22      	ldr	r3, [pc, #136]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cb2:	4a23      	ldr	r2, [pc, #140]	@ (8000d40 <MX_USART2_UART_Init+0x94>)
 8000cb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cca:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cd2:	220c      	movs	r2, #12
 8000cd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ce8:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cee:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cf4:	4811      	ldr	r0, [pc, #68]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000cf6:	f003 fbc3 	bl	8004480 <HAL_UART_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d00:	f000 f8d8 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d04:	2100      	movs	r1, #0
 8000d06:	480d      	ldr	r0, [pc, #52]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000d08:	f004 fbb4 	bl	8005474 <HAL_UARTEx_SetTxFifoThreshold>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d12:	f000 f8cf 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d16:	2100      	movs	r1, #0
 8000d18:	4808      	ldr	r0, [pc, #32]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000d1a:	f004 fbe9 	bl	80054f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d24:	f000 f8c6 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_USART2_UART_Init+0x90>)
 8000d2a:	f004 fb6a 	bl	8005402 <HAL_UARTEx_DisableFifoMode>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d34:	f000 f8be 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200002e4 	.word	0x200002e4
 8000d40:	40004400 	.word	0x40004400

08000d44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d48:	4b22      	ldr	r3, [pc, #136]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d4a:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <MX_USART3_UART_Init+0x94>)
 8000d4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d74:	4b17      	ldr	r3, [pc, #92]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d86:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8c:	4811      	ldr	r0, [pc, #68]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000d8e:	f003 fb77 	bl	8004480 <HAL_UART_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d98:	f000 f88c 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480d      	ldr	r0, [pc, #52]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000da0:	f004 fb68 	bl	8005474 <HAL_UARTEx_SetTxFifoThreshold>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000daa:	f000 f883 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dae:	2100      	movs	r1, #0
 8000db0:	4808      	ldr	r0, [pc, #32]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000db2:	f004 fb9d 	bl	80054f0 <HAL_UARTEx_SetRxFifoThreshold>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000dbc:	f000 f87a 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dc0:	4804      	ldr	r0, [pc, #16]	@ (8000dd4 <MX_USART3_UART_Init+0x90>)
 8000dc2:	f004 fb1e 	bl	8005402 <HAL_UARTEx_DisableFifoMode>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dcc:	f000 f872 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000378 	.word	0x20000378
 8000dd8:	40004800 	.word	0x40004800

08000ddc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
 8000dea:	605a      	str	r2, [r3, #4]
 8000dec:	609a      	str	r2, [r3, #8]
 8000dee:	60da      	str	r2, [r3, #12]
 8000df0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df6:	4a2c      	ldr	r2, [pc, #176]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dfe:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	4b27      	ldr	r3, [pc, #156]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0e:	4a26      	ldr	r2, [pc, #152]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e16:	4b24      	ldr	r3, [pc, #144]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e26:	4a20      	ldr	r2, [pc, #128]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ea8 <MX_GPIO_Init+0xcc>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	603b      	str	r3, [r7, #0]
 8000e38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(INT_GPIO_Port, INT_Pin, GPIO_PIN_RESET);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	481b      	ldr	r0, [pc, #108]	@ (8000eac <MX_GPIO_Init+0xd0>)
 8000e40:	f001 f91e 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000e44:	2200      	movs	r2, #0
 8000e46:	2170      	movs	r1, #112	@ 0x70
 8000e48:	4819      	ldr	r0, [pc, #100]	@ (8000eb0 <MX_GPIO_Init+0xd4>)
 8000e4a:	f001 f919 	bl	8002080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <MX_GPIO_Init+0xd4>)
 8000e62:	f000 ff8b 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8000e66:	2380      	movs	r3, #128	@ 0x80
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480b      	ldr	r0, [pc, #44]	@ (8000eac <MX_GPIO_Init+0xd0>)
 8000e7e:	f000 ff7d 	bl	8001d7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000e82:	2370      	movs	r3, #112	@ 0x70
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	@ (8000eb0 <MX_GPIO_Init+0xd4>)
 8000e9a:	f000 ff6f 	bl	8001d7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9e:	bf00      	nop
 8000ea0:	3720      	adds	r7, #32
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48000800 	.word	0x48000800
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <Error_Handler+0x8>

08000ec0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	4a0e      	ldr	r2, [pc, #56]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ed4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	607b      	str	r3, [r7, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ede:	4b09      	ldr	r3, [pc, #36]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	4a08      	ldr	r2, [pc, #32]	@ (8000f04 <HAL_MspInit+0x44>)
 8000ee4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ee8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_MspInit+0x44>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000ef6:	f001 fab1 	bl	800245c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b09e      	sub	sp, #120	@ 0x78
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	2254      	movs	r2, #84	@ 0x54
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f004 fd99 	bl	8005a60 <memset>
  if(hi2c->Instance==I2C3)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1f      	ldr	r2, [pc, #124]	@ (8000fb0 <HAL_I2C_MspInit+0xa8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d137      	bne.n	8000fa8 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000f38:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 ffc6 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f52:	f7ff ffaf 	bl	8000eb4 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	4b17      	ldr	r3, [pc, #92]	@ (8000fb4 <HAL_I2C_MspInit+0xac>)
 8000f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5a:	4a16      	ldr	r2, [pc, #88]	@ (8000fb4 <HAL_I2C_MspInit+0xac>)
 8000f5c:	f043 0304 	orr.w	r3, r3, #4
 8000f60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f62:	4b14      	ldr	r3, [pc, #80]	@ (8000fb4 <HAL_I2C_MspInit+0xac>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f72:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f74:	2312      	movs	r3, #18
 8000f76:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8000f80:	2308      	movs	r3, #8
 8000f82:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f84:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	@ (8000fb8 <HAL_I2C_MspInit+0xb0>)
 8000f8c:	f000 fef6 	bl	8001d7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f90:	4b08      	ldr	r3, [pc, #32]	@ (8000fb4 <HAL_I2C_MspInit+0xac>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f94:	4a07      	ldr	r2, [pc, #28]	@ (8000fb4 <HAL_I2C_MspInit+0xac>)
 8000f96:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f9c:	4b05      	ldr	r3, [pc, #20]	@ (8000fb4 <HAL_I2C_MspInit+0xac>)
 8000f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fa0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000fa8:	bf00      	nop
 8000faa:	3778      	adds	r7, #120	@ 0x78
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40007800 	.word	0x40007800
 8000fb4:	40021000 	.word	0x40021000
 8000fb8:	48000800 	.word	0x48000800

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1c      	ldr	r2, [pc, #112]	@ (800103c <HAL_TIM_Base_MspInit+0x80>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fce:	4b1c      	ldr	r3, [pc, #112]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8000fd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8000fd4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000fd8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fda:	4b19      	ldr	r3, [pc, #100]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8000fdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fde:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000fe6:	e022      	b.n	800102e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ff0:	d10c      	bne.n	800100c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ff6:	4a12      	ldr	r2, [pc, #72]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ffe:	4b10      	ldr	r3, [pc, #64]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8001000:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
}
 800100a:	e010      	b.n	800102e <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0c      	ldr	r2, [pc, #48]	@ (8001044 <HAL_TIM_Base_MspInit+0x88>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d10b      	bne.n	800102e <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001016:	4b0a      	ldr	r3, [pc, #40]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800101a:	4a09      	ldr	r2, [pc, #36]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6593      	str	r3, [r2, #88]	@ 0x58
 8001022:	4b07      	ldr	r3, [pc, #28]	@ (8001040 <HAL_TIM_Base_MspInit+0x84>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
}
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40012c00 	.word	0x40012c00
 8001040:	40021000 	.word	0x40021000
 8001044:	40000800 	.word	0x40000800

08001048 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a3d      	ldr	r2, [pc, #244]	@ (800115c <HAL_TIM_MspPostInit+0x114>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d11c      	bne.n	80010a4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	4b3d      	ldr	r3, [pc, #244]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	4a3c      	ldr	r2, [pc, #240]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001076:	4b3a      	ldr	r3, [pc, #232]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	f003 0304 	and.w	r3, r3, #4
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC2     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001082:	2307      	movs	r3, #7
 8001084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001092:	2302      	movs	r3, #2
 8001094:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	4831      	ldr	r0, [pc, #196]	@ (8001164 <HAL_TIM_MspPostInit+0x11c>)
 800109e:	f000 fe6d 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80010a2:	e057      	b.n	8001154 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80010ac:	d12f      	bne.n	800110e <HAL_TIM_MspPostInit+0xc6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ba:	4b29      	ldr	r3, [pc, #164]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010be:	f003 0301 	and.w	r3, r3, #1
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010c6:	2303      	movs	r3, #3
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010d6:	2301      	movs	r3, #1
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010e4:	f000 fe4a 	bl	8001d7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80010fa:	230a      	movs	r3, #10
 80010fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001108:	f000 fe38 	bl	8001d7c <HAL_GPIO_Init>
}
 800110c:	e022      	b.n	8001154 <HAL_TIM_MspPostInit+0x10c>
  else if(htim->Instance==TIM4)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a15      	ldr	r2, [pc, #84]	@ (8001168 <HAL_TIM_MspPostInit+0x120>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d11d      	bne.n	8001154 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 800111a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111c:	4a10      	ldr	r2, [pc, #64]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_TIM_MspPostInit+0x118>)
 8001126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001130:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001136:	2302      	movs	r3, #2
 8001138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2300      	movs	r3, #0
 8001140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001142:	230a      	movs	r3, #10
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001146:	f107 0314 	add.w	r3, r7, #20
 800114a:	4619      	mov	r1, r3
 800114c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001150:	f000 fe14 	bl	8001d7c <HAL_GPIO_Init>
}
 8001154:	bf00      	nop
 8001156:	3728      	adds	r7, #40	@ 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40012c00 	.word	0x40012c00
 8001160:	40021000 	.word	0x40021000
 8001164:	48000800 	.word	0x48000800
 8001168:	40000800 	.word	0x40000800

0800116c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0a4      	sub	sp, #144	@ 0x90
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001188:	2254      	movs	r2, #84	@ 0x54
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f004 fc67 	bl	8005a60 <memset>
  if(huart->Instance==UART4)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a82      	ldr	r2, [pc, #520]	@ (80013a0 <HAL_UART_MspInit+0x234>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d13b      	bne.n	8001214 <HAL_UART_MspInit+0xa8>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800119c:	2308      	movs	r3, #8
 800119e:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fe95 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011b4:	f7ff fe7e 	bl	8000eb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80011b8:	4b7a      	ldr	r3, [pc, #488]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80011ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011bc:	4a79      	ldr	r2, [pc, #484]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80011be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80011c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80011c4:	4b77      	ldr	r3, [pc, #476]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80011c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80011cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d0:	4b74      	ldr	r3, [pc, #464]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80011d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d4:	4a73      	ldr	r2, [pc, #460]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80011d6:	f043 0304 	orr.w	r3, r3, #4
 80011da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011dc:	4b71      	ldr	r3, [pc, #452]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80011de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80011e8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ee:	2302      	movs	r3, #2
 80011f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001200:	2305      	movs	r3, #5
 8001202:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800120a:	4619      	mov	r1, r3
 800120c:	4866      	ldr	r0, [pc, #408]	@ (80013a8 <HAL_UART_MspInit+0x23c>)
 800120e:	f000 fdb5 	bl	8001d7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001212:	e0c0      	b.n	8001396 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART1)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a64      	ldr	r2, [pc, #400]	@ (80013ac <HAL_UART_MspInit+0x240>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d13a      	bne.n	8001294 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800121e:	2301      	movs	r3, #1
 8001220:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fe54 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_UART_MspInit+0xce>
      Error_Handler();
 8001236:	f7ff fe3d 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800123a:	4b5a      	ldr	r3, [pc, #360]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 800123c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123e:	4a59      	ldr	r2, [pc, #356]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001240:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001244:	6613      	str	r3, [r2, #96]	@ 0x60
 8001246:	4b57      	ldr	r3, [pc, #348]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001248:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800124a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124e:	61fb      	str	r3, [r7, #28]
 8001250:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	4b54      	ldr	r3, [pc, #336]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001256:	4a53      	ldr	r2, [pc, #332]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800125e:	4b51      	ldr	r3, [pc, #324]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = USART1_TX_Pin;
 800126a:	2310      	movs	r3, #16
 800126c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800126e:	2312      	movs	r3, #18
 8001270:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001274:	2301      	movs	r3, #1
 8001276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001280:	2307      	movs	r3, #7
 8001282:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(USART1_TX_GPIO_Port, &GPIO_InitStruct);
 8001286:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800128a:	4619      	mov	r1, r3
 800128c:	4846      	ldr	r0, [pc, #280]	@ (80013a8 <HAL_UART_MspInit+0x23c>)
 800128e:	f000 fd75 	bl	8001d7c <HAL_GPIO_Init>
}
 8001292:	e080      	b.n	8001396 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a45      	ldr	r2, [pc, #276]	@ (80013b0 <HAL_UART_MspInit+0x244>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d13b      	bne.n	8001316 <HAL_UART_MspInit+0x1aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800129e:	2302      	movs	r3, #2
 80012a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012aa:	4618      	mov	r0, r3
 80012ac:	f001 fe14 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d001      	beq.n	80012ba <HAL_UART_MspInit+0x14e>
      Error_Handler();
 80012b6:	f7ff fdfd 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80012ba:	4b3a      	ldr	r3, [pc, #232]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80012bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012be:	4a39      	ldr	r2, [pc, #228]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80012c6:	4b37      	ldr	r3, [pc, #220]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b34      	ldr	r3, [pc, #208]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a33      	ldr	r2, [pc, #204]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b31      	ldr	r3, [pc, #196]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80012ea:	230c      	movs	r3, #12
 80012ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001300:	2307      	movs	r3, #7
 8001302:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001310:	f000 fd34 	bl	8001d7c <HAL_GPIO_Init>
}
 8001314:	e03f      	b.n	8001396 <HAL_UART_MspInit+0x22a>
  else if(huart->Instance==USART3)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a26      	ldr	r2, [pc, #152]	@ (80013b4 <HAL_UART_MspInit+0x248>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d13a      	bne.n	8001396 <HAL_UART_MspInit+0x22a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001320:	2304      	movs	r3, #4
 8001322:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001324:	2300      	movs	r3, #0
 8001326:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001328:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fdd3 	bl	8002ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <HAL_UART_MspInit+0x1d0>
      Error_Handler();
 8001338:	f7ff fdbc 	bl	8000eb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800133c:	4b19      	ldr	r3, [pc, #100]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 800133e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001340:	4a18      	ldr	r2, [pc, #96]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001342:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001346:	6593      	str	r3, [r2, #88]	@ 0x58
 8001348:	4b16      	ldr	r3, [pc, #88]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 800134a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800134c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001354:	4b13      	ldr	r3, [pc, #76]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001358:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 800135a:	f043 0302 	orr.w	r3, r3, #2
 800135e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001360:	4b10      	ldr	r3, [pc, #64]	@ (80013a4 <HAL_UART_MspInit+0x238>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001364:	f003 0302 	and.w	r3, r3, #2
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART3_TX_Pin|USART3_RX_Pin;
 800136c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001370:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001384:	2307      	movs	r3, #7
 8001386:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800138a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800138e:	4619      	mov	r1, r3
 8001390:	4809      	ldr	r0, [pc, #36]	@ (80013b8 <HAL_UART_MspInit+0x24c>)
 8001392:	f000 fcf3 	bl	8001d7c <HAL_GPIO_Init>
}
 8001396:	bf00      	nop
 8001398:	3790      	adds	r7, #144	@ 0x90
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40004c00 	.word	0x40004c00
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000800 	.word	0x48000800
 80013ac:	40013800 	.word	0x40013800
 80013b0:	40004400 	.word	0x40004400
 80013b4:	40004800 	.word	0x40004800
 80013b8:	48000400 	.word	0x48000400

080013bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013c0:	bf00      	nop
 80013c2:	e7fd      	b.n	80013c0 <NMI_Handler+0x4>

080013c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013c8:	bf00      	nop
 80013ca:	e7fd      	b.n	80013c8 <HardFault_Handler+0x4>

080013cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d0:	bf00      	nop
 80013d2:	e7fd      	b.n	80013d0 <MemManage_Handler+0x4>

080013d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013d8:	bf00      	nop
 80013da:	e7fd      	b.n	80013d8 <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	bf00      	nop
 80013e2:	e7fd      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f6:	bf00      	nop
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001412:	f000 fbb1 	bl	8001b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}

0800141a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	60f8      	str	r0, [r7, #12]
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e00a      	b.n	8001442 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800142c:	f7ff f8d2 	bl	80005d4 <__io_getchar>
 8001430:	4601      	mov	r1, r0
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	1c5a      	adds	r2, r3, #1
 8001436:	60ba      	str	r2, [r7, #8]
 8001438:	b2ca      	uxtb	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697a      	ldr	r2, [r7, #20]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	429a      	cmp	r2, r3
 8001448:	dbf0      	blt.n	800142c <_read+0x12>
  }

  return len;
 800144a:	687b      	ldr	r3, [r7, #4]
}
 800144c:	4618      	mov	r0, r3
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	e009      	b.n	800147a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001466:	68bb      	ldr	r3, [r7, #8]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	60ba      	str	r2, [r7, #8]
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f89e 	bl	80005b0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	429a      	cmp	r2, r3
 8001480:	dbf1      	blt.n	8001466 <_write+0x12>
  }
  return len;
 8001482:	687b      	ldr	r3, [r7, #4]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <_close>:

int _close(int file)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001494:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014b4:	605a      	str	r2, [r3, #4]
  return 0;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_isatty>:

int _isatty(int file)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014cc:	2301      	movs	r3, #1
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014da:	b480      	push	{r7}
 80014dc:	b085      	sub	sp, #20
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f004 faea 	bl	8005afc <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20020000 	.word	0x20020000
 8001554:	00000400 	.word	0x00000400
 8001558:	2000040c 	.word	0x2000040c
 800155c:	20000560 	.word	0x20000560

08001560 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <XL430_Init>:
const uint8_t msg_ping_error[]="No response from ping request\r\n";
const uint8_t msg_ping_crc_error[]="Incorrect CRC in ping answer\r\n";

// passer en wheel mode pcq on tourne plus que 1 tour

void XL430_Init(__XL430_HandleTypeDef *XL430_Handle, UART_HandleTypeDef *huart, uint8_t id, uint8_t  baudrate){
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	4611      	mov	r1, r2
 8001590:	461a      	mov	r2, r3
 8001592:	460b      	mov	r3, r1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	4613      	mov	r3, r2
 8001598:	71bb      	strb	r3, [r7, #6]
	XL430_Handle->huart = huart;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	68ba      	ldr	r2, [r7, #8]
 800159e:	601a      	str	r2, [r3, #0]
	XL430_Handle->id = id;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	79fa      	ldrb	r2, [r7, #7]
 80015a4:	749a      	strb	r2, [r3, #18]
	XL430_Handle->baudrate = baudrate;
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	79ba      	ldrb	r2, [r7, #6]
 80015aa:	74da      	strb	r2, [r3, #19]
	XL430_Handle->operating_mode = 1;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	2201      	movs	r2, #1
 80015b0:	759a      	strb	r2, [r3, #22]
	XL430_Handle->drive_mode = 0;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	755a      	strb	r2, [r3, #21]
	XL430_Handle->max_pos_limit = 4095;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80015be:	631a      	str	r2, [r3, #48]	@ 0x30
	XL430_Handle->min_pos_limit = 0;
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2200      	movs	r2, #0
 80015c4:	635a      	str	r2, [r3, #52]	@ 0x34
	XL430_Handle->velocity_limit = 1023;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80015cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	// Set in RX mode
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 80015ce:	2100      	movs	r1, #0
 80015d0:	68f8      	ldr	r0, [r7, #12]
 80015d2:	f000 f91d 	bl	8001810 <XL430_Set_UART_RxTxMode>
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
	...

080015e0 <XL430_Init_debug>:

void XL430_Init_debug(__XL430_HandleTypeDef *XL430_Handle, UART_HandleTypeDef *huart, UART_HandleTypeDef *huart_debug, uint8_t id, uint8_t baudrate){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	70fb      	strb	r3, [r7, #3]
	XL430_Handle->huart = huart;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	68ba      	ldr	r2, [r7, #8]
 80015f2:	601a      	str	r2, [r3, #0]
	XL430_Handle->huart_debug = huart_debug;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	605a      	str	r2, [r3, #4]
	XL430_Handle->id = id;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	78fa      	ldrb	r2, [r7, #3]
 80015fe:	749a      	strb	r2, [r3, #18]
	XL430_Handle->baudrate = baudrate;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	7e3a      	ldrb	r2, [r7, #24]
 8001604:	74da      	strb	r2, [r3, #19]
	XL430_Handle->operating_mode = 3;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	2203      	movs	r2, #3
 800160a:	759a      	strb	r2, [r3, #22]
	XL430_Handle->drive_mode = 0;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	755a      	strb	r2, [r3, #21]
	XL430_Handle->max_pos_limit = 4095;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8001618:	631a      	str	r2, [r3, #48]	@ 0x30
	XL430_Handle->min_pos_limit = 0;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	@ 0x34
	XL430_Handle->velocity_limit = 1023;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001626:	62da      	str	r2, [r3, #44]	@ 0x2c

	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 800162e:	4a10      	ldr	r2, [pc, #64]	@ (8001670 <XL430_Init_debug+0x90>)
 8001630:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001634:	4618      	mov	r0, r3
 8001636:	f004 f907 	bl	8005848 <sniprintf>
 800163a:	4603      	mov	r3, r0
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				"XL430_Init_debug\r\n");
	HAL_UART_Transmit(XL430_Handle->huart_debug, XL430_Handle->tx_buffer_debug, XL430_Handle->tx_data_debug_length, HAL_MAX_DELAY);
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	6858      	ldr	r0, [r3, #4]
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f503 7182 	add.w	r1, r3, #260	@ 0x104
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8001654:	461a      	mov	r2, r3
 8001656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800165a:	f002 ffb9 	bl	80045d0 <HAL_UART_Transmit>
	// Set in RX mode
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 800165e:	2100      	movs	r1, #0
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f000 f8d5 	bl	8001810 <XL430_Set_UART_RxTxMode>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08006694 	.word	0x08006694

08001674 <XL430_Ping>:

HAL_StatusTypeDef XL430_Ping(__XL430_HandleTypeDef *XL430_Handle){
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b087      	sub	sp, #28
 8001678:	af04      	add	r7, sp, #16
 800167a:	6078      	str	r0, [r7, #4]
	// Header & Reserved
	XL430_Handle->tx_buffer[0] = XL430_HEADER_1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	22ff      	movs	r2, #255	@ 0xff
 8001680:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	XL430_Handle->tx_buffer[1] = XL430_HEADER_2;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	22ff      	movs	r2, #255	@ 0xff
 8001688:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	XL430_Handle->tx_buffer[2] = XL430_HEADER_3;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	22fd      	movs	r2, #253	@ 0xfd
 8001690:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	XL430_Handle->tx_buffer[3] = XL430_RSVD;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	// ID
	XL430_Handle->tx_buffer[4] = XL430_Handle->id;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	7c9a      	ldrb	r2, [r3, #18]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	// Length (Nb param + Instru + CRC)
	XL430_Handle->tx_buffer[5] = 0x03;   // Low
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2203      	movs	r2, #3
 80016aa:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	XL430_Handle->tx_buffer[6] = 0x00;   // High
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	// Instruction : ping
	XL430_Handle->tx_buffer[7] = XL430_INST_PING;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2201      	movs	r2, #1
 80016ba:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

	XL430_Handle->tx_data_length = 8;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2208      	movs	r2, #8
 80016c2:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

	// CRC
	XL430_Update_CRC(XL430_Handle);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f000 f93a 	bl	8001940 <XL430_Update_CRC>
	XL430_Handle->tx_buffer[8] = (XL430_Handle->crc) & 0x00FF;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	XL430_Handle->tx_buffer[9] = (XL430_Handle->crc >> 8) & 0x00FF;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80016e0:	0a1b      	lsrs	r3, r3, #8
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b

	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_TX);
 80016ec:	2101      	movs	r1, #1
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 f88e 	bl	8001810 <XL430_Set_UART_RxTxMode>
	HAL_UART_Transmit(XL430_Handle->huart, XL430_Handle->tx_buffer,  XL430_Handle->tx_data_length + XL430_CRC_LENGTH, 10);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f103 0182 	add.w	r1, r3, #130	@ 0x82
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8001704:	3302      	adds	r3, #2
 8001706:	b29a      	uxth	r2, r3
 8001708:	230a      	movs	r3, #10
 800170a:	f002 ff61 	bl	80045d0 <HAL_UART_Transmit>
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 800170e:	2100      	movs	r1, #0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f87d 	bl	8001810 <XL430_Set_UART_RxTxMode>

	if(HAL_ERROR == HAL_UART_Receive(XL430_Handle->huart, XL430_Handle->rx_buffer, 14, 10)){
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f103 01c3 	add.w	r1, r3, #195	@ 0xc3
 8001720:	230a      	movs	r3, #10
 8001722:	220e      	movs	r2, #14
 8001724:	f002 ffe2 	bl	80046ec <HAL_UART_Receive>
 8001728:	4603      	mov	r3, r0
 800172a:	2b01      	cmp	r3, #1
 800172c:	d108      	bne.n	8001740 <XL430_Ping+0xcc>
		HAL_UART_Transmit(XL430_Handle->huart_debug, msg_ping_error, sizeof(msg_ping_error), 10);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6858      	ldr	r0, [r3, #4]
 8001732:	230a      	movs	r3, #10
 8001734:	2220      	movs	r2, #32
 8001736:	4932      	ldr	r1, [pc, #200]	@ (8001800 <XL430_Ping+0x18c>)
 8001738:	f002 ff4a 	bl	80045d0 <HAL_UART_Transmit>
		return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e05b      	b.n	80017f8 <XL430_Ping+0x184>
	}

	XL430_Handle->rx_data_length = XL430_Handle->rx_buffer[5]+(XL430_Handle->rx_buffer[6] << 8);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 20c8 	ldrb.w	r2, [r3, #200]	@ 0xc8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f883 2103 	strb.w	r2, [r3, #259]	@ 0x103

	if(XL430_Check_CRC(XL430_Handle) == HAL_ERROR){
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f92d 	bl	80019ac <XL430_Check_CRC>
 8001752:	4603      	mov	r3, r0
 8001754:	2b01      	cmp	r3, #1
 8001756:	d108      	bne.n	800176a <XL430_Ping+0xf6>
		HAL_UART_Transmit(XL430_Handle->huart_debug, msg_ping_crc_error, sizeof(msg_ping_crc_error), 10);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6858      	ldr	r0, [r3, #4]
 800175c:	230a      	movs	r3, #10
 800175e:	221f      	movs	r2, #31
 8001760:	4928      	ldr	r1, [pc, #160]	@ (8001804 <XL430_Ping+0x190>)
 8001762:	f002 ff35 	bl	80045d0 <HAL_UART_Transmit>
		return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e046      	b.n	80017f8 <XL430_Ping+0x184>
	}
	HAL_UART_Transmit(XL430_Handle->huart_debug, msg_ping_correct, sizeof(msg_ping_correct), 10);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6858      	ldr	r0, [r3, #4]
 800176e:	230a      	movs	r3, #10
 8001770:	221a      	movs	r2, #26
 8001772:	4925      	ldr	r1, [pc, #148]	@ (8001808 <XL430_Ping+0x194>)
 8001774:	f002 ff2c 	bl	80045d0 <HAL_UART_Transmit>

	XL430_Handle->error_code = XL430_Handle->rx_buffer[8]; // ERR Code
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 20cb 	ldrb.w	r2, [r3, #203]	@ 0xcb
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	745a      	strb	r2, [r3, #17]
	XL430_Handle->model_number = XL430_Handle->rx_buffer[9] + (XL430_Handle->rx_buffer[10]<<8);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f893 30cd 	ldrb.w	r3, [r3, #205]	@ 0xcd
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b29b      	uxth	r3, r3
 8001794:	4413      	add	r3, r2
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	811a      	strh	r2, [r3, #8]
	XL430_Handle->firmware_version = XL430_Handle->rx_buffer[11];
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f893 20ce 	ldrb.w	r2, [r3, #206]	@ 0xce
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	741a      	strb	r2, [r3, #16]

	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 7082 	add.w	r0, r3, #260	@ 0x104
				"Model number :     %d \r\n"
				"Firmware version : %d \r\n"
				"Error code :       %d \r\n"
				"ID :               %d \r\n",
				XL430_Handle->model_number, XL430_Handle->firmware_version, XL430_Handle->error_code, XL430_Handle->id);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	891b      	ldrh	r3, [r3, #8]
	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 80017b0:	461c      	mov	r4, r3
				XL430_Handle->model_number, XL430_Handle->firmware_version, XL430_Handle->error_code, XL430_Handle->id);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	7c1b      	ldrb	r3, [r3, #16]
	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 80017b6:	461a      	mov	r2, r3
				XL430_Handle->model_number, XL430_Handle->firmware_version, XL430_Handle->error_code, XL430_Handle->id);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	7c5b      	ldrb	r3, [r3, #17]
	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 80017bc:	4619      	mov	r1, r3
				XL430_Handle->model_number, XL430_Handle->firmware_version, XL430_Handle->error_code, XL430_Handle->id);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7c9b      	ldrb	r3, [r3, #18]
	XL430_Handle->tx_data_debug_length = snprintf(XL430_Handle->tx_buffer_debug, MAX_BUFFER_DEBUG_LENGTH,
 80017c2:	9302      	str	r3, [sp, #8]
 80017c4:	9101      	str	r1, [sp, #4]
 80017c6:	9200      	str	r2, [sp, #0]
 80017c8:	4623      	mov	r3, r4
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <XL430_Ping+0x198>)
 80017cc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80017d0:	f004 f83a 	bl	8005848 <sniprintf>
 80017d4:	4603      	mov	r3, r0
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
	HAL_UART_Transmit(XL430_Handle->huart_debug, XL430_Handle->tx_buffer_debug, XL430_Handle->tx_data_debug_length, 10);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6858      	ldr	r0, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f503 7182 	add.w	r1, r3, #260	@ 0x104
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 80017ee:	461a      	mov	r2, r3
 80017f0:	230a      	movs	r3, #10
 80017f2:	f002 feed 	bl	80045d0 <HAL_UART_Transmit>

	return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	370c      	adds	r7, #12
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd90      	pop	{r4, r7, pc}
 8001800:	08006940 	.word	0x08006940
 8001804:	08006960 	.word	0x08006960
 8001808:	08006924 	.word	0x08006924
 800180c:	080066a8 	.word	0x080066a8

08001810 <XL430_Set_UART_RxTxMode>:

void XL430_Set_UART_RxTxMode(__XL430_HandleTypeDef *XL430_Handle, int mode){
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
 8001818:	6039      	str	r1, [r7, #0]
	if(mode==0){
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d106      	bne.n	800182e <XL430_Set_UART_RxTxMode+0x1e>
		HAL_StatusTypeDef status = HAL_HalfDuplex_EnableReceiver(XL430_Handle->huart);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f003 f87d 	bl	8004924 <HAL_HalfDuplex_EnableReceiver>
 800182a:	4603      	mov	r3, r0
 800182c:	73fb      	strb	r3, [r7, #15]
	}
	if(mode==1){
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <XL430_Set_UART_RxTxMode+0x32>
		HAL_StatusTypeDef status = HAL_HalfDuplex_EnableTransmitter(XL430_Handle->huart);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4618      	mov	r0, r3
 800183a:	f003 f81f 	bl	800487c <HAL_HalfDuplex_EnableTransmitter>
 800183e:	4603      	mov	r3, r0
 8001840:	73bb      	strb	r3, [r7, #14]
	}
}
 8001842:	bf00      	nop
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <XL430_Write_Data2>:
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_TX);
	HAL_UART_Transmit(XL430_Handle->huart, XL430_Handle->tx_buffer, XL430_Handle->tx_data_length + XL430_CRC_LENGTH, 10);
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
}

void XL430_Write_Data2(__XL430_HandleTypeDef *XL430_Handle, uint16_t Address, uint32_t Value){
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	60f8      	str	r0, [r7, #12]
 8001852:	460b      	mov	r3, r1
 8001854:	607a      	str	r2, [r7, #4]
 8001856:	817b      	strh	r3, [r7, #10]
	// Header + reserved
	XL430_Handle->tx_buffer[0] = XL430_HEADER_1;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	22ff      	movs	r2, #255	@ 0xff
 800185c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
	XL430_Handle->tx_buffer[1] = XL430_HEADER_2;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	22ff      	movs	r2, #255	@ 0xff
 8001864:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
	XL430_Handle->tx_buffer[2] = XL430_HEADER_3;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	22fd      	movs	r2, #253	@ 0xfd
 800186c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
	XL430_Handle->tx_buffer[3] = XL430_RSVD;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
	// ID
	XL430_Handle->tx_buffer[4] = XL430_Handle->id;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	7c9a      	ldrb	r2, [r3, #18]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
	// Length (Nb param + Instru + CRC)
	XL430_Handle->tx_buffer[5] = 0x09;   // Length (Low)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2209      	movs	r2, #9
 8001886:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
	XL430_Handle->tx_buffer[6] = 0x00;   // Length (High)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88
	// Instruction : write
	XL430_Handle->tx_buffer[7] = XL430_INST_WRITE_DATA;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2203      	movs	r2, #3
 8001896:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
	// Register Address
	XL430_Handle->tx_buffer[8] = Address & 0x00FF;			// Addr (Low)
 800189a:	897b      	ldrh	r3, [r7, #10]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f883 208a 	strb.w	r2, [r3, #138]	@ 0x8a
	XL430_Handle->tx_buffer[9] = (Address >> 8) & 0x00FF;	// Addr (High)
 80018a4:	897b      	ldrh	r3, [r7, #10]
 80018a6:	0a1b      	lsrs	r3, r3, #8
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f883 208b 	strb.w	r2, [r3, #139]	@ 0x8b
	// Register Value
	XL430_Handle->tx_buffer[10] = Value & 0x00FF;			// Val (Low)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
	XL430_Handle->tx_buffer[11] = (Value >> 8) & 0x00FF;	// Val (High)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b2da      	uxtb	r2, r3
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f883 208d 	strb.w	r2, [r3, #141]	@ 0x8d

	XL430_Handle->tx_buffer[12] = (Value >> 16) & 0x00FF;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f883 208e 	strb.w	r2, [r3, #142]	@ 0x8e
	XL430_Handle->tx_buffer[13] = (Value >> 24) & 0x00FF;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	0e1b      	lsrs	r3, r3, #24
 80018d8:	b2da      	uxtb	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f883 208f 	strb.w	r2, [r3, #143]	@ 0x8f

	XL430_Handle->tx_data_length = 14;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	220e      	movs	r2, #14
 80018e4:	f883 20c2 	strb.w	r2, [r3, #194]	@ 0xc2

	// CRC
	XL430_Update_CRC(XL430_Handle);
 80018e8:	68f8      	ldr	r0, [r7, #12]
 80018ea:	f000 f829 	bl	8001940 <XL430_Update_CRC>
	XL430_Handle->tx_buffer[14] = (XL430_Handle->crc) & 0x00FF;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80018f4:	b2da      	uxtb	r2, r3
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
	XL430_Handle->tx_buffer[15] = (XL430_Handle->crc >> 8) & 0x00FF;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 8001902:	0a1b      	lsrs	r3, r3, #8
 8001904:	b29b      	uxth	r3, r3
 8001906:	b2da      	uxtb	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_TX);
 800190e:	2101      	movs	r1, #1
 8001910:	68f8      	ldr	r0, [r7, #12]
 8001912:	f7ff ff7d 	bl	8001810 <XL430_Set_UART_RxTxMode>
	HAL_UART_Transmit(XL430_Handle->huart, XL430_Handle->tx_buffer, XL430_Handle->tx_data_length + XL430_CRC_LENGTH, 10);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f103 0182 	add.w	r1, r3, #130	@ 0x82
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 8001926:	3302      	adds	r3, #2
 8001928:	b29a      	uxth	r2, r3
 800192a:	230a      	movs	r3, #10
 800192c:	f002 fe50 	bl	80045d0 <HAL_UART_Transmit>
	XL430_Set_UART_RxTxMode(XL430_Handle, XL430_UART_RX);
 8001930:	2100      	movs	r1, #0
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f7ff ff6c 	bl	8001810 <XL430_Set_UART_RxTxMode>
}
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <XL430_Update_CRC>:

void XL430_Led_OnOff(__XL430_HandleTypeDef *XL430_Handle, uint16_t state){
	XL430_Write_Data(XL430_Handle, XL430_REG_LED, state);
}

void XL430_Update_CRC(__XL430_HandleTypeDef *XL430_Handle){
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	uint16_t i,j;
	uint16_t crc_accum = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	81bb      	strh	r3, [r7, #12]

	for(j=0; j<XL430_Handle->tx_data_length; j++){
 800194c:	2300      	movs	r3, #0
 800194e:	81fb      	strh	r3, [r7, #14]
 8001950:	e019      	b.n	8001986 <XL430_Update_CRC+0x46>
		i = ((uint16_t)(crc_accum >> 8) ^ XL430_Handle->tx_buffer[j]) & 0xFF;
 8001952:	89bb      	ldrh	r3, [r7, #12]
 8001954:	0a1b      	lsrs	r3, r3, #8
 8001956:	b29b      	uxth	r3, r3
 8001958:	89fa      	ldrh	r2, [r7, #14]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	440a      	add	r2, r1
 800195e:	f892 2082 	ldrb.w	r2, [r2, #130]	@ 0x82
 8001962:	4053      	eors	r3, r2
 8001964:	b29b      	uxth	r3, r3
 8001966:	b2db      	uxtb	r3, r3
 8001968:	817b      	strh	r3, [r7, #10]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 800196a:	89bb      	ldrh	r3, [r7, #12]
 800196c:	021b      	lsls	r3, r3, #8
 800196e:	b21a      	sxth	r2, r3
 8001970:	897b      	ldrh	r3, [r7, #10]
 8001972:	490d      	ldr	r1, [pc, #52]	@ (80019a8 <XL430_Update_CRC+0x68>)
 8001974:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001978:	b21b      	sxth	r3, r3
 800197a:	4053      	eors	r3, r2
 800197c:	b21b      	sxth	r3, r3
 800197e:	81bb      	strh	r3, [r7, #12]
	for(j=0; j<XL430_Handle->tx_data_length; j++){
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	3301      	adds	r3, #1
 8001984:	81fb      	strh	r3, [r7, #14]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	f893 30c2 	ldrb.w	r3, [r3, #194]	@ 0xc2
 800198c:	461a      	mov	r2, r3
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	4293      	cmp	r3, r2
 8001992:	d3de      	bcc.n	8001952 <XL430_Update_CRC+0x12>
	}
	XL430_Handle->crc = crc_accum;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	89ba      	ldrh	r2, [r7, #12]
 8001998:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
}
 800199c:	bf00      	nop
 800199e:	3714      	adds	r7, #20
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	08006724 	.word	0x08006724

080019ac <XL430_Check_CRC>:

HAL_StatusTypeDef XL430_Check_CRC(__XL430_HandleTypeDef *XL430_Handle){
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
	uint16_t i,j;
	uint16_t crc_accum = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	81bb      	strh	r3, [r7, #12]
	uint16_t crc_read = XL430_Handle->rx_buffer[XL430_Handle->rx_data_length+5] + (((uint16_t)XL430_Handle->rx_buffer[XL430_Handle->rx_data_length+6]) << 8);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 80019be:	3305      	adds	r3, #5
 80019c0:	687a      	ldr	r2, [r7, #4]
 80019c2:	4413      	add	r3, r2
 80019c4:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80019c8:	4619      	mov	r1, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 80019d0:	3306      	adds	r3, #6
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	f893 30c3 	ldrb.w	r3, [r3, #195]	@ 0xc3
 80019da:	021b      	lsls	r3, r3, #8
 80019dc:	b29b      	uxth	r3, r3
 80019de:	440b      	add	r3, r1
 80019e0:	817b      	strh	r3, [r7, #10]

	for(j=0; j<XL430_Handle->rx_data_length+5; j++){
 80019e2:	2300      	movs	r3, #0
 80019e4:	81fb      	strh	r3, [r7, #14]
 80019e6:	e019      	b.n	8001a1c <XL430_Check_CRC+0x70>
		i = ((uint16_t)(crc_accum >> 8) ^ XL430_Handle->rx_buffer[j]) & 0xFF;
 80019e8:	89bb      	ldrh	r3, [r7, #12]
 80019ea:	0a1b      	lsrs	r3, r3, #8
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	89fa      	ldrh	r2, [r7, #14]
 80019f0:	6879      	ldr	r1, [r7, #4]
 80019f2:	440a      	add	r2, r1
 80019f4:	f892 20c3 	ldrb.w	r2, [r2, #195]	@ 0xc3
 80019f8:	4053      	eors	r3, r2
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	813b      	strh	r3, [r7, #8]
		crc_accum = (crc_accum << 8) ^ crc_table[i];
 8001a00:	89bb      	ldrh	r3, [r7, #12]
 8001a02:	021b      	lsls	r3, r3, #8
 8001a04:	b21a      	sxth	r2, r3
 8001a06:	893b      	ldrh	r3, [r7, #8]
 8001a08:	490e      	ldr	r1, [pc, #56]	@ (8001a44 <XL430_Check_CRC+0x98>)
 8001a0a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001a0e:	b21b      	sxth	r3, r3
 8001a10:	4053      	eors	r3, r2
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	81bb      	strh	r3, [r7, #12]
	for(j=0; j<XL430_Handle->rx_data_length+5; j++){
 8001a16:	89fb      	ldrh	r3, [r7, #14]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	81fb      	strh	r3, [r7, #14]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3103 	ldrb.w	r3, [r3, #259]	@ 0x103
 8001a22:	1d1a      	adds	r2, r3, #4
 8001a24:	89fb      	ldrh	r3, [r7, #14]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	dade      	bge.n	80019e8 <XL430_Check_CRC+0x3c>
	}
	if(crc_accum == crc_read) return HAL_OK;
 8001a2a:	89ba      	ldrh	r2, [r7, #12]
 8001a2c:	897b      	ldrh	r3, [r7, #10]
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d101      	bne.n	8001a36 <XL430_Check_CRC+0x8a>
 8001a32:	2300      	movs	r3, #0
 8001a34:	e000      	b.n	8001a38 <XL430_Check_CRC+0x8c>
	else return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	08006724 	.word	0x08006724

08001a48 <waitNms>:

void waitNms(int N){
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	int i;
	int numb = 80000*N;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <waitNms+0x34>)
 8001a54:	fb02 f303 	mul.w	r3, r2, r3
 8001a58:	60bb      	str	r3, [r7, #8]
	for(i=0;i<numb;i++);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e002      	b.n	8001a66 <waitNms+0x1e>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3301      	adds	r3, #1
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fa      	ldr	r2, [r7, #12]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbf8      	blt.n	8001a60 <waitNms+0x18>
}
 8001a6e:	bf00      	nop
 8001a70:	bf00      	nop
 8001a72:	3714      	adds	r7, #20
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	00013880 	.word	0x00013880

08001a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a82:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff fd6c 	bl	8001560 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	@ (8001ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <LoopForever+0xe>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001acc <LoopForever+0x16>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f004 f82b 	bl	8005b08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab2:	f7fe fdad 	bl	8000610 <main>

08001ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
  ldr   r0, =_estack
 8001ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001ac4:	080069ec 	.word	0x080069ec
  ldr r2, =_sbss
 8001ac8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001acc:	20000560 	.word	0x20000560

08001ad0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_2_IRQHandler>

08001ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f91b 	bl	8001d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae2:	200f      	movs	r0, #15
 8001ae4:	f000 f80e 	bl	8001b04 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e001      	b.n	8001af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af4:	f7ff f9e4 	bl	8000ec0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af8:	79fb      	ldrb	r3, [r7, #7]

}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b10:	4b16      	ldr	r3, [pc, #88]	@ (8001b6c <HAL_InitTick+0x68>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d022      	beq.n	8001b5e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b18:	4b15      	ldr	r3, [pc, #84]	@ (8001b70 <HAL_InitTick+0x6c>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <HAL_InitTick+0x68>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001b24:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f918 	bl	8001d62 <HAL_SYSTICK_Config>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10f      	bne.n	8001b58 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b0f      	cmp	r3, #15
 8001b3c:	d809      	bhi.n	8001b52 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b46:	f000 f8f2 	bl	8001d2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b74 <HAL_InitTick+0x70>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	e007      	b.n	8001b62 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	73fb      	strb	r3, [r7, #15]
 8001b56:	e004      	b.n	8001b62 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	73fb      	strb	r3, [r7, #15]
 8001b5c:	e001      	b.n	8001b62 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3710      	adds	r7, #16
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000008 	.word	0x20000008
 8001b70:	20000000 	.word	0x20000000
 8001b74:	20000004 	.word	0x20000004

08001b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	@ (8001b94 <HAL_IncTick+0x1c>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4b05      	ldr	r3, [pc, #20]	@ (8001b98 <HAL_IncTick+0x20>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4413      	add	r3, r2
 8001b86:	4a03      	ldr	r2, [pc, #12]	@ (8001b94 <HAL_IncTick+0x1c>)
 8001b88:	6013      	str	r3, [r2, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	20000410 	.word	0x20000410
 8001b98:	20000008 	.word	0x20000008

08001b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba0:	4b03      	ldr	r3, [pc, #12]	@ (8001bb0 <HAL_GetTick+0x14>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	20000410 	.word	0x20000410

08001bb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be6:	4a04      	ldr	r2, [pc, #16]	@ (8001bf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	60d3      	str	r3, [r2, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	e000ed00 	.word	0xe000ed00

08001bfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c00:	4b04      	ldr	r3, [pc, #16]	@ (8001c14 <__NVIC_GetPriorityGrouping+0x18>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	f003 0307 	and.w	r3, r3, #7
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	@ (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	@ (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	@ 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
	...

08001cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ce4:	d301      	bcc.n	8001cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e00f      	b.n	8001d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cea:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <SysTick_Config+0x40>)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf2:	210f      	movs	r1, #15
 8001cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001cf8:	f7ff ff8e 	bl	8001c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cfc:	4b05      	ldr	r3, [pc, #20]	@ (8001d14 <SysTick_Config+0x40>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d02:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <SysTick_Config+0x40>)
 8001d04:	2207      	movs	r2, #7
 8001d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	e000e010 	.word	0xe000e010

08001d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff ff47 	bl	8001bb4 <__NVIC_SetPriorityGrouping>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b086      	sub	sp, #24
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	4603      	mov	r3, r0
 8001d36:	60b9      	str	r1, [r7, #8]
 8001d38:	607a      	str	r2, [r7, #4]
 8001d3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d3c:	f7ff ff5e 	bl	8001bfc <__NVIC_GetPriorityGrouping>
 8001d40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	6978      	ldr	r0, [r7, #20]
 8001d48:	f7ff ff90 	bl	8001c6c <NVIC_EncodePriority>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff ff5f 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d5a:	bf00      	nop
 8001d5c:	3718      	adds	r7, #24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7ff ffb2 	bl	8001cd4 <SysTick_Config>
 8001d70:	4603      	mov	r3, r0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d8a:	e15a      	b.n	8002042 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	2101      	movs	r1, #1
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	4013      	ands	r3, r2
 8001d9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 814c 	beq.w	800203c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d005      	beq.n	8001dbc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d130      	bne.n	8001e1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4313      	orrs	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df2:	2201      	movs	r2, #1
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	693a      	ldr	r2, [r7, #16]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f003 0201 	and.w	r2, r3, #1
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d017      	beq.n	8001e5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	2203      	movs	r2, #3
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	693a      	ldr	r2, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	693a      	ldr	r2, [r7, #16]
 8001e58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d123      	bne.n	8001eae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	08da      	lsrs	r2, r3, #3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	3208      	adds	r2, #8
 8001e6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f003 0307 	and.w	r3, r3, #7
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	220f      	movs	r2, #15
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	691a      	ldr	r2, [r3, #16]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	6939      	ldr	r1, [r7, #16]
 8001eaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0203 	and.w	r2, r3, #3
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 80a6 	beq.w	800203c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	@ (8002060 <HAL_GPIO_Init+0x2e4>)
 8001ef2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef4:	4a5a      	ldr	r2, [pc, #360]	@ (8002060 <HAL_GPIO_Init+0x2e4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6613      	str	r3, [r2, #96]	@ 0x60
 8001efc:	4b58      	ldr	r3, [pc, #352]	@ (8002060 <HAL_GPIO_Init+0x2e4>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f08:	4a56      	ldr	r2, [pc, #344]	@ (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	089b      	lsrs	r3, r3, #2
 8001f0e:	3302      	adds	r3, #2
 8001f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	220f      	movs	r2, #15
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	43db      	mvns	r3, r3
 8001f26:	693a      	ldr	r2, [r7, #16]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f32:	d01f      	beq.n	8001f74 <HAL_GPIO_Init+0x1f8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a4c      	ldr	r2, [pc, #304]	@ (8002068 <HAL_GPIO_Init+0x2ec>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d019      	beq.n	8001f70 <HAL_GPIO_Init+0x1f4>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a4b      	ldr	r2, [pc, #300]	@ (800206c <HAL_GPIO_Init+0x2f0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_GPIO_Init+0x1f0>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a4a      	ldr	r2, [pc, #296]	@ (8002070 <HAL_GPIO_Init+0x2f4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_GPIO_Init+0x1ec>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a49      	ldr	r2, [pc, #292]	@ (8002074 <HAL_GPIO_Init+0x2f8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <HAL_GPIO_Init+0x1e8>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a48      	ldr	r2, [pc, #288]	@ (8002078 <HAL_GPIO_Init+0x2fc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_GPIO_Init+0x1e4>
 8001f5c:	2305      	movs	r3, #5
 8001f5e:	e00a      	b.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f60:	2306      	movs	r3, #6
 8001f62:	e008      	b.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f64:	2304      	movs	r3, #4
 8001f66:	e006      	b.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e004      	b.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e002      	b.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f70:	2301      	movs	r3, #1
 8001f72:	e000      	b.n	8001f76 <HAL_GPIO_Init+0x1fa>
 8001f74:	2300      	movs	r3, #0
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	f002 0203 	and.w	r2, r2, #3
 8001f7c:	0092      	lsls	r2, r2, #2
 8001f7e:	4093      	lsls	r3, r2
 8001f80:	693a      	ldr	r2, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f86:	4937      	ldr	r1, [pc, #220]	@ (8002064 <HAL_GPIO_Init+0x2e8>)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	693a      	ldr	r2, [r7, #16]
 8001f90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f94:	4b39      	ldr	r3, [pc, #228]	@ (800207c <HAL_GPIO_Init+0x300>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fb8:	4a30      	ldr	r2, [pc, #192]	@ (800207c <HAL_GPIO_Init+0x300>)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fbe:	4b2f      	ldr	r3, [pc, #188]	@ (800207c <HAL_GPIO_Init+0x300>)
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	693a      	ldr	r2, [r7, #16]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fe2:	4a26      	ldr	r2, [pc, #152]	@ (800207c <HAL_GPIO_Init+0x300>)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fe8:	4b24      	ldr	r3, [pc, #144]	@ (800207c <HAL_GPIO_Init+0x300>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800200c:	4a1b      	ldr	r2, [pc, #108]	@ (800207c <HAL_GPIO_Init+0x300>)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_GPIO_Init+0x300>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	43db      	mvns	r3, r3
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4013      	ands	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800202e:	693a      	ldr	r2, [r7, #16]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4313      	orrs	r3, r2
 8002034:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002036:	4a11      	ldr	r2, [pc, #68]	@ (800207c <HAL_GPIO_Init+0x300>)
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	3301      	adds	r3, #1
 8002040:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	fa22 f303 	lsr.w	r3, r2, r3
 800204c:	2b00      	cmp	r3, #0
 800204e:	f47f ae9d 	bne.w	8001d8c <HAL_GPIO_Init+0x10>
  }
}
 8002052:	bf00      	nop
 8002054:	bf00      	nop
 8002056:	371c      	adds	r7, #28
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40021000 	.word	0x40021000
 8002064:	40010000 	.word	0x40010000
 8002068:	48000400 	.word	0x48000400
 800206c:	48000800 	.word	0x48000800
 8002070:	48000c00 	.word	0x48000c00
 8002074:	48001000 	.word	0x48001000
 8002078:	48001400 	.word	0x48001400
 800207c:	40010400 	.word	0x40010400

08002080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	807b      	strh	r3, [r7, #2]
 800208c:	4613      	mov	r3, r2
 800208e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002090:	787b      	ldrb	r3, [r7, #1]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002096:	887a      	ldrh	r2, [r7, #2]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e08d      	b.n	80021de <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe ff16 	bl	8000f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e006      	b.n	8002138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d108      	bne.n	8002152 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e007      	b.n	8002162 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6812      	ldr	r2, [r2, #0]
 800216c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002174:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002184:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69d9      	ldr	r1, [r3, #28]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f042 0201 	orr.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2220      	movs	r2, #32
 80021ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b20      	cmp	r3, #32
 80021fa:	d138      	bne.n	800226e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002206:	2302      	movs	r3, #2
 8002208:	e032      	b.n	8002270 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2201      	movs	r2, #1
 800220e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2224      	movs	r2, #36	@ 0x24
 8002216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002238:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6819      	ldr	r1, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f042 0201 	orr.w	r2, r2, #1
 8002258:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800226e:	2302      	movs	r3, #2
  }
}
 8002270:	4618      	mov	r0, r3
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b20      	cmp	r3, #32
 8002290:	d139      	bne.n	8002306 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002298:	2b01      	cmp	r3, #1
 800229a:	d101      	bne.n	80022a0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800229c:	2302      	movs	r3, #2
 800229e:	e033      	b.n	8002308 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2224      	movs	r2, #36	@ 0x24
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80022ce:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f042 0201 	orr.w	r2, r2, #1
 80022f0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2220      	movs	r2, #32
 80022f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002306:	2302      	movs	r3, #2
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d141      	bne.n	80023a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002322:	4b4b      	ldr	r3, [pc, #300]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800232e:	d131      	bne.n	8002394 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002330:	4b47      	ldr	r3, [pc, #284]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002336:	4a46      	ldr	r2, [pc, #280]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800233c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002340:	4b43      	ldr	r3, [pc, #268]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002348:	4a41      	ldr	r2, [pc, #260]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800234e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002350:	4b40      	ldr	r3, [pc, #256]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2232      	movs	r2, #50	@ 0x32
 8002356:	fb02 f303 	mul.w	r3, r2, r3
 800235a:	4a3f      	ldr	r2, [pc, #252]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800235c:	fba2 2303 	umull	r2, r3, r2, r3
 8002360:	0c9b      	lsrs	r3, r3, #18
 8002362:	3301      	adds	r3, #1
 8002364:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002366:	e002      	b.n	800236e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3b01      	subs	r3, #1
 800236c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800236e:	4b38      	ldr	r3, [pc, #224]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002376:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800237a:	d102      	bne.n	8002382 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f2      	bne.n	8002368 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002382:	4b33      	ldr	r3, [pc, #204]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	695b      	ldr	r3, [r3, #20]
 8002386:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800238e:	d158      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e057      	b.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002394:	4b2e      	ldr	r3, [pc, #184]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800239a:	4a2d      	ldr	r2, [pc, #180]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023a4:	e04d      	b.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023ac:	d141      	bne.n	8002432 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ae:	4b28      	ldr	r3, [pc, #160]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ba:	d131      	bne.n	8002420 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023bc:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023c2:	4a23      	ldr	r2, [pc, #140]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023cc:	4b20      	ldr	r3, [pc, #128]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023d4:	4a1e      	ldr	r2, [pc, #120]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002454 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2232      	movs	r2, #50	@ 0x32
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002458 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023e8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ec:	0c9b      	lsrs	r3, r3, #18
 80023ee:	3301      	adds	r3, #1
 80023f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023f2:	e002      	b.n	80023fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002402:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002406:	d102      	bne.n	800240e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f2      	bne.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800241a:	d112      	bne.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e011      	b.n	8002444 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002426:	4a0a      	ldr	r2, [pc, #40]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002428:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800242c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002430:	e007      	b.n	8002442 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002432:	4b07      	ldr	r3, [pc, #28]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800243a:	4a05      	ldr	r2, [pc, #20]	@ (8002450 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800243c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002440:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40007000 	.word	0x40007000
 8002454:	20000000 	.word	0x20000000
 8002458:	431bde83 	.word	0x431bde83

0800245c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002460:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a04      	ldr	r2, [pc, #16]	@ (8002478 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002466:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800246a:	6093      	str	r3, [r2, #8]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	40007000 	.word	0x40007000

0800247c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b088      	sub	sp, #32
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e2fe      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d075      	beq.n	8002586 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800249a:	4b97      	ldr	r3, [pc, #604]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 030c 	and.w	r3, r3, #12
 80024a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024a4:	4b94      	ldr	r3, [pc, #592]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_OscConfig+0x3e>
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2b03      	cmp	r3, #3
 80024b8:	d002      	beq.n	80024c0 <HAL_RCC_OscConfig+0x44>
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	2b08      	cmp	r3, #8
 80024be:	d10b      	bne.n	80024d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	4b8d      	ldr	r3, [pc, #564]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d05b      	beq.n	8002584 <HAL_RCC_OscConfig+0x108>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d157      	bne.n	8002584 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e2d9      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024e0:	d106      	bne.n	80024f0 <HAL_RCC_OscConfig+0x74>
 80024e2:	4b85      	ldr	r3, [pc, #532]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a84      	ldr	r2, [pc, #528]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80024e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	e01d      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024f8:	d10c      	bne.n	8002514 <HAL_RCC_OscConfig+0x98>
 80024fa:	4b7f      	ldr	r3, [pc, #508]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a7e      	ldr	r2, [pc, #504]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	4b7c      	ldr	r3, [pc, #496]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a7b      	ldr	r2, [pc, #492]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e00b      	b.n	800252c <HAL_RCC_OscConfig+0xb0>
 8002514:	4b78      	ldr	r3, [pc, #480]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a77      	ldr	r2, [pc, #476]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800251a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	4b75      	ldr	r3, [pc, #468]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a74      	ldr	r2, [pc, #464]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002534:	f7ff fb32 	bl	8001b9c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800253a:	e008      	b.n	800254e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800253c:	f7ff fb2e 	bl	8001b9c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b64      	cmp	r3, #100	@ 0x64
 8002548:	d901      	bls.n	800254e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e29e      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800254e:	4b6a      	ldr	r3, [pc, #424]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0f0      	beq.n	800253c <HAL_RCC_OscConfig+0xc0>
 800255a:	e014      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7ff fb1e 	bl	8001b9c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002564:	f7ff fb1a 	bl	8001b9c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b64      	cmp	r3, #100	@ 0x64
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e28a      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002576:	4b60      	ldr	r3, [pc, #384]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0xe8>
 8002582:	e000      	b.n	8002586 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d075      	beq.n	800267e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002592:	4b59      	ldr	r3, [pc, #356]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	f003 030c 	and.w	r3, r3, #12
 800259a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800259c:	4b56      	ldr	r3, [pc, #344]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0303 	and.w	r3, r3, #3
 80025a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	2b0c      	cmp	r3, #12
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_OscConfig+0x136>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_OscConfig+0x13c>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d11f      	bne.n	80025f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025b8:	4b4f      	ldr	r3, [pc, #316]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_OscConfig+0x154>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e25d      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b49      	ldr	r3, [pc, #292]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	4946      	ldr	r1, [pc, #280]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80025e4:	4b45      	ldr	r3, [pc, #276]	@ (80026fc <HAL_RCC_OscConfig+0x280>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7ff fa8b 	bl	8001b04 <HAL_InitTick>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d043      	beq.n	800267c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e249      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d023      	beq.n	8002648 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002600:	4b3d      	ldr	r3, [pc, #244]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a3c      	ldr	r2, [pc, #240]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800260a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800260c:	f7ff fac6 	bl	8001b9c <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002614:	f7ff fac2 	bl	8001b9c <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e232      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002626:	4b34      	ldr	r3, [pc, #208]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b31      	ldr	r3, [pc, #196]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	061b      	lsls	r3, r3, #24
 8002640:	492d      	ldr	r1, [pc, #180]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002642:	4313      	orrs	r3, r2
 8002644:	604b      	str	r3, [r1, #4]
 8002646:	e01a      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002648:	4b2b      	ldr	r3, [pc, #172]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a2a      	ldr	r2, [pc, #168]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800264e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7ff faa2 	bl	8001b9c <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7ff fa9e 	bl	8001b9c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e20e      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800266e:	4b22      	ldr	r3, [pc, #136]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1f0      	bne.n	800265c <HAL_RCC_OscConfig+0x1e0>
 800267a:	e000      	b.n	800267e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d041      	beq.n	800270e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d01c      	beq.n	80026cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b19      	ldr	r3, [pc, #100]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002698:	4a17      	ldr	r2, [pc, #92]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a2:	f7ff fa7b 	bl	8001b9c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026aa:	f7ff fa77 	bl	8001b9c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e1e7      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026bc:	4b0e      	ldr	r3, [pc, #56]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0ef      	beq.n	80026aa <HAL_RCC_OscConfig+0x22e>
 80026ca:	e020      	b.n	800270e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026cc:	4b0a      	ldr	r3, [pc, #40]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026d2:	4a09      	ldr	r2, [pc, #36]	@ (80026f8 <HAL_RCC_OscConfig+0x27c>)
 80026d4:	f023 0301 	bic.w	r3, r3, #1
 80026d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7ff fa5e 	bl	8001b9c <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e2:	e00d      	b.n	8002700 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026e4:	f7ff fa5a 	bl	8001b9c <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d906      	bls.n	8002700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e1ca      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
 80026f6:	bf00      	nop
 80026f8:	40021000 	.word	0x40021000
 80026fc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002700:	4b8c      	ldr	r3, [pc, #560]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002702:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1ea      	bne.n	80026e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 80a6 	beq.w	8002868 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271c:	2300      	movs	r3, #0
 800271e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002720:	4b84      	ldr	r3, [pc, #528]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d101      	bne.n	8002730 <HAL_RCC_OscConfig+0x2b4>
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x2b6>
 8002730:	2300      	movs	r3, #0
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00d      	beq.n	8002752 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002736:	4b7f      	ldr	r3, [pc, #508]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	4a7e      	ldr	r2, [pc, #504]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 800273c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002740:	6593      	str	r3, [r2, #88]	@ 0x58
 8002742:	4b7c      	ldr	r3, [pc, #496]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002746:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800274e:	2301      	movs	r3, #1
 8002750:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002752:	4b79      	ldr	r3, [pc, #484]	@ (8002938 <HAL_RCC_OscConfig+0x4bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275a:	2b00      	cmp	r3, #0
 800275c:	d118      	bne.n	8002790 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275e:	4b76      	ldr	r3, [pc, #472]	@ (8002938 <HAL_RCC_OscConfig+0x4bc>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a75      	ldr	r2, [pc, #468]	@ (8002938 <HAL_RCC_OscConfig+0x4bc>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800276a:	f7ff fa17 	bl	8001b9c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002772:	f7ff fa13 	bl	8001b9c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e183      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002784:	4b6c      	ldr	r3, [pc, #432]	@ (8002938 <HAL_RCC_OscConfig+0x4bc>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d108      	bne.n	80027aa <HAL_RCC_OscConfig+0x32e>
 8002798:	4b66      	ldr	r3, [pc, #408]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 800279a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800279e:	4a65      	ldr	r2, [pc, #404]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027a8:	e024      	b.n	80027f4 <HAL_RCC_OscConfig+0x378>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d110      	bne.n	80027d4 <HAL_RCC_OscConfig+0x358>
 80027b2:	4b60      	ldr	r3, [pc, #384]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	4a5e      	ldr	r2, [pc, #376]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027ba:	f043 0304 	orr.w	r3, r3, #4
 80027be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027c2:	4b5c      	ldr	r3, [pc, #368]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c8:	4a5a      	ldr	r2, [pc, #360]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d2:	e00f      	b.n	80027f4 <HAL_RCC_OscConfig+0x378>
 80027d4:	4b57      	ldr	r3, [pc, #348]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027da:	4a56      	ldr	r2, [pc, #344]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027e4:	4b53      	ldr	r3, [pc, #332]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ea:	4a52      	ldr	r2, [pc, #328]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d016      	beq.n	800282a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027fc:	f7ff f9ce 	bl	8001b9c <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	e00a      	b.n	800281a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002804:	f7ff f9ca 	bl	8001b9c <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002812:	4293      	cmp	r3, r2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e138      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800281a:	4b46      	ldr	r3, [pc, #280]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ed      	beq.n	8002804 <HAL_RCC_OscConfig+0x388>
 8002828:	e015      	b.n	8002856 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282a:	f7ff f9b7 	bl	8001b9c <HAL_GetTick>
 800282e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002830:	e00a      	b.n	8002848 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002832:	f7ff f9b3 	bl	8001b9c <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002840:	4293      	cmp	r3, r2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e121      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002848:	4b3a      	ldr	r3, [pc, #232]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 800284a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1ed      	bne.n	8002832 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002856:	7ffb      	ldrb	r3, [r7, #31]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d105      	bne.n	8002868 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285c:	4b35      	ldr	r3, [pc, #212]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	4a34      	ldr	r2, [pc, #208]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002866:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0320 	and.w	r3, r3, #32
 8002870:	2b00      	cmp	r3, #0
 8002872:	d03c      	beq.n	80028ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d01c      	beq.n	80028b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800287c:	4b2d      	ldr	r3, [pc, #180]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 800287e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002882:	4a2c      	ldr	r2, [pc, #176]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288c:	f7ff f986 	bl	8001b9c <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002894:	f7ff f982 	bl	8001b9c <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e0f2      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028a6:	4b23      	ldr	r3, [pc, #140]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80028a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d0ef      	beq.n	8002894 <HAL_RCC_OscConfig+0x418>
 80028b4:	e01b      	b.n	80028ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80028b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c6:	f7ff f969 	bl	8001b9c <HAL_GetTick>
 80028ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028cc:	e008      	b.n	80028e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ce:	f7ff f965 	bl	8001b9c <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d901      	bls.n	80028e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e0d5      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028e0:	4b14      	ldr	r3, [pc, #80]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80028e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1ef      	bne.n	80028ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69db      	ldr	r3, [r3, #28]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	f000 80c9 	beq.w	8002a8a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b0c      	cmp	r3, #12
 8002902:	f000 8083 	beq.w	8002a0c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	2b02      	cmp	r3, #2
 800290c:	d15e      	bne.n	80029cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800290e:	4b09      	ldr	r3, [pc, #36]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a08      	ldr	r2, [pc, #32]	@ (8002934 <HAL_RCC_OscConfig+0x4b8>)
 8002914:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002918:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291a:	f7ff f93f 	bl	8001b9c <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002920:	e00c      	b.n	800293c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002922:	f7ff f93b 	bl	8001b9c <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d905      	bls.n	800293c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e0ab      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
 8002934:	40021000 	.word	0x40021000
 8002938:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800293c:	4b55      	ldr	r3, [pc, #340]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1ec      	bne.n	8002922 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002948:	4b52      	ldr	r3, [pc, #328]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	4b52      	ldr	r3, [pc, #328]	@ (8002a98 <HAL_RCC_OscConfig+0x61c>)
 800294e:	4013      	ands	r3, r2
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	6a11      	ldr	r1, [r2, #32]
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002958:	3a01      	subs	r2, #1
 800295a:	0112      	lsls	r2, r2, #4
 800295c:	4311      	orrs	r1, r2
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002962:	0212      	lsls	r2, r2, #8
 8002964:	4311      	orrs	r1, r2
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800296a:	0852      	lsrs	r2, r2, #1
 800296c:	3a01      	subs	r2, #1
 800296e:	0552      	lsls	r2, r2, #21
 8002970:	4311      	orrs	r1, r2
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002976:	0852      	lsrs	r2, r2, #1
 8002978:	3a01      	subs	r2, #1
 800297a:	0652      	lsls	r2, r2, #25
 800297c:	4311      	orrs	r1, r2
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002982:	06d2      	lsls	r2, r2, #27
 8002984:	430a      	orrs	r2, r1
 8002986:	4943      	ldr	r1, [pc, #268]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 8002988:	4313      	orrs	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298c:	4b41      	ldr	r3, [pc, #260]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a40      	ldr	r2, [pc, #256]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 8002992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002996:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002998:	4b3e      	ldr	r3, [pc, #248]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4a3d      	ldr	r2, [pc, #244]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 800299e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a4:	f7ff f8fa 	bl	8001b9c <HAL_GetTick>
 80029a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ac:	f7ff f8f6 	bl	8001b9c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e066      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	4b35      	ldr	r3, [pc, #212]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x530>
 80029ca:	e05e      	b.n	8002a8a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b31      	ldr	r3, [pc, #196]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a30      	ldr	r2, [pc, #192]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 80029d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7ff f8e0 	bl	8001b9c <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7ff f8dc 	bl	8001b9c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04c      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	4b28      	ldr	r3, [pc, #160]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80029fe:	4b25      	ldr	r3, [pc, #148]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	4924      	ldr	r1, [pc, #144]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 8002a04:	4b25      	ldr	r3, [pc, #148]	@ (8002a9c <HAL_RCC_OscConfig+0x620>)
 8002a06:	4013      	ands	r3, r2
 8002a08:	60cb      	str	r3, [r1, #12]
 8002a0a:	e03e      	b.n	8002a8a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	69db      	ldr	r3, [r3, #28]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d101      	bne.n	8002a18 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e039      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a18:	4b1e      	ldr	r3, [pc, #120]	@ (8002a94 <HAL_RCC_OscConfig+0x618>)
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0203 	and.w	r2, r3, #3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d12c      	bne.n	8002a86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a36:	3b01      	subs	r3, #1
 8002a38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d123      	bne.n	8002a86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a48:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d11b      	bne.n	8002a86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a58:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d113      	bne.n	8002a86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	085b      	lsrs	r3, r3, #1
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7c:	085b      	lsrs	r3, r3, #1
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e000      	b.n	8002a8c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40021000 	.word	0x40021000
 8002a98:	019f800c 	.word	0x019f800c
 8002a9c:	feeefffc 	.word	0xfeeefffc

08002aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b086      	sub	sp, #24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d101      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e11e      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ab8:	4b91      	ldr	r3, [pc, #580]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 030f 	and.w	r3, r3, #15
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d910      	bls.n	8002ae8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ac6:	4b8e      	ldr	r3, [pc, #568]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f023 020f 	bic.w	r2, r3, #15
 8002ace:	498c      	ldr	r1, [pc, #560]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ad6:	4b8a      	ldr	r3, [pc, #552]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 030f 	and.w	r3, r3, #15
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e106      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0301 	and.w	r3, r3, #1
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d073      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	2b03      	cmp	r3, #3
 8002afa:	d129      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002afc:	4b81      	ldr	r3, [pc, #516]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d101      	bne.n	8002b0c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0f4      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b0c:	f000 f99e 	bl	8002e4c <RCC_GetSysClockFreqFromPLLSource>
 8002b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4a7c      	ldr	r2, [pc, #496]	@ (8002d08 <HAL_RCC_ClockConfig+0x268>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d93f      	bls.n	8002b9a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b1a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d033      	beq.n	8002b9a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d12f      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b3a:	4b72      	ldr	r3, [pc, #456]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b42:	4a70      	ldr	r2, [pc, #448]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b48:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	e024      	b.n	8002b9a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b58:	4b6a      	ldr	r3, [pc, #424]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d109      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e0c6      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b68:	4b66      	ldr	r3, [pc, #408]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0be      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002b78:	f000 f8ce 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4a61      	ldr	r2, [pc, #388]	@ (8002d08 <HAL_RCC_ClockConfig+0x268>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d909      	bls.n	8002b9a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b86:	4b5f      	ldr	r3, [pc, #380]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002b96:	2380      	movs	r3, #128	@ 0x80
 8002b98:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b5a      	ldr	r3, [pc, #360]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4957      	ldr	r1, [pc, #348]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bac:	f7fe fff6 	bl	8001b9c <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fe fff2 	bl	8001b9c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e095      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b4e      	ldr	r3, [pc, #312]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d023      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bf4:	4b43      	ldr	r3, [pc, #268]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	4a42      	ldr	r2, [pc, #264]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002bfe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c0c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c14:	4a3b      	ldr	r2, [pc, #236]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c1c:	4b39      	ldr	r3, [pc, #228]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4936      	ldr	r1, [pc, #216]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
 8002c2e:	e008      	b.n	8002c42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b80      	cmp	r3, #128	@ 0x80
 8002c34:	d105      	bne.n	8002c42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c36:	4b33      	ldr	r3, [pc, #204]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4a32      	ldr	r2, [pc, #200]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c42:	4b2f      	ldr	r3, [pc, #188]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d21d      	bcs.n	8002c8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c50:	4b2b      	ldr	r3, [pc, #172]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f023 020f 	bic.w	r2, r3, #15
 8002c58:	4929      	ldr	r1, [pc, #164]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c60:	f7fe ff9c 	bl	8001b9c <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c66:	e00a      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c68:	f7fe ff98 	bl	8001b9c <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03b      	b.n	8002cf6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b20      	ldr	r3, [pc, #128]	@ (8002d00 <HAL_RCC_ClockConfig+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d1ed      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d008      	beq.n	8002caa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c98:	4b1a      	ldr	r3, [pc, #104]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	4917      	ldr	r1, [pc, #92]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0308 	and.w	r3, r3, #8
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d009      	beq.n	8002cca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb6:	4b13      	ldr	r3, [pc, #76]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	490f      	ldr	r1, [pc, #60]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cca:	f000 f825 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002d04 <HAL_RCC_ClockConfig+0x264>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	091b      	lsrs	r3, r3, #4
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	490c      	ldr	r1, [pc, #48]	@ (8002d0c <HAL_RCC_ClockConfig+0x26c>)
 8002cdc:	5ccb      	ldrb	r3, [r1, r3]
 8002cde:	f003 031f 	and.w	r3, r3, #31
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <HAL_RCC_ClockConfig+0x270>)
 8002ce8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_RCC_ClockConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7fe ff08 	bl	8001b04 <HAL_InitTick>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40022000 	.word	0x40022000
 8002d04:	40021000 	.word	0x40021000
 8002d08:	04c4b400 	.word	0x04c4b400
 8002d0c:	0800670c 	.word	0x0800670c
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000004 	.word	0x20000004

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d1e:	4b2c      	ldr	r3, [pc, #176]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	d102      	bne.n	8002d30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d2c:	613b      	str	r3, [r7, #16]
 8002d2e:	e047      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f003 030c 	and.w	r3, r3, #12
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d102      	bne.n	8002d42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d3c:	4b26      	ldr	r3, [pc, #152]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d3e:	613b      	str	r3, [r7, #16]
 8002d40:	e03e      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d42:	4b23      	ldr	r3, [pc, #140]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b0c      	cmp	r3, #12
 8002d4c:	d136      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d4e:	4b20      	ldr	r3, [pc, #128]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d58:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	3301      	adds	r3, #1
 8002d64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d10c      	bne.n	8002d86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d6c:	4a1a      	ldr	r2, [pc, #104]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d74:	4a16      	ldr	r2, [pc, #88]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d76:	68d2      	ldr	r2, [r2, #12]
 8002d78:	0a12      	lsrs	r2, r2, #8
 8002d7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d7e:	fb02 f303 	mul.w	r3, r2, r3
 8002d82:	617b      	str	r3, [r7, #20]
      break;
 8002d84:	e00c      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4a10      	ldr	r2, [pc, #64]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d90:	68d2      	ldr	r2, [r2, #12]
 8002d92:	0a12      	lsrs	r2, r2, #8
 8002d94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	617b      	str	r3, [r7, #20]
      break;
 8002d9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002da0:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0e5b      	lsrs	r3, r3, #25
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	3301      	adds	r3, #1
 8002dac:	005b      	lsls	r3, r3, #1
 8002dae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db8:	613b      	str	r3, [r7, #16]
 8002dba:	e001      	b.n	8002dc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002dc0:	693b      	ldr	r3, [r7, #16]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	371c      	adds	r7, #28
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	00f42400 	.word	0x00f42400
 8002dd8:	007a1200 	.word	0x007a1200

08002ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000000 	.word	0x20000000

08002df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002df8:	f7ff fff0 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	0a1b      	lsrs	r3, r3, #8
 8002e04:	f003 0307 	and.w	r3, r3, #7
 8002e08:	4904      	ldr	r1, [pc, #16]	@ (8002e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e0a:	5ccb      	ldrb	r3, [r1, r3]
 8002e0c:	f003 031f 	and.w	r3, r3, #31
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	40021000 	.word	0x40021000
 8002e1c:	0800671c 	.word	0x0800671c

08002e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e24:	f7ff ffda 	bl	8002ddc <HAL_RCC_GetHCLKFreq>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	0adb      	lsrs	r3, r3, #11
 8002e30:	f003 0307 	and.w	r3, r3, #7
 8002e34:	4904      	ldr	r1, [pc, #16]	@ (8002e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	f003 031f 	and.w	r3, r3, #31
 8002e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	0800671c 	.word	0x0800671c

08002e4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b087      	sub	sp, #28
 8002e50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e52:	4b1e      	ldr	r3, [pc, #120]	@ (8002ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e54:	68db      	ldr	r3, [r3, #12]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e5c:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	091b      	lsrs	r3, r3, #4
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d10c      	bne.n	8002e8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e70:	4a17      	ldr	r2, [pc, #92]	@ (8002ed0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e78:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e7a:	68d2      	ldr	r2, [r2, #12]
 8002e7c:	0a12      	lsrs	r2, r2, #8
 8002e7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e82:	fb02 f303 	mul.w	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
    break;
 8002e88:	e00c      	b.n	8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e8a:	4a12      	ldr	r2, [pc, #72]	@ (8002ed4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	4a0e      	ldr	r2, [pc, #56]	@ (8002ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	0a12      	lsrs	r2, r2, #8
 8002e98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002e9c:	fb02 f303 	mul.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]
    break;
 8002ea2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0e5b      	lsrs	r3, r3, #25
 8002eaa:	f003 0303 	and.w	r3, r3, #3
 8002eae:	3301      	adds	r3, #1
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002eb4:	697a      	ldr	r2, [r7, #20]
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002ebe:	687b      	ldr	r3, [r7, #4]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	00f42400 	.word	0x00f42400

08002ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 8098 	beq.w	8003026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002efa:	4b43      	ldr	r3, [pc, #268]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d10d      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f06:	4b40      	ldr	r3, [pc, #256]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0a:	4a3f      	ldr	r2, [pc, #252]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f12:	4b3d      	ldr	r3, [pc, #244]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f22:	4b3a      	ldr	r3, [pc, #232]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a39      	ldr	r2, [pc, #228]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f2e:	f7fe fe35 	bl	8001b9c <HAL_GetTick>
 8002f32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f34:	e009      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f36:	f7fe fe31 	bl	8001b9c <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d902      	bls.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	74fb      	strb	r3, [r7, #19]
        break;
 8002f48:	e005      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f4a:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d0ef      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f56:	7cfb      	ldrb	r3, [r7, #19]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d159      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d01e      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d019      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f78:	4b23      	ldr	r3, [pc, #140]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f84:	4b20      	ldr	r3, [pc, #128]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f94:	4b1c      	ldr	r3, [pc, #112]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fa4:	4a18      	ldr	r2, [pc, #96]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d016      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb6:	f7fe fdf1 	bl	8001b9c <HAL_GetTick>
 8002fba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fbc:	e00b      	b.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fded 	bl	8001b9c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	74fb      	strb	r3, [r7, #19]
            break;
 8002fd4:	e006      	b.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0ec      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10b      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff8:	4903      	ldr	r1, [pc, #12]	@ (8003008 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003000:	e008      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	74bb      	strb	r3, [r7, #18]
 8003006:	e005      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003008:	40021000 	.word	0x40021000
 800300c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003010:	7cfb      	ldrb	r3, [r7, #19]
 8003012:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003014:	7c7b      	ldrb	r3, [r7, #17]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d105      	bne.n	8003026 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800301a:	4ba7      	ldr	r3, [pc, #668]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800301c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800301e:	4aa6      	ldr	r2, [pc, #664]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003024:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003032:	4ba1      	ldr	r3, [pc, #644]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003038:	f023 0203 	bic.w	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	499d      	ldr	r1, [pc, #628]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003042:	4313      	orrs	r3, r2
 8003044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00a      	beq.n	800306a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003054:	4b98      	ldr	r3, [pc, #608]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f023 020c 	bic.w	r2, r3, #12
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4995      	ldr	r1, [pc, #596]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	4313      	orrs	r3, r2
 8003066:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00a      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003076:	4b90      	ldr	r3, [pc, #576]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	498c      	ldr	r1, [pc, #560]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d00a      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003098:	4b87      	ldr	r3, [pc, #540]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	4984      	ldr	r1, [pc, #528]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f003 0310 	and.w	r3, r3, #16
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00a      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ba:	4b7f      	ldr	r3, [pc, #508]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	497b      	ldr	r1, [pc, #492]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0320 	and.w	r3, r3, #32
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030dc:	4b76      	ldr	r3, [pc, #472]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	4973      	ldr	r1, [pc, #460]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030fe:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003100:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003104:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	69db      	ldr	r3, [r3, #28]
 800310c:	496a      	ldr	r1, [pc, #424]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310e:	4313      	orrs	r3, r2
 8003110:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00a      	beq.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003120:	4b65      	ldr	r3, [pc, #404]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003126:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4962      	ldr	r1, [pc, #392]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003142:	4b5d      	ldr	r3, [pc, #372]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003144:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003148:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	4959      	ldr	r1, [pc, #356]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003152:	4313      	orrs	r3, r2
 8003154:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00a      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003164:	4b54      	ldr	r3, [pc, #336]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800316a:	f023 0203 	bic.w	r2, r3, #3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003172:	4951      	ldr	r1, [pc, #324]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003186:	4b4c      	ldr	r3, [pc, #304]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800318c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	4948      	ldr	r1, [pc, #288]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	4313      	orrs	r3, r2
 8003198:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031a8:	4b43      	ldr	r3, [pc, #268]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b6:	4940      	ldr	r1, [pc, #256]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031c6:	d105      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031c8:	4b3b      	ldr	r3, [pc, #236]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	4a3a      	ldr	r2, [pc, #232]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80031d2:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d015      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80031e0:	4b35      	ldr	r3, [pc, #212]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031ee:	4932      	ldr	r1, [pc, #200]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031fe:	d105      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003200:	4b2d      	ldr	r3, [pc, #180]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4a2c      	ldr	r2, [pc, #176]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800320a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d015      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003218:	4b27      	ldr	r3, [pc, #156]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800321e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003226:	4924      	ldr	r1, [pc, #144]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003236:	d105      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003238:	4b1f      	ldr	r3, [pc, #124]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4a1e      	ldr	r2, [pc, #120]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003242:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d015      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003250:	4b19      	ldr	r3, [pc, #100]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003256:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325e:	4916      	ldr	r1, [pc, #88]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800326a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800326e:	d105      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003270:	4b11      	ldr	r3, [pc, #68]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	4a10      	ldr	r2, [pc, #64]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800327a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d019      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003288:	4b0b      	ldr	r3, [pc, #44]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800328e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032a6:	d109      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a8:	4b03      	ldr	r3, [pc, #12]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4a02      	ldr	r2, [pc, #8]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032b2:	60d3      	str	r3, [r2, #12]
 80032b4:	e002      	b.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80032b6:	bf00      	nop
 80032b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d015      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032c8:	4b29      	ldr	r3, [pc, #164]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	4926      	ldr	r1, [pc, #152]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032e6:	d105      	bne.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032e8:	4b21      	ldr	r3, [pc, #132]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a20      	ldr	r2, [pc, #128]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003302:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003306:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800330e:	4918      	ldr	r1, [pc, #96]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800331e:	d105      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003320:	4b13      	ldr	r3, [pc, #76]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	4a12      	ldr	r2, [pc, #72]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003326:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800332a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003338:	4b0d      	ldr	r3, [pc, #52]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800333a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800333e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003346:	490a      	ldr	r1, [pc, #40]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003352:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003356:	d105      	bne.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003358:	4b05      	ldr	r3, [pc, #20]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	4a04      	ldr	r2, [pc, #16]	@ (8003370 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800335e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003362:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003364:	7cbb      	ldrb	r3, [r7, #18]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e049      	b.n	800341a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7fd fe0e 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	3304      	adds	r3, #4
 80033b0:	4619      	mov	r1, r3
 80033b2:	4610      	mov	r0, r2
 80033b4:	f000 fac0 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3708      	adds	r7, #8
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b082      	sub	sp, #8
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e049      	b.n	80034c8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d106      	bne.n	800344e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f000 f841 	bl	80034d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	4619      	mov	r1, r3
 8003460:	4610      	mov	r0, r2
 8003462:	f000 fa69 	bl	8003938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034fe:	2302      	movs	r3, #2
 8003500:	e0ff      	b.n	8003702 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2b14      	cmp	r3, #20
 800350e:	f200 80f0 	bhi.w	80036f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003512:	a201      	add	r2, pc, #4	@ (adr r2, 8003518 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003518:	0800356d 	.word	0x0800356d
 800351c:	080036f3 	.word	0x080036f3
 8003520:	080036f3 	.word	0x080036f3
 8003524:	080036f3 	.word	0x080036f3
 8003528:	080035ad 	.word	0x080035ad
 800352c:	080036f3 	.word	0x080036f3
 8003530:	080036f3 	.word	0x080036f3
 8003534:	080036f3 	.word	0x080036f3
 8003538:	080035ef 	.word	0x080035ef
 800353c:	080036f3 	.word	0x080036f3
 8003540:	080036f3 	.word	0x080036f3
 8003544:	080036f3 	.word	0x080036f3
 8003548:	0800362f 	.word	0x0800362f
 800354c:	080036f3 	.word	0x080036f3
 8003550:	080036f3 	.word	0x080036f3
 8003554:	080036f3 	.word	0x080036f3
 8003558:	08003671 	.word	0x08003671
 800355c:	080036f3 	.word	0x080036f3
 8003560:	080036f3 	.word	0x080036f3
 8003564:	080036f3 	.word	0x080036f3
 8003568:	080036b1 	.word	0x080036b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68b9      	ldr	r1, [r7, #8]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa94 	bl	8003aa0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699a      	ldr	r2, [r3, #24]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 0208 	orr.w	r2, r2, #8
 8003586:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0204 	bic.w	r2, r2, #4
 8003596:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6999      	ldr	r1, [r3, #24]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	691a      	ldr	r2, [r3, #16]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	619a      	str	r2, [r3, #24]
      break;
 80035aa:	e0a5      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 fb0e 	bl	8003bd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6999      	ldr	r1, [r3, #24]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	691b      	ldr	r3, [r3, #16]
 80035e2:	021a      	lsls	r2, r3, #8
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	619a      	str	r2, [r3, #24]
      break;
 80035ec:	e084      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68b9      	ldr	r1, [r7, #8]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fb81 	bl	8003cfc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	69da      	ldr	r2, [r3, #28]
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f042 0208 	orr.w	r2, r2, #8
 8003608:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69da      	ldr	r2, [r3, #28]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	69d9      	ldr	r1, [r3, #28]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	61da      	str	r2, [r3, #28]
      break;
 800362c:	e064      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 fbf3 	bl	8003e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	69da      	ldr	r2, [r3, #28]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003648:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	69da      	ldr	r2, [r3, #28]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003658:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	69d9      	ldr	r1, [r3, #28]
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	021a      	lsls	r2, r3, #8
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	430a      	orrs	r2, r1
 800366c:	61da      	str	r2, [r3, #28]
      break;
 800366e:	e043      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	4618      	mov	r0, r3
 8003678:	f000 fc66 	bl	8003f48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0208 	orr.w	r2, r2, #8
 800368a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 0204 	bic.w	r2, r2, #4
 800369a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036ae:	e023      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 fcb0 	bl	800401c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ca:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036da:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	021a      	lsls	r2, r3, #8
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80036f0:	e002      	b.n	80036f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
      break;
 80036f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003700:	7dfb      	ldrb	r3, [r7, #23]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3718      	adds	r7, #24
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop

0800370c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003716:	2300      	movs	r3, #0
 8003718:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003720:	2b01      	cmp	r3, #1
 8003722:	d101      	bne.n	8003728 <HAL_TIM_ConfigClockSource+0x1c>
 8003724:	2302      	movs	r3, #2
 8003726:	e0f6      	b.n	8003916 <HAL_TIM_ConfigClockSource+0x20a>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003746:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800374a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003752:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68ba      	ldr	r2, [r7, #8]
 800375a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a6f      	ldr	r2, [pc, #444]	@ (8003920 <HAL_TIM_ConfigClockSource+0x214>)
 8003762:	4293      	cmp	r3, r2
 8003764:	f000 80c1 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003768:	4a6d      	ldr	r2, [pc, #436]	@ (8003920 <HAL_TIM_ConfigClockSource+0x214>)
 800376a:	4293      	cmp	r3, r2
 800376c:	f200 80c6 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003770:	4a6c      	ldr	r2, [pc, #432]	@ (8003924 <HAL_TIM_ConfigClockSource+0x218>)
 8003772:	4293      	cmp	r3, r2
 8003774:	f000 80b9 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003778:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_TIM_ConfigClockSource+0x218>)
 800377a:	4293      	cmp	r3, r2
 800377c:	f200 80be 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003780:	4a69      	ldr	r2, [pc, #420]	@ (8003928 <HAL_TIM_ConfigClockSource+0x21c>)
 8003782:	4293      	cmp	r3, r2
 8003784:	f000 80b1 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003788:	4a67      	ldr	r2, [pc, #412]	@ (8003928 <HAL_TIM_ConfigClockSource+0x21c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	f200 80b6 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003790:	4a66      	ldr	r2, [pc, #408]	@ (800392c <HAL_TIM_ConfigClockSource+0x220>)
 8003792:	4293      	cmp	r3, r2
 8003794:	f000 80a9 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003798:	4a64      	ldr	r2, [pc, #400]	@ (800392c <HAL_TIM_ConfigClockSource+0x220>)
 800379a:	4293      	cmp	r3, r2
 800379c:	f200 80ae 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037a0:	4a63      	ldr	r2, [pc, #396]	@ (8003930 <HAL_TIM_ConfigClockSource+0x224>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	f000 80a1 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 80037a8:	4a61      	ldr	r2, [pc, #388]	@ (8003930 <HAL_TIM_ConfigClockSource+0x224>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	f200 80a6 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037b0:	4a60      	ldr	r2, [pc, #384]	@ (8003934 <HAL_TIM_ConfigClockSource+0x228>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	f000 8099 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 80037b8:	4a5e      	ldr	r2, [pc, #376]	@ (8003934 <HAL_TIM_ConfigClockSource+0x228>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	f200 809e 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037c0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037c4:	f000 8091 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 80037c8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80037cc:	f200 8096 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037d4:	f000 8089 	beq.w	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 80037d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037dc:	f200 808e 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037e4:	d03e      	beq.n	8003864 <HAL_TIM_ConfigClockSource+0x158>
 80037e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037ea:	f200 8087 	bhi.w	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037f2:	f000 8086 	beq.w	8003902 <HAL_TIM_ConfigClockSource+0x1f6>
 80037f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037fa:	d87f      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 80037fc:	2b70      	cmp	r3, #112	@ 0x70
 80037fe:	d01a      	beq.n	8003836 <HAL_TIM_ConfigClockSource+0x12a>
 8003800:	2b70      	cmp	r3, #112	@ 0x70
 8003802:	d87b      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003804:	2b60      	cmp	r3, #96	@ 0x60
 8003806:	d050      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0x19e>
 8003808:	2b60      	cmp	r3, #96	@ 0x60
 800380a:	d877      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 800380c:	2b50      	cmp	r3, #80	@ 0x50
 800380e:	d03c      	beq.n	800388a <HAL_TIM_ConfigClockSource+0x17e>
 8003810:	2b50      	cmp	r3, #80	@ 0x50
 8003812:	d873      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003814:	2b40      	cmp	r3, #64	@ 0x40
 8003816:	d058      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0x1be>
 8003818:	2b40      	cmp	r3, #64	@ 0x40
 800381a:	d86f      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 800381c:	2b30      	cmp	r3, #48	@ 0x30
 800381e:	d064      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003820:	2b30      	cmp	r3, #48	@ 0x30
 8003822:	d86b      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 8003824:	2b20      	cmp	r3, #32
 8003826:	d060      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d867      	bhi.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d05c      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003830:	2b10      	cmp	r3, #16
 8003832:	d05a      	beq.n	80038ea <HAL_TIM_ConfigClockSource+0x1de>
 8003834:	e062      	b.n	80038fc <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003846:	f000 fcd1 	bl	80041ec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003858:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	609a      	str	r2, [r3, #8]
      break;
 8003862:	e04f      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003874:	f000 fcba 	bl	80041ec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689a      	ldr	r2, [r3, #8]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003886:	609a      	str	r2, [r3, #8]
      break;
 8003888:	e03c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003896:	461a      	mov	r2, r3
 8003898:	f000 fc2c 	bl	80040f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2150      	movs	r1, #80	@ 0x50
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fc85 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 80038a8:	e02c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038b6:	461a      	mov	r2, r3
 80038b8:	f000 fc4b 	bl	8004152 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	2160      	movs	r1, #96	@ 0x60
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 fc75 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 80038c8:	e01c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038d6:	461a      	mov	r2, r3
 80038d8:	f000 fc0c 	bl	80040f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2140      	movs	r1, #64	@ 0x40
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fc65 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 80038e8:	e00c      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f000 fc5c 	bl	80041b2 <TIM_ITRx_SetConfig>
      break;
 80038fa:	e003      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003900:	e000      	b.n	8003904 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003902:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2201      	movs	r2, #1
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	00100070 	.word	0x00100070
 8003924:	00100060 	.word	0x00100060
 8003928:	00100050 	.word	0x00100050
 800392c:	00100040 	.word	0x00100040
 8003930:	00100030 	.word	0x00100030
 8003934:	00100020 	.word	0x00100020

08003938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a4c      	ldr	r2, [pc, #304]	@ (8003a7c <TIM_Base_SetConfig+0x144>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d017      	beq.n	8003980 <TIM_Base_SetConfig+0x48>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x48>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a49      	ldr	r2, [pc, #292]	@ (8003a80 <TIM_Base_SetConfig+0x148>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x48>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a48      	ldr	r2, [pc, #288]	@ (8003a84 <TIM_Base_SetConfig+0x14c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x48>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a47      	ldr	r2, [pc, #284]	@ (8003a88 <TIM_Base_SetConfig+0x150>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x48>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a46      	ldr	r2, [pc, #280]	@ (8003a8c <TIM_Base_SetConfig+0x154>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x48>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a45      	ldr	r2, [pc, #276]	@ (8003a90 <TIM_Base_SetConfig+0x158>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a39      	ldr	r2, [pc, #228]	@ (8003a7c <TIM_Base_SetConfig+0x144>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d023      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a0:	d01f      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a36      	ldr	r2, [pc, #216]	@ (8003a80 <TIM_Base_SetConfig+0x148>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01b      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a35      	ldr	r2, [pc, #212]	@ (8003a84 <TIM_Base_SetConfig+0x14c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d017      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a34      	ldr	r2, [pc, #208]	@ (8003a88 <TIM_Base_SetConfig+0x150>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d013      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a33      	ldr	r2, [pc, #204]	@ (8003a8c <TIM_Base_SetConfig+0x154>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00f      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a33      	ldr	r2, [pc, #204]	@ (8003a94 <TIM_Base_SetConfig+0x15c>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00b      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a32      	ldr	r2, [pc, #200]	@ (8003a98 <TIM_Base_SetConfig+0x160>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a31      	ldr	r2, [pc, #196]	@ (8003a9c <TIM_Base_SetConfig+0x164>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d003      	beq.n	80039e2 <TIM_Base_SetConfig+0xaa>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a90 <TIM_Base_SetConfig+0x158>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d108      	bne.n	80039f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68fa      	ldr	r2, [r7, #12]
 8003a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a18      	ldr	r2, [pc, #96]	@ (8003a7c <TIM_Base_SetConfig+0x144>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d013      	beq.n	8003a48 <TIM_Base_SetConfig+0x110>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a1a      	ldr	r2, [pc, #104]	@ (8003a8c <TIM_Base_SetConfig+0x154>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00f      	beq.n	8003a48 <TIM_Base_SetConfig+0x110>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003a94 <TIM_Base_SetConfig+0x15c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00b      	beq.n	8003a48 <TIM_Base_SetConfig+0x110>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a19      	ldr	r2, [pc, #100]	@ (8003a98 <TIM_Base_SetConfig+0x160>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d007      	beq.n	8003a48 <TIM_Base_SetConfig+0x110>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <TIM_Base_SetConfig+0x164>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d003      	beq.n	8003a48 <TIM_Base_SetConfig+0x110>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a13      	ldr	r2, [pc, #76]	@ (8003a90 <TIM_Base_SetConfig+0x158>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d103      	bne.n	8003a50 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d105      	bne.n	8003a6e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f023 0201 	bic.w	r2, r3, #1
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	611a      	str	r2, [r3, #16]
  }
}
 8003a6e:	bf00      	nop
 8003a70:	3714      	adds	r7, #20
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	40012c00 	.word	0x40012c00
 8003a80:	40000400 	.word	0x40000400
 8003a84:	40000800 	.word	0x40000800
 8003a88:	40000c00 	.word	0x40000c00
 8003a8c:	40013400 	.word	0x40013400
 8003a90:	40015000 	.word	0x40015000
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800

08003aa0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b087      	sub	sp, #28
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	f023 0201 	bic.w	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	699b      	ldr	r3, [r3, #24]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ad2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68fa      	ldr	r2, [r7, #12]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	f023 0302 	bic.w	r3, r3, #2
 8003aec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a30      	ldr	r2, [pc, #192]	@ (8003bbc <TIM_OC1_SetConfig+0x11c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d013      	beq.n	8003b28 <TIM_OC1_SetConfig+0x88>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a2f      	ldr	r2, [pc, #188]	@ (8003bc0 <TIM_OC1_SetConfig+0x120>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d00f      	beq.n	8003b28 <TIM_OC1_SetConfig+0x88>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc4 <TIM_OC1_SetConfig+0x124>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d00b      	beq.n	8003b28 <TIM_OC1_SetConfig+0x88>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a2d      	ldr	r2, [pc, #180]	@ (8003bc8 <TIM_OC1_SetConfig+0x128>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d007      	beq.n	8003b28 <TIM_OC1_SetConfig+0x88>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003bcc <TIM_OC1_SetConfig+0x12c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d003      	beq.n	8003b28 <TIM_OC1_SetConfig+0x88>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a2b      	ldr	r2, [pc, #172]	@ (8003bd0 <TIM_OC1_SetConfig+0x130>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d10c      	bne.n	8003b42 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f023 0308 	bic.w	r3, r3, #8
 8003b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f023 0304 	bic.w	r3, r3, #4
 8003b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a1d      	ldr	r2, [pc, #116]	@ (8003bbc <TIM_OC1_SetConfig+0x11c>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <TIM_OC1_SetConfig+0xd2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc0 <TIM_OC1_SetConfig+0x120>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_OC1_SetConfig+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a1b      	ldr	r2, [pc, #108]	@ (8003bc4 <TIM_OC1_SetConfig+0x124>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_OC1_SetConfig+0xd2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a1a      	ldr	r2, [pc, #104]	@ (8003bc8 <TIM_OC1_SetConfig+0x128>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_OC1_SetConfig+0xd2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a19      	ldr	r2, [pc, #100]	@ (8003bcc <TIM_OC1_SetConfig+0x12c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_OC1_SetConfig+0xd2>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a18      	ldr	r2, [pc, #96]	@ (8003bd0 <TIM_OC1_SetConfig+0x130>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d111      	bne.n	8003b96 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	697a      	ldr	r2, [r7, #20]
 8003bae:	621a      	str	r2, [r3, #32]
}
 8003bb0:	bf00      	nop
 8003bb2:	371c      	adds	r7, #28
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bba:	4770      	bx	lr
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40013400 	.word	0x40013400
 8003bc4:	40014000 	.word	0x40014000
 8003bc8:	40014400 	.word	0x40014400
 8003bcc:	40014800 	.word	0x40014800
 8003bd0:	40015000 	.word	0x40015000

08003bd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b087      	sub	sp, #28
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a1b      	ldr	r3, [r3, #32]
 8003be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f023 0210 	bic.w	r2, r3, #16
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	699b      	ldr	r3, [r3, #24]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	021b      	lsls	r3, r3, #8
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	f023 0320 	bic.w	r3, r3, #32
 8003c22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a2c      	ldr	r2, [pc, #176]	@ (8003ce4 <TIM_OC2_SetConfig+0x110>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d007      	beq.n	8003c48 <TIM_OC2_SetConfig+0x74>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ce8 <TIM_OC2_SetConfig+0x114>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d003      	beq.n	8003c48 <TIM_OC2_SetConfig+0x74>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	4a2a      	ldr	r2, [pc, #168]	@ (8003cec <TIM_OC2_SetConfig+0x118>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d10d      	bne.n	8003c64 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce4 <TIM_OC2_SetConfig+0x110>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d013      	beq.n	8003c94 <TIM_OC2_SetConfig+0xc0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce8 <TIM_OC2_SetConfig+0x114>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00f      	beq.n	8003c94 <TIM_OC2_SetConfig+0xc0>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <TIM_OC2_SetConfig+0x11c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00b      	beq.n	8003c94 <TIM_OC2_SetConfig+0xc0>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf4 <TIM_OC2_SetConfig+0x120>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d007      	beq.n	8003c94 <TIM_OC2_SetConfig+0xc0>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf8 <TIM_OC2_SetConfig+0x124>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d003      	beq.n	8003c94 <TIM_OC2_SetConfig+0xc0>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	@ (8003cec <TIM_OC2_SetConfig+0x118>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d113      	bne.n	8003cbc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	693a      	ldr	r2, [r7, #16]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40013400 	.word	0x40013400
 8003cec:	40015000 	.word	0x40015000
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40014400 	.word	0x40014400
 8003cf8:	40014800 	.word	0x40014800

08003cfc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b087      	sub	sp, #28
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a1b      	ldr	r3, [r3, #32]
 8003d0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0303 	bic.w	r3, r3, #3
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a2b      	ldr	r2, [pc, #172]	@ (8003e08 <TIM_OC3_SetConfig+0x10c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_OC3_SetConfig+0x72>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	@ (8003e0c <TIM_OC3_SetConfig+0x110>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC3_SetConfig+0x72>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <TIM_OC3_SetConfig+0x114>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10d      	bne.n	8003d8a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	021b      	lsls	r3, r3, #8
 8003d7c:	697a      	ldr	r2, [r7, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e08 <TIM_OC3_SetConfig+0x10c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d013      	beq.n	8003dba <TIM_OC3_SetConfig+0xbe>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a1d      	ldr	r2, [pc, #116]	@ (8003e0c <TIM_OC3_SetConfig+0x110>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d00f      	beq.n	8003dba <TIM_OC3_SetConfig+0xbe>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e14 <TIM_OC3_SetConfig+0x118>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d00b      	beq.n	8003dba <TIM_OC3_SetConfig+0xbe>
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e18 <TIM_OC3_SetConfig+0x11c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d007      	beq.n	8003dba <TIM_OC3_SetConfig+0xbe>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1b      	ldr	r2, [pc, #108]	@ (8003e1c <TIM_OC3_SetConfig+0x120>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d003      	beq.n	8003dba <TIM_OC3_SetConfig+0xbe>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a16      	ldr	r2, [pc, #88]	@ (8003e10 <TIM_OC3_SetConfig+0x114>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d113      	bne.n	8003de2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	685a      	ldr	r2, [r3, #4]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	621a      	str	r2, [r3, #32]
}
 8003dfc:	bf00      	nop
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	40012c00 	.word	0x40012c00
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	40015000 	.word	0x40015000
 8003e14:	40014000 	.word	0x40014000
 8003e18:	40014400 	.word	0x40014400
 8003e1c:	40014800 	.word	0x40014800

08003e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b087      	sub	sp, #28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69db      	ldr	r3, [r3, #28]
 8003e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	021b      	lsls	r3, r3, #8
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	031b      	lsls	r3, r3, #12
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a2c      	ldr	r2, [pc, #176]	@ (8003f30 <TIM_OC4_SetConfig+0x110>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d007      	beq.n	8003e94 <TIM_OC4_SetConfig+0x74>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a2b      	ldr	r2, [pc, #172]	@ (8003f34 <TIM_OC4_SetConfig+0x114>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d003      	beq.n	8003e94 <TIM_OC4_SetConfig+0x74>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a2a      	ldr	r2, [pc, #168]	@ (8003f38 <TIM_OC4_SetConfig+0x118>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d10d      	bne.n	8003eb0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003e9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	031b      	lsls	r3, r3, #12
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003eae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f30 <TIM_OC4_SetConfig+0x110>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d013      	beq.n	8003ee0 <TIM_OC4_SetConfig+0xc0>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a1e      	ldr	r2, [pc, #120]	@ (8003f34 <TIM_OC4_SetConfig+0x114>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00f      	beq.n	8003ee0 <TIM_OC4_SetConfig+0xc0>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f3c <TIM_OC4_SetConfig+0x11c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00b      	beq.n	8003ee0 <TIM_OC4_SetConfig+0xc0>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a1d      	ldr	r2, [pc, #116]	@ (8003f40 <TIM_OC4_SetConfig+0x120>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d007      	beq.n	8003ee0 <TIM_OC4_SetConfig+0xc0>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f44 <TIM_OC4_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d003      	beq.n	8003ee0 <TIM_OC4_SetConfig+0xc0>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a17      	ldr	r2, [pc, #92]	@ (8003f38 <TIM_OC4_SetConfig+0x118>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d113      	bne.n	8003f08 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003ee6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003eee:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	019b      	lsls	r3, r3, #6
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	019b      	lsls	r3, r3, #6
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40013400 	.word	0x40013400
 8003f38:	40015000 	.word	0x40015000
 8003f3c:	40014000 	.word	0x40014000
 8003f40:	40014400 	.word	0x40014400
 8003f44:	40014800 	.word	0x40014800

08003f48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
 8003f50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003f8c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	041b      	lsls	r3, r3, #16
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a19      	ldr	r2, [pc, #100]	@ (8004004 <TIM_OC5_SetConfig+0xbc>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d013      	beq.n	8003fca <TIM_OC5_SetConfig+0x82>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a18      	ldr	r2, [pc, #96]	@ (8004008 <TIM_OC5_SetConfig+0xc0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00f      	beq.n	8003fca <TIM_OC5_SetConfig+0x82>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a17      	ldr	r2, [pc, #92]	@ (800400c <TIM_OC5_SetConfig+0xc4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d00b      	beq.n	8003fca <TIM_OC5_SetConfig+0x82>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a16      	ldr	r2, [pc, #88]	@ (8004010 <TIM_OC5_SetConfig+0xc8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d007      	beq.n	8003fca <TIM_OC5_SetConfig+0x82>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4a15      	ldr	r2, [pc, #84]	@ (8004014 <TIM_OC5_SetConfig+0xcc>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d003      	beq.n	8003fca <TIM_OC5_SetConfig+0x82>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4a14      	ldr	r2, [pc, #80]	@ (8004018 <TIM_OC5_SetConfig+0xd0>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d109      	bne.n	8003fde <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	021b      	lsls	r3, r3, #8
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40012c00 	.word	0x40012c00
 8004008:	40013400 	.word	0x40013400
 800400c:	40014000 	.word	0x40014000
 8004010:	40014400 	.word	0x40014400
 8004014:	40014800 	.word	0x40014800
 8004018:	40015000 	.word	0x40015000

0800401c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800401c:	b480      	push	{r7}
 800401e:	b087      	sub	sp, #28
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800404a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4313      	orrs	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	051b      	lsls	r3, r3, #20
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	4313      	orrs	r3, r2
 800406e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a1a      	ldr	r2, [pc, #104]	@ (80040dc <TIM_OC6_SetConfig+0xc0>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d013      	beq.n	80040a0 <TIM_OC6_SetConfig+0x84>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a19      	ldr	r2, [pc, #100]	@ (80040e0 <TIM_OC6_SetConfig+0xc4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d00f      	beq.n	80040a0 <TIM_OC6_SetConfig+0x84>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a18      	ldr	r2, [pc, #96]	@ (80040e4 <TIM_OC6_SetConfig+0xc8>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d00b      	beq.n	80040a0 <TIM_OC6_SetConfig+0x84>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a17      	ldr	r2, [pc, #92]	@ (80040e8 <TIM_OC6_SetConfig+0xcc>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d007      	beq.n	80040a0 <TIM_OC6_SetConfig+0x84>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a16      	ldr	r2, [pc, #88]	@ (80040ec <TIM_OC6_SetConfig+0xd0>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d003      	beq.n	80040a0 <TIM_OC6_SetConfig+0x84>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a15      	ldr	r2, [pc, #84]	@ (80040f0 <TIM_OC6_SetConfig+0xd4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d109      	bne.n	80040b4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040a6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	029b      	lsls	r3, r3, #10
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	621a      	str	r2, [r3, #32]
}
 80040ce:	bf00      	nop
 80040d0:	371c      	adds	r7, #28
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	40012c00 	.word	0x40012c00
 80040e0:	40013400 	.word	0x40013400
 80040e4:	40014000 	.word	0x40014000
 80040e8:	40014400 	.word	0x40014400
 80040ec:	40014800 	.word	0x40014800
 80040f0:	40015000 	.word	0x40015000

080040f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b087      	sub	sp, #28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f023 0201 	bic.w	r2, r3, #1
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	699b      	ldr	r3, [r3, #24]
 8004116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800411e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f023 030a 	bic.w	r3, r3, #10
 8004130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4313      	orrs	r3, r2
 8004138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	621a      	str	r2, [r3, #32]
}
 8004146:	bf00      	nop
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004152:	b480      	push	{r7}
 8004154:	b087      	sub	sp, #28
 8004156:	af00      	add	r7, sp, #0
 8004158:	60f8      	str	r0, [r7, #12]
 800415a:	60b9      	str	r1, [r7, #8]
 800415c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f023 0210 	bic.w	r2, r3, #16
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800417c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	031b      	lsls	r3, r3, #12
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	697a      	ldr	r2, [r7, #20]
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr

080041b2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b085      	sub	sp, #20
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
 80041ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80041c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f043 0307 	orr.w	r3, r3, #7
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	609a      	str	r2, [r3, #8]
}
 80041e0:	bf00      	nop
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	607a      	str	r2, [r7, #4]
 80041f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004206:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	021a      	lsls	r2, r3, #8
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	431a      	orrs	r2, r3
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	609a      	str	r2, [r3, #8]
}
 8004220:	bf00      	nop
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr

0800422c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004240:	2302      	movs	r3, #2
 8004242:	e074      	b.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a34      	ldr	r2, [pc, #208]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d009      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a33      	ldr	r2, [pc, #204]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d004      	beq.n	8004282 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a31      	ldr	r2, [pc, #196]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d108      	bne.n	8004294 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004288:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	4313      	orrs	r3, r2
 8004292:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800429a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800429e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a21      	ldr	r2, [pc, #132]	@ (800433c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d022      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c4:	d01d      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d018      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1d      	ldr	r2, [pc, #116]	@ (800434c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d013      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1c      	ldr	r2, [pc, #112]	@ (8004350 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d00e      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a15      	ldr	r2, [pc, #84]	@ (8004340 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d009      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a18      	ldr	r2, [pc, #96]	@ (8004354 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d004      	beq.n	8004302 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a11      	ldr	r2, [pc, #68]	@ (8004344 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d10c      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004308:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	4313      	orrs	r3, r2
 8004312:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3714      	adds	r7, #20
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	40012c00 	.word	0x40012c00
 8004340:	40013400 	.word	0x40013400
 8004344:	40015000 	.word	0x40015000
 8004348:	40000400 	.word	0x40000400
 800434c:	40000800 	.word	0x40000800
 8004350:	40000c00 	.word	0x40000c00
 8004354:	40014000 	.word	0x40014000

08004358 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004358:	b480      	push	{r7}
 800435a:	b085      	sub	sp, #20
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800436c:	2b01      	cmp	r3, #1
 800436e:	d101      	bne.n	8004374 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004370:	2302      	movs	r3, #2
 8004372:	e078      	b.n	8004466 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	689b      	ldr	r3, [r3, #8]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	4313      	orrs	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	695b      	ldr	r3, [r3, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1c      	ldr	r2, [pc, #112]	@ (8004474 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d009      	beq.n	800441a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1b      	ldr	r2, [pc, #108]	@ (8004478 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d004      	beq.n	800441a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a19      	ldr	r2, [pc, #100]	@ (800447c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d11c      	bne.n	8004454 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004424:	051b      	lsls	r3, r3, #20
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	6a1b      	ldr	r3, [r3, #32]
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004464:	2300      	movs	r3, #0
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	40012c00 	.word	0x40012c00
 8004478:	40013400 	.word	0x40013400
 800447c:	40015000 	.word	0x40015000

08004480 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b082      	sub	sp, #8
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e042      	b.n	8004518 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004498:	2b00      	cmp	r3, #0
 800449a:	d106      	bne.n	80044aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7fc fe61 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2224      	movs	r2, #36	@ 0x24
 80044ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d002      	beq.n	80044d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fd7a 	bl	8004fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fa7b 	bl	80049cc <UART_SetConfig>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e01b      	b.n	8004518 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689a      	ldr	r2, [r3, #8]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0201 	orr.w	r2, r2, #1
 800450e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fdf9 	bl	8005108 <UART_CheckIdleState>
 8004516:	4603      	mov	r3, r0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3708      	adds	r7, #8
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d101      	bne.n	8004532 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e04a      	b.n	80045c8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004538:	2b00      	cmp	r3, #0
 800453a:	d106      	bne.n	800454a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7fc fe11 	bl	800116c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2224      	movs	r2, #36	@ 0x24
 800454e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	2b00      	cmp	r3, #0
 8004568:	d002      	beq.n	8004570 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fd2a 	bl	8004fc4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa2b 	bl	80049cc <UART_SetConfig>
 8004576:	4603      	mov	r3, r0
 8004578:	2b01      	cmp	r3, #1
 800457a:	d101      	bne.n	8004580 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e023      	b.n	80045c8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685a      	ldr	r2, [r3, #4]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800458e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 800459e:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0208 	orr.w	r2, r2, #8
 80045ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0201 	orr.w	r2, r2, #1
 80045be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045c0:	6878      	ldr	r0, [r7, #4]
 80045c2:	f000 fda1 	bl	8005108 <UART_CheckIdleState>
 80045c6:	4603      	mov	r3, r0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	@ 0x28
 80045d4:	af02      	add	r7, sp, #8
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	603b      	str	r3, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	2b20      	cmp	r3, #32
 80045e8:	d17b      	bne.n	80046e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d002      	beq.n	80045f6 <HAL_UART_Transmit+0x26>
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e074      	b.n	80046e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2221      	movs	r2, #33	@ 0x21
 8004606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800460a:	f7fd fac7 	bl	8001b9c <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	88fa      	ldrh	r2, [r7, #6]
 8004614:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	88fa      	ldrh	r2, [r7, #6]
 800461c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004628:	d108      	bne.n	800463c <HAL_UART_Transmit+0x6c>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d104      	bne.n	800463c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	e003      	b.n	8004644 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004640:	2300      	movs	r3, #0
 8004642:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004644:	e030      	b.n	80046a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	2200      	movs	r2, #0
 800464e:	2180      	movs	r1, #128	@ 0x80
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f000 fe03 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2220      	movs	r2, #32
 8004660:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e03d      	b.n	80046e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10b      	bne.n	8004686 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	881b      	ldrh	r3, [r3, #0]
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800467c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	3302      	adds	r3, #2
 8004682:	61bb      	str	r3, [r7, #24]
 8004684:	e007      	b.n	8004696 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	3301      	adds	r3, #1
 8004694:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1c8      	bne.n	8004646 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2200      	movs	r2, #0
 80046bc:	2140      	movs	r1, #64	@ 0x40
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 fdcc 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e006      	b.n	80046e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004702:	2b20      	cmp	r3, #32
 8004704:	f040 80b5 	bne.w	8004872 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Receive+0x28>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0ad      	b.n	8004874 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2222      	movs	r2, #34	@ 0x22
 8004724:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800472e:	f7fd fa35 	bl	8001b9c <HAL_GetTick>
 8004732:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	88fa      	ldrh	r2, [r7, #6]
 8004738:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	88fa      	ldrh	r2, [r7, #6]
 8004740:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474c:	d10e      	bne.n	800476c <HAL_UART_Receive+0x80>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d105      	bne.n	8004762 <HAL_UART_Receive+0x76>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800475c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004760:	e02d      	b.n	80047be <HAL_UART_Receive+0xd2>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	22ff      	movs	r2, #255	@ 0xff
 8004766:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800476a:	e028      	b.n	80047be <HAL_UART_Receive+0xd2>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_UART_Receive+0xa4>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d104      	bne.n	8004786 <HAL_UART_Receive+0x9a>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	22ff      	movs	r2, #255	@ 0xff
 8004780:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004784:	e01b      	b.n	80047be <HAL_UART_Receive+0xd2>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	227f      	movs	r2, #127	@ 0x7f
 800478a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800478e:	e016      	b.n	80047be <HAL_UART_Receive+0xd2>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	689b      	ldr	r3, [r3, #8]
 8004794:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004798:	d10d      	bne.n	80047b6 <HAL_UART_Receive+0xca>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d104      	bne.n	80047ac <HAL_UART_Receive+0xc0>
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	227f      	movs	r2, #127	@ 0x7f
 80047a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047aa:	e008      	b.n	80047be <HAL_UART_Receive+0xd2>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	223f      	movs	r2, #63	@ 0x3f
 80047b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047b4:	e003      	b.n	80047be <HAL_UART_Receive+0xd2>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80047c4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047ce:	d108      	bne.n	80047e2 <HAL_UART_Receive+0xf6>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d104      	bne.n	80047e2 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	61bb      	str	r3, [r7, #24]
 80047e0:	e003      	b.n	80047ea <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047e6:	2300      	movs	r3, #0
 80047e8:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047ea:	e036      	b.n	800485a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	9300      	str	r3, [sp, #0]
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2120      	movs	r1, #32
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 fd30 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d005      	beq.n	800480e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2220      	movs	r2, #32
 8004806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e032      	b.n	8004874 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10c      	bne.n	800482e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481a:	b29a      	uxth	r2, r3
 800481c:	8a7b      	ldrh	r3, [r7, #18]
 800481e:	4013      	ands	r3, r2
 8004820:	b29a      	uxth	r2, r3
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	3302      	adds	r3, #2
 800482a:	61bb      	str	r3, [r7, #24]
 800482c:	e00c      	b.n	8004848 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004834:	b2da      	uxtb	r2, r3
 8004836:	8a7b      	ldrh	r3, [r7, #18]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	4013      	ands	r3, r2
 800483c:	b2da      	uxtb	r2, r3
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	3301      	adds	r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1c2      	bne.n	80047ec <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004872:	2302      	movs	r3, #2
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <HAL_HalfDuplex_EnableTransmitter>:
  * @brief  Enable the UART transmitter and disable the UART receiver.
  * @param  huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 800487c:	b480      	push	{r7}
 800487e:	b08f      	sub	sp, #60	@ 0x3c
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <HAL_HalfDuplex_EnableTransmitter+0x16>
 800488e:	2302      	movs	r3, #2
 8004890:	e042      	b.n	8004918 <HAL_HalfDuplex_EnableTransmitter+0x9c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2224      	movs	r2, #36	@ 0x24
 800489e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	f023 030c 	bic.w	r3, r3, #12
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	461a      	mov	r2, r3
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048c8:	e841 2300 	strex	r3, r2, [r1]
 80048cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1e6      	bne.n	80048a2 <HAL_HalfDuplex_EnableTransmitter+0x26>

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f043 0308 	orr.w	r3, r3, #8
 80048e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	461a      	mov	r2, r3
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6979      	ldr	r1, [r7, #20]
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e6      	bne.n	80048d4 <HAL_HalfDuplex_EnableTransmitter+0x58>

  huart->gState = HAL_UART_STATE_READY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2220      	movs	r2, #32
 800490a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	373c      	adds	r7, #60	@ 0x3c
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_HalfDuplex_EnableReceiver>:
  * @brief  Enable the UART receiver and disable the UART transmitter.
  * @param  huart UART handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8004924:	b480      	push	{r7}
 8004926:	b08f      	sub	sp, #60	@ 0x3c
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004932:	2b01      	cmp	r3, #1
 8004934:	d101      	bne.n	800493a <HAL_HalfDuplex_EnableReceiver+0x16>
 8004936:	2302      	movs	r3, #2
 8004938:	e042      	b.n	80049c0 <HAL_HalfDuplex_EnableReceiver+0x9c>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2224      	movs	r2, #36	@ 0x24
 8004946:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Clear TE and RE bits */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	61fb      	str	r3, [r7, #28]
   return(result);
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	f023 030c 	bic.w	r3, r3, #12
 800495e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004968:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800496e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004970:	e841 2300 	strex	r3, r2, [r1]
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004978:	2b00      	cmp	r3, #0
 800497a:	d1e6      	bne.n	800494a <HAL_HalfDuplex_EnableReceiver+0x26>

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	60bb      	str	r3, [r7, #8]
   return(result);
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	f043 0304 	orr.w	r3, r3, #4
 8004990:	633b      	str	r3, [r7, #48]	@ 0x30
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6979      	ldr	r1, [r7, #20]
 80049a0:	69ba      	ldr	r2, [r7, #24]
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	613b      	str	r3, [r7, #16]
   return(result);
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e6      	bne.n	800497c <HAL_HalfDuplex_EnableReceiver+0x58>

  huart->gState = HAL_UART_STATE_READY;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2220      	movs	r2, #32
 80049b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UNLOCK(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	373c      	adds	r7, #60	@ 0x3c
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d0:	b08c      	sub	sp, #48	@ 0x30
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	689a      	ldr	r2, [r3, #8]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	431a      	orrs	r2, r3
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	431a      	orrs	r2, r3
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4baa      	ldr	r3, [pc, #680]	@ (8004ca4 <UART_SetConfig+0x2d8>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a04:	430b      	orrs	r3, r1
 8004a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	68da      	ldr	r2, [r3, #12]
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	430a      	orrs	r2, r1
 8004a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a9f      	ldr	r2, [pc, #636]	@ (8004ca8 <UART_SetConfig+0x2dc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	6a1b      	ldr	r3, [r3, #32]
 8004a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004a42:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a56:	f023 010f 	bic.w	r1, r3, #15
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a90      	ldr	r2, [pc, #576]	@ (8004cac <UART_SetConfig+0x2e0>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d125      	bne.n	8004abc <UART_SetConfig+0xf0>
 8004a70:	4b8f      	ldr	r3, [pc, #572]	@ (8004cb0 <UART_SetConfig+0x2e4>)
 8004a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a76:	f003 0303 	and.w	r3, r3, #3
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d81a      	bhi.n	8004ab4 <UART_SetConfig+0xe8>
 8004a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <UART_SetConfig+0xb8>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004aa5 	.word	0x08004aa5
 8004a8c:	08004a9d 	.word	0x08004a9d
 8004a90:	08004aad 	.word	0x08004aad
 8004a94:	2301      	movs	r3, #1
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a9a:	e116      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aa2:	e112      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004aa4:	2304      	movs	r3, #4
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aaa:	e10e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004aac:	2308      	movs	r3, #8
 8004aae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ab2:	e10a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004aba:	e106      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb4 <UART_SetConfig+0x2e8>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d138      	bne.n	8004b38 <UART_SetConfig+0x16c>
 8004ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8004cb0 <UART_SetConfig+0x2e4>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b0c      	cmp	r3, #12
 8004ad2:	d82d      	bhi.n	8004b30 <UART_SetConfig+0x164>
 8004ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <UART_SetConfig+0x110>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004b11 	.word	0x08004b11
 8004ae0:	08004b31 	.word	0x08004b31
 8004ae4:	08004b31 	.word	0x08004b31
 8004ae8:	08004b31 	.word	0x08004b31
 8004aec:	08004b21 	.word	0x08004b21
 8004af0:	08004b31 	.word	0x08004b31
 8004af4:	08004b31 	.word	0x08004b31
 8004af8:	08004b31 	.word	0x08004b31
 8004afc:	08004b19 	.word	0x08004b19
 8004b00:	08004b31 	.word	0x08004b31
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b31 	.word	0x08004b31
 8004b0c:	08004b29 	.word	0x08004b29
 8004b10:	2300      	movs	r3, #0
 8004b12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b16:	e0d8      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b1e:	e0d4      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b20:	2304      	movs	r3, #4
 8004b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b26:	e0d0      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b28:	2308      	movs	r3, #8
 8004b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2e:	e0cc      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b30:	2310      	movs	r3, #16
 8004b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b36:	e0c8      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8004cb8 <UART_SetConfig+0x2ec>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d125      	bne.n	8004b8e <UART_SetConfig+0x1c2>
 8004b42:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb0 <UART_SetConfig+0x2e4>)
 8004b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004b4c:	2b30      	cmp	r3, #48	@ 0x30
 8004b4e:	d016      	beq.n	8004b7e <UART_SetConfig+0x1b2>
 8004b50:	2b30      	cmp	r3, #48	@ 0x30
 8004b52:	d818      	bhi.n	8004b86 <UART_SetConfig+0x1ba>
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d00a      	beq.n	8004b6e <UART_SetConfig+0x1a2>
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d814      	bhi.n	8004b86 <UART_SetConfig+0x1ba>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <UART_SetConfig+0x19a>
 8004b60:	2b10      	cmp	r3, #16
 8004b62:	d008      	beq.n	8004b76 <UART_SetConfig+0x1aa>
 8004b64:	e00f      	b.n	8004b86 <UART_SetConfig+0x1ba>
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b6c:	e0ad      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b6e:	2302      	movs	r3, #2
 8004b70:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b74:	e0a9      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b76:	2304      	movs	r3, #4
 8004b78:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b7c:	e0a5      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b7e:	2308      	movs	r3, #8
 8004b80:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b84:	e0a1      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b86:	2310      	movs	r3, #16
 8004b88:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b8c:	e09d      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a4a      	ldr	r2, [pc, #296]	@ (8004cbc <UART_SetConfig+0x2f0>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d125      	bne.n	8004be4 <UART_SetConfig+0x218>
 8004b98:	4b45      	ldr	r3, [pc, #276]	@ (8004cb0 <UART_SetConfig+0x2e4>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba4:	d016      	beq.n	8004bd4 <UART_SetConfig+0x208>
 8004ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ba8:	d818      	bhi.n	8004bdc <UART_SetConfig+0x210>
 8004baa:	2b80      	cmp	r3, #128	@ 0x80
 8004bac:	d00a      	beq.n	8004bc4 <UART_SetConfig+0x1f8>
 8004bae:	2b80      	cmp	r3, #128	@ 0x80
 8004bb0:	d814      	bhi.n	8004bdc <UART_SetConfig+0x210>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d002      	beq.n	8004bbc <UART_SetConfig+0x1f0>
 8004bb6:	2b40      	cmp	r3, #64	@ 0x40
 8004bb8:	d008      	beq.n	8004bcc <UART_SetConfig+0x200>
 8004bba:	e00f      	b.n	8004bdc <UART_SetConfig+0x210>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc2:	e082      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bca:	e07e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bd2:	e07a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bda:	e076      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	e072      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a35      	ldr	r2, [pc, #212]	@ (8004cc0 <UART_SetConfig+0x2f4>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d12a      	bne.n	8004c44 <UART_SetConfig+0x278>
 8004bee:	4b30      	ldr	r3, [pc, #192]	@ (8004cb0 <UART_SetConfig+0x2e4>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfc:	d01a      	beq.n	8004c34 <UART_SetConfig+0x268>
 8004bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c02:	d81b      	bhi.n	8004c3c <UART_SetConfig+0x270>
 8004c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c08:	d00c      	beq.n	8004c24 <UART_SetConfig+0x258>
 8004c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c0e:	d815      	bhi.n	8004c3c <UART_SetConfig+0x270>
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <UART_SetConfig+0x250>
 8004c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c18:	d008      	beq.n	8004c2c <UART_SetConfig+0x260>
 8004c1a:	e00f      	b.n	8004c3c <UART_SetConfig+0x270>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c22:	e052      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c24:	2302      	movs	r3, #2
 8004c26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c2a:	e04e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c32:	e04a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c34:	2308      	movs	r3, #8
 8004c36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c3a:	e046      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c3c:	2310      	movs	r3, #16
 8004c3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c42:	e042      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a17      	ldr	r2, [pc, #92]	@ (8004ca8 <UART_SetConfig+0x2dc>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d13a      	bne.n	8004cc4 <UART_SetConfig+0x2f8>
 8004c4e:	4b18      	ldr	r3, [pc, #96]	@ (8004cb0 <UART_SetConfig+0x2e4>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004c58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c5c:	d01a      	beq.n	8004c94 <UART_SetConfig+0x2c8>
 8004c5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004c62:	d81b      	bhi.n	8004c9c <UART_SetConfig+0x2d0>
 8004c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c68:	d00c      	beq.n	8004c84 <UART_SetConfig+0x2b8>
 8004c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c6e:	d815      	bhi.n	8004c9c <UART_SetConfig+0x2d0>
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <UART_SetConfig+0x2b0>
 8004c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c78:	d008      	beq.n	8004c8c <UART_SetConfig+0x2c0>
 8004c7a:	e00f      	b.n	8004c9c <UART_SetConfig+0x2d0>
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c82:	e022      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c84:	2302      	movs	r3, #2
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c8a:	e01e      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c8c:	2304      	movs	r3, #4
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c92:	e01a      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c94:	2308      	movs	r3, #8
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c9a:	e016      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004c9c:	2310      	movs	r3, #16
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ca2:	e012      	b.n	8004cca <UART_SetConfig+0x2fe>
 8004ca4:	cfff69f3 	.word	0xcfff69f3
 8004ca8:	40008000 	.word	0x40008000
 8004cac:	40013800 	.word	0x40013800
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40004400 	.word	0x40004400
 8004cb8:	40004800 	.word	0x40004800
 8004cbc:	40004c00 	.word	0x40004c00
 8004cc0:	40005000 	.word	0x40005000
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4aae      	ldr	r2, [pc, #696]	@ (8004f88 <UART_SetConfig+0x5bc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	f040 8097 	bne.w	8004e04 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cd6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d823      	bhi.n	8004d26 <UART_SetConfig+0x35a>
 8004cde:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <UART_SetConfig+0x318>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d09 	.word	0x08004d09
 8004ce8:	08004d27 	.word	0x08004d27
 8004cec:	08004d11 	.word	0x08004d11
 8004cf0:	08004d27 	.word	0x08004d27
 8004cf4:	08004d17 	.word	0x08004d17
 8004cf8:	08004d27 	.word	0x08004d27
 8004cfc:	08004d27 	.word	0x08004d27
 8004d00:	08004d27 	.word	0x08004d27
 8004d04:	08004d1f 	.word	0x08004d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d08:	f7fe f874 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8004d0c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d0e:	e010      	b.n	8004d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d10:	4b9e      	ldr	r3, [pc, #632]	@ (8004f8c <UART_SetConfig+0x5c0>)
 8004d12:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d14:	e00d      	b.n	8004d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d16:	f7fd ffff 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004d1a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d1c:	e009      	b.n	8004d32 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d24:	e005      	b.n	8004d32 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d30:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f000 8130 	beq.w	8004f9a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3e:	4a94      	ldr	r2, [pc, #592]	@ (8004f90 <UART_SetConfig+0x5c4>)
 8004d40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d44:	461a      	mov	r2, r3
 8004d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d48:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d4c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	4613      	mov	r3, r2
 8004d54:	005b      	lsls	r3, r3, #1
 8004d56:	4413      	add	r3, r2
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d305      	bcc.n	8004d6a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d903      	bls.n	8004d72 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004d70:	e113      	b.n	8004f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	2200      	movs	r2, #0
 8004d76:	60bb      	str	r3, [r7, #8]
 8004d78:	60fa      	str	r2, [r7, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7e:	4a84      	ldr	r2, [pc, #528]	@ (8004f90 <UART_SetConfig+0x5c4>)
 8004d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2200      	movs	r2, #0
 8004d88:	603b      	str	r3, [r7, #0]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d90:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d94:	f7fb fa94 	bl	80002c0 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4610      	mov	r0, r2
 8004d9e:	4619      	mov	r1, r3
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	020b      	lsls	r3, r1, #8
 8004daa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dae:	0202      	lsls	r2, r0, #8
 8004db0:	6979      	ldr	r1, [r7, #20]
 8004db2:	6849      	ldr	r1, [r1, #4]
 8004db4:	0849      	lsrs	r1, r1, #1
 8004db6:	2000      	movs	r0, #0
 8004db8:	460c      	mov	r4, r1
 8004dba:	4605      	mov	r5, r0
 8004dbc:	eb12 0804 	adds.w	r8, r2, r4
 8004dc0:	eb43 0905 	adc.w	r9, r3, r5
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	469a      	mov	sl, r3
 8004dcc:	4693      	mov	fp, r2
 8004dce:	4652      	mov	r2, sl
 8004dd0:	465b      	mov	r3, fp
 8004dd2:	4640      	mov	r0, r8
 8004dd4:	4649      	mov	r1, r9
 8004dd6:	f7fb fa73 	bl	80002c0 <__aeabi_uldivmod>
 8004dda:	4602      	mov	r2, r0
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4613      	mov	r3, r2
 8004de0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004de8:	d308      	bcc.n	8004dfc <UART_SetConfig+0x430>
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004df0:	d204      	bcs.n	8004dfc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6a3a      	ldr	r2, [r7, #32]
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e0ce      	b.n	8004f9a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e02:	e0ca      	b.n	8004f9a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e0c:	d166      	bne.n	8004edc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004e0e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004e12:	2b08      	cmp	r3, #8
 8004e14:	d827      	bhi.n	8004e66 <UART_SetConfig+0x49a>
 8004e16:	a201      	add	r2, pc, #4	@ (adr r2, 8004e1c <UART_SetConfig+0x450>)
 8004e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1c:	08004e41 	.word	0x08004e41
 8004e20:	08004e49 	.word	0x08004e49
 8004e24:	08004e51 	.word	0x08004e51
 8004e28:	08004e67 	.word	0x08004e67
 8004e2c:	08004e57 	.word	0x08004e57
 8004e30:	08004e67 	.word	0x08004e67
 8004e34:	08004e67 	.word	0x08004e67
 8004e38:	08004e67 	.word	0x08004e67
 8004e3c:	08004e5f 	.word	0x08004e5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e40:	f7fd ffd8 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8004e44:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e46:	e014      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e48:	f7fd ffea 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 8004e4c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e4e:	e010      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e50:	4b4e      	ldr	r3, [pc, #312]	@ (8004f8c <UART_SetConfig+0x5c0>)
 8004e52:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e54:	e00d      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e56:	f7fd ff5f 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004e5a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004e5c:	e009      	b.n	8004e72 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e5e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004e64:	e005      	b.n	8004e72 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004e70:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8090 	beq.w	8004f9a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7e:	4a44      	ldr	r2, [pc, #272]	@ (8004f90 <UART_SetConfig+0x5c4>)
 8004e80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e8c:	005a      	lsls	r2, r3, #1
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	441a      	add	r2, r3
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	2b0f      	cmp	r3, #15
 8004ea4:	d916      	bls.n	8004ed4 <UART_SetConfig+0x508>
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eac:	d212      	bcs.n	8004ed4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	b29b      	uxth	r3, r3
 8004eb2:	f023 030f 	bic.w	r3, r3, #15
 8004eb6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eb8:	6a3b      	ldr	r3, [r7, #32]
 8004eba:	085b      	lsrs	r3, r3, #1
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	b29a      	uxth	r2, r3
 8004ec4:	8bfb      	ldrh	r3, [r7, #30]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	8bfa      	ldrh	r2, [r7, #30]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	e062      	b.n	8004f9a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004eda:	e05e      	b.n	8004f9a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004edc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d828      	bhi.n	8004f36 <UART_SetConfig+0x56a>
 8004ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8004eec <UART_SetConfig+0x520>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f11 	.word	0x08004f11
 8004ef0:	08004f19 	.word	0x08004f19
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f37 	.word	0x08004f37
 8004efc:	08004f27 	.word	0x08004f27
 8004f00:	08004f37 	.word	0x08004f37
 8004f04:	08004f37 	.word	0x08004f37
 8004f08:	08004f37 	.word	0x08004f37
 8004f0c:	08004f2f 	.word	0x08004f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f10:	f7fd ff70 	bl	8002df4 <HAL_RCC_GetPCLK1Freq>
 8004f14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f16:	e014      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f18:	f7fd ff82 	bl	8002e20 <HAL_RCC_GetPCLK2Freq>
 8004f1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f1e:	e010      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b1a      	ldr	r3, [pc, #104]	@ (8004f8c <UART_SetConfig+0x5c0>)
 8004f22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f24:	e00d      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f26:	f7fd fef7 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004f2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004f2c:	e009      	b.n	8004f42 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004f34:	e005      	b.n	8004f42 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004f36:	2300      	movs	r3, #0
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f40:	bf00      	nop
    }

    if (pclk != 0U)
 8004f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d028      	beq.n	8004f9a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	4a10      	ldr	r2, [pc, #64]	@ (8004f90 <UART_SetConfig+0x5c4>)
 8004f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f52:	461a      	mov	r2, r3
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	085b      	lsrs	r3, r3, #1
 8004f60:	441a      	add	r2, r3
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f6a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d910      	bls.n	8004f94 <UART_SetConfig+0x5c8>
 8004f72:	6a3b      	ldr	r3, [r7, #32]
 8004f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f78:	d20c      	bcs.n	8004f94 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60da      	str	r2, [r3, #12]
 8004f84:	e009      	b.n	8004f9a <UART_SetConfig+0x5ce>
 8004f86:	bf00      	nop
 8004f88:	40008000 	.word	0x40008000
 8004f8c:	00f42400 	.word	0x00f42400
 8004f90:	08006980 	.word	0x08006980
      }
      else
      {
        ret = HAL_ERROR;
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2200      	movs	r2, #0
 8004fae:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fb6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3730      	adds	r7, #48	@ 0x30
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	f003 0308 	and.w	r3, r3, #8
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01a      	beq.n	80050da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050c2:	d10a      	bne.n	80050da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b098      	sub	sp, #96	@ 0x60
 800510c:	af02      	add	r7, sp, #8
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005118:	f7fc fd40 	bl	8001b9c <HAL_GetTick>
 800511c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b08      	cmp	r3, #8
 800512a:	d12f      	bne.n	800518c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005134:	2200      	movs	r2, #0
 8005136:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f88e 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d022      	beq.n	800518c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005156:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800515a:	653b      	str	r3, [r7, #80]	@ 0x50
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005164:	647b      	str	r3, [r7, #68]	@ 0x44
 8005166:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800516a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005172:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e063      	b.n	8005254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0304 	and.w	r3, r3, #4
 8005196:	2b04      	cmp	r3, #4
 8005198:	d149      	bne.n	800522e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800519e:	9300      	str	r3, [sp, #0]
 80051a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051a2:	2200      	movs	r2, #0
 80051a4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f857 	bl	800525c <UART_WaitOnFlagUntilTimeout>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d03c      	beq.n	800522e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	623b      	str	r3, [r7, #32]
   return(result);
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80051d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e6      	bne.n	80051b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3308      	adds	r3, #8
 80051ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	f023 0301 	bic.w	r3, r3, #1
 80051fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3308      	adds	r3, #8
 8005204:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005206:	61fa      	str	r2, [r7, #28]
 8005208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	69b9      	ldr	r1, [r7, #24]
 800520c:	69fa      	ldr	r2, [r7, #28]
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	617b      	str	r3, [r7, #20]
   return(result);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e5      	bne.n	80051e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e012      	b.n	8005254 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3758      	adds	r7, #88	@ 0x58
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	603b      	str	r3, [r7, #0]
 8005268:	4613      	mov	r3, r2
 800526a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	e04f      	b.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005274:	d04b      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fc fc91 	bl	8001b9c <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <UART_WaitOnFlagUntilTimeout+0x30>
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d101      	bne.n	8005290 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e04e      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b00      	cmp	r3, #0
 800529c:	d037      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2b80      	cmp	r3, #128	@ 0x80
 80052a2:	d034      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d031      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	f003 0308 	and.w	r3, r3, #8
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d110      	bne.n	80052da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f838 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2208      	movs	r2, #8
 80052ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e029      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80052e8:	d111      	bne.n	800530e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f81e 	bl	8005336 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2220      	movs	r2, #32
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e00f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	4013      	ands	r3, r2
 8005318:	68ba      	ldr	r2, [r7, #8]
 800531a:	429a      	cmp	r2, r3
 800531c:	bf0c      	ite	eq
 800531e:	2301      	moveq	r3, #1
 8005320:	2300      	movne	r3, #0
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	79fb      	ldrb	r3, [r7, #7]
 8005328:	429a      	cmp	r2, r3
 800532a:	d0a0      	beq.n	800526e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005336:	b480      	push	{r7}
 8005338:	b095      	sub	sp, #84	@ 0x54
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005346:	e853 3f00 	ldrex	r3, [r3]
 800534a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800534c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800534e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	461a      	mov	r2, r3
 800535a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800535c:	643b      	str	r3, [r7, #64]	@ 0x40
 800535e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005362:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005364:	e841 2300 	strex	r3, r2, [r1]
 8005368:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800536a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1e6      	bne.n	800533e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3308      	adds	r3, #8
 8005376:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	e853 3f00 	ldrex	r3, [r3]
 800537e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005386:	f023 0301 	bic.w	r3, r3, #1
 800538a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005394:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005398:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800539a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800539c:	e841 2300 	strex	r3, r2, [r1]
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1e3      	bne.n	8005370 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d118      	bne.n	80053e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	e853 3f00 	ldrex	r3, [r3]
 80053bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f023 0310 	bic.w	r3, r3, #16
 80053c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053d2:	6979      	ldr	r1, [r7, #20]
 80053d4:	69ba      	ldr	r2, [r7, #24]
 80053d6:	e841 2300 	strex	r3, r2, [r1]
 80053da:	613b      	str	r3, [r7, #16]
   return(result);
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d1e6      	bne.n	80053b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2220      	movs	r2, #32
 80053e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80053f6:	bf00      	nop
 80053f8:	3754      	adds	r7, #84	@ 0x54
 80053fa:	46bd      	mov	sp, r7
 80053fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005400:	4770      	bx	lr

08005402 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005410:	2b01      	cmp	r3, #1
 8005412:	d101      	bne.n	8005418 <HAL_UARTEx_DisableFifoMode+0x16>
 8005414:	2302      	movs	r3, #2
 8005416:	e027      	b.n	8005468 <HAL_UARTEx_DisableFifoMode+0x66>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2224      	movs	r2, #36	@ 0x24
 8005424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0201 	bic.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005446:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2220      	movs	r2, #32
 800545a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005466:	2300      	movs	r3, #0
}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005488:	2302      	movs	r3, #2
 800548a:	e02d      	b.n	80054e8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2224      	movs	r2, #36	@ 0x24
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0201 	bic.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	683a      	ldr	r2, [r7, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 f84f 	bl	800556c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2220      	movs	r2, #32
 80054da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005500:	2b01      	cmp	r3, #1
 8005502:	d101      	bne.n	8005508 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005504:	2302      	movs	r3, #2
 8005506:	e02d      	b.n	8005564 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	@ 0x24
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681a      	ldr	r2, [r3, #0]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	683a      	ldr	r2, [r7, #0]
 8005540:	430a      	orrs	r2, r1
 8005542:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f000 f811 	bl	800556c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005562:	2300      	movs	r3, #0
}
 8005564:	4618      	mov	r0, r3
 8005566:	3710      	adds	r7, #16
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005578:	2b00      	cmp	r3, #0
 800557a:	d108      	bne.n	800558e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800558c:	e031      	b.n	80055f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800558e:	2308      	movs	r3, #8
 8005590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005592:	2308      	movs	r3, #8
 8005594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	0e5b      	lsrs	r3, r3, #25
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	0f5b      	lsrs	r3, r3, #29
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	f003 0307 	and.w	r3, r3, #7
 80055b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055b6:	7bbb      	ldrb	r3, [r7, #14]
 80055b8:	7b3a      	ldrb	r2, [r7, #12]
 80055ba:	4911      	ldr	r1, [pc, #68]	@ (8005600 <UARTEx_SetNbDataToProcess+0x94>)
 80055bc:	5c8a      	ldrb	r2, [r1, r2]
 80055be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80055c2:	7b3a      	ldrb	r2, [r7, #12]
 80055c4:	490f      	ldr	r1, [pc, #60]	@ (8005604 <UARTEx_SetNbDataToProcess+0x98>)
 80055c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	7b7a      	ldrb	r2, [r7, #13]
 80055d8:	4909      	ldr	r1, [pc, #36]	@ (8005600 <UARTEx_SetNbDataToProcess+0x94>)
 80055da:	5c8a      	ldrb	r2, [r1, r2]
 80055dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80055e0:	7b7a      	ldrb	r2, [r7, #13]
 80055e2:	4908      	ldr	r1, [pc, #32]	@ (8005604 <UARTEx_SetNbDataToProcess+0x98>)
 80055e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80055e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80055f2:	bf00      	nop
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
 80055fe:	bf00      	nop
 8005600:	08006998 	.word	0x08006998
 8005604:	080069a0 	.word	0x080069a0

08005608 <std>:
 8005608:	2300      	movs	r3, #0
 800560a:	b510      	push	{r4, lr}
 800560c:	4604      	mov	r4, r0
 800560e:	e9c0 3300 	strd	r3, r3, [r0]
 8005612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005616:	6083      	str	r3, [r0, #8]
 8005618:	8181      	strh	r1, [r0, #12]
 800561a:	6643      	str	r3, [r0, #100]	@ 0x64
 800561c:	81c2      	strh	r2, [r0, #14]
 800561e:	6183      	str	r3, [r0, #24]
 8005620:	4619      	mov	r1, r3
 8005622:	2208      	movs	r2, #8
 8005624:	305c      	adds	r0, #92	@ 0x5c
 8005626:	f000 fa1b 	bl	8005a60 <memset>
 800562a:	4b0d      	ldr	r3, [pc, #52]	@ (8005660 <std+0x58>)
 800562c:	6263      	str	r3, [r4, #36]	@ 0x24
 800562e:	4b0d      	ldr	r3, [pc, #52]	@ (8005664 <std+0x5c>)
 8005630:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005632:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <std+0x60>)
 8005634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005636:	4b0d      	ldr	r3, [pc, #52]	@ (800566c <std+0x64>)
 8005638:	6323      	str	r3, [r4, #48]	@ 0x30
 800563a:	4b0d      	ldr	r3, [pc, #52]	@ (8005670 <std+0x68>)
 800563c:	6224      	str	r4, [r4, #32]
 800563e:	429c      	cmp	r4, r3
 8005640:	d006      	beq.n	8005650 <std+0x48>
 8005642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005646:	4294      	cmp	r4, r2
 8005648:	d002      	beq.n	8005650 <std+0x48>
 800564a:	33d0      	adds	r3, #208	@ 0xd0
 800564c:	429c      	cmp	r4, r3
 800564e:	d105      	bne.n	800565c <std+0x54>
 8005650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005658:	f000 ba7a 	b.w	8005b50 <__retarget_lock_init_recursive>
 800565c:	bd10      	pop	{r4, pc}
 800565e:	bf00      	nop
 8005660:	080058b1 	.word	0x080058b1
 8005664:	080058d3 	.word	0x080058d3
 8005668:	0800590b 	.word	0x0800590b
 800566c:	0800592f 	.word	0x0800592f
 8005670:	20000414 	.word	0x20000414

08005674 <stdio_exit_handler>:
 8005674:	4a02      	ldr	r2, [pc, #8]	@ (8005680 <stdio_exit_handler+0xc>)
 8005676:	4903      	ldr	r1, [pc, #12]	@ (8005684 <stdio_exit_handler+0x10>)
 8005678:	4803      	ldr	r0, [pc, #12]	@ (8005688 <stdio_exit_handler+0x14>)
 800567a:	f000 b869 	b.w	8005750 <_fwalk_sglue>
 800567e:	bf00      	nop
 8005680:	2000000c 	.word	0x2000000c
 8005684:	0800641d 	.word	0x0800641d
 8005688:	2000001c 	.word	0x2000001c

0800568c <cleanup_stdio>:
 800568c:	6841      	ldr	r1, [r0, #4]
 800568e:	4b0c      	ldr	r3, [pc, #48]	@ (80056c0 <cleanup_stdio+0x34>)
 8005690:	4299      	cmp	r1, r3
 8005692:	b510      	push	{r4, lr}
 8005694:	4604      	mov	r4, r0
 8005696:	d001      	beq.n	800569c <cleanup_stdio+0x10>
 8005698:	f000 fec0 	bl	800641c <_fflush_r>
 800569c:	68a1      	ldr	r1, [r4, #8]
 800569e:	4b09      	ldr	r3, [pc, #36]	@ (80056c4 <cleanup_stdio+0x38>)
 80056a0:	4299      	cmp	r1, r3
 80056a2:	d002      	beq.n	80056aa <cleanup_stdio+0x1e>
 80056a4:	4620      	mov	r0, r4
 80056a6:	f000 feb9 	bl	800641c <_fflush_r>
 80056aa:	68e1      	ldr	r1, [r4, #12]
 80056ac:	4b06      	ldr	r3, [pc, #24]	@ (80056c8 <cleanup_stdio+0x3c>)
 80056ae:	4299      	cmp	r1, r3
 80056b0:	d004      	beq.n	80056bc <cleanup_stdio+0x30>
 80056b2:	4620      	mov	r0, r4
 80056b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056b8:	f000 beb0 	b.w	800641c <_fflush_r>
 80056bc:	bd10      	pop	{r4, pc}
 80056be:	bf00      	nop
 80056c0:	20000414 	.word	0x20000414
 80056c4:	2000047c 	.word	0x2000047c
 80056c8:	200004e4 	.word	0x200004e4

080056cc <global_stdio_init.part.0>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <global_stdio_init.part.0+0x30>)
 80056d0:	4c0b      	ldr	r4, [pc, #44]	@ (8005700 <global_stdio_init.part.0+0x34>)
 80056d2:	4a0c      	ldr	r2, [pc, #48]	@ (8005704 <global_stdio_init.part.0+0x38>)
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	4620      	mov	r0, r4
 80056d8:	2200      	movs	r2, #0
 80056da:	2104      	movs	r1, #4
 80056dc:	f7ff ff94 	bl	8005608 <std>
 80056e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056e4:	2201      	movs	r2, #1
 80056e6:	2109      	movs	r1, #9
 80056e8:	f7ff ff8e 	bl	8005608 <std>
 80056ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056f0:	2202      	movs	r2, #2
 80056f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f6:	2112      	movs	r1, #18
 80056f8:	f7ff bf86 	b.w	8005608 <std>
 80056fc:	2000054c 	.word	0x2000054c
 8005700:	20000414 	.word	0x20000414
 8005704:	08005675 	.word	0x08005675

08005708 <__sfp_lock_acquire>:
 8005708:	4801      	ldr	r0, [pc, #4]	@ (8005710 <__sfp_lock_acquire+0x8>)
 800570a:	f000 ba22 	b.w	8005b52 <__retarget_lock_acquire_recursive>
 800570e:	bf00      	nop
 8005710:	20000555 	.word	0x20000555

08005714 <__sfp_lock_release>:
 8005714:	4801      	ldr	r0, [pc, #4]	@ (800571c <__sfp_lock_release+0x8>)
 8005716:	f000 ba1d 	b.w	8005b54 <__retarget_lock_release_recursive>
 800571a:	bf00      	nop
 800571c:	20000555 	.word	0x20000555

08005720 <__sinit>:
 8005720:	b510      	push	{r4, lr}
 8005722:	4604      	mov	r4, r0
 8005724:	f7ff fff0 	bl	8005708 <__sfp_lock_acquire>
 8005728:	6a23      	ldr	r3, [r4, #32]
 800572a:	b11b      	cbz	r3, 8005734 <__sinit+0x14>
 800572c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005730:	f7ff bff0 	b.w	8005714 <__sfp_lock_release>
 8005734:	4b04      	ldr	r3, [pc, #16]	@ (8005748 <__sinit+0x28>)
 8005736:	6223      	str	r3, [r4, #32]
 8005738:	4b04      	ldr	r3, [pc, #16]	@ (800574c <__sinit+0x2c>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1f5      	bne.n	800572c <__sinit+0xc>
 8005740:	f7ff ffc4 	bl	80056cc <global_stdio_init.part.0>
 8005744:	e7f2      	b.n	800572c <__sinit+0xc>
 8005746:	bf00      	nop
 8005748:	0800568d 	.word	0x0800568d
 800574c:	2000054c 	.word	0x2000054c

08005750 <_fwalk_sglue>:
 8005750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005754:	4607      	mov	r7, r0
 8005756:	4688      	mov	r8, r1
 8005758:	4614      	mov	r4, r2
 800575a:	2600      	movs	r6, #0
 800575c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005760:	f1b9 0901 	subs.w	r9, r9, #1
 8005764:	d505      	bpl.n	8005772 <_fwalk_sglue+0x22>
 8005766:	6824      	ldr	r4, [r4, #0]
 8005768:	2c00      	cmp	r4, #0
 800576a:	d1f7      	bne.n	800575c <_fwalk_sglue+0xc>
 800576c:	4630      	mov	r0, r6
 800576e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005772:	89ab      	ldrh	r3, [r5, #12]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d907      	bls.n	8005788 <_fwalk_sglue+0x38>
 8005778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800577c:	3301      	adds	r3, #1
 800577e:	d003      	beq.n	8005788 <_fwalk_sglue+0x38>
 8005780:	4629      	mov	r1, r5
 8005782:	4638      	mov	r0, r7
 8005784:	47c0      	blx	r8
 8005786:	4306      	orrs	r6, r0
 8005788:	3568      	adds	r5, #104	@ 0x68
 800578a:	e7e9      	b.n	8005760 <_fwalk_sglue+0x10>

0800578c <_puts_r>:
 800578c:	6a03      	ldr	r3, [r0, #32]
 800578e:	b570      	push	{r4, r5, r6, lr}
 8005790:	6884      	ldr	r4, [r0, #8]
 8005792:	4605      	mov	r5, r0
 8005794:	460e      	mov	r6, r1
 8005796:	b90b      	cbnz	r3, 800579c <_puts_r+0x10>
 8005798:	f7ff ffc2 	bl	8005720 <__sinit>
 800579c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800579e:	07db      	lsls	r3, r3, #31
 80057a0:	d405      	bmi.n	80057ae <_puts_r+0x22>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	0598      	lsls	r0, r3, #22
 80057a6:	d402      	bmi.n	80057ae <_puts_r+0x22>
 80057a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057aa:	f000 f9d2 	bl	8005b52 <__retarget_lock_acquire_recursive>
 80057ae:	89a3      	ldrh	r3, [r4, #12]
 80057b0:	0719      	lsls	r1, r3, #28
 80057b2:	d502      	bpl.n	80057ba <_puts_r+0x2e>
 80057b4:	6923      	ldr	r3, [r4, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d135      	bne.n	8005826 <_puts_r+0x9a>
 80057ba:	4621      	mov	r1, r4
 80057bc:	4628      	mov	r0, r5
 80057be:	f000 f8f9 	bl	80059b4 <__swsetup_r>
 80057c2:	b380      	cbz	r0, 8005826 <_puts_r+0x9a>
 80057c4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80057c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057ca:	07da      	lsls	r2, r3, #31
 80057cc:	d405      	bmi.n	80057da <_puts_r+0x4e>
 80057ce:	89a3      	ldrh	r3, [r4, #12]
 80057d0:	059b      	lsls	r3, r3, #22
 80057d2:	d402      	bmi.n	80057da <_puts_r+0x4e>
 80057d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057d6:	f000 f9bd 	bl	8005b54 <__retarget_lock_release_recursive>
 80057da:	4628      	mov	r0, r5
 80057dc:	bd70      	pop	{r4, r5, r6, pc}
 80057de:	2b00      	cmp	r3, #0
 80057e0:	da04      	bge.n	80057ec <_puts_r+0x60>
 80057e2:	69a2      	ldr	r2, [r4, #24]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	dc17      	bgt.n	8005818 <_puts_r+0x8c>
 80057e8:	290a      	cmp	r1, #10
 80057ea:	d015      	beq.n	8005818 <_puts_r+0x8c>
 80057ec:	6823      	ldr	r3, [r4, #0]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	6022      	str	r2, [r4, #0]
 80057f2:	7019      	strb	r1, [r3, #0]
 80057f4:	68a3      	ldr	r3, [r4, #8]
 80057f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057fa:	3b01      	subs	r3, #1
 80057fc:	60a3      	str	r3, [r4, #8]
 80057fe:	2900      	cmp	r1, #0
 8005800:	d1ed      	bne.n	80057de <_puts_r+0x52>
 8005802:	2b00      	cmp	r3, #0
 8005804:	da11      	bge.n	800582a <_puts_r+0x9e>
 8005806:	4622      	mov	r2, r4
 8005808:	210a      	movs	r1, #10
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f893 	bl	8005936 <__swbuf_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d0d7      	beq.n	80057c4 <_puts_r+0x38>
 8005814:	250a      	movs	r5, #10
 8005816:	e7d7      	b.n	80057c8 <_puts_r+0x3c>
 8005818:	4622      	mov	r2, r4
 800581a:	4628      	mov	r0, r5
 800581c:	f000 f88b 	bl	8005936 <__swbuf_r>
 8005820:	3001      	adds	r0, #1
 8005822:	d1e7      	bne.n	80057f4 <_puts_r+0x68>
 8005824:	e7ce      	b.n	80057c4 <_puts_r+0x38>
 8005826:	3e01      	subs	r6, #1
 8005828:	e7e4      	b.n	80057f4 <_puts_r+0x68>
 800582a:	6823      	ldr	r3, [r4, #0]
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	6022      	str	r2, [r4, #0]
 8005830:	220a      	movs	r2, #10
 8005832:	701a      	strb	r2, [r3, #0]
 8005834:	e7ee      	b.n	8005814 <_puts_r+0x88>
	...

08005838 <puts>:
 8005838:	4b02      	ldr	r3, [pc, #8]	@ (8005844 <puts+0xc>)
 800583a:	4601      	mov	r1, r0
 800583c:	6818      	ldr	r0, [r3, #0]
 800583e:	f7ff bfa5 	b.w	800578c <_puts_r>
 8005842:	bf00      	nop
 8005844:	20000018 	.word	0x20000018

08005848 <sniprintf>:
 8005848:	b40c      	push	{r2, r3}
 800584a:	b530      	push	{r4, r5, lr}
 800584c:	4b17      	ldr	r3, [pc, #92]	@ (80058ac <sniprintf+0x64>)
 800584e:	1e0c      	subs	r4, r1, #0
 8005850:	681d      	ldr	r5, [r3, #0]
 8005852:	b09d      	sub	sp, #116	@ 0x74
 8005854:	da08      	bge.n	8005868 <sniprintf+0x20>
 8005856:	238b      	movs	r3, #139	@ 0x8b
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800585e:	b01d      	add	sp, #116	@ 0x74
 8005860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005864:	b002      	add	sp, #8
 8005866:	4770      	bx	lr
 8005868:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800586c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005870:	bf14      	ite	ne
 8005872:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8005876:	4623      	moveq	r3, r4
 8005878:	9304      	str	r3, [sp, #16]
 800587a:	9307      	str	r3, [sp, #28]
 800587c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005880:	9002      	str	r0, [sp, #8]
 8005882:	9006      	str	r0, [sp, #24]
 8005884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005888:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800588a:	ab21      	add	r3, sp, #132	@ 0x84
 800588c:	a902      	add	r1, sp, #8
 800588e:	4628      	mov	r0, r5
 8005890:	9301      	str	r3, [sp, #4]
 8005892:	f000 fab5 	bl	8005e00 <_svfiprintf_r>
 8005896:	1c43      	adds	r3, r0, #1
 8005898:	bfbc      	itt	lt
 800589a:	238b      	movlt	r3, #139	@ 0x8b
 800589c:	602b      	strlt	r3, [r5, #0]
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d0dd      	beq.n	800585e <sniprintf+0x16>
 80058a2:	9b02      	ldr	r3, [sp, #8]
 80058a4:	2200      	movs	r2, #0
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	e7d9      	b.n	800585e <sniprintf+0x16>
 80058aa:	bf00      	nop
 80058ac:	20000018 	.word	0x20000018

080058b0 <__sread>:
 80058b0:	b510      	push	{r4, lr}
 80058b2:	460c      	mov	r4, r1
 80058b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058b8:	f000 f8fc 	bl	8005ab4 <_read_r>
 80058bc:	2800      	cmp	r0, #0
 80058be:	bfab      	itete	ge
 80058c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80058c2:	89a3      	ldrhlt	r3, [r4, #12]
 80058c4:	181b      	addge	r3, r3, r0
 80058c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80058ca:	bfac      	ite	ge
 80058cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80058ce:	81a3      	strhlt	r3, [r4, #12]
 80058d0:	bd10      	pop	{r4, pc}

080058d2 <__swrite>:
 80058d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d6:	461f      	mov	r7, r3
 80058d8:	898b      	ldrh	r3, [r1, #12]
 80058da:	05db      	lsls	r3, r3, #23
 80058dc:	4605      	mov	r5, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	4616      	mov	r6, r2
 80058e2:	d505      	bpl.n	80058f0 <__swrite+0x1e>
 80058e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058e8:	2302      	movs	r3, #2
 80058ea:	2200      	movs	r2, #0
 80058ec:	f000 f8d0 	bl	8005a90 <_lseek_r>
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058fa:	81a3      	strh	r3, [r4, #12]
 80058fc:	4632      	mov	r2, r6
 80058fe:	463b      	mov	r3, r7
 8005900:	4628      	mov	r0, r5
 8005902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005906:	f000 b8e7 	b.w	8005ad8 <_write_r>

0800590a <__sseek>:
 800590a:	b510      	push	{r4, lr}
 800590c:	460c      	mov	r4, r1
 800590e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005912:	f000 f8bd 	bl	8005a90 <_lseek_r>
 8005916:	1c43      	adds	r3, r0, #1
 8005918:	89a3      	ldrh	r3, [r4, #12]
 800591a:	bf15      	itete	ne
 800591c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800591e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005922:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005926:	81a3      	strheq	r3, [r4, #12]
 8005928:	bf18      	it	ne
 800592a:	81a3      	strhne	r3, [r4, #12]
 800592c:	bd10      	pop	{r4, pc}

0800592e <__sclose>:
 800592e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005932:	f000 b89d 	b.w	8005a70 <_close_r>

08005936 <__swbuf_r>:
 8005936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005938:	460e      	mov	r6, r1
 800593a:	4614      	mov	r4, r2
 800593c:	4605      	mov	r5, r0
 800593e:	b118      	cbz	r0, 8005948 <__swbuf_r+0x12>
 8005940:	6a03      	ldr	r3, [r0, #32]
 8005942:	b90b      	cbnz	r3, 8005948 <__swbuf_r+0x12>
 8005944:	f7ff feec 	bl	8005720 <__sinit>
 8005948:	69a3      	ldr	r3, [r4, #24]
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	071a      	lsls	r2, r3, #28
 8005950:	d501      	bpl.n	8005956 <__swbuf_r+0x20>
 8005952:	6923      	ldr	r3, [r4, #16]
 8005954:	b943      	cbnz	r3, 8005968 <__swbuf_r+0x32>
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 f82b 	bl	80059b4 <__swsetup_r>
 800595e:	b118      	cbz	r0, 8005968 <__swbuf_r+0x32>
 8005960:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005964:	4638      	mov	r0, r7
 8005966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	6922      	ldr	r2, [r4, #16]
 800596c:	1a98      	subs	r0, r3, r2
 800596e:	6963      	ldr	r3, [r4, #20]
 8005970:	b2f6      	uxtb	r6, r6
 8005972:	4283      	cmp	r3, r0
 8005974:	4637      	mov	r7, r6
 8005976:	dc05      	bgt.n	8005984 <__swbuf_r+0x4e>
 8005978:	4621      	mov	r1, r4
 800597a:	4628      	mov	r0, r5
 800597c:	f000 fd4e 	bl	800641c <_fflush_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	d1ed      	bne.n	8005960 <__swbuf_r+0x2a>
 8005984:	68a3      	ldr	r3, [r4, #8]
 8005986:	3b01      	subs	r3, #1
 8005988:	60a3      	str	r3, [r4, #8]
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	6022      	str	r2, [r4, #0]
 8005990:	701e      	strb	r6, [r3, #0]
 8005992:	6962      	ldr	r2, [r4, #20]
 8005994:	1c43      	adds	r3, r0, #1
 8005996:	429a      	cmp	r2, r3
 8005998:	d004      	beq.n	80059a4 <__swbuf_r+0x6e>
 800599a:	89a3      	ldrh	r3, [r4, #12]
 800599c:	07db      	lsls	r3, r3, #31
 800599e:	d5e1      	bpl.n	8005964 <__swbuf_r+0x2e>
 80059a0:	2e0a      	cmp	r6, #10
 80059a2:	d1df      	bne.n	8005964 <__swbuf_r+0x2e>
 80059a4:	4621      	mov	r1, r4
 80059a6:	4628      	mov	r0, r5
 80059a8:	f000 fd38 	bl	800641c <_fflush_r>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	d0d9      	beq.n	8005964 <__swbuf_r+0x2e>
 80059b0:	e7d6      	b.n	8005960 <__swbuf_r+0x2a>
	...

080059b4 <__swsetup_r>:
 80059b4:	b538      	push	{r3, r4, r5, lr}
 80059b6:	4b29      	ldr	r3, [pc, #164]	@ (8005a5c <__swsetup_r+0xa8>)
 80059b8:	4605      	mov	r5, r0
 80059ba:	6818      	ldr	r0, [r3, #0]
 80059bc:	460c      	mov	r4, r1
 80059be:	b118      	cbz	r0, 80059c8 <__swsetup_r+0x14>
 80059c0:	6a03      	ldr	r3, [r0, #32]
 80059c2:	b90b      	cbnz	r3, 80059c8 <__swsetup_r+0x14>
 80059c4:	f7ff feac 	bl	8005720 <__sinit>
 80059c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059cc:	0719      	lsls	r1, r3, #28
 80059ce:	d422      	bmi.n	8005a16 <__swsetup_r+0x62>
 80059d0:	06da      	lsls	r2, r3, #27
 80059d2:	d407      	bmi.n	80059e4 <__swsetup_r+0x30>
 80059d4:	2209      	movs	r2, #9
 80059d6:	602a      	str	r2, [r5, #0]
 80059d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80059dc:	81a3      	strh	r3, [r4, #12]
 80059de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80059e2:	e033      	b.n	8005a4c <__swsetup_r+0x98>
 80059e4:	0758      	lsls	r0, r3, #29
 80059e6:	d512      	bpl.n	8005a0e <__swsetup_r+0x5a>
 80059e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80059ea:	b141      	cbz	r1, 80059fe <__swsetup_r+0x4a>
 80059ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80059f0:	4299      	cmp	r1, r3
 80059f2:	d002      	beq.n	80059fa <__swsetup_r+0x46>
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 f8af 	bl	8005b58 <_free_r>
 80059fa:	2300      	movs	r3, #0
 80059fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80059fe:	89a3      	ldrh	r3, [r4, #12]
 8005a00:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a04:	81a3      	strh	r3, [r4, #12]
 8005a06:	2300      	movs	r3, #0
 8005a08:	6063      	str	r3, [r4, #4]
 8005a0a:	6923      	ldr	r3, [r4, #16]
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	89a3      	ldrh	r3, [r4, #12]
 8005a10:	f043 0308 	orr.w	r3, r3, #8
 8005a14:	81a3      	strh	r3, [r4, #12]
 8005a16:	6923      	ldr	r3, [r4, #16]
 8005a18:	b94b      	cbnz	r3, 8005a2e <__swsetup_r+0x7a>
 8005a1a:	89a3      	ldrh	r3, [r4, #12]
 8005a1c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005a24:	d003      	beq.n	8005a2e <__swsetup_r+0x7a>
 8005a26:	4621      	mov	r1, r4
 8005a28:	4628      	mov	r0, r5
 8005a2a:	f000 fd45 	bl	80064b8 <__smakebuf_r>
 8005a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a32:	f013 0201 	ands.w	r2, r3, #1
 8005a36:	d00a      	beq.n	8005a4e <__swsetup_r+0x9a>
 8005a38:	2200      	movs	r2, #0
 8005a3a:	60a2      	str	r2, [r4, #8]
 8005a3c:	6962      	ldr	r2, [r4, #20]
 8005a3e:	4252      	negs	r2, r2
 8005a40:	61a2      	str	r2, [r4, #24]
 8005a42:	6922      	ldr	r2, [r4, #16]
 8005a44:	b942      	cbnz	r2, 8005a58 <__swsetup_r+0xa4>
 8005a46:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005a4a:	d1c5      	bne.n	80059d8 <__swsetup_r+0x24>
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	0799      	lsls	r1, r3, #30
 8005a50:	bf58      	it	pl
 8005a52:	6962      	ldrpl	r2, [r4, #20]
 8005a54:	60a2      	str	r2, [r4, #8]
 8005a56:	e7f4      	b.n	8005a42 <__swsetup_r+0x8e>
 8005a58:	2000      	movs	r0, #0
 8005a5a:	e7f7      	b.n	8005a4c <__swsetup_r+0x98>
 8005a5c:	20000018 	.word	0x20000018

08005a60 <memset>:
 8005a60:	4402      	add	r2, r0
 8005a62:	4603      	mov	r3, r0
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d100      	bne.n	8005a6a <memset+0xa>
 8005a68:	4770      	bx	lr
 8005a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a6e:	e7f9      	b.n	8005a64 <memset+0x4>

08005a70 <_close_r>:
 8005a70:	b538      	push	{r3, r4, r5, lr}
 8005a72:	4d06      	ldr	r5, [pc, #24]	@ (8005a8c <_close_r+0x1c>)
 8005a74:	2300      	movs	r3, #0
 8005a76:	4604      	mov	r4, r0
 8005a78:	4608      	mov	r0, r1
 8005a7a:	602b      	str	r3, [r5, #0]
 8005a7c:	f7fb fd06 	bl	800148c <_close>
 8005a80:	1c43      	adds	r3, r0, #1
 8005a82:	d102      	bne.n	8005a8a <_close_r+0x1a>
 8005a84:	682b      	ldr	r3, [r5, #0]
 8005a86:	b103      	cbz	r3, 8005a8a <_close_r+0x1a>
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	bd38      	pop	{r3, r4, r5, pc}
 8005a8c:	20000550 	.word	0x20000550

08005a90 <_lseek_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	4d07      	ldr	r5, [pc, #28]	@ (8005ab0 <_lseek_r+0x20>)
 8005a94:	4604      	mov	r4, r0
 8005a96:	4608      	mov	r0, r1
 8005a98:	4611      	mov	r1, r2
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	602a      	str	r2, [r5, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	f7fb fd1b 	bl	80014da <_lseek>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d102      	bne.n	8005aae <_lseek_r+0x1e>
 8005aa8:	682b      	ldr	r3, [r5, #0]
 8005aaa:	b103      	cbz	r3, 8005aae <_lseek_r+0x1e>
 8005aac:	6023      	str	r3, [r4, #0]
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	20000550 	.word	0x20000550

08005ab4 <_read_r>:
 8005ab4:	b538      	push	{r3, r4, r5, lr}
 8005ab6:	4d07      	ldr	r5, [pc, #28]	@ (8005ad4 <_read_r+0x20>)
 8005ab8:	4604      	mov	r4, r0
 8005aba:	4608      	mov	r0, r1
 8005abc:	4611      	mov	r1, r2
 8005abe:	2200      	movs	r2, #0
 8005ac0:	602a      	str	r2, [r5, #0]
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f7fb fca9 	bl	800141a <_read>
 8005ac8:	1c43      	adds	r3, r0, #1
 8005aca:	d102      	bne.n	8005ad2 <_read_r+0x1e>
 8005acc:	682b      	ldr	r3, [r5, #0]
 8005ace:	b103      	cbz	r3, 8005ad2 <_read_r+0x1e>
 8005ad0:	6023      	str	r3, [r4, #0]
 8005ad2:	bd38      	pop	{r3, r4, r5, pc}
 8005ad4:	20000550 	.word	0x20000550

08005ad8 <_write_r>:
 8005ad8:	b538      	push	{r3, r4, r5, lr}
 8005ada:	4d07      	ldr	r5, [pc, #28]	@ (8005af8 <_write_r+0x20>)
 8005adc:	4604      	mov	r4, r0
 8005ade:	4608      	mov	r0, r1
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	602a      	str	r2, [r5, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f7fb fcb4 	bl	8001454 <_write>
 8005aec:	1c43      	adds	r3, r0, #1
 8005aee:	d102      	bne.n	8005af6 <_write_r+0x1e>
 8005af0:	682b      	ldr	r3, [r5, #0]
 8005af2:	b103      	cbz	r3, 8005af6 <_write_r+0x1e>
 8005af4:	6023      	str	r3, [r4, #0]
 8005af6:	bd38      	pop	{r3, r4, r5, pc}
 8005af8:	20000550 	.word	0x20000550

08005afc <__errno>:
 8005afc:	4b01      	ldr	r3, [pc, #4]	@ (8005b04 <__errno+0x8>)
 8005afe:	6818      	ldr	r0, [r3, #0]
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	20000018 	.word	0x20000018

08005b08 <__libc_init_array>:
 8005b08:	b570      	push	{r4, r5, r6, lr}
 8005b0a:	4d0d      	ldr	r5, [pc, #52]	@ (8005b40 <__libc_init_array+0x38>)
 8005b0c:	4c0d      	ldr	r4, [pc, #52]	@ (8005b44 <__libc_init_array+0x3c>)
 8005b0e:	1b64      	subs	r4, r4, r5
 8005b10:	10a4      	asrs	r4, r4, #2
 8005b12:	2600      	movs	r6, #0
 8005b14:	42a6      	cmp	r6, r4
 8005b16:	d109      	bne.n	8005b2c <__libc_init_array+0x24>
 8005b18:	4d0b      	ldr	r5, [pc, #44]	@ (8005b48 <__libc_init_array+0x40>)
 8005b1a:	4c0c      	ldr	r4, [pc, #48]	@ (8005b4c <__libc_init_array+0x44>)
 8005b1c:	f000 fd98 	bl	8006650 <_init>
 8005b20:	1b64      	subs	r4, r4, r5
 8005b22:	10a4      	asrs	r4, r4, #2
 8005b24:	2600      	movs	r6, #0
 8005b26:	42a6      	cmp	r6, r4
 8005b28:	d105      	bne.n	8005b36 <__libc_init_array+0x2e>
 8005b2a:	bd70      	pop	{r4, r5, r6, pc}
 8005b2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b30:	4798      	blx	r3
 8005b32:	3601      	adds	r6, #1
 8005b34:	e7ee      	b.n	8005b14 <__libc_init_array+0xc>
 8005b36:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b3a:	4798      	blx	r3
 8005b3c:	3601      	adds	r6, #1
 8005b3e:	e7f2      	b.n	8005b26 <__libc_init_array+0x1e>
 8005b40:	080069e4 	.word	0x080069e4
 8005b44:	080069e4 	.word	0x080069e4
 8005b48:	080069e4 	.word	0x080069e4
 8005b4c:	080069e8 	.word	0x080069e8

08005b50 <__retarget_lock_init_recursive>:
 8005b50:	4770      	bx	lr

08005b52 <__retarget_lock_acquire_recursive>:
 8005b52:	4770      	bx	lr

08005b54 <__retarget_lock_release_recursive>:
 8005b54:	4770      	bx	lr
	...

08005b58 <_free_r>:
 8005b58:	b538      	push	{r3, r4, r5, lr}
 8005b5a:	4605      	mov	r5, r0
 8005b5c:	2900      	cmp	r1, #0
 8005b5e:	d041      	beq.n	8005be4 <_free_r+0x8c>
 8005b60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b64:	1f0c      	subs	r4, r1, #4
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	bfb8      	it	lt
 8005b6a:	18e4      	addlt	r4, r4, r3
 8005b6c:	f000 f8e0 	bl	8005d30 <__malloc_lock>
 8005b70:	4a1d      	ldr	r2, [pc, #116]	@ (8005be8 <_free_r+0x90>)
 8005b72:	6813      	ldr	r3, [r2, #0]
 8005b74:	b933      	cbnz	r3, 8005b84 <_free_r+0x2c>
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	6014      	str	r4, [r2, #0]
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b80:	f000 b8dc 	b.w	8005d3c <__malloc_unlock>
 8005b84:	42a3      	cmp	r3, r4
 8005b86:	d908      	bls.n	8005b9a <_free_r+0x42>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	1821      	adds	r1, r4, r0
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf01      	itttt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	1809      	addeq	r1, r1, r0
 8005b96:	6021      	streq	r1, [r4, #0]
 8005b98:	e7ed      	b.n	8005b76 <_free_r+0x1e>
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	b10b      	cbz	r3, 8005ba4 <_free_r+0x4c>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d9fa      	bls.n	8005b9a <_free_r+0x42>
 8005ba4:	6811      	ldr	r1, [r2, #0]
 8005ba6:	1850      	adds	r0, r2, r1
 8005ba8:	42a0      	cmp	r0, r4
 8005baa:	d10b      	bne.n	8005bc4 <_free_r+0x6c>
 8005bac:	6820      	ldr	r0, [r4, #0]
 8005bae:	4401      	add	r1, r0
 8005bb0:	1850      	adds	r0, r2, r1
 8005bb2:	4283      	cmp	r3, r0
 8005bb4:	6011      	str	r1, [r2, #0]
 8005bb6:	d1e0      	bne.n	8005b7a <_free_r+0x22>
 8005bb8:	6818      	ldr	r0, [r3, #0]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	6053      	str	r3, [r2, #4]
 8005bbe:	4408      	add	r0, r1
 8005bc0:	6010      	str	r0, [r2, #0]
 8005bc2:	e7da      	b.n	8005b7a <_free_r+0x22>
 8005bc4:	d902      	bls.n	8005bcc <_free_r+0x74>
 8005bc6:	230c      	movs	r3, #12
 8005bc8:	602b      	str	r3, [r5, #0]
 8005bca:	e7d6      	b.n	8005b7a <_free_r+0x22>
 8005bcc:	6820      	ldr	r0, [r4, #0]
 8005bce:	1821      	adds	r1, r4, r0
 8005bd0:	428b      	cmp	r3, r1
 8005bd2:	bf04      	itt	eq
 8005bd4:	6819      	ldreq	r1, [r3, #0]
 8005bd6:	685b      	ldreq	r3, [r3, #4]
 8005bd8:	6063      	str	r3, [r4, #4]
 8005bda:	bf04      	itt	eq
 8005bdc:	1809      	addeq	r1, r1, r0
 8005bde:	6021      	streq	r1, [r4, #0]
 8005be0:	6054      	str	r4, [r2, #4]
 8005be2:	e7ca      	b.n	8005b7a <_free_r+0x22>
 8005be4:	bd38      	pop	{r3, r4, r5, pc}
 8005be6:	bf00      	nop
 8005be8:	2000055c 	.word	0x2000055c

08005bec <sbrk_aligned>:
 8005bec:	b570      	push	{r4, r5, r6, lr}
 8005bee:	4e0f      	ldr	r6, [pc, #60]	@ (8005c2c <sbrk_aligned+0x40>)
 8005bf0:	460c      	mov	r4, r1
 8005bf2:	6831      	ldr	r1, [r6, #0]
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	b911      	cbnz	r1, 8005bfe <sbrk_aligned+0x12>
 8005bf8:	f000 fcd6 	bl	80065a8 <_sbrk_r>
 8005bfc:	6030      	str	r0, [r6, #0]
 8005bfe:	4621      	mov	r1, r4
 8005c00:	4628      	mov	r0, r5
 8005c02:	f000 fcd1 	bl	80065a8 <_sbrk_r>
 8005c06:	1c43      	adds	r3, r0, #1
 8005c08:	d103      	bne.n	8005c12 <sbrk_aligned+0x26>
 8005c0a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005c0e:	4620      	mov	r0, r4
 8005c10:	bd70      	pop	{r4, r5, r6, pc}
 8005c12:	1cc4      	adds	r4, r0, #3
 8005c14:	f024 0403 	bic.w	r4, r4, #3
 8005c18:	42a0      	cmp	r0, r4
 8005c1a:	d0f8      	beq.n	8005c0e <sbrk_aligned+0x22>
 8005c1c:	1a21      	subs	r1, r4, r0
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 fcc2 	bl	80065a8 <_sbrk_r>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d1f2      	bne.n	8005c0e <sbrk_aligned+0x22>
 8005c28:	e7ef      	b.n	8005c0a <sbrk_aligned+0x1e>
 8005c2a:	bf00      	nop
 8005c2c:	20000558 	.word	0x20000558

08005c30 <_malloc_r>:
 8005c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c34:	1ccd      	adds	r5, r1, #3
 8005c36:	f025 0503 	bic.w	r5, r5, #3
 8005c3a:	3508      	adds	r5, #8
 8005c3c:	2d0c      	cmp	r5, #12
 8005c3e:	bf38      	it	cc
 8005c40:	250c      	movcc	r5, #12
 8005c42:	2d00      	cmp	r5, #0
 8005c44:	4606      	mov	r6, r0
 8005c46:	db01      	blt.n	8005c4c <_malloc_r+0x1c>
 8005c48:	42a9      	cmp	r1, r5
 8005c4a:	d904      	bls.n	8005c56 <_malloc_r+0x26>
 8005c4c:	230c      	movs	r3, #12
 8005c4e:	6033      	str	r3, [r6, #0]
 8005c50:	2000      	movs	r0, #0
 8005c52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d2c <_malloc_r+0xfc>
 8005c5a:	f000 f869 	bl	8005d30 <__malloc_lock>
 8005c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c62:	461c      	mov	r4, r3
 8005c64:	bb44      	cbnz	r4, 8005cb8 <_malloc_r+0x88>
 8005c66:	4629      	mov	r1, r5
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff ffbf 	bl	8005bec <sbrk_aligned>
 8005c6e:	1c43      	adds	r3, r0, #1
 8005c70:	4604      	mov	r4, r0
 8005c72:	d158      	bne.n	8005d26 <_malloc_r+0xf6>
 8005c74:	f8d8 4000 	ldr.w	r4, [r8]
 8005c78:	4627      	mov	r7, r4
 8005c7a:	2f00      	cmp	r7, #0
 8005c7c:	d143      	bne.n	8005d06 <_malloc_r+0xd6>
 8005c7e:	2c00      	cmp	r4, #0
 8005c80:	d04b      	beq.n	8005d1a <_malloc_r+0xea>
 8005c82:	6823      	ldr	r3, [r4, #0]
 8005c84:	4639      	mov	r1, r7
 8005c86:	4630      	mov	r0, r6
 8005c88:	eb04 0903 	add.w	r9, r4, r3
 8005c8c:	f000 fc8c 	bl	80065a8 <_sbrk_r>
 8005c90:	4581      	cmp	r9, r0
 8005c92:	d142      	bne.n	8005d1a <_malloc_r+0xea>
 8005c94:	6821      	ldr	r1, [r4, #0]
 8005c96:	1a6d      	subs	r5, r5, r1
 8005c98:	4629      	mov	r1, r5
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	f7ff ffa6 	bl	8005bec <sbrk_aligned>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d03a      	beq.n	8005d1a <_malloc_r+0xea>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	442b      	add	r3, r5
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	f8d8 3000 	ldr.w	r3, [r8]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	bb62      	cbnz	r2, 8005d0c <_malloc_r+0xdc>
 8005cb2:	f8c8 7000 	str.w	r7, [r8]
 8005cb6:	e00f      	b.n	8005cd8 <_malloc_r+0xa8>
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	1b52      	subs	r2, r2, r5
 8005cbc:	d420      	bmi.n	8005d00 <_malloc_r+0xd0>
 8005cbe:	2a0b      	cmp	r2, #11
 8005cc0:	d917      	bls.n	8005cf2 <_malloc_r+0xc2>
 8005cc2:	1961      	adds	r1, r4, r5
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	6025      	str	r5, [r4, #0]
 8005cc8:	bf18      	it	ne
 8005cca:	6059      	strne	r1, [r3, #4]
 8005ccc:	6863      	ldr	r3, [r4, #4]
 8005cce:	bf08      	it	eq
 8005cd0:	f8c8 1000 	streq.w	r1, [r8]
 8005cd4:	5162      	str	r2, [r4, r5]
 8005cd6:	604b      	str	r3, [r1, #4]
 8005cd8:	4630      	mov	r0, r6
 8005cda:	f000 f82f 	bl	8005d3c <__malloc_unlock>
 8005cde:	f104 000b 	add.w	r0, r4, #11
 8005ce2:	1d23      	adds	r3, r4, #4
 8005ce4:	f020 0007 	bic.w	r0, r0, #7
 8005ce8:	1ac2      	subs	r2, r0, r3
 8005cea:	bf1c      	itt	ne
 8005cec:	1a1b      	subne	r3, r3, r0
 8005cee:	50a3      	strne	r3, [r4, r2]
 8005cf0:	e7af      	b.n	8005c52 <_malloc_r+0x22>
 8005cf2:	6862      	ldr	r2, [r4, #4]
 8005cf4:	42a3      	cmp	r3, r4
 8005cf6:	bf0c      	ite	eq
 8005cf8:	f8c8 2000 	streq.w	r2, [r8]
 8005cfc:	605a      	strne	r2, [r3, #4]
 8005cfe:	e7eb      	b.n	8005cd8 <_malloc_r+0xa8>
 8005d00:	4623      	mov	r3, r4
 8005d02:	6864      	ldr	r4, [r4, #4]
 8005d04:	e7ae      	b.n	8005c64 <_malloc_r+0x34>
 8005d06:	463c      	mov	r4, r7
 8005d08:	687f      	ldr	r7, [r7, #4]
 8005d0a:	e7b6      	b.n	8005c7a <_malloc_r+0x4a>
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d1fb      	bne.n	8005d0c <_malloc_r+0xdc>
 8005d14:	2300      	movs	r3, #0
 8005d16:	6053      	str	r3, [r2, #4]
 8005d18:	e7de      	b.n	8005cd8 <_malloc_r+0xa8>
 8005d1a:	230c      	movs	r3, #12
 8005d1c:	6033      	str	r3, [r6, #0]
 8005d1e:	4630      	mov	r0, r6
 8005d20:	f000 f80c 	bl	8005d3c <__malloc_unlock>
 8005d24:	e794      	b.n	8005c50 <_malloc_r+0x20>
 8005d26:	6005      	str	r5, [r0, #0]
 8005d28:	e7d6      	b.n	8005cd8 <_malloc_r+0xa8>
 8005d2a:	bf00      	nop
 8005d2c:	2000055c 	.word	0x2000055c

08005d30 <__malloc_lock>:
 8005d30:	4801      	ldr	r0, [pc, #4]	@ (8005d38 <__malloc_lock+0x8>)
 8005d32:	f7ff bf0e 	b.w	8005b52 <__retarget_lock_acquire_recursive>
 8005d36:	bf00      	nop
 8005d38:	20000554 	.word	0x20000554

08005d3c <__malloc_unlock>:
 8005d3c:	4801      	ldr	r0, [pc, #4]	@ (8005d44 <__malloc_unlock+0x8>)
 8005d3e:	f7ff bf09 	b.w	8005b54 <__retarget_lock_release_recursive>
 8005d42:	bf00      	nop
 8005d44:	20000554 	.word	0x20000554

08005d48 <__ssputs_r>:
 8005d48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d4c:	688e      	ldr	r6, [r1, #8]
 8005d4e:	461f      	mov	r7, r3
 8005d50:	42be      	cmp	r6, r7
 8005d52:	680b      	ldr	r3, [r1, #0]
 8005d54:	4682      	mov	sl, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	4690      	mov	r8, r2
 8005d5a:	d82d      	bhi.n	8005db8 <__ssputs_r+0x70>
 8005d5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d60:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d64:	d026      	beq.n	8005db4 <__ssputs_r+0x6c>
 8005d66:	6965      	ldr	r5, [r4, #20]
 8005d68:	6909      	ldr	r1, [r1, #16]
 8005d6a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d6e:	eba3 0901 	sub.w	r9, r3, r1
 8005d72:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d76:	1c7b      	adds	r3, r7, #1
 8005d78:	444b      	add	r3, r9
 8005d7a:	106d      	asrs	r5, r5, #1
 8005d7c:	429d      	cmp	r5, r3
 8005d7e:	bf38      	it	cc
 8005d80:	461d      	movcc	r5, r3
 8005d82:	0553      	lsls	r3, r2, #21
 8005d84:	d527      	bpl.n	8005dd6 <__ssputs_r+0x8e>
 8005d86:	4629      	mov	r1, r5
 8005d88:	f7ff ff52 	bl	8005c30 <_malloc_r>
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	b360      	cbz	r0, 8005dea <__ssputs_r+0xa2>
 8005d90:	6921      	ldr	r1, [r4, #16]
 8005d92:	464a      	mov	r2, r9
 8005d94:	f000 fc18 	bl	80065c8 <memcpy>
 8005d98:	89a3      	ldrh	r3, [r4, #12]
 8005d9a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005d9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005da2:	81a3      	strh	r3, [r4, #12]
 8005da4:	6126      	str	r6, [r4, #16]
 8005da6:	6165      	str	r5, [r4, #20]
 8005da8:	444e      	add	r6, r9
 8005daa:	eba5 0509 	sub.w	r5, r5, r9
 8005dae:	6026      	str	r6, [r4, #0]
 8005db0:	60a5      	str	r5, [r4, #8]
 8005db2:	463e      	mov	r6, r7
 8005db4:	42be      	cmp	r6, r7
 8005db6:	d900      	bls.n	8005dba <__ssputs_r+0x72>
 8005db8:	463e      	mov	r6, r7
 8005dba:	6820      	ldr	r0, [r4, #0]
 8005dbc:	4632      	mov	r2, r6
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	f000 fbb6 	bl	8006530 <memmove>
 8005dc4:	68a3      	ldr	r3, [r4, #8]
 8005dc6:	1b9b      	subs	r3, r3, r6
 8005dc8:	60a3      	str	r3, [r4, #8]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	4433      	add	r3, r6
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd6:	462a      	mov	r2, r5
 8005dd8:	f000 fc04 	bl	80065e4 <_realloc_r>
 8005ddc:	4606      	mov	r6, r0
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d1e0      	bne.n	8005da4 <__ssputs_r+0x5c>
 8005de2:	6921      	ldr	r1, [r4, #16]
 8005de4:	4650      	mov	r0, sl
 8005de6:	f7ff feb7 	bl	8005b58 <_free_r>
 8005dea:	230c      	movs	r3, #12
 8005dec:	f8ca 3000 	str.w	r3, [sl]
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005dfc:	e7e9      	b.n	8005dd2 <__ssputs_r+0x8a>
	...

08005e00 <_svfiprintf_r>:
 8005e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e04:	4698      	mov	r8, r3
 8005e06:	898b      	ldrh	r3, [r1, #12]
 8005e08:	061b      	lsls	r3, r3, #24
 8005e0a:	b09d      	sub	sp, #116	@ 0x74
 8005e0c:	4607      	mov	r7, r0
 8005e0e:	460d      	mov	r5, r1
 8005e10:	4614      	mov	r4, r2
 8005e12:	d510      	bpl.n	8005e36 <_svfiprintf_r+0x36>
 8005e14:	690b      	ldr	r3, [r1, #16]
 8005e16:	b973      	cbnz	r3, 8005e36 <_svfiprintf_r+0x36>
 8005e18:	2140      	movs	r1, #64	@ 0x40
 8005e1a:	f7ff ff09 	bl	8005c30 <_malloc_r>
 8005e1e:	6028      	str	r0, [r5, #0]
 8005e20:	6128      	str	r0, [r5, #16]
 8005e22:	b930      	cbnz	r0, 8005e32 <_svfiprintf_r+0x32>
 8005e24:	230c      	movs	r3, #12
 8005e26:	603b      	str	r3, [r7, #0]
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005e2c:	b01d      	add	sp, #116	@ 0x74
 8005e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e32:	2340      	movs	r3, #64	@ 0x40
 8005e34:	616b      	str	r3, [r5, #20]
 8005e36:	2300      	movs	r3, #0
 8005e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e3a:	2320      	movs	r3, #32
 8005e3c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e40:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e44:	2330      	movs	r3, #48	@ 0x30
 8005e46:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005fe4 <_svfiprintf_r+0x1e4>
 8005e4a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e4e:	f04f 0901 	mov.w	r9, #1
 8005e52:	4623      	mov	r3, r4
 8005e54:	469a      	mov	sl, r3
 8005e56:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e5a:	b10a      	cbz	r2, 8005e60 <_svfiprintf_r+0x60>
 8005e5c:	2a25      	cmp	r2, #37	@ 0x25
 8005e5e:	d1f9      	bne.n	8005e54 <_svfiprintf_r+0x54>
 8005e60:	ebba 0b04 	subs.w	fp, sl, r4
 8005e64:	d00b      	beq.n	8005e7e <_svfiprintf_r+0x7e>
 8005e66:	465b      	mov	r3, fp
 8005e68:	4622      	mov	r2, r4
 8005e6a:	4629      	mov	r1, r5
 8005e6c:	4638      	mov	r0, r7
 8005e6e:	f7ff ff6b 	bl	8005d48 <__ssputs_r>
 8005e72:	3001      	adds	r0, #1
 8005e74:	f000 80a7 	beq.w	8005fc6 <_svfiprintf_r+0x1c6>
 8005e78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e7a:	445a      	add	r2, fp
 8005e7c:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e7e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 809f 	beq.w	8005fc6 <_svfiprintf_r+0x1c6>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e92:	f10a 0a01 	add.w	sl, sl, #1
 8005e96:	9304      	str	r3, [sp, #16]
 8005e98:	9307      	str	r3, [sp, #28]
 8005e9a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005e9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ea0:	4654      	mov	r4, sl
 8005ea2:	2205      	movs	r2, #5
 8005ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ea8:	484e      	ldr	r0, [pc, #312]	@ (8005fe4 <_svfiprintf_r+0x1e4>)
 8005eaa:	f7fa f9b9 	bl	8000220 <memchr>
 8005eae:	9a04      	ldr	r2, [sp, #16]
 8005eb0:	b9d8      	cbnz	r0, 8005eea <_svfiprintf_r+0xea>
 8005eb2:	06d0      	lsls	r0, r2, #27
 8005eb4:	bf44      	itt	mi
 8005eb6:	2320      	movmi	r3, #32
 8005eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ebc:	0711      	lsls	r1, r2, #28
 8005ebe:	bf44      	itt	mi
 8005ec0:	232b      	movmi	r3, #43	@ 0x2b
 8005ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ec6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eca:	2b2a      	cmp	r3, #42	@ 0x2a
 8005ecc:	d015      	beq.n	8005efa <_svfiprintf_r+0xfa>
 8005ece:	9a07      	ldr	r2, [sp, #28]
 8005ed0:	4654      	mov	r4, sl
 8005ed2:	2000      	movs	r0, #0
 8005ed4:	f04f 0c0a 	mov.w	ip, #10
 8005ed8:	4621      	mov	r1, r4
 8005eda:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ede:	3b30      	subs	r3, #48	@ 0x30
 8005ee0:	2b09      	cmp	r3, #9
 8005ee2:	d94b      	bls.n	8005f7c <_svfiprintf_r+0x17c>
 8005ee4:	b1b0      	cbz	r0, 8005f14 <_svfiprintf_r+0x114>
 8005ee6:	9207      	str	r2, [sp, #28]
 8005ee8:	e014      	b.n	8005f14 <_svfiprintf_r+0x114>
 8005eea:	eba0 0308 	sub.w	r3, r0, r8
 8005eee:	fa09 f303 	lsl.w	r3, r9, r3
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	9304      	str	r3, [sp, #16]
 8005ef6:	46a2      	mov	sl, r4
 8005ef8:	e7d2      	b.n	8005ea0 <_svfiprintf_r+0xa0>
 8005efa:	9b03      	ldr	r3, [sp, #12]
 8005efc:	1d19      	adds	r1, r3, #4
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	9103      	str	r1, [sp, #12]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	bfbb      	ittet	lt
 8005f06:	425b      	neglt	r3, r3
 8005f08:	f042 0202 	orrlt.w	r2, r2, #2
 8005f0c:	9307      	strge	r3, [sp, #28]
 8005f0e:	9307      	strlt	r3, [sp, #28]
 8005f10:	bfb8      	it	lt
 8005f12:	9204      	strlt	r2, [sp, #16]
 8005f14:	7823      	ldrb	r3, [r4, #0]
 8005f16:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f18:	d10a      	bne.n	8005f30 <_svfiprintf_r+0x130>
 8005f1a:	7863      	ldrb	r3, [r4, #1]
 8005f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f1e:	d132      	bne.n	8005f86 <_svfiprintf_r+0x186>
 8005f20:	9b03      	ldr	r3, [sp, #12]
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	9203      	str	r2, [sp, #12]
 8005f28:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f2c:	3402      	adds	r4, #2
 8005f2e:	9305      	str	r3, [sp, #20]
 8005f30:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005ff4 <_svfiprintf_r+0x1f4>
 8005f34:	7821      	ldrb	r1, [r4, #0]
 8005f36:	2203      	movs	r2, #3
 8005f38:	4650      	mov	r0, sl
 8005f3a:	f7fa f971 	bl	8000220 <memchr>
 8005f3e:	b138      	cbz	r0, 8005f50 <_svfiprintf_r+0x150>
 8005f40:	9b04      	ldr	r3, [sp, #16]
 8005f42:	eba0 000a 	sub.w	r0, r0, sl
 8005f46:	2240      	movs	r2, #64	@ 0x40
 8005f48:	4082      	lsls	r2, r0
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	3401      	adds	r4, #1
 8005f4e:	9304      	str	r3, [sp, #16]
 8005f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f54:	4824      	ldr	r0, [pc, #144]	@ (8005fe8 <_svfiprintf_r+0x1e8>)
 8005f56:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f5a:	2206      	movs	r2, #6
 8005f5c:	f7fa f960 	bl	8000220 <memchr>
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d036      	beq.n	8005fd2 <_svfiprintf_r+0x1d2>
 8005f64:	4b21      	ldr	r3, [pc, #132]	@ (8005fec <_svfiprintf_r+0x1ec>)
 8005f66:	bb1b      	cbnz	r3, 8005fb0 <_svfiprintf_r+0x1b0>
 8005f68:	9b03      	ldr	r3, [sp, #12]
 8005f6a:	3307      	adds	r3, #7
 8005f6c:	f023 0307 	bic.w	r3, r3, #7
 8005f70:	3308      	adds	r3, #8
 8005f72:	9303      	str	r3, [sp, #12]
 8005f74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f76:	4433      	add	r3, r6
 8005f78:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f7a:	e76a      	b.n	8005e52 <_svfiprintf_r+0x52>
 8005f7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f80:	460c      	mov	r4, r1
 8005f82:	2001      	movs	r0, #1
 8005f84:	e7a8      	b.n	8005ed8 <_svfiprintf_r+0xd8>
 8005f86:	2300      	movs	r3, #0
 8005f88:	3401      	adds	r4, #1
 8005f8a:	9305      	str	r3, [sp, #20]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f04f 0c0a 	mov.w	ip, #10
 8005f92:	4620      	mov	r0, r4
 8005f94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f98:	3a30      	subs	r2, #48	@ 0x30
 8005f9a:	2a09      	cmp	r2, #9
 8005f9c:	d903      	bls.n	8005fa6 <_svfiprintf_r+0x1a6>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0c6      	beq.n	8005f30 <_svfiprintf_r+0x130>
 8005fa2:	9105      	str	r1, [sp, #20]
 8005fa4:	e7c4      	b.n	8005f30 <_svfiprintf_r+0x130>
 8005fa6:	fb0c 2101 	mla	r1, ip, r1, r2
 8005faa:	4604      	mov	r4, r0
 8005fac:	2301      	movs	r3, #1
 8005fae:	e7f0      	b.n	8005f92 <_svfiprintf_r+0x192>
 8005fb0:	ab03      	add	r3, sp, #12
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	462a      	mov	r2, r5
 8005fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff0 <_svfiprintf_r+0x1f0>)
 8005fb8:	a904      	add	r1, sp, #16
 8005fba:	4638      	mov	r0, r7
 8005fbc:	f3af 8000 	nop.w
 8005fc0:	1c42      	adds	r2, r0, #1
 8005fc2:	4606      	mov	r6, r0
 8005fc4:	d1d6      	bne.n	8005f74 <_svfiprintf_r+0x174>
 8005fc6:	89ab      	ldrh	r3, [r5, #12]
 8005fc8:	065b      	lsls	r3, r3, #25
 8005fca:	f53f af2d 	bmi.w	8005e28 <_svfiprintf_r+0x28>
 8005fce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005fd0:	e72c      	b.n	8005e2c <_svfiprintf_r+0x2c>
 8005fd2:	ab03      	add	r3, sp, #12
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	462a      	mov	r2, r5
 8005fd8:	4b05      	ldr	r3, [pc, #20]	@ (8005ff0 <_svfiprintf_r+0x1f0>)
 8005fda:	a904      	add	r1, sp, #16
 8005fdc:	4638      	mov	r0, r7
 8005fde:	f000 f879 	bl	80060d4 <_printf_i>
 8005fe2:	e7ed      	b.n	8005fc0 <_svfiprintf_r+0x1c0>
 8005fe4:	080069a8 	.word	0x080069a8
 8005fe8:	080069b2 	.word	0x080069b2
 8005fec:	00000000 	.word	0x00000000
 8005ff0:	08005d49 	.word	0x08005d49
 8005ff4:	080069ae 	.word	0x080069ae

08005ff8 <_printf_common>:
 8005ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ffc:	4616      	mov	r6, r2
 8005ffe:	4698      	mov	r8, r3
 8006000:	688a      	ldr	r2, [r1, #8]
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006008:	4293      	cmp	r3, r2
 800600a:	bfb8      	it	lt
 800600c:	4613      	movlt	r3, r2
 800600e:	6033      	str	r3, [r6, #0]
 8006010:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006014:	4607      	mov	r7, r0
 8006016:	460c      	mov	r4, r1
 8006018:	b10a      	cbz	r2, 800601e <_printf_common+0x26>
 800601a:	3301      	adds	r3, #1
 800601c:	6033      	str	r3, [r6, #0]
 800601e:	6823      	ldr	r3, [r4, #0]
 8006020:	0699      	lsls	r1, r3, #26
 8006022:	bf42      	ittt	mi
 8006024:	6833      	ldrmi	r3, [r6, #0]
 8006026:	3302      	addmi	r3, #2
 8006028:	6033      	strmi	r3, [r6, #0]
 800602a:	6825      	ldr	r5, [r4, #0]
 800602c:	f015 0506 	ands.w	r5, r5, #6
 8006030:	d106      	bne.n	8006040 <_printf_common+0x48>
 8006032:	f104 0a19 	add.w	sl, r4, #25
 8006036:	68e3      	ldr	r3, [r4, #12]
 8006038:	6832      	ldr	r2, [r6, #0]
 800603a:	1a9b      	subs	r3, r3, r2
 800603c:	42ab      	cmp	r3, r5
 800603e:	dc26      	bgt.n	800608e <_printf_common+0x96>
 8006040:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006044:	6822      	ldr	r2, [r4, #0]
 8006046:	3b00      	subs	r3, #0
 8006048:	bf18      	it	ne
 800604a:	2301      	movne	r3, #1
 800604c:	0692      	lsls	r2, r2, #26
 800604e:	d42b      	bmi.n	80060a8 <_printf_common+0xb0>
 8006050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006054:	4641      	mov	r1, r8
 8006056:	4638      	mov	r0, r7
 8006058:	47c8      	blx	r9
 800605a:	3001      	adds	r0, #1
 800605c:	d01e      	beq.n	800609c <_printf_common+0xa4>
 800605e:	6823      	ldr	r3, [r4, #0]
 8006060:	6922      	ldr	r2, [r4, #16]
 8006062:	f003 0306 	and.w	r3, r3, #6
 8006066:	2b04      	cmp	r3, #4
 8006068:	bf02      	ittt	eq
 800606a:	68e5      	ldreq	r5, [r4, #12]
 800606c:	6833      	ldreq	r3, [r6, #0]
 800606e:	1aed      	subeq	r5, r5, r3
 8006070:	68a3      	ldr	r3, [r4, #8]
 8006072:	bf0c      	ite	eq
 8006074:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006078:	2500      	movne	r5, #0
 800607a:	4293      	cmp	r3, r2
 800607c:	bfc4      	itt	gt
 800607e:	1a9b      	subgt	r3, r3, r2
 8006080:	18ed      	addgt	r5, r5, r3
 8006082:	2600      	movs	r6, #0
 8006084:	341a      	adds	r4, #26
 8006086:	42b5      	cmp	r5, r6
 8006088:	d11a      	bne.n	80060c0 <_printf_common+0xc8>
 800608a:	2000      	movs	r0, #0
 800608c:	e008      	b.n	80060a0 <_printf_common+0xa8>
 800608e:	2301      	movs	r3, #1
 8006090:	4652      	mov	r2, sl
 8006092:	4641      	mov	r1, r8
 8006094:	4638      	mov	r0, r7
 8006096:	47c8      	blx	r9
 8006098:	3001      	adds	r0, #1
 800609a:	d103      	bne.n	80060a4 <_printf_common+0xac>
 800609c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80060a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060a4:	3501      	adds	r5, #1
 80060a6:	e7c6      	b.n	8006036 <_printf_common+0x3e>
 80060a8:	18e1      	adds	r1, r4, r3
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	2030      	movs	r0, #48	@ 0x30
 80060ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060b2:	4422      	add	r2, r4
 80060b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060bc:	3302      	adds	r3, #2
 80060be:	e7c7      	b.n	8006050 <_printf_common+0x58>
 80060c0:	2301      	movs	r3, #1
 80060c2:	4622      	mov	r2, r4
 80060c4:	4641      	mov	r1, r8
 80060c6:	4638      	mov	r0, r7
 80060c8:	47c8      	blx	r9
 80060ca:	3001      	adds	r0, #1
 80060cc:	d0e6      	beq.n	800609c <_printf_common+0xa4>
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7d9      	b.n	8006086 <_printf_common+0x8e>
	...

080060d4 <_printf_i>:
 80060d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060d8:	7e0f      	ldrb	r7, [r1, #24]
 80060da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060dc:	2f78      	cmp	r7, #120	@ 0x78
 80060de:	4691      	mov	r9, r2
 80060e0:	4680      	mov	r8, r0
 80060e2:	460c      	mov	r4, r1
 80060e4:	469a      	mov	sl, r3
 80060e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060ea:	d807      	bhi.n	80060fc <_printf_i+0x28>
 80060ec:	2f62      	cmp	r7, #98	@ 0x62
 80060ee:	d80a      	bhi.n	8006106 <_printf_i+0x32>
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	f000 80d2 	beq.w	800629a <_printf_i+0x1c6>
 80060f6:	2f58      	cmp	r7, #88	@ 0x58
 80060f8:	f000 80b9 	beq.w	800626e <_printf_i+0x19a>
 80060fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006100:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006104:	e03a      	b.n	800617c <_printf_i+0xa8>
 8006106:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800610a:	2b15      	cmp	r3, #21
 800610c:	d8f6      	bhi.n	80060fc <_printf_i+0x28>
 800610e:	a101      	add	r1, pc, #4	@ (adr r1, 8006114 <_printf_i+0x40>)
 8006110:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006114:	0800616d 	.word	0x0800616d
 8006118:	08006181 	.word	0x08006181
 800611c:	080060fd 	.word	0x080060fd
 8006120:	080060fd 	.word	0x080060fd
 8006124:	080060fd 	.word	0x080060fd
 8006128:	080060fd 	.word	0x080060fd
 800612c:	08006181 	.word	0x08006181
 8006130:	080060fd 	.word	0x080060fd
 8006134:	080060fd 	.word	0x080060fd
 8006138:	080060fd 	.word	0x080060fd
 800613c:	080060fd 	.word	0x080060fd
 8006140:	08006281 	.word	0x08006281
 8006144:	080061ab 	.word	0x080061ab
 8006148:	0800623b 	.word	0x0800623b
 800614c:	080060fd 	.word	0x080060fd
 8006150:	080060fd 	.word	0x080060fd
 8006154:	080062a3 	.word	0x080062a3
 8006158:	080060fd 	.word	0x080060fd
 800615c:	080061ab 	.word	0x080061ab
 8006160:	080060fd 	.word	0x080060fd
 8006164:	080060fd 	.word	0x080060fd
 8006168:	08006243 	.word	0x08006243
 800616c:	6833      	ldr	r3, [r6, #0]
 800616e:	1d1a      	adds	r2, r3, #4
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6032      	str	r2, [r6, #0]
 8006174:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006178:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800617c:	2301      	movs	r3, #1
 800617e:	e09d      	b.n	80062bc <_printf_i+0x1e8>
 8006180:	6833      	ldr	r3, [r6, #0]
 8006182:	6820      	ldr	r0, [r4, #0]
 8006184:	1d19      	adds	r1, r3, #4
 8006186:	6031      	str	r1, [r6, #0]
 8006188:	0606      	lsls	r6, r0, #24
 800618a:	d501      	bpl.n	8006190 <_printf_i+0xbc>
 800618c:	681d      	ldr	r5, [r3, #0]
 800618e:	e003      	b.n	8006198 <_printf_i+0xc4>
 8006190:	0645      	lsls	r5, r0, #25
 8006192:	d5fb      	bpl.n	800618c <_printf_i+0xb8>
 8006194:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006198:	2d00      	cmp	r5, #0
 800619a:	da03      	bge.n	80061a4 <_printf_i+0xd0>
 800619c:	232d      	movs	r3, #45	@ 0x2d
 800619e:	426d      	negs	r5, r5
 80061a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061a4:	4859      	ldr	r0, [pc, #356]	@ (800630c <_printf_i+0x238>)
 80061a6:	230a      	movs	r3, #10
 80061a8:	e011      	b.n	80061ce <_printf_i+0xfa>
 80061aa:	6821      	ldr	r1, [r4, #0]
 80061ac:	6833      	ldr	r3, [r6, #0]
 80061ae:	0608      	lsls	r0, r1, #24
 80061b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061b4:	d402      	bmi.n	80061bc <_printf_i+0xe8>
 80061b6:	0649      	lsls	r1, r1, #25
 80061b8:	bf48      	it	mi
 80061ba:	b2ad      	uxthmi	r5, r5
 80061bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061be:	4853      	ldr	r0, [pc, #332]	@ (800630c <_printf_i+0x238>)
 80061c0:	6033      	str	r3, [r6, #0]
 80061c2:	bf14      	ite	ne
 80061c4:	230a      	movne	r3, #10
 80061c6:	2308      	moveq	r3, #8
 80061c8:	2100      	movs	r1, #0
 80061ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061ce:	6866      	ldr	r6, [r4, #4]
 80061d0:	60a6      	str	r6, [r4, #8]
 80061d2:	2e00      	cmp	r6, #0
 80061d4:	bfa2      	ittt	ge
 80061d6:	6821      	ldrge	r1, [r4, #0]
 80061d8:	f021 0104 	bicge.w	r1, r1, #4
 80061dc:	6021      	strge	r1, [r4, #0]
 80061de:	b90d      	cbnz	r5, 80061e4 <_printf_i+0x110>
 80061e0:	2e00      	cmp	r6, #0
 80061e2:	d04b      	beq.n	800627c <_printf_i+0x1a8>
 80061e4:	4616      	mov	r6, r2
 80061e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061ea:	fb03 5711 	mls	r7, r3, r1, r5
 80061ee:	5dc7      	ldrb	r7, [r0, r7]
 80061f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80061f4:	462f      	mov	r7, r5
 80061f6:	42bb      	cmp	r3, r7
 80061f8:	460d      	mov	r5, r1
 80061fa:	d9f4      	bls.n	80061e6 <_printf_i+0x112>
 80061fc:	2b08      	cmp	r3, #8
 80061fe:	d10b      	bne.n	8006218 <_printf_i+0x144>
 8006200:	6823      	ldr	r3, [r4, #0]
 8006202:	07df      	lsls	r7, r3, #31
 8006204:	d508      	bpl.n	8006218 <_printf_i+0x144>
 8006206:	6923      	ldr	r3, [r4, #16]
 8006208:	6861      	ldr	r1, [r4, #4]
 800620a:	4299      	cmp	r1, r3
 800620c:	bfde      	ittt	le
 800620e:	2330      	movle	r3, #48	@ 0x30
 8006210:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006214:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006218:	1b92      	subs	r2, r2, r6
 800621a:	6122      	str	r2, [r4, #16]
 800621c:	f8cd a000 	str.w	sl, [sp]
 8006220:	464b      	mov	r3, r9
 8006222:	aa03      	add	r2, sp, #12
 8006224:	4621      	mov	r1, r4
 8006226:	4640      	mov	r0, r8
 8006228:	f7ff fee6 	bl	8005ff8 <_printf_common>
 800622c:	3001      	adds	r0, #1
 800622e:	d14a      	bne.n	80062c6 <_printf_i+0x1f2>
 8006230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006234:	b004      	add	sp, #16
 8006236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	f043 0320 	orr.w	r3, r3, #32
 8006240:	6023      	str	r3, [r4, #0]
 8006242:	4833      	ldr	r0, [pc, #204]	@ (8006310 <_printf_i+0x23c>)
 8006244:	2778      	movs	r7, #120	@ 0x78
 8006246:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	6831      	ldr	r1, [r6, #0]
 800624e:	061f      	lsls	r7, r3, #24
 8006250:	f851 5b04 	ldr.w	r5, [r1], #4
 8006254:	d402      	bmi.n	800625c <_printf_i+0x188>
 8006256:	065f      	lsls	r7, r3, #25
 8006258:	bf48      	it	mi
 800625a:	b2ad      	uxthmi	r5, r5
 800625c:	6031      	str	r1, [r6, #0]
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	bf44      	itt	mi
 8006262:	f043 0320 	orrmi.w	r3, r3, #32
 8006266:	6023      	strmi	r3, [r4, #0]
 8006268:	b11d      	cbz	r5, 8006272 <_printf_i+0x19e>
 800626a:	2310      	movs	r3, #16
 800626c:	e7ac      	b.n	80061c8 <_printf_i+0xf4>
 800626e:	4827      	ldr	r0, [pc, #156]	@ (800630c <_printf_i+0x238>)
 8006270:	e7e9      	b.n	8006246 <_printf_i+0x172>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	f023 0320 	bic.w	r3, r3, #32
 8006278:	6023      	str	r3, [r4, #0]
 800627a:	e7f6      	b.n	800626a <_printf_i+0x196>
 800627c:	4616      	mov	r6, r2
 800627e:	e7bd      	b.n	80061fc <_printf_i+0x128>
 8006280:	6833      	ldr	r3, [r6, #0]
 8006282:	6825      	ldr	r5, [r4, #0]
 8006284:	6961      	ldr	r1, [r4, #20]
 8006286:	1d18      	adds	r0, r3, #4
 8006288:	6030      	str	r0, [r6, #0]
 800628a:	062e      	lsls	r6, r5, #24
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	d501      	bpl.n	8006294 <_printf_i+0x1c0>
 8006290:	6019      	str	r1, [r3, #0]
 8006292:	e002      	b.n	800629a <_printf_i+0x1c6>
 8006294:	0668      	lsls	r0, r5, #25
 8006296:	d5fb      	bpl.n	8006290 <_printf_i+0x1bc>
 8006298:	8019      	strh	r1, [r3, #0]
 800629a:	2300      	movs	r3, #0
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	4616      	mov	r6, r2
 80062a0:	e7bc      	b.n	800621c <_printf_i+0x148>
 80062a2:	6833      	ldr	r3, [r6, #0]
 80062a4:	1d1a      	adds	r2, r3, #4
 80062a6:	6032      	str	r2, [r6, #0]
 80062a8:	681e      	ldr	r6, [r3, #0]
 80062aa:	6862      	ldr	r2, [r4, #4]
 80062ac:	2100      	movs	r1, #0
 80062ae:	4630      	mov	r0, r6
 80062b0:	f7f9 ffb6 	bl	8000220 <memchr>
 80062b4:	b108      	cbz	r0, 80062ba <_printf_i+0x1e6>
 80062b6:	1b80      	subs	r0, r0, r6
 80062b8:	6060      	str	r0, [r4, #4]
 80062ba:	6863      	ldr	r3, [r4, #4]
 80062bc:	6123      	str	r3, [r4, #16]
 80062be:	2300      	movs	r3, #0
 80062c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062c4:	e7aa      	b.n	800621c <_printf_i+0x148>
 80062c6:	6923      	ldr	r3, [r4, #16]
 80062c8:	4632      	mov	r2, r6
 80062ca:	4649      	mov	r1, r9
 80062cc:	4640      	mov	r0, r8
 80062ce:	47d0      	blx	sl
 80062d0:	3001      	adds	r0, #1
 80062d2:	d0ad      	beq.n	8006230 <_printf_i+0x15c>
 80062d4:	6823      	ldr	r3, [r4, #0]
 80062d6:	079b      	lsls	r3, r3, #30
 80062d8:	d413      	bmi.n	8006302 <_printf_i+0x22e>
 80062da:	68e0      	ldr	r0, [r4, #12]
 80062dc:	9b03      	ldr	r3, [sp, #12]
 80062de:	4298      	cmp	r0, r3
 80062e0:	bfb8      	it	lt
 80062e2:	4618      	movlt	r0, r3
 80062e4:	e7a6      	b.n	8006234 <_printf_i+0x160>
 80062e6:	2301      	movs	r3, #1
 80062e8:	4632      	mov	r2, r6
 80062ea:	4649      	mov	r1, r9
 80062ec:	4640      	mov	r0, r8
 80062ee:	47d0      	blx	sl
 80062f0:	3001      	adds	r0, #1
 80062f2:	d09d      	beq.n	8006230 <_printf_i+0x15c>
 80062f4:	3501      	adds	r5, #1
 80062f6:	68e3      	ldr	r3, [r4, #12]
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	1a5b      	subs	r3, r3, r1
 80062fc:	42ab      	cmp	r3, r5
 80062fe:	dcf2      	bgt.n	80062e6 <_printf_i+0x212>
 8006300:	e7eb      	b.n	80062da <_printf_i+0x206>
 8006302:	2500      	movs	r5, #0
 8006304:	f104 0619 	add.w	r6, r4, #25
 8006308:	e7f5      	b.n	80062f6 <_printf_i+0x222>
 800630a:	bf00      	nop
 800630c:	080069b9 	.word	0x080069b9
 8006310:	080069ca 	.word	0x080069ca

08006314 <__sflush_r>:
 8006314:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	0716      	lsls	r6, r2, #28
 800631e:	4605      	mov	r5, r0
 8006320:	460c      	mov	r4, r1
 8006322:	d454      	bmi.n	80063ce <__sflush_r+0xba>
 8006324:	684b      	ldr	r3, [r1, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	dc02      	bgt.n	8006330 <__sflush_r+0x1c>
 800632a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	dd48      	ble.n	80063c2 <__sflush_r+0xae>
 8006330:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006332:	2e00      	cmp	r6, #0
 8006334:	d045      	beq.n	80063c2 <__sflush_r+0xae>
 8006336:	2300      	movs	r3, #0
 8006338:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800633c:	682f      	ldr	r7, [r5, #0]
 800633e:	6a21      	ldr	r1, [r4, #32]
 8006340:	602b      	str	r3, [r5, #0]
 8006342:	d030      	beq.n	80063a6 <__sflush_r+0x92>
 8006344:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006346:	89a3      	ldrh	r3, [r4, #12]
 8006348:	0759      	lsls	r1, r3, #29
 800634a:	d505      	bpl.n	8006358 <__sflush_r+0x44>
 800634c:	6863      	ldr	r3, [r4, #4]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006352:	b10b      	cbz	r3, 8006358 <__sflush_r+0x44>
 8006354:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006356:	1ad2      	subs	r2, r2, r3
 8006358:	2300      	movs	r3, #0
 800635a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800635c:	6a21      	ldr	r1, [r4, #32]
 800635e:	4628      	mov	r0, r5
 8006360:	47b0      	blx	r6
 8006362:	1c43      	adds	r3, r0, #1
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	d106      	bne.n	8006376 <__sflush_r+0x62>
 8006368:	6829      	ldr	r1, [r5, #0]
 800636a:	291d      	cmp	r1, #29
 800636c:	d82b      	bhi.n	80063c6 <__sflush_r+0xb2>
 800636e:	4a2a      	ldr	r2, [pc, #168]	@ (8006418 <__sflush_r+0x104>)
 8006370:	410a      	asrs	r2, r1
 8006372:	07d6      	lsls	r6, r2, #31
 8006374:	d427      	bmi.n	80063c6 <__sflush_r+0xb2>
 8006376:	2200      	movs	r2, #0
 8006378:	6062      	str	r2, [r4, #4]
 800637a:	04d9      	lsls	r1, r3, #19
 800637c:	6922      	ldr	r2, [r4, #16]
 800637e:	6022      	str	r2, [r4, #0]
 8006380:	d504      	bpl.n	800638c <__sflush_r+0x78>
 8006382:	1c42      	adds	r2, r0, #1
 8006384:	d101      	bne.n	800638a <__sflush_r+0x76>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	b903      	cbnz	r3, 800638c <__sflush_r+0x78>
 800638a:	6560      	str	r0, [r4, #84]	@ 0x54
 800638c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800638e:	602f      	str	r7, [r5, #0]
 8006390:	b1b9      	cbz	r1, 80063c2 <__sflush_r+0xae>
 8006392:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006396:	4299      	cmp	r1, r3
 8006398:	d002      	beq.n	80063a0 <__sflush_r+0x8c>
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff fbdc 	bl	8005b58 <_free_r>
 80063a0:	2300      	movs	r3, #0
 80063a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80063a4:	e00d      	b.n	80063c2 <__sflush_r+0xae>
 80063a6:	2301      	movs	r3, #1
 80063a8:	4628      	mov	r0, r5
 80063aa:	47b0      	blx	r6
 80063ac:	4602      	mov	r2, r0
 80063ae:	1c50      	adds	r0, r2, #1
 80063b0:	d1c9      	bne.n	8006346 <__sflush_r+0x32>
 80063b2:	682b      	ldr	r3, [r5, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d0c6      	beq.n	8006346 <__sflush_r+0x32>
 80063b8:	2b1d      	cmp	r3, #29
 80063ba:	d001      	beq.n	80063c0 <__sflush_r+0xac>
 80063bc:	2b16      	cmp	r3, #22
 80063be:	d11e      	bne.n	80063fe <__sflush_r+0xea>
 80063c0:	602f      	str	r7, [r5, #0]
 80063c2:	2000      	movs	r0, #0
 80063c4:	e022      	b.n	800640c <__sflush_r+0xf8>
 80063c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80063ca:	b21b      	sxth	r3, r3
 80063cc:	e01b      	b.n	8006406 <__sflush_r+0xf2>
 80063ce:	690f      	ldr	r7, [r1, #16]
 80063d0:	2f00      	cmp	r7, #0
 80063d2:	d0f6      	beq.n	80063c2 <__sflush_r+0xae>
 80063d4:	0793      	lsls	r3, r2, #30
 80063d6:	680e      	ldr	r6, [r1, #0]
 80063d8:	bf08      	it	eq
 80063da:	694b      	ldreq	r3, [r1, #20]
 80063dc:	600f      	str	r7, [r1, #0]
 80063de:	bf18      	it	ne
 80063e0:	2300      	movne	r3, #0
 80063e2:	eba6 0807 	sub.w	r8, r6, r7
 80063e6:	608b      	str	r3, [r1, #8]
 80063e8:	f1b8 0f00 	cmp.w	r8, #0
 80063ec:	dde9      	ble.n	80063c2 <__sflush_r+0xae>
 80063ee:	6a21      	ldr	r1, [r4, #32]
 80063f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80063f2:	4643      	mov	r3, r8
 80063f4:	463a      	mov	r2, r7
 80063f6:	4628      	mov	r0, r5
 80063f8:	47b0      	blx	r6
 80063fa:	2800      	cmp	r0, #0
 80063fc:	dc08      	bgt.n	8006410 <__sflush_r+0xfc>
 80063fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006406:	81a3      	strh	r3, [r4, #12]
 8006408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006410:	4407      	add	r7, r0
 8006412:	eba8 0800 	sub.w	r8, r8, r0
 8006416:	e7e7      	b.n	80063e8 <__sflush_r+0xd4>
 8006418:	dfbffffe 	.word	0xdfbffffe

0800641c <_fflush_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	690b      	ldr	r3, [r1, #16]
 8006420:	4605      	mov	r5, r0
 8006422:	460c      	mov	r4, r1
 8006424:	b913      	cbnz	r3, 800642c <_fflush_r+0x10>
 8006426:	2500      	movs	r5, #0
 8006428:	4628      	mov	r0, r5
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	b118      	cbz	r0, 8006436 <_fflush_r+0x1a>
 800642e:	6a03      	ldr	r3, [r0, #32]
 8006430:	b90b      	cbnz	r3, 8006436 <_fflush_r+0x1a>
 8006432:	f7ff f975 	bl	8005720 <__sinit>
 8006436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0f3      	beq.n	8006426 <_fflush_r+0xa>
 800643e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006440:	07d0      	lsls	r0, r2, #31
 8006442:	d404      	bmi.n	800644e <_fflush_r+0x32>
 8006444:	0599      	lsls	r1, r3, #22
 8006446:	d402      	bmi.n	800644e <_fflush_r+0x32>
 8006448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800644a:	f7ff fb82 	bl	8005b52 <__retarget_lock_acquire_recursive>
 800644e:	4628      	mov	r0, r5
 8006450:	4621      	mov	r1, r4
 8006452:	f7ff ff5f 	bl	8006314 <__sflush_r>
 8006456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006458:	07da      	lsls	r2, r3, #31
 800645a:	4605      	mov	r5, r0
 800645c:	d4e4      	bmi.n	8006428 <_fflush_r+0xc>
 800645e:	89a3      	ldrh	r3, [r4, #12]
 8006460:	059b      	lsls	r3, r3, #22
 8006462:	d4e1      	bmi.n	8006428 <_fflush_r+0xc>
 8006464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006466:	f7ff fb75 	bl	8005b54 <__retarget_lock_release_recursive>
 800646a:	e7dd      	b.n	8006428 <_fflush_r+0xc>

0800646c <__swhatbuf_r>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006474:	2900      	cmp	r1, #0
 8006476:	b096      	sub	sp, #88	@ 0x58
 8006478:	4615      	mov	r5, r2
 800647a:	461e      	mov	r6, r3
 800647c:	da0d      	bge.n	800649a <__swhatbuf_r+0x2e>
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006484:	f04f 0100 	mov.w	r1, #0
 8006488:	bf14      	ite	ne
 800648a:	2340      	movne	r3, #64	@ 0x40
 800648c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006490:	2000      	movs	r0, #0
 8006492:	6031      	str	r1, [r6, #0]
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	b016      	add	sp, #88	@ 0x58
 8006498:	bd70      	pop	{r4, r5, r6, pc}
 800649a:	466a      	mov	r2, sp
 800649c:	f000 f862 	bl	8006564 <_fstat_r>
 80064a0:	2800      	cmp	r0, #0
 80064a2:	dbec      	blt.n	800647e <__swhatbuf_r+0x12>
 80064a4:	9901      	ldr	r1, [sp, #4]
 80064a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064ae:	4259      	negs	r1, r3
 80064b0:	4159      	adcs	r1, r3
 80064b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064b6:	e7eb      	b.n	8006490 <__swhatbuf_r+0x24>

080064b8 <__smakebuf_r>:
 80064b8:	898b      	ldrh	r3, [r1, #12]
 80064ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064bc:	079d      	lsls	r5, r3, #30
 80064be:	4606      	mov	r6, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	d507      	bpl.n	80064d4 <__smakebuf_r+0x1c>
 80064c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80064c8:	6023      	str	r3, [r4, #0]
 80064ca:	6123      	str	r3, [r4, #16]
 80064cc:	2301      	movs	r3, #1
 80064ce:	6163      	str	r3, [r4, #20]
 80064d0:	b003      	add	sp, #12
 80064d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064d4:	ab01      	add	r3, sp, #4
 80064d6:	466a      	mov	r2, sp
 80064d8:	f7ff ffc8 	bl	800646c <__swhatbuf_r>
 80064dc:	9f00      	ldr	r7, [sp, #0]
 80064de:	4605      	mov	r5, r0
 80064e0:	4639      	mov	r1, r7
 80064e2:	4630      	mov	r0, r6
 80064e4:	f7ff fba4 	bl	8005c30 <_malloc_r>
 80064e8:	b948      	cbnz	r0, 80064fe <__smakebuf_r+0x46>
 80064ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064ee:	059a      	lsls	r2, r3, #22
 80064f0:	d4ee      	bmi.n	80064d0 <__smakebuf_r+0x18>
 80064f2:	f023 0303 	bic.w	r3, r3, #3
 80064f6:	f043 0302 	orr.w	r3, r3, #2
 80064fa:	81a3      	strh	r3, [r4, #12]
 80064fc:	e7e2      	b.n	80064c4 <__smakebuf_r+0xc>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	6020      	str	r0, [r4, #0]
 8006502:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006506:	81a3      	strh	r3, [r4, #12]
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800650e:	b15b      	cbz	r3, 8006528 <__smakebuf_r+0x70>
 8006510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006514:	4630      	mov	r0, r6
 8006516:	f000 f837 	bl	8006588 <_isatty_r>
 800651a:	b128      	cbz	r0, 8006528 <__smakebuf_r+0x70>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f023 0303 	bic.w	r3, r3, #3
 8006522:	f043 0301 	orr.w	r3, r3, #1
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	431d      	orrs	r5, r3
 800652c:	81a5      	strh	r5, [r4, #12]
 800652e:	e7cf      	b.n	80064d0 <__smakebuf_r+0x18>

08006530 <memmove>:
 8006530:	4288      	cmp	r0, r1
 8006532:	b510      	push	{r4, lr}
 8006534:	eb01 0402 	add.w	r4, r1, r2
 8006538:	d902      	bls.n	8006540 <memmove+0x10>
 800653a:	4284      	cmp	r4, r0
 800653c:	4623      	mov	r3, r4
 800653e:	d807      	bhi.n	8006550 <memmove+0x20>
 8006540:	1e43      	subs	r3, r0, #1
 8006542:	42a1      	cmp	r1, r4
 8006544:	d008      	beq.n	8006558 <memmove+0x28>
 8006546:	f811 2b01 	ldrb.w	r2, [r1], #1
 800654a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800654e:	e7f8      	b.n	8006542 <memmove+0x12>
 8006550:	4402      	add	r2, r0
 8006552:	4601      	mov	r1, r0
 8006554:	428a      	cmp	r2, r1
 8006556:	d100      	bne.n	800655a <memmove+0x2a>
 8006558:	bd10      	pop	{r4, pc}
 800655a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800655e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006562:	e7f7      	b.n	8006554 <memmove+0x24>

08006564 <_fstat_r>:
 8006564:	b538      	push	{r3, r4, r5, lr}
 8006566:	4d07      	ldr	r5, [pc, #28]	@ (8006584 <_fstat_r+0x20>)
 8006568:	2300      	movs	r3, #0
 800656a:	4604      	mov	r4, r0
 800656c:	4608      	mov	r0, r1
 800656e:	4611      	mov	r1, r2
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	f7fa ff97 	bl	80014a4 <_fstat>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d102      	bne.n	8006580 <_fstat_r+0x1c>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	b103      	cbz	r3, 8006580 <_fstat_r+0x1c>
 800657e:	6023      	str	r3, [r4, #0]
 8006580:	bd38      	pop	{r3, r4, r5, pc}
 8006582:	bf00      	nop
 8006584:	20000550 	.word	0x20000550

08006588 <_isatty_r>:
 8006588:	b538      	push	{r3, r4, r5, lr}
 800658a:	4d06      	ldr	r5, [pc, #24]	@ (80065a4 <_isatty_r+0x1c>)
 800658c:	2300      	movs	r3, #0
 800658e:	4604      	mov	r4, r0
 8006590:	4608      	mov	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa ff96 	bl	80014c4 <_isatty>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d102      	bne.n	80065a2 <_isatty_r+0x1a>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	b103      	cbz	r3, 80065a2 <_isatty_r+0x1a>
 80065a0:	6023      	str	r3, [r4, #0]
 80065a2:	bd38      	pop	{r3, r4, r5, pc}
 80065a4:	20000550 	.word	0x20000550

080065a8 <_sbrk_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4d06      	ldr	r5, [pc, #24]	@ (80065c4 <_sbrk_r+0x1c>)
 80065ac:	2300      	movs	r3, #0
 80065ae:	4604      	mov	r4, r0
 80065b0:	4608      	mov	r0, r1
 80065b2:	602b      	str	r3, [r5, #0]
 80065b4:	f7fa ff9e 	bl	80014f4 <_sbrk>
 80065b8:	1c43      	adds	r3, r0, #1
 80065ba:	d102      	bne.n	80065c2 <_sbrk_r+0x1a>
 80065bc:	682b      	ldr	r3, [r5, #0]
 80065be:	b103      	cbz	r3, 80065c2 <_sbrk_r+0x1a>
 80065c0:	6023      	str	r3, [r4, #0]
 80065c2:	bd38      	pop	{r3, r4, r5, pc}
 80065c4:	20000550 	.word	0x20000550

080065c8 <memcpy>:
 80065c8:	440a      	add	r2, r1
 80065ca:	4291      	cmp	r1, r2
 80065cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80065d0:	d100      	bne.n	80065d4 <memcpy+0xc>
 80065d2:	4770      	bx	lr
 80065d4:	b510      	push	{r4, lr}
 80065d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065de:	4291      	cmp	r1, r2
 80065e0:	d1f9      	bne.n	80065d6 <memcpy+0xe>
 80065e2:	bd10      	pop	{r4, pc}

080065e4 <_realloc_r>:
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	4680      	mov	r8, r0
 80065ea:	4615      	mov	r5, r2
 80065ec:	460c      	mov	r4, r1
 80065ee:	b921      	cbnz	r1, 80065fa <_realloc_r+0x16>
 80065f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065f4:	4611      	mov	r1, r2
 80065f6:	f7ff bb1b 	b.w	8005c30 <_malloc_r>
 80065fa:	b92a      	cbnz	r2, 8006608 <_realloc_r+0x24>
 80065fc:	f7ff faac 	bl	8005b58 <_free_r>
 8006600:	2400      	movs	r4, #0
 8006602:	4620      	mov	r0, r4
 8006604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006608:	f000 f81a 	bl	8006640 <_malloc_usable_size_r>
 800660c:	4285      	cmp	r5, r0
 800660e:	4606      	mov	r6, r0
 8006610:	d802      	bhi.n	8006618 <_realloc_r+0x34>
 8006612:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006616:	d8f4      	bhi.n	8006602 <_realloc_r+0x1e>
 8006618:	4629      	mov	r1, r5
 800661a:	4640      	mov	r0, r8
 800661c:	f7ff fb08 	bl	8005c30 <_malloc_r>
 8006620:	4607      	mov	r7, r0
 8006622:	2800      	cmp	r0, #0
 8006624:	d0ec      	beq.n	8006600 <_realloc_r+0x1c>
 8006626:	42b5      	cmp	r5, r6
 8006628:	462a      	mov	r2, r5
 800662a:	4621      	mov	r1, r4
 800662c:	bf28      	it	cs
 800662e:	4632      	movcs	r2, r6
 8006630:	f7ff ffca 	bl	80065c8 <memcpy>
 8006634:	4621      	mov	r1, r4
 8006636:	4640      	mov	r0, r8
 8006638:	f7ff fa8e 	bl	8005b58 <_free_r>
 800663c:	463c      	mov	r4, r7
 800663e:	e7e0      	b.n	8006602 <_realloc_r+0x1e>

08006640 <_malloc_usable_size_r>:
 8006640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006644:	1f18      	subs	r0, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	bfbc      	itt	lt
 800664a:	580b      	ldrlt	r3, [r1, r0]
 800664c:	18c0      	addlt	r0, r0, r3
 800664e:	4770      	bx	lr

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr
